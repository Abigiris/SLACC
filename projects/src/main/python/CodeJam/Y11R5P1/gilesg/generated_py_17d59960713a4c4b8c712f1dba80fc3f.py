import sys
sys.path.append('/home/george2/Raise/ProgramRepair/CodeSeer/projects/src/main/python')
from CodeJam.Y11R5P1.gilesg.A import *

def func_971c5477c8334743beb4eabc31ba8e4f(P, x):
    if x == 0:
        return P[0][1]
    i = 0
    return i


def func_b70483b9cb3d49ada07db6860bda97bf(P, x):
    i = 0
    while P[i][0] < x:
        i += 1
    return i


def func_e7a8ef4bf62a42d2a6ba20755490c23e(P, x):
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    return i


def func_9e2bf63b881548f6821a7daee75fae98(P, x):
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    return x1


def func_a30b553ef5b640099e3fc7215ffa86f9(P, x):
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    return y1


def func_f7de4b0968d944d18e4c6461bf2c9866(i, P):
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    return y1


def func_a42876d3c2fd457c966d26d84d76a558(i, P):
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    return x1


def func_463d14e0e40048b49217d39499dae526(i, P):
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    return x2


def func_51d5425717454da489e7bb7d56a3c34a(i, P):
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    return y2


def func_ec9792a2061d4118b162ed32c6c35a3e(y1, x1, i, P):
    x2, y2 = P[i]
    m = (y2 - y1) / (x2 - x1)
    return m


def func_dd4f32b94aaf4019b205637de17a285c(y1, x1, i, P):
    x2, y2 = P[i]
    m = (y2 - y1) / (x2 - x1)
    return x2


def func_7a1c563b0340485eb8e66fd49e3d0244(y1, x1, i, P):
    x2, y2 = P[i]
    m = (y2 - y1) / (x2 - x1)
    return y2


def func_59504fb23dbc4c75b505d0a280930443(x2, y1, x1, y2, x):
    m = (y2 - y1) / (x2 - x1)
    return y1 + m * (x - x1)


def func_135a51bc26fd4f0d928535cbacda226c(P, x):
    if x == 0:
        return P[0][1]
    i = 0
    while P[i][0] < x:
        i += 1
    return i


def func_b210cd805e8944e2aa062137fa6480c4(P, x):
    i = 0
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    return i


def func_da46f3590fbf4076a5a5cfee20c21e2b(P, x):
    i = 0
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    return x1


def func_da0ed2c2b5344fccaadc0a790318071d(P, x):
    i = 0
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    return y1


def func_e0b9568f2bb54ec488af34f0c57c3786(P, x):
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    return i


def func_3fffa29754d34f9fb44fa736c2d94049(P, x):
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    return y1


def func_b60eb2db05d547c5864f4cfae39a301c(P, x):
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    return x1


def func_ffec7eada3c44b19b3b9c48e2d74c3fe(P, x):
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    return x2


def func_24afec8e9eeb4e99a247b7ba34820215(P, x):
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    return y2


def func_27ce9e1b4bc842158f47e2f2228ac91c(i, P):
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    m = (y2 - y1) / (x2 - x1)
    return y2


def func_6197b1fbe8b8492784f1ab5dfe61b548(i, P):
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    m = (y2 - y1) / (x2 - x1)
    return x1


def func_4062d6642b2f4dbab748cfbb75b89cff(i, P):
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    m = (y2 - y1) / (x2 - x1)
    return m


def func_8220c46bcacb42cf9010fb6e372ba7bb(i, P):
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    m = (y2 - y1) / (x2 - x1)
    return y1


def func_dc3979f98a0941ca961035b010c000ff(i, P):
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    m = (y2 - y1) / (x2 - x1)
    return x2


def func_ec5ca08658b64c3f98f0a2bd0b1474c7(y1, x1, i, P, x):
    x2, y2 = P[i]
    m = (y2 - y1) / (x2 - x1)
    return y1 + m * (x - x1)


def func_804f3490f38a40e780a8cf68d13b4e41(P, x):
    if x == 0:
        return P[0][1]
    i = 0
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    return i


def func_4ee7670d4b234ac29988ea1dc11a5743(P, x):
    if x == 0:
        return P[0][1]
    i = 0
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    return y1


def func_6e0cb20ca6fe4abe853261e0d03dc2ff(P, x):
    if x == 0:
        return P[0][1]
    i = 0
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    return x1


def func_026b495c0717417ab2a007f5598e01f2(P, x):
    i = 0
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    return y1


def func_49973f8c3ad6484f8bdc845b87d91ed0(P, x):
    i = 0
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    return x1


def func_0bfe9596679545cf92826eb71126ca1c(P, x):
    i = 0
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    return y2


def func_9c543d3088634ad8ab82c1a90365506e(P, x):
    i = 0
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    return x2


def func_49f4ef785230488eb94093befc31302e(P, x):
    i = 0
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    return i


def func_c027d7b9dc73458cb4f23bd57159e6cb(P, x):
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    m = (y2 - y1) / (x2 - x1)
    return x1


def func_1d7d7bf3618144c684126a892635230c(P, x):
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    m = (y2 - y1) / (x2 - x1)
    return m


def func_e79a5802638d4deb881902cb761ec84f(P, x):
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    m = (y2 - y1) / (x2 - x1)
    return y1


def func_ec1a935a173f4dcb91615dcd70616757(P, x):
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    m = (y2 - y1) / (x2 - x1)
    return x2


def func_d0c995fdb3ac4bebb62a1de64b5fc69e(P, x):
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    m = (y2 - y1) / (x2 - x1)
    return i


def func_77b9782aeefb4156b608c2cb7b1c5986(P, x):
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    m = (y2 - y1) / (x2 - x1)
    return y2


def func_38759b456ff2444f997bfb9b69552d4b(i, P, x):
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    m = (y2 - y1) / (x2 - x1)
    return y1 + m * (x - x1)


def func_1b872a3713fb4494accac33b336a7a0a(P, x):
    if x == 0:
        return P[0][1]
    i = 0
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    return y1


def func_93005d38f31c4b4da5cefc51ba721017(P, x):
    if x == 0:
        return P[0][1]
    i = 0
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    return x2


def func_f4dea59c7da748eb9b1b34b5ef592647(P, x):
    if x == 0:
        return P[0][1]
    i = 0
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    return x1


def func_6236c75caade43b088ac206504bbfeb1(P, x):
    if x == 0:
        return P[0][1]
    i = 0
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    return i


def func_b0bbf8b4cce046788986098d6f492d40(P, x):
    if x == 0:
        return P[0][1]
    i = 0
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    return y2


def func_1db5d694a049423782b8899fd5852f2d(P, x):
    i = 0
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    m = (y2 - y1) / (x2 - x1)
    return y2


def func_536570cb9fe14df6b9399a89666ac037(P, x):
    i = 0
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    m = (y2 - y1) / (x2 - x1)
    return y1


def func_70790a15ac4d4a95ad9fe5af7d75f69f(P, x):
    i = 0
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    m = (y2 - y1) / (x2 - x1)
    return i


def func_e386dc361334437c9c212349aaeda7a6(P, x):
    i = 0
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    m = (y2 - y1) / (x2 - x1)
    return x1


def func_1ff3e0d4bd9a44179dd6d2c9647da024(P, x):
    i = 0
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    m = (y2 - y1) / (x2 - x1)
    return m


def func_85d8038aec014045a77313a898c51d0d(P, x):
    i = 0
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    m = (y2 - y1) / (x2 - x1)
    return x2


def func_67adc2f540fe43f792ef80941546fbe8(P, x):
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    m = (y2 - y1) / (x2 - x1)
    return y1 + m * (x - x1)


def func_0d70caadbbb14e9c9f3cfc65f19db690(P, x):
    if x == 0:
        return P[0][1]
    i = 0
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    m = (y2 - y1) / (x2 - x1)
    return y1


def func_4a6237a4e45b40adbf3d581e6c995250(P, x):
    if x == 0:
        return P[0][1]
    i = 0
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    m = (y2 - y1) / (x2 - x1)
    return y2


def func_fbf6fff6cd9c4ada997b5100360668ec(P, x):
    if x == 0:
        return P[0][1]
    i = 0
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    m = (y2 - y1) / (x2 - x1)
    return x2


def func_36ae85ebc6b0407298b3fd3c77452dcf(P, x):
    if x == 0:
        return P[0][1]
    i = 0
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    m = (y2 - y1) / (x2 - x1)
    return m


def func_573d616689ec4b1d94ca52a337db38d2(P, x):
    if x == 0:
        return P[0][1]
    i = 0
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    m = (y2 - y1) / (x2 - x1)
    return i


def func_d85c440352ab4bb691a2bd33052324be(P, x):
    if x == 0:
        return P[0][1]
    i = 0
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    m = (y2 - y1) / (x2 - x1)
    return x1


def func_f2bf0e1074434795bf40796861dbd4f6(P, x):
    i = 0
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    m = (y2 - y1) / (x2 - x1)
    return y1 + m * (x - x1)


def func_8132492d157d43189ff55069c6e8e45d(P, x):
    if x == 0:
        return P[0][1]
    i = 0
    while P[i][0] < x:
        i += 1
    x1, y1 = P[i - 1]
    x2, y2 = P[i]
    m = (y2 - y1) / (x2 - x1)
    return y1 + m * (x - x1)


def func_2834a49fe5f841ca8f7c4eecc2d40957():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    return infile


def func_e368c62019ea4a0ca549c2a1c9dcf4e6(lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower.append(floats())
    return infile


def func_97fd0155400142bea613a2b1a62434d7(lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower.append(floats())
    return lower


def func_336f026bec0543ad992d4a635a759b15(upper):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper.append(floats())
    return infile


def func_c3681aaaec0d4d9da9654b9651b5db89(upper):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper.append(floats())
    return upper


def func_109d2850711443ff94f1ecea9db323ff(xs, p):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.add(p[0])
    return xs


def func_ba08e5c0dcd74dc784b6089cf528614c(xs, p):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.add(p[0])
    return p


def func_b4b857fc7cfe4ebdb31d7057b0484d5d(xs, p):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.add(p[0])
    return infile


def func_7ed7af1843804f3ebd6c48fa25849004(xs, p):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.add(p[0])
    return p


def func_2cd441176cfb4700a99d10d9c5177905(xs, p):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.add(p[0])
    return xs


def func_4e35daaf358e47f29947feefe4d7e679(xs, p):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.add(p[0])
    return infile


def func_af21a6e3af684ae2b18b8994b234ade6(x, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points.append((x, find_at(upper, x) - find_at(lower, x)))
    return infile


def func_7b2a02bc45b24cb2bcdc6884b9bb8fd5(x, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points.append((x, find_at(upper, x) - find_at(lower, x)))
    return x


def func_0630d3f9dd524401949cd3534cb0731d(x, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points.append((x, find_at(upper, x) - find_at(lower, x)))
    return lower


def func_9fcdd90a7f8849b486f912c31960dc4b(x, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points.append((x, find_at(upper, x) - find_at(lower, x)))
    return points


def func_05774f94461548e5b5eeac65e9eeeca6(x, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points.append((x, find_at(upper, x) - find_at(lower, x)))
    return upper


def func_1064c895e8c546bd8cd7e9a0da128611(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    return i


def func_0b9d0d81384d41848c533ae0c110d213(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    return x2


def func_cf2a7be2364845939ee97d18c78b4907(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    return points


def func_fffdbaa28e324450b1b04b5b5f1503b8(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    return infile


def func_44bf9db262f0451d89d7bd3fbe20196d(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    return y1


def func_7056d5c4eeed45258b8976dae5fad643(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    return x1


def func_eb64295116454e5c83e4ab9b13d913f0(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    return y2


def func_eae3bbbc53f241fba512d34af188f8af(i, points, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = (y1 + y2) / 2.0
    return points


def func_0937d24b215f42e9bed9cc76a600fe26(i, points, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = (y1 + y2) / 2.0
    return infile


def func_36a84aecad0148aaa180f6e0446d44aa(i, points, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = (y1 + y2) / 2.0
    return x2


def func_caa2caea7a75478b923f108d5ca6914d(i, points, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = (y1 + y2) / 2.0
    return h


def func_b8acd9f3361f4545a8783551326f3f62(i, points, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = (y1 + y2) / 2.0
    return y2


def func_bb44741380bb4d4c85025a3be48ff6ca(i, points, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = (y1 + y2) / 2.0
    return i


def func_0318ab45322441b9aae00707a6b5e7cf(i, points, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = (y1 + y2) / 2.0
    return y1


def func_26fc6eab348a4abba438aa765259c389(y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    h = (y1 + y2) / 2.0
    a = h * (x2 - x1)
    return x2


def func_d2277e28e7804e63bd6c2c8c7629fabf(y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    h = (y1 + y2) / 2.0
    a = h * (x2 - x1)
    return y1


def func_84163aab03394831ad9936cc7f78423d(y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    h = (y1 + y2) / 2.0
    a = h * (x2 - x1)
    return infile


def func_480b3906317c44fb8108bd5b355cda3e(y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    h = (y1 + y2) / 2.0
    a = h * (x2 - x1)
    return h


def func_4b4e579bd3ea478184387c404f2a8e2a(y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    h = (y1 + y2) / 2.0
    a = h * (x2 - x1)
    return x1


def func_eba9ede05e5e4bc2ae5ad241af0f3080(y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    h = (y1 + y2) / 2.0
    a = h * (x2 - x1)
    return a


def func_6094429dfb764c3481464aeee5dc58e3(y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    h = (y1 + y2) / 2.0
    a = h * (x2 - x1)
    return y2


def func_f79c1717392742aabed8afdc245448bf(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = (y1 + y2) / 2.0
    return points


def func_861292048d5c438fb0a73abd9a53ef2e(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = (y1 + y2) / 2.0
    return x1


def func_c1f6b48ded084996bb15e440b1be7aad(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = (y1 + y2) / 2.0
    return infile


def func_3f3aaf6e961a424ab7bbe4aba8c72783(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = (y1 + y2) / 2.0
    return y1


def func_3e6f5f2030214e28bd4bacf0d8c80e06(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = (y1 + y2) / 2.0
    return h


def func_5976acb2ded54a67814877d629f44106(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = (y1 + y2) / 2.0
    return x2


def func_e9190944d4eb4ef7b3ad71ad8415d241(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = (y1 + y2) / 2.0
    return y2


def func_7af6fa10032c41858c8712ef219acc42(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = (y1 + y2) / 2.0
    return i


def func_600cee11ee534ca8b5eb90bbb4024e0a(i, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = (y1 + y2) / 2.0
    a = h * (x2 - x1)
    return points


def func_f14a8e80839c4042a62ad50f1ae6e697(i, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = (y1 + y2) / 2.0
    a = h * (x2 - x1)
    return y2


def func_63fd98a3ef5f42c0ac898c3e5519b677(i, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = (y1 + y2) / 2.0
    a = h * (x2 - x1)
    return y1


def func_5080acf64bb6416ea337e7bb1a7097d3(i, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = (y1 + y2) / 2.0
    a = h * (x2 - x1)
    return x1


def func_d4ae9fdab687434d8f143f9870fc08d4(i, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = (y1 + y2) / 2.0
    a = h * (x2 - x1)
    return h


def func_e2da12e22f1c4fb4b6c4da76264bcdcc(i, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = (y1 + y2) / 2.0
    a = h * (x2 - x1)
    return a


def func_5b0af56d75a644348639cc40b0895a58(i, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = (y1 + y2) / 2.0
    a = h * (x2 - x1)
    return i


def func_74932b8abe1540b29c6f997dd0f1973f(i, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = (y1 + y2) / 2.0
    a = h * (x2 - x1)
    return infile


def func_22a80c157d2848c48363c304c05ce665(i, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = (y1 + y2) / 2.0
    a = h * (x2 - x1)
    return x2


def func_5bc25757503b4f1b99009d56b20765c0(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = (y1 + y2) / 2.0
    a = h * (x2 - x1)
    return y2


def func_479f8e8add30492db723113863b87c0a(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = (y1 + y2) / 2.0
    a = h * (x2 - x1)
    return x2


def func_e0177f539ec3467d9cbe963ce65623b8(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = (y1 + y2) / 2.0
    a = h * (x2 - x1)
    return y1


def func_b737e9a03ff04e96a7416258e2faf2ed(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = (y1 + y2) / 2.0
    a = h * (x2 - x1)
    return h


def func_8ad3ab80ed7f428697bda5ee8b9eb79a(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = (y1 + y2) / 2.0
    a = h * (x2 - x1)
    return points


def func_4a4885d2f95545b5948ca04630dd1b94(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = (y1 + y2) / 2.0
    a = h * (x2 - x1)
    return a


def func_207c276c5148441dab375f6d6c6e22f6(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = (y1 + y2) / 2.0
    a = h * (x2 - x1)
    return infile


def func_82fea2c441da42febb789d0b975755e8(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = (y1 + y2) / 2.0
    a = h * (x2 - x1)
    return x1


def func_03abed21085a49a19ff543b526ea2930(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = (y1 + y2) / 2.0
    a = h * (x2 - x1)
    return i


def func_4a9f8d0e04df4de6858bd42a5de607cd():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    i += 1
    return infile


def func_86dc1861a5aa44839eb9326c038e527d():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    i += 1
    return i


def func_799deacaba6b4cac8fa2511b21e56cb9(h, a):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x = a / h
    return x


def func_0603d84184ed4c8fb5d48e10b3865f33(h, a):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x = a / h
    return h


def func_ad33b6991f634b6abc5f59f7236205d5(h, a):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x = a / h
    return a


def func_86d16b48dcf64f299edf4c10571464da(h, a):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x = a / h
    return infile


def func_3aabfc409eaf49839c6ee88260dc1b0a(h, a, m):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    delta = h * h + 2 * m * a
    sign = 1
    return a


def func_6707920b7d8f4ce387fbacee8a56e711(h, a, m):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    delta = h * h + 2 * m * a
    sign = 1
    return delta


def func_d2771e8acae44936b2c334488a98b092(h, a, m):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    delta = h * h + 2 * m * a
    sign = 1
    return sign


def func_a7ee1d717ad1485a8786e1a692d0a169(h, a, m):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    delta = h * h + 2 * m * a
    sign = 1
    return m


def func_3c0e3447b3a549b08e44d410acb83ed7(h, a, m):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    delta = h * h + 2 * m * a
    sign = 1
    return infile


def func_7c3cb8c2964441628f8c519177bc5a5e(h, a, m):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    delta = h * h + 2 * m * a
    sign = 1
    return h


def func_e78f7f56afa1455bb4dd4626fbeba08c(h, m, delta):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    sign = 1
    x = (-h + sign * delta ** 0.5) / m
    return m


def func_4d829f10c9884dd99fde1c6e14803d88(h, m, delta):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    sign = 1
    x = (-h + sign * delta ** 0.5) / m
    return sign


def func_639a7e91174541988cbf57eb8ef2f8b1(h, m, delta):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    sign = 1
    x = (-h + sign * delta ** 0.5) / m
    return h


def func_472de298d2bc452ba8ae8742b2552f81(h, m, delta):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    sign = 1
    x = (-h + sign * delta ** 0.5) / m
    return delta


def func_66ea2cbccff548e2809e29b53de22c5a(h, m, delta):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    sign = 1
    x = (-h + sign * delta ** 0.5) / m
    return x


def func_dad8bec5b0ac41a9bfc647cd8399fb2f(h, m, delta):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    sign = 1
    x = (-h + sign * delta ** 0.5) / m
    return infile


def func_693869158c974479916524f3e97a00df(h, a, m):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    delta = h * h + 2 * m * a
    sign = 1
    x = (-h + sign * delta ** 0.5) / m
    return h


def func_ac857d08fdf24fe88884e658826472a9(h, a, m):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    delta = h * h + 2 * m * a
    sign = 1
    x = (-h + sign * delta ** 0.5) / m
    return a


def func_94858ce4a934493894983c27cf81750a(h, a, m):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    delta = h * h + 2 * m * a
    sign = 1
    x = (-h + sign * delta ** 0.5) / m
    return delta


def func_1b12c9022b6649f0bec76612280e2f1a(h, a, m):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    delta = h * h + 2 * m * a
    sign = 1
    x = (-h + sign * delta ** 0.5) / m
    return infile


def func_b8d2c3bf1d304dd29748a74a42e6134f(h, a, m):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    delta = h * h + 2 * m * a
    sign = 1
    x = (-h + sign * delta ** 0.5) / m
    return m


def func_ee99ed69e59f4d8db44feb6fd05aa414(h, a, m):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    delta = h * h + 2 * m * a
    sign = 1
    x = (-h + sign * delta ** 0.5) / m
    return x


def func_3522618141e84ba49a1e0e8fc9aff6bb(h, a, m):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    delta = h * h + 2 * m * a
    sign = 1
    x = (-h + sign * delta ** 0.5) / m
    return sign


def func_2ff5a3af5c244cae83a86fc1611fb314(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    return x1


def func_52474018443240879a8930c0125b4f64(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    return infile


def func_abc8b41efad14e4eb7444d4a0a90becf(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    return x2


def func_d7a89a25c580473bb39ca8b502036fe4(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    return i


def func_1b6a6f707caa4046a92a079048c81516(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    return points


def func_6b77f01771e44077a7032deb6b9ac043(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    return y2


def func_24993e8017c049b4bfcf135e0cca31a9(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    return y1


def func_827dbdcbcb1e42368f20a577b916a537(i, points, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    return i


def func_cb62a52f07ec420abb4d624a2274b95f(i, points, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    return x2


def func_798ee8dd092b40ec9d84b0de2ca86a2a(i, points, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    return y2


def func_b8413a98c9884e11bc2fc9073a4c9cca(i, points, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    return h


def func_9df42e2f55354d329bec1249eda7c69f(i, points, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    return points


def func_e0e5d3ad8a95461dbf592c9f5b7c8297(i, points, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    return infile


def func_79a75c7d22d64fda8f861ad40e070168(i, points, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    return y1


def func_02919c05e49e44c0b39a96c4c96004bd(y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    h = y1
    m = (y2 - y1) / (x2 - x1)
    return h


def func_60453007bec349b0a56581e6ee1dac3a(y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    h = y1
    m = (y2 - y1) / (x2 - x1)
    return y2


def func_f4e191e5250149a7ae949fa8c756c1f0(y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    h = y1
    m = (y2 - y1) / (x2 - x1)
    return m


def func_8cdb70eaeede4e9c9c36ce16852c1f3e(y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    h = y1
    m = (y2 - y1) / (x2 - x1)
    return x2


def func_f0baab4760bf40e294922e2f527b3c80(y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    h = y1
    m = (y2 - y1) / (x2 - x1)
    return infile


def func_1a8abe8464aa4c7d87575ccb5eac427a(y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    h = y1
    m = (y2 - y1) / (x2 - x1)
    return y1


def func_934d5c3b3ba04f70ac5dfa4ce955103a(y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    h = y1
    m = (y2 - y1) / (x2 - x1)
    return x1


def func_f0ec05819f89459e9ca167c96a6f8508(h, a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return x


def func_2da9cd6e9bb0464f9bdac4f6998e159c(h, a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return y1


def func_67c72f0efc2e430d98c64f36307b66dd(h, a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return m


def func_7044f1b1751d4309808276b5d5d9eca6(h, a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return delta


def func_6c25e4a76a8349b8abc76e5115b5e0ae(h, a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return x2


def func_9a723b9534824ceabfb937780a87c242(h, a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return a


def func_dc908fdd56eb4865b040860210a05911(h, a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return y2


def func_d1efe2bcef56497380fc4966372b0bfa(h, a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return x1


def func_17c99ff38c404d52bfb3a83f66451294(h, a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return h


def func_960b5897d48c41f7b5eef157e0ce0c50(h, a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return sign


def func_bdd218efb2714d64acb2a217c10e1240(h, a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return infile


def func_44555f8fc4e04ba4a63c7320f95988b5(h, res, a, m, x1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return delta


def func_fc26ed186113467f95ac71a69b73d52e(h, res, a, m, x1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return infile


def func_1dcd91df6689406cbcde2a6d5d45dc18(h, res, a, m, x1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return x1


def func_9b9e81f10071480aa3b9195da059b0a3(h, res, a, m, x1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return h


def func_7a42a4287ad7428c936e5d636bdec0cb(h, res, a, m, x1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return a


def func_a7595396163b4a34acf36cfd95f09e7c(h, res, a, m, x1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return m


def func_7a672a58802d497189e74a17d669999c(h, res, a, m, x1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return sign


def func_c6012f3c9d1041de812feab7281bb206(h, res, a, m, x1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return x


def func_9329a82c05c84777b9fc763739f8fb71(h, res, a, m, x1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return res


def func_a809cedcf0c54ef5ae8be18954e5ce2b(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    return i


def func_603905a4de9f460c884e2f80994bda9c(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    return h


def func_c82ce3bd34ea4befb24f9e876a5f810a(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    return infile


def func_793436f305e5425fb310b0a359b297aa(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    return x1


def func_765880fcc2314d5391943e3af2c2ed84(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    return x2


def func_87c271ed40fc446d8d49d9de3ae62cf3(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    return y1


def func_ed04bbf7dbcc43ffa60257f9a4832ead(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    return points


def func_02c27eaabd8748d68ada262c506e66e0(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    return y2


def func_690df5ebb4294847a55cd1f0c922b778(i, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    return i


def func_d7791bf2be1d4314acf27ee16f6c5f20(i, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    return y2


def func_08bbf66866b549ba8afc39238ecbcec1(i, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    return m


def func_0ca4fb9a31454178a89376f1ffac337d(i, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    return h


def func_dc3ad3772e374c559b4547078e74c649(i, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    return x1


def func_749f60ec91294dad87d5f0d86f49bd17(i, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    return infile


def func_101a26492b8f46bdb4f6cf587ef68a4e(i, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    return y1


def func_ff553d3394e842b88d15289fa53e1b49(i, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    return points


def func_bfee8f5e2d7047389916ef1e4d03bafd(i, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    return x2


def func_46499225dc4242a9b89d7906423ead24(a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return y1


def func_2add5f01715b4eb7b241c9813e5e3bfb(a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return infile


def func_858bb5cdc54348a1a3e64631db25f895(a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return h


def func_d50f2180c1a14e2f8d1d7479ece8d33b(a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return m


def func_b23a4c8c20ac4d178a32ce94516cfc2a(a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return delta


def func_efc8df13cc174721aee0cd55f004192c(a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return x


def func_fc433d173a2142f694e48cf2a779b085(a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return y2


def func_4f46bb9222fc4ea08b786b21fd8718ac(a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return x2


def func_88def28b55f1488fbb4363021550cc46(a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return sign


def func_02c3f71557d140439b82e37c8db78d4d(a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return a


def func_26c9536bec114edb924b040d5d8cb340(a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return x1


def func_93c4eba895d9453794dbfcb5146760f3(h, res, a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return m


def func_19af293dfc6b418c82b9f03a4591f75c(h, res, a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return a


def func_7c4157bc7b6949ae95057b08461eb495(h, res, a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return x1


def func_5f288e338f6a4c5fbd728145aedd1d10(h, res, a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return infile


def func_8f6a598f92714b79b8b4d56b1fad9cd2(h, res, a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return y2


def func_82ad26defd134506898182268120ee86(h, res, a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return x2


def func_3ab81b34cd294b93abf728285bdc2f6e(h, res, a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return x


def func_d0c3cce44c7e47b0ba9c6abcc6e5a630(h, res, a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return y1


def func_464abb2f72a54a23a6fda7acb0c84a9e(h, res, a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return sign


def func_7a9b09acfdac4028a3deb3d706bbe7f9(h, res, a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return res


def func_b9005a2b1a0c47f3889d15ce409a6ee2(h, res, a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return h


def func_3964215c908b4e1ab59f6d21a876917b(h, res, a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return delta


def func_cc246509bf9548aea38e4934bf75911c(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    return y1


def func_beb89798dcaf401fa958e7e8c23d1692(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    return x1


def func_c59fe7615cea48a3ab696f1b0e613d62(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    return y2


def func_e7772246b12a4dc5b1fc643537ac9530(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    return x2


def func_1f4b241e14044457a45cce0da1d59d00(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    return h


def func_5283412f2a18405f9224ebc0e31aa602(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    return infile


def func_d9279f3e5ce743ab8fddeb993a234e51(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    return i


def func_bdaed5ec6df845ce86d7942a90d8ae7d(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    return m


def func_f31e2342e0ec4aacb81ef3f3a7f58964(i, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    return points


def func_6d76eac0e8a44e9cab52a35c14d1c7d4(i, a, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return x2


def func_95c7b4a4e1fb49eda384f1eea49930ec(i, a, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return points


def func_2da15a20adb94098a5134c9c72a453f2(i, a, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return x1


def func_843f233caeb54f4480148d367cf9fb70(i, a, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return delta


def func_59a41520f7c14c69a01f0229cd51a39a(i, a, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return m


def func_e011e83aaa3140899b5d25a1cb238156(i, a, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return i


def func_ca7e8a4cca964a4c8549e110c4517c40(i, a, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return x


def func_de88f2952005444b8d0601f49f589d8c(i, a, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return infile


def func_5ad9ba84c64a4b1c80784e95999b4dcc(i, a, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return y1


def func_853d0541d9c742aa99717da6ee8849d8(i, a, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return y2


def func_3391cb2a788f492b9304307c436458c7(i, a, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return sign


def func_ff3372a01706425d8a811855cfe7838b(i, a, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return a


def func_ca1eba5f8db84b8787e2ea6cd8dd8475(i, a, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return h


def func_17dae7b633864c188f0f742447fa609e(res, a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return y1


def func_95e197ce11d24e62821a7b12615c040e(res, a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return x1


def func_c1f0665093304b468505c9e53442e775(res, a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return x


def func_7827c0e708a346c8a062b5fc91ff5e18(res, a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return delta


def func_89aaa54399494d85b5747f19f63882e2(res, a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return res


def func_5137f2e01c0945a5a490b867761367bb(res, a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return sign


def func_e8d213c278ba41fcb98e3341cbfa3229(res, a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return h


def func_4fd2adc02e5144ed92d41b47b52e03df(res, a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return a


def func_320fdce9ee934f9c9cbfa521c7007b89(res, a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return y2


def func_a375af1de0ef48c896282d43f1bf9c24(res, a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return infile


def func_498479c2d2b94fc58e961e36d38b17fb(res, a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return x2


def func_93fa40c297344375b9f57b9cd5e4c3e8(res, a, y2, x1, x2, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return m


def func_ab677c7ead4744dfb8501b3ccec848fe(i, a, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return h


def func_14f1ae15c7394a179d7810dee709cc02(i, a, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return y1


def func_80e6b83a6aa549a1bc4f6c87adb651a8(i, a, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return infile


def func_21606660a6f84ca799ed226005a78f67(i, a, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return delta


def func_ab5eff8ed25444339083de5603cff914(i, a, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return a


def func_b040e7cd071e41e58f494c40bd751e3b(i, a, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return x


def func_e17c07ca2bc94eda9da89b1ef4165310(i, a, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return i


def func_87ffb218b3794457b05a0bd78120b202(i, a, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return x1


def func_a08440501461426ca0b33c19d7cd373f(i, a, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return x2


def func_a41c8fea5855433d942649c5d803823b(i, a, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return points


def func_0808706947394c45bfa163f83ab79fdc(i, a, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return m


def func_62b055e9b68c49dab54aa790b9f466b7(i, a, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return sign


def func_9dc88467726a462d853fef7477198780(i, a, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    return y2


def func_8271a853a06d4207b4d2143008be60e3(res, i, a, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return y1


def func_c97ad8eaa9fb406ea2d4de015560610b(res, i, a, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return m


def func_25a88812e68343c9a0dca4a84f5987e6(res, i, a, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return delta


def func_1573c9ccbd9c4f7c8926a991b081736c(res, i, a, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return res


def func_7405c8a48e0743bfbe3fa4c5a7e8a95d(res, i, a, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return h


def func_31f9f494005145e0a0b4c722e16a462c(res, i, a, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return points


def func_f4a3df9d804a401d9c9efd1188d6d504(res, i, a, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return x1


def func_caa590c0cd624641a911718901525334(res, i, a, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return y2


def func_1343db773de741a69b32b17a78056a1e(res, i, a, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return infile


def func_0c1814a850244027bf67bc0c0d54c435(res, i, a, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return sign


def func_836518b44c334b71872f0a4abcf061c4(res, i, a, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return i


def func_39bbdb38986b4df29534a5331cee0525(res, i, a, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return x


def func_83aa7e6ccd054d73b3ffe788c5b9b8b4(res, i, a, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return a


def func_d156adcf3d5d4eb2a0faaefff8f9793d(res, i, a, points, x1, y1):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return x2


def func_d6f44757d015477886d8b646c7901a6b(res, i, a, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return y1


def func_7c6c5b56b1cb4a5697d83f2d9ec28181(res, i, a, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return res


def func_e7fc5256f41649098a2c5b941b9c3c78(res, i, a, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return x


def func_80b3d273ee594c568b44221408547972(res, i, a, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return m


def func_923a68f54dcc4200ae0931ffdc2196c3(res, i, a, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return delta


def func_30b8da920ea14c81aec86f0317124b49(res, i, a, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return x2


def func_13d1aa47188541c78e2832db9a243a22(res, i, a, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return i


def func_92b79f7e4d21460598b3346e3c5bda7c(res, i, a, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return a


def func_9eaebf61130040de98a8ef81b7cd22be(res, i, a, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return x1


def func_7e542fabfd4f4e0da27143c65d4faade(res, i, a, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return points


def func_8edc9c838d4041d985f8261f5a7f13cb(res, i, a, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return h


def func_04a918c21a1e4330ba435d65e72c5695(res, i, a, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return y2


def func_c2c90b209b754bbeb567ecf191792580(res, i, a, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return infile


def func_97a917dee4294060b0cb1bc37fad02df(res, i, a, points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    x1, y1 = points[i]
    x2, y2 = points[i + 1]
    h = y1
    m = (y2 - y1) / (x2 - x1)
    if abs(m) < 0.0001:
        x = a / h
    else:
        delta = h * h + 2 * m * a
        sign = 1
        x = (-h + sign * delta ** 0.5) / m
    res.append(x1 + x)
    return sign


def func_e14baf88b83041c9940f28d4d1e16901():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    return lower


def func_7828088d1f8043848e3a42c2cdf4be0b():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    return infile


def func_d79050befa38497a9809867323570b73():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    return U


def func_720cddc206a64483a450b6af5e35dd47():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    return L


def func_7e7e6acc23e04c8d9cece368f4bad32a():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    return G


def func_1dd68d96c59c45cf93c0f5c259dad203():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    return W


def func_df554dd880ab4abd9b34c389a7d92c1c():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    return upper


def func_a3ee3d05210742f5b7cd7dc6c364ae49():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    return lower


def func_97f7e8e6f51e4bbba216382dde7cb703():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    return infile


def func_d9fbcda52b584caca96a9849702f8512(L, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    return lower


def func_e8e0e27a51954114bebb47cc36726390(L, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    return upper


def func_23cc1ee2520e470db6b4bdbff9fae479(L, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    return i


def func_9aa737e3ac6d4fa6a73b6f07cb36e0a9(L, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    return infile


def func_16b0a031bebf48fcb135c39e5d285fd6(L, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    return L


def func_cb5d293fb9fc4094ab677653a8bd6a31(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    return i


def func_b90e25b4d25842f2bee356ebf0721b5c(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    return L


def func_72d66b4b1ccf4e81b9e80230afbb0145(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    return upper


def func_b643bff60b534bb29f507c8eb7644c2d(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    return infile


def func_ea5c2d67bef943e9b3409f9e2867141d(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    return lower


def func_3b5440884bd6497cb23d7440f28cb045(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    return U


def func_94e4cca7ae154e51a1fa8a400bbc886f(upper, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    return upper


def func_f8bc382da6da4caea7484de13ff28f9a(upper, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    return U


def func_d1971bceed9b4b1f85f924c22230363c(upper, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    return points


def func_60b6f79befb3456aaccd76f8ed6ed4aa(upper, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    return i


def func_3d24e47e26f5489095907538e02b3711(upper, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    return infile


def func_c36a3ef119a1412ca9d93ab134c933e6():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    return infile


def func_028b20f7ebed4bd5a17a5e1570244891():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    return xs


def func_93ebee2a5aa04cc39e783092704c4332():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    return points


def func_1e5f47e210e842c99bbce9e21b8ac804(lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    return infile


def func_1b413026d30d4398b07ac4ca9ed2e841(lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    return xs


def func_6c4d4775a35b45a9bf4de72d9bbaae04(lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    return p


def func_a1c821b68073488ea7498381c4db50b8(lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    return lower


def func_2651e4e334384dfe8c7b7165fb7f9a4e(xs, upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return p


def func_c9031b8719754a0e8ad1c07c4993558b(xs, upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return infile


def func_9c41c9d79d3b4d16a82d2df14bc19e63(xs, upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return upper


def func_d7cff0005a974c4991eb19830164ce2c(xs, upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return xs


def func_774e9ae1db57481983929efb4bf92c75(xs, upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return lower


def func_9ca95186ce6c42d3bd24ed02edb0fa46(upper):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return xs


def func_732e286f1df940cfaf48bb7e627f2c6a(upper):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return upper


def func_db53fe2f81524fdba6a21af2a12e5029(upper):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return infile


def func_679e46032a7548bf9d1a28f465d2cc2f(upper):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return p


def func_e412ace6eacf4160ac6b1bd56ba78c5f():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    return infile


def func_b79addf2401c468290cb76b155c1f659():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    return xs


def func_64601cb3cd8a4074a3ef3a7140193be3(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return upper


def func_46196429e5bc4624b09a95f1b1f71f2d(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return infile


def func_ebe01eb8f4434be5993322805190d3f3(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return points


def func_e9591c133ee24f038d252b2075b6b42d(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return lower


def func_19208b510f6944a1a55912017c95c970(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return xs


def func_25b65fa2f8e44afd81e2560835f93cea(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return x


def func_2bc111b312c2413f8e192f64f4108056(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return lower


def func_81f0362263e248f3bd61953c1310e4f5(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return upper


def func_50b393680cce4307bf1d539a69239caa(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return points


def func_49cbe98f6b724e22bac8b64a26426122(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return x


def func_358fc91c3a274385aded36a0f58223cf(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return infile


def func_b6d864467326497f80b63fd4c513d8d6(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return xs


def func_daa0a843f8db4ad2a4dc74293938d20c(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return A


def func_725ac80a359c4e66a00bb13243628cc3(points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return a


def func_5bf739ee666d4e7b9e337cecbe4348ed(points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return x1


def func_7fcc5cb23c31425d858ce681a9352086(points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return x2


def func_209d9923885e4b878a55d1bf2e81cc2e(points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return aa


def func_891de01c224741669cf6932013175785(points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return infile


def func_e38012ce66804f52ae6b64160d459d71(points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return A


def func_9bb4becd10354a8d95f6a123c59e5a09(points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return h


def func_4e7469663a2449fbb8a0ea0125ab1ce3(points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return y1


def func_aa11065074824e4f9dba58029ecaba31(points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return points


def func_8150c090d8454c64aa9db7ae0b5cd62b(points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return i


def func_cd4d4155903c4bedbc3cf5966345fcd4(points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return y2


def func_5fd717077d5646a98dc9ebc06ad79446():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    return infile


def func_3bc58ed836944ffa9c1ff4d4bb54617a():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    return L


def func_3727b4dfdf2a41c6a36a47356019ad6f():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    return W


def func_1bb14f83920f49b68ea012ba13e415cf():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    return lower


def func_9e4bb553cfa6402baaf906f275122410():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    return upper


def func_8ea0c42f273f4eef94b67d01ea714b0b():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    return G


def func_b1143ab07683427b860bc601294f747b():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    return U


def func_8c24240bc3964be08285e8fbeb8ba0d1(L):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    return infile


def func_bdc534fbc97040d5bdf32152c5a2813d(L):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    return i


def func_5dba434fb94e4215a1aeb710dd296f3c(L):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    return upper


def func_b98507af3a174a34ab6538a3d390feae(L):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    return lower


def func_ceea4263c5b34990ada8e3ed5a797040(L):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    return L


def func_caf9ce7e1be0415d8f56e697150923c0(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    return U


def func_5909726d98ee4810ae56f8f8845419d8(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    return upper


def func_7ca8edc5906c4f888dd1fc1bd5134e6c(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    return L


def func_e69fae45728347198790034995ed8a03(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    return i


def func_01e3a178b2fd4749b059d0ae6e658138(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    return infile


def func_7452c05c6721448597b463232e5e714a(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    return lower


def func_8079b7554f8942a98df4b373b0fe4cdc(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    return upper


def func_14fcae3e3837407394a32f11293b1717(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    return infile


def func_f3c8a1db4fea4fc38b496f1831d20bad(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    return points


def func_6208a8333da844a39008c1bfb60674b0(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    return L


def func_484c845e4e6041b5a16c2b3f51afd4e3(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    return lower


def func_c2eb1aa6bb754e69aa1b4d2f2662266a(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    return U


def func_8357421223a3488995b8650d192ca1a0(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    return i


def func_596c4c43e3544c1c8c9107c0ba9c843f(upper, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    return upper


def func_82470ff9f3e9494294ec30fc81514fb1(upper, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    return xs


def func_83602353a7694826b2b00042611db3f4(upper, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    return i


def func_3624e52db5f14b96b3362262fe4a606f(upper, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    return points


def func_7c752da1f842458194d7b48848402245(upper, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    return infile


def func_c59c3355c7dd472b8b88e412edd0f740(upper, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    return U


def func_8d9fee1321974b3097f4a73f97411a92(lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return lower


def func_aedcbec6aeb74cd1a32741dd1a1f596b(lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return xs


def func_9c8988d2f3624b37bf433d909de058cf(lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return infile


def func_6c920a363d1a444bb4897136caa5d1ad(lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return p


def func_fb301e455f97405a982f71b705a17fd2(lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return points


def func_1a74dbf389a04789ae919adf8747bd0d(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return infile


def func_b42b3eeb3d4b432e9f702fcfa98346f0(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return xs


def func_4e95bf18a30e4cdeafbfb6857d7a0da6(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return p


def func_2a4311860be04004b4a6e15c50a185e5(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return lower


def func_e068d9c577b54f92a0b9b06d3905b3dd(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return upper


def func_f47a8112d4ce4399952a6550844d795e(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return xs


def func_cb95edd0e3454d71b1aa219be38b4679(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return upper


def func_bc9bdb4bc81242b1911ae2a3211702bb(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return infile


def func_6388b1c1f5934c739e8a6fd30315318c(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return lower


def func_47652c0bee774efb9cef9c454c2368f3(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return p


def func_6b6b810fd0bf4abe868df2f5d75c81a1(upper):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return xs


def func_cb758101e1b34019bdd295729ea10ba7(upper):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return infile


def func_2b2ddef364b54cffb012799d1db52ec9(upper):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return upper


def func_3bc7f2b45c3b4f12b81bd6f63d461d49(upper):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return p


def func_faf6da31b4594dc596af87c60c8ccd5d(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return x


def func_68d79d478c814808ae9d5884be3963c9(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return xs


def func_1397f31e5ae8441684bb5ec3dda541ac(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return lower


def func_c707332f9ba24656bfd0d9c59d2a4fad(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return upper


def func_cc4ec50b37d64ffca13c7d7f547dfd8a(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return points


def func_95e849ada2e9489088f0a6a55c75a44b(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return infile


def func_c6cac7b1d1634c34b964e1fc6f30fe23(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return xs


def func_5732a482e2d64d3186124203b6b8ff85(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return A


def func_fcd332ea9f1848da8be8a8079d974f93(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return x


def func_35feaa3342bf4a4da118cbcdd58491f7(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return lower


def func_f0b4b5d3d7bf425bb9ba47b955110800(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return upper


def func_0936e4c19bb94e3cac8d7292d8be2ee7(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return infile


def func_4bf3fe11a574411a8efe142ea87a63a0(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return points


def func_eba7a5d1494e44038079c5da23e0cb5f(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return A


def func_2976b23ec60a48c8b531ef76e2f86208(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return xs


def func_5d87250d8482422991d4fde77bbb1217(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return infile


def func_6d92864f1f974636bbad1dd1d42fb10f(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return a


def func_255277e076a74b86822b0979933ca6fd(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return x2


def func_29974800b44d4c05b3867c7b61b5c8ed(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return h


def func_0e08ca3901c54a1b8b20725cc84bab63(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return lower


def func_deb274b35d194b03b8ef86b24cef33d3(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return upper


def func_1ea5d88d0a2849f58c04114b9934bec0(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return aa


def func_14f71c4f3d7c4d098cdbff8e7dda0423(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return points


def func_560192eb4c1f4fe9a970e118a5343400(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return i


def func_815d77d2692b4bbaa12ddd32f6e6055c(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return x1


def func_e2f5c7256d1b437da3f5c1b2a374a933(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return y1


def func_f42013e4cad547f8a4ea634c6467f626(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return y2


def func_b958596abec14f908c7f35c0ab3dfeaa(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return x


def func_d23c50d546394c90a70ff762d2e08fda(points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return x1


def func_4a7fc404c3634ba0894a9919e29fa26d(points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return i


def func_26bd64b7b9704e0dbc51698380a4b8c6(points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return y2


def func_a796807954984f25883456840ca9944f(points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return h


def func_352e0cd530ec4d97b72d0e3f898e0294(points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return a


def func_4b70ae0169f0449a92e753beb812e09d(points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return x2


def func_d6118eac40094ec68aba29e150ace8a5(points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return y1


def func_710c6196593743a39a4fbd4c919f25a5(points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return res


def func_da73067585354e5d932a400324813a29(points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return infile


def func_32e8d89043a748d79c3324924f8ed7be(points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return points


def func_db39e96b4a404eef957a869befdfd5d6(points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return A


def func_3dd4d53256f34480808f7b0b350a8d4c(points):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return aa


def func_8fc8967ce8174dc7a25625eb97d640bc():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    return i


def func_73ea5f8b03734b42a16e1d8154d0e3bd():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    return U


def func_cc51adc965a649fe94c36365361b766a():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    return L


def func_d062588ae51e414db18885f718125818():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    return lower


def func_416bbfa67229432dab2a3965c5bf74f6():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    return G


def func_ee5030ab7bcb4416972aff0013c87b5f():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    return upper


def func_394a0f3a2f544ee58687b9a65a8e1a78():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    return W


def func_e2b98c68a08241ef9a24f6fb76adeaa0():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    return infile


def func_5b777ff065d64d53b9f37ba742ea627e(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    return L


def func_e78db1e3e98c4108982086bb214f46e5(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    return U


def func_fac6b14c3bd74d99bfd1162805fe02c9(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    return upper


def func_de7e7aa4dd32416c98f1ddd30185edc4(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    return lower


def func_552f503e06184fe1a4d8aba8051085f3(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    return infile


def func_6b8f04dc7ab941799b7ce8ae80141a32(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    return i


def func_56cad4d0b94f4241ba131cf54df8e35b(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    return upper


def func_19fda041ae4047988f22ed5ea5465d37(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    return lower


def func_83349c7428fb46299b349620110c4327(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    return U


def func_a387d838fa9c43e5940c19d935a94468(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    return L


def func_d4221397703a40cea6201bc8a2f62eeb(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    return points


def func_94cd99ac272349ebb2ba82e1804edcf9(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    return i


def func_f2380a522f4b4cd387ca16dd1ec35d2e(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    return infile


def func_f52a9d56c4fa427c865cc6c575200cc1(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    return points


def func_ec5816fab72b404c82f1f69e8f8f1d14(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    return lower


def func_df0e6c0341d640dd9ff9c24038d314d5(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    return U


def func_41174f140f55443595243381679ecf5e(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    return xs


def func_c2125e784f694233a62f682ec63a319f(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    return infile


def func_7fba5bee00fb43b68f0126d97514a385(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    return upper


def func_44aa0fc3f6f84e3f977b658ee92eb56b(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    return i


def func_f8b3db6ac3314412a49e49492d2d6d56(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    return L


def func_eb181236d9de41cfb8c34ff465b76d87(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return i


def func_5de606f6a4f54024b17ad27b74ec8829(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return lower


def func_a6d076d524bd48db86d843977357a834(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return U


def func_cccf94f62e5f4faca242ed0526f1ed96(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return upper


def func_bd76916f6128435daa6c663cb8d82107(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return points


def func_41fbf41db75543d0b969c7bf3c06d33a(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return p


def func_56d735514b9d47be9d8cbb37a88ab7b4(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return xs


def func_9b6762bdaccc48a5a08fc1ae6b6075b8(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return infile


def func_29f76ce725c544a4a7a879f9bcaf8bf2(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return points


def func_1863eb5712f24ebbb04a0c65169021e0(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return xs


def func_a0c221781266425aaa8749e93e02221f(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return lower


def func_3d49990f817a46ea8c278d73cd4a2c06(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return upper


def func_72bcbe313a1e40cca9cbf0084cd885a0(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return infile


def func_fd2453a6ad1a49d08d995b35b4236760(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return p


def func_d39db8de8ba946ae896b3b33b2e90642(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return upper


def func_b2e02fcc03be4e2da1b6cc615d7315b2(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return lower


def func_1bb08ae473384f2c811c788e9b0e0d3a(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return infile


def func_c5ed4ee386104f37b14fc2ba6ef0ad9b(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return p


def func_0b7b9c18637649e098052dacb1d13187(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return xs


def func_db17b2e25d8c4bc4a9f2592880e894b8(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return infile


def func_5606a32ed55d4f479673a76424f95632(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return lower


def func_b32f6fc96df54060931409f2dfb73773(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return p


def func_d7de54fd571b4efb87b8d0a52f422895(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return upper


def func_98bd06136b8e4baba5f513584a9c8f06(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return xs


def func_4b062c537fce480f83b9ed8b2fe01bfe(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return points


def func_a9188e094b59440e8a196e96cf402c5a(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return xs


def func_e65da428ae144471bccf312da641feb8(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return lower


def func_6e1f446ed014434da36797368b66e77a(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return infile


def func_00e914dc0e24445eba093d7168a12b55(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return x


def func_355bc6d94a0f402095d25cbb42b24633(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return p


def func_0716081318234cac9565f8f7b07a3d9f(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return upper


def func_7f57e7cd8efc44bf86b8b337475a5eac(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return xs


def func_bcd2d3b728a644fdb056e18b73ad1bdc(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return infile


def func_373bc28f1e48462abd0a367fddfa1a2e(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return lower


def func_cc15bc3ea6d34b378d536580cd45364b(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return x


def func_03273392223c4140a2fe09df157f9b55(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return points


def func_c283f6d63fbc48e2bba0b006661b5240(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return A


def func_4919c8de5d1a4960913517d8c188ad20(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return upper


def func_bf450cee1bc44361a96e85df1b618a1e(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return aa


def func_12b31339fe574dd980d549e12df73a5b(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return y1


def func_1f8c75c296234afd95214b2ee655c8e0(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return h


def func_da1f2c0e6ca44828845360dcce8c42e0(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return y2


def func_7397f89f13cb478288b382f62267cfe0(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return x


def func_ec40fe02becc44cfab9d330dcbcc1476(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return points


def func_6cfeb187fdf34b64991fb591634becac(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return upper


def func_4d91c803d9234b51a23963e67df37fd4(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return A


def func_d0dab71fe0884d6cae83e293aae831e6(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return i


def func_92642793a42c45ea8475e95bf32d1ff7(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return lower


def func_4cceaf63b5904035b11483e8315e2f74(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return xs


def func_a638aebb29324f3188c2d649da6a2467(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return a


def func_ee2d751d9a71478293da172dc72ac922(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return x2


def func_d8953fb9aca14a2aa5a191edc7c187a8(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return infile


def func_4c3f3ddee2314e1dbf09e0d70b3c682c(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return x1


def func_53ff6619e9c64114bc67aa5e60dd2e4d(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return h


def func_ec0465e9d0794ebab7b9591993c84cfd(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return xs


def func_a686a4063685485b916a696a922db3ce(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return i


def func_52009e30106e4c7590ef28c5143abef2(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return y1


def func_362c7864c22941309ef84c21abedd460(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return x2


def func_d96450af5ac04484871e82822e6f1822(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return a


def func_e4ac7814470b4eb5a3c7f19677b2cac6(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return lower


def func_d735da8756254d8b8d7bef3f386ce5c3(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return A


def func_ca8117f58f8e49909bc38c36e672c45f(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return res


def func_dec8020b655241d19e55663ece8d8809(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return upper


def func_4ab31e61ef4942fbb018a1a2b5b1f348(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return y2


def func_8bc7700a8cff4deea834a7fc177b8e05(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return x1


def func_f6fb77f7fa10457fb3724b42eb167022(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return points


def func_0fb8297f30db497aae76cd5e55d4cbf2(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return aa


def func_132c3ef19e7c42f9b96b60d9cf688312(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return x


def func_f404c8128d86411082e2f3964ef33d72(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return infile


def func_8208bddca9e6491dbe3de76f9070eb2a(points, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return target


def func_df31c387395e4c8998613ea07baf1bf4(points, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return delta


def func_aeb53418aad44d3fb51416234f70b4da(points, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return m


def func_db92b77ab243486e874011d18a0da793(points, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return x


def func_d7f64cd18b8e40e087a20ec654841912(points, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return infile


def func_60b1b05e21634c21a51e1da8d3b5a7e2(points, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return points


def func_5b84679c7e754b5283c593b9a468a5c7(points, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return aa


def func_d1a697863ce2486284e6fbcb6a902b1e(points, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return A


def func_28bcf19c1281444f8b900a5b14e1a274(points, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return i


def func_ce5abfa99a3a4b33a596d07add9489db(points, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return a


def func_84563d8500fe4a4ca64a2d1323d4ba7d(points, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return x1


def func_7faac6ab7e154c87b7e7abdec1621d2a(points, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return y1


def func_f19435ad4b2443d69d75c65959a78b54(points, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return G


def func_8356d3a3b6ba48079c60b94545e74993(points, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return y2


def func_5b90fa96a4644270acc5f3428cbd9448(points, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return res


def func_b1137c1ba04940adbf0a192647d43974(points, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return h


def func_c31dfc24ec234311aa245b5ff627d0a2(points, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return frac


def func_22eb067602634d55a2dd23d3b095c387(points, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return x2


def func_83ead5d8246d4f1eb544dc98c991e677(points, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return sign


def func_80ee3b2045e645ff9cd3e62dec9ff303():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    return G


def func_c22f0c9dc7d048118505023a129c1a0e():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    return lower


def func_649db8716427464cbd0bf54569d9b598():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    return upper


def func_4db1957f846e4c418a32dd9ad217d5ab():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    return i


def func_96e38257675f465c9db58432a1b76507():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    return U


def func_24400d2c41944c0094c93e3fd06917bd():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    return L


def func_46ed7be0ac7341849ffd12fe2ca64c5c():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    return W


def func_f832e45e80a641f0be624a1a3fff0b1d():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    return infile


def func_64454498afd849a28427ff938b32280f(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    return lower


def func_9705621334c946a4b27a770a35bb3e35(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    return U


def func_30ac300b08074406991147cb81f79e85(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    return infile


def func_8597871f586249c393a5ce02e7fe872b(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    return i


def func_78c50f7e83a94372acd483aa3a3a0383(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    return L


def func_46ba51b26414497ca43e84830e521671(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    return upper


def func_a13e2b10fdb5481e864173bafcf10b6e(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    return points


def func_b7b365d65b9c45ae8265e2a519c8a0a7(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    return U


def func_4d3139c9aa1542569b3c55bdcca13a65(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    return infile


def func_0649d83a7fc04b14b602f3d99c7b7b78(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    return L


def func_64ad8e9ca24c437faa1ac5eb64b6132f(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    return i


def func_59a7bb77970c4bdab363f098610fa708(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    return points


def func_143d7e4abfed41198c2d5efbf79410ec(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    return upper


def func_920b3974bd8d4c549c9c0bd0028bc318(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    return lower


def func_f5a001460cbf4752988e463e84fdf315(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    return xs


def func_d2259bbf7b7040e5b544f18fb2900914(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return infile


def func_6aa51aa1012840bb99aaf1993f2cae7a(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return i


def func_7cfd8b0548b947c4b0435e9656de7676(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return upper


def func_5277bcd7586a42098a777817b8dc56ef(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return lower


def func_23a179e585aa459ba4ad9219d02a16b7(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return p


def func_24d1d9ab55b943e796af2b62f02a8bd5(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return xs


def func_e6cd228e1bb94cf48a3e827c892afa69(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return U


def func_0a7eb99790534542a8d73dee53e4573e(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return points


def func_108a16cc334c429ba486c02b4beed7fa(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return L


def func_9b0166f9882d43949b1a3d9c0075e875(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return U


def func_7a3a9c52929e4e00aa190b601bf35d2e(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return infile


def func_d64a1d20ce6e4425a0ccd12b1885d174(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return p


def func_240da9cf3d474001b06f507b07b8463c(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return xs


def func_0bd4ad5739ff4bcda77aa0f4325c2c7e(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return i


def func_d9a4b31086d2442e98b1c5fa64107e4c(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return upper


def func_a1e54f792fa747deac5bdee5408123cc(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return lower


def func_572762ce0b004ebb90bee42e9bb01dad(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return points


def func_86b599765fc94846b31c541f7a852b1d(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return lower


def func_f9a63e47644c46039d9efc4554c9aa26(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return upper


def func_8f3ff82431bb4530a7cfccff8163bd6c(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return infile


def func_0f9886b9da994dcaa3bf16cb8ed55943(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return xs


def func_46eeff2c0bad453d8cbbf9443ebed6c0(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return points


def func_037dae91fec241c9a032f831fd5ae2ca(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return p


def func_220057d8ca194a4c8ec7f885d0a88d0c(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return lower


def func_e65da107584645449d0e60963f0bcda0(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return upper


def func_da8540c394cd4927a506bf760d8b519c(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return infile


def func_18ac78cd5ac24014a3762fe5a440b24b(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return p


def func_cce1d5b66411416ea2e21f40c60ccba9(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return xs


def func_5c82abd024c64075ab328a65e880fb40(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return infile


def func_e0ac2e7e79a04c70a4cbf9d01a85b502(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return xs


def func_ca4fefa8026d4c2485fb1fc555bf80c6(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return points


def func_6b27dfedf0c545398aecf5e75f552081(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return x


def func_3dbc0d32bb034fa89611b6ce481df070(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return lower


def func_51bbf4627354495d94a5145485cae86e(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return upper


def func_db59ed1f1e624b79a2d9bfd0e4b3befa(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return p


def func_93672394b78e41feb656dad9da343d50(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return A


def func_c5354c87ee824f45966f2c577a4e247b(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return lower


def func_47154511b636441782bd2802b68cb715(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return infile


def func_7586ea286ae74981be7dc26cb0cdcf60(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return upper


def func_2867cedacb9b4d7e8c67bb719825b89e(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return xs


def func_284682d0e5034789b33c4fa03fe7ff1d(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return p


def func_3423130e51084a61a943dda7c61e40fe(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return points


def func_4b50aa457b624db3b4ff1664f7ab31e5(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return x


def func_1885e07e0a0446fe8cc3c447b95aebb2(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return x2


def func_095ba8d664004e8199606ce8e3efe12d(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return y1


def func_66330564228a4265a2a5ea54fecc8079(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return xs


def func_70c61d17ba0948328de53585916c8272(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return infile


def func_4e72e1678f0b4232b21fb143421fe5cd(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return aa


def func_b7ddb600327c4679846231a1493dfbae(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return h


def func_cea61621f2634d75b0fef5fb227e2980(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return a


def func_c615b768ed804cb58e59b231862499a9(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return x1


def func_ea3060b37780415aafa92bcd77e90bef(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return A


def func_2a7cd11566eb409a8deafd7614bb874c(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return i


def func_60e1fc196bb74c4192438b8034d95d41(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return upper


def func_c74fb5dadba540f79f31f1b30b167464(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return points


def func_50f1081c875246878423707061c948e5(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return lower


def func_8fe8658f714640f49ed52693a24ba35c(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return x


def func_b2b069efd5da42d9b970dc208054f7b6(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return y2


def func_8cfb037efdbe4e3c88b9145243b86080(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return y2


def func_6067735fc03b44ceb5d585bdd54a8a7f(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return infile


def func_7b38367e186d4a6bb7bd60cb910b43a5(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return points


def func_1973ab3156804b2c9eedc9b7f16c3d47(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return x1


def func_4194952f94d34bf9b98cd05a60d1bbb7(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return A


def func_eba1ee0ccc0f48b1baf6f4a34a2c45eb(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return x2


def func_e8feb112875d4948bd156c08f4f3801c(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return i


def func_5e2b7dca2cc94531a430cd894e076609(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return lower


def func_33c2e834c16244e58346f2be22fa1f85(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return h


def func_4b4c7c07dd424b329809c8e18b25b017(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return a


def func_74674042a57944d2a10d21779bae0817(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return y1


def func_4b4d83e9925f498294ba20d8b9644c89(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return res


def func_2d29877acea64f56943848e682739669(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return aa


def func_ccc4f2c0afeb4e7c9aa01cb93ac652dd(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return upper


def func_592ba4c244a94c51a8fe0805ac36f0c3(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return x


def func_09efb7af28ed447586c1acd4f7707b53(xs, upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return xs


def func_b5869be61f7f4d098a8a7812e567257d(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return h


def func_91f6aafd7dd54de28647220d2f70fa41(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return points


def func_4608d6fcecd84214aaab6542e2c02556(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return A


def func_9041ad5514314788b0d022c0a12fc551(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return i


def func_bf78fdc6ecce46a486d74eca596f8325(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return infile


def func_b641fde7ff564b13a9ab75b4925c97fd(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return a


def func_bbcf83e4e0b84846ab671be8a2e02cc8(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return m


def func_9964d6136dd547ec91adaae9eb755a3d(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return xs


def func_9c5959b3bf7d4bf7892ff35155c7a851(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return y2


def func_fde346e370f54234a7a864896e146a53(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return res


def func_e4898740651d4f5d9168239663a1ae9d(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return upper


def func_a4be54429e924defaff51ffc79b799c5(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return lower


def func_e0b6e32c14cf473094693641ba91ff50(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return x1


def func_7202165ea7bb4e53b5fad066cd0a557a(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return frac


def func_0af5e6b367f541dca7161823b8fa1152(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return aa


def func_71f9b9799bd04a7699217ccc117654e6(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return x


def func_54bc1d79a97246a39eb08b6d06404fbb(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return sign


def func_83fba645fa144e28b69063cb843897a0(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return delta


def func_53cdbdb58ab949c09363a223d95a96ce(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return y1


def func_06f0c64d4fad4e4ca94048be3b866ac2(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return target


def func_277859d2026d42a88783a6e78beba5cf(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return G


def func_cabbd5d0c021402e9868290122369564(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return x2


def func_316d1cb227e44d1dab328e4cb6dfb576(points, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return x


def func_42e6087f51ba4ba59706b873dc9ff5e7(points, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return delta


def func_6cc2087914244b729bd22a41fcc8fa54(points, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return points


def func_318e2bac350c4a5e8d205a512393969e(points, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return res


def func_0e48bf375fe244aa8879c5b1e63af38a(points, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return i


def func_070f8c3f5c93474787bb81cba08191d4(points, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return x1


def func_0ccf4f79df7f4919a4652269bf76efed(points, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return x2


def func_722f89a4833f45b28abe1200a60fb2a8(points, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return aa


def func_194bdd853ce94c1698fc53523002a0ec(points, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return y2


def func_13a9ce4da4eb4e8f89d4c6bad51382e4(points, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return case_num


def func_d13eb23a3b0446129b76c98e22da8ba4(points, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return A


def func_777f106396fb4a0686621b5758776a54(points, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return sign


def func_88f41abb56874e55b6c08347fff1990c(points, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return G


def func_02ea85ddbf5946ab905fe0b54df6a4d5(points, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return y1


def func_90153208682b4e40ae75e1f4c5111b96(points, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return frac


def func_63e02fd624c0450bbb8b584bc0800cd3(points, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return infile


def func_a7e01002efff45e2b410e66563020d6f(points, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return target


def func_c303b8b7e8134e528199d89a030bfbd5(points, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return h


def func_c5a80bff72b44fd3935e90d1410c4082(points, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return a


def func_24c4cddf2762425e98e893edc52150ed(points, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return m


def func_22f4a90a2f554985aee6c352140de334():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    return infile


def func_1b85f32893664dcd93c9aeb5567407ae():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    return points


def func_5f7dd4c55d9f439989cbd722c131700d():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    return lower


def func_07923220e1564a8f88ac5a36f57d0141():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    return G


def func_3e2aac9e867446b29f617540cc0703b5():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    return L


def func_476cbc8527b74cb1adf2929793c33f44():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    return W


def func_d121fa93013c4ec185828e3a476ef201():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    return U


def func_1d51f2af513f4101aece6c5183f6374e():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    return upper


def func_b363ba3d529d464e9bd08ed5249ae285():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    return i


def func_9d84b41ea4664c398c21e3a4ace33d63(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    return L


def func_e0595200be5a4ccf9014a38bb6755a1b(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    return points


def func_3814d44d01834b2ba7022671c1f057ad(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    return xs


def func_d3d0dd38b45d45918bb8159cc716d786(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    return lower


def func_0b120f15c4f543e381ee41470f1c79d0(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    return infile


def func_a2104bd145ea4686b9e1126738643a47(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    return i


def func_586fc4f4db454d038ca97391000e581d(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    return upper


def func_f4ed183dda434a17978447fc22696153(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    return U


def func_60a96b9acf30461ca6581ce5a5e7d743(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return xs


def func_b0c99b72fe6340b2a02c72c842894003(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return L


def func_37c9f1b5f0fd46b2ab9f4f786bce46f1(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return upper


def func_cb96ff07214d4054a19313c51bf8e17a(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return infile


def func_05a3a090ea5e479cbd9ac7ca652a7a71(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return i


def func_5c858aad3f034f40bf9fe65338c52da7(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return U


def func_58ae4f8e9fd646bca211ab05479d83cb(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return p


def func_28129868d61b452dbb6b045f0d9d8f4f(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return points


def func_2c0c837e646d4b32931ce2e78fc76bec(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return lower


def func_b0c7e5fda5ed467baff4ccda3e7502e6(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return upper


def func_5d8a9eff74f840c7bdf847bb35ddc2e4(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return i


def func_07d073c86444473da9f1f59a9d46db24(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return xs


def func_5c8b2a9e98854187a56270cd4e758a62(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return p


def func_0b9846869cfc4696a74220451478de08(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return infile


def func_ae32a9aee2c2496b87811c8aecc6f7f4(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return L


def func_4cc4a619b1bc4f7fb8de8de1e90c0e0d(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return points


def func_0db80a6ea85c4eaa89016c38ad1d7ba5(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return U


def func_04f8c606744241d4b322c90f12d220d7(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return lower


def func_608cf376f6d84428946a3578506ea422(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return infile


def func_c45dc06970004d5f8e19adc9ccf31400(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return i


def func_30ac54b1111042ef88bd64ef4b684999(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return p


def func_89c164e5f20948aa98baa45a6486fdba(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return xs


def func_cde7c16921f9449a899c1dc135c66bfd(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return U


def func_fa1363e7e10741a3a018031e0549debf(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return lower


def func_1fcea11c6fe04926ab9492388a1afb65(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return points


def func_cf62dc610e474ba8b33d239b2d026bf3(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return upper


def func_4f03197fb9824cf0b89cd6af21fa7232(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return p


def func_969aa1086bd84636974eb74914a9f2c5(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return points


def func_f58aaa5c8e6d4b1cbef0d33eb958e351(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return infile


def func_ba6019aaf10748829f0e8fe5a3ae6c8a(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return lower


def func_9693c001f30e4995802546ee89b77d51(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return xs


def func_583719aec1154ecc8ee03f6805eed4fa(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return upper


def func_dda43fc092434aa6af7883030e456aa4(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return infile


def func_37c5fd1007614783aebd73fd84458f37(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return points


def func_d4c409f64a8c4c20b0c6f7dfc8d6a493(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return x


def func_e9420bb93cd84391a49f72049143e3ad(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return upper


def func_23f40751a57d4852b479cdecb8ad4f61(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return lower


def func_0763fbb92312402e9b3799dbf6a3ffbf(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return xs


def func_bd74eeb4182e46aaa34452fcd9db5bc7(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return p


def func_871d167d102348298a25ddcd9fa4495b(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return upper


def func_29604449501d43e9a69af034935daac1(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return lower


def func_bbd5f7bba22b44508f13e1ca059a13f8(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return x


def func_062a3e8395dd4aeaaed29f72ce57c42b(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return A


def func_0e9d3fd2dec640b9a0de82efb3bd0fdf(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return infile


def func_ac87a46f5d1842eba17e9a8c9dea70b9(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return p


def func_a9e67c3d36794e629b40baeacf63236d(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return xs


def func_de172de5429d41cead3b055a8d0ce690(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return points


def func_e86658dc640246a49a25b898312c68fc(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return lower


def func_bb9ddecd4ca745dcbe49cf913a221a52(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return h


def func_fec85f89d17f4b81a8306124fc66462b(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return infile


def func_d11ee2115e984d47adc61c2cb82da305(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return aa


def func_6c2f3a421801424ebff0122855a3eedf(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return xs


def func_a2cd3b897b8b4351b2e9f3ded55ac743(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return upper


def func_e9c027f8795e4bbfa7334062d2421b12(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return x1


def func_c37e131560db45fcab2946bf5606526b(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return x


def func_1a13d1d557104146b33a2ba2f25832e6(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return p


def func_3e41ee6fe9374e9dbb2ecfa4e4dd79e8(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return x2


def func_418567327d824e2bb4ede2a69bfd5028(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return i


def func_ff456604c3f94f28a0366b2f90c18781(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return y1


def func_8002d6d6c1814fbc8d494e3e3b657d9d(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return A


def func_aedd93b15b7542c4b7ca07c54163d7dd(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return y2


def func_90e47325b56c4bf3a8d4fd6c9d7ecc61(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return a


def func_d6be0771c5c640b8aef1b50dfdee6c47(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return points


def func_d733ade9964648b3bca15e33f3d3d3c3(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return lower


def func_a05ae7be29bd4ad8917c2c6f4c3e122f(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return x2


def func_b0ffbcad86794627b76d45cb889bb375(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return y2


def func_37dd312fe89e42ba88fe44dd641cc197(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return aa


def func_d4fbb3954f2a4223b476ac40c9a2bd5f(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return y1


def func_caeb6dd1c44349c39a591501616cfc4a(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return i


def func_db49609572244165a3f83cfb914dcc6e(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return x


def func_ff57019889e546ca85ecc6f5a3db69cb(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return x1


def func_e48974f52398469cab23c3fc2d820200(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return res


def func_d273062253b64d5e8edc1f6b816af09b(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return upper


def func_33b86e8924e249df94ebd636944c7a85(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return xs


def func_eab831564fa4414cbb6f08fd86a15d83(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return infile


def func_58e00fe58bfc4d6793367787b822ea95(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return h


def func_a114c27e937c494cb88055a7690c6007(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return points


def func_e55d27cdf1bb454082e637c2a763ed91(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return a


def func_cd893b50bd784999ad5db8cc5748e4d4(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return A


def func_cc552d84bc7a4c50b58a7e6be58dab1c(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return a


def func_dd394354d2ab41368a6817301c04824f(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return x2


def func_4617b6f3324c4ac5b670a118dadeb8c1(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return aa


def func_601a1228aa7f40ae9e305ac5171c5524(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return sign


def func_e096dda6d09943f1911dab22adebd375(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return lower


def func_71ecdb9b954a4bf6a5a19278d303f21c(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return target


def func_7882182fcf134013bcc63a9adf5fb774(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return points


def func_52a64caf5acd49d58b56205ac9774088(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return h


def func_38939d9d0a35456989d3e1c35316e058(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return frac


def func_f7173a8592334ba6b5cad25063d3dda2(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return m


def func_621b19ed90144bc896bde6e015d2e824(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return xs


def func_e84dfafd5db542f1babcdbfc0982b2be(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return x


def func_a86c18667037448b9e085d0b102ff7a5(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return infile


def func_27feeee5cea244279ee6e97837d3ab82(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return i


def func_ab04045b623742f3a3131b10d4a7a102(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return delta


def func_c370044ba6de4fab88a94b6a2d2853ab(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return G


def func_3eae5e66409b4cb58cdadbe56654f2c4(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return x1


def func_5245c3e97c5e40afa3d4659d7d4a49f3(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return y2


def func_de2f6e8929e24beb8f52336f024fb4f9(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return upper


def func_34a1f3d566274ed5b104a73749109905(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return res


def func_31049e5673c7410591957aeda291ec6c(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return A


def func_11de41cf574e442c846aa0f4e06037a0(xs, upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return y1


def func_22fef4087ff440388260d9f40d23dd10(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return upper


def func_813549d2b64e4f98af3bdaf524b65cdd(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return frac


def func_b00a1ac2b1424970a5d4a8c862d28ca3(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return xs


def func_6f31cbe57dea47d5b5b20e98c22487e2(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return x2


def func_c08c5c650e5342cf91f1eab17b9d18ae(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return sign


def func_c547087a676b486e895157b5aa3c2e01(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return i


def func_a8f41b8ead1a4c559be4d4c118242c9b(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return A


def func_71163b2b182a4e62a40bb64a13ae018c(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return G


def func_ac7477fbfd4d4c6b9be52763c4175186(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return aa


def func_ce7587735e654bcdacb53af0ed406572(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return case_num


def func_0c44578cc6e744b2a45d1b0be31e23f1(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return points


def func_029d42806c0e48168791fe2922f25d1f(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return x1


def func_64fb3b27d7dc4db2a7bd65375765205d(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return infile


def func_2c6c8cd2f2f144d3894b708766aa59a3(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return target


def func_0eb5709f8af7427288658fb938bcae2d(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return delta


def func_ba354e08ddc34be5bcdd12a29ec88728(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return y1


def func_bc8a695401f64229a89e5c7702bfd970(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return x


def func_47383f1e0f7d47698033d2337e9ea45d(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return m


def func_4773b2d5e0554f16a5650e9639786db7(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return h


def func_e351dea8f5f241be95128b2c5453cdfa(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return lower


def func_3f1e6daafa464fcfb0127c7a851294d3(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return a


def func_41e4238f039f4a5d8cc5e089fce82fd9(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return y2


def func_2d2da23508284cbc89a3d4ec5a52062c(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return res


def func_31b7a98916be4dbb9d7048ee29184350():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    return i


def func_8edc8d4d70bd40b39481b1c8b4ef9742():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    return W


def func_7b5c3537cedb4e11a7c9aeb34abb9eb9():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    return L


def func_8e2045efe1f44b83be4d0d207d650b03():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    return upper


def func_6c5147035f254319b25a9759c91234da():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    return xs


def func_e2a9592ac03246149abaa95840194389():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    return G


def func_7f27f38988444b10ba9810466198d0f5():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    return points


def func_6cb4610a85e0428e93eb18c3a6ebf666():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    return lower


def func_1586c4f4b0834565ad0f6ffe614a2890():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    return U


def func_d054ddda2b7f455fb9bade8f905ab13d():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    return infile


def func_35358f76f83040f1863a3f09177c8c42(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return infile


def func_f3141c56ec8542b0977cff32c5ce34c4(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return points


def func_a7d5e2dfe90c42bb81c75a89bffc6d4e(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return lower


def func_5eb842b66f544dd38869ef38f13fb1c8(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return U


def func_8597dd16d1e5410a853345210f464996(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return upper


def func_49d6470846964cc18be38768e0aec449(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return L


def func_9c8d9ca3b04140f8909d2aea75317e59(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return xs


def func_fde09118ad2044729cf8b6b882c88cc1(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return p


def func_e8564ad6b0284267857517d129cf30ab(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return i


def func_fadc9ccdc5db4bd2a97ffd0592abb1c6(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return upper


def func_70aa76052b7b41d19ed328e647a8fa11(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return lower


def func_8d095b4c8c334afabdedddb0ba963f38(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return infile


def func_358a1f117f814ae5b1b8bce2d7f4f265(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return xs


def func_36a975aec5b34a01bb27e9311c4070d7(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return points


def func_21c6e5ddb0794d61ad0dcbe598954218(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return U


def func_7cf9c274a6d5490b980df16214699dd7(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return i


def func_121740a4bb934b2d9b10bf915fa8b552(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return L


def func_3d6742c0165845f8830ca2dc45614beb(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return p


def func_a2a38a8a294341ceb2f9476029c30441(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return points


def func_4bb62ce0c8394a2d8cd13504661609bb(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return i


def func_6e4fdcea06244eb0ad0b043ab288ee95(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return xs


def func_dc52a5e308dd479b867878c233fd0e49(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return U


def func_5a34693561e647cf83f06153a433d597(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return p


def func_31dc40f9378d43f58c2af228f319279a(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return lower


def func_44e957ccf4764effb6cbcbe655928ffe(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return L


def func_87cdd021d01e463ab65a58330f16e3c4(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return infile


def func_3e6d6f792e2341bfbdd92b5d206def59(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return upper


def func_585106c6bb4c4edc9f96e0ad44039726(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return U


def func_016dc2d533ab4fd58c661cb8e926d58a(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return p


def func_9c8fa6b8f2b341a1a798d25a3a7d60fa(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return lower


def func_c008b83ae2d744d6b970711b85a2a309(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return infile


def func_231a99f22af44048bb538cf206e16009(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return xs


def func_db1b4f5ad6184b20bab78e0108c52c59(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return upper


def func_cd8a92339a7b43cba74c946e2e33227c(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return points


def func_3fd1d602ffb34ea495f046d74c92b59d(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return i


def func_4faf4ba7ae75452db80e9240717efa4e(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return infile


def func_d745c51954be42838ce64b0ded264e51(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return xs


def func_6de2a93079314c25ba3b24f4ec5a03bc(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return points


def func_669190d30bb846178e8b717a4901b656(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return upper


def func_65fe76b7ebc64b3389676e9757ced7d4(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return lower


def func_d24bb0863dce40c2acf89eb39ca94216(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return x


def func_a508a1b4531243c1a368935cd4f978d7(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return p


def func_95e28900d0684c3196e3e46d9f15819f(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return points


def func_78a9040ed0cd4672b8da99b78ebc1905(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return infile


def func_4880cdfd03df424e87f799fcc148d72c(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return upper


def func_da1336834da24271a1bda1a9ba773387(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return lower


def func_cf4f51a3670c4a049be308791ba36cdf(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return x


def func_33ea697c939c402db64a87723b7b2cf9(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return xs


def func_2707272694824378a51f8db2203d9e19(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return A


def func_1222e5d13dc1442298ad8d7a79d5a285(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return p


def func_3de1a02d58c04ab2a4f9748b1c3ee87a(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return points


def func_448cb2b538c849e9910be3935b66894f(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return x2


def func_69f12a127e32403abf0de2684b3b7b96(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return upper


def func_a42982c4f12c4acd9113d7cf0bbd4628(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return y1


def func_e6375c2183214252b0f9b17197c43974(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return x


def func_aa69e674091f46bbbd2c5c3d27130d7c(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return lower


def func_cf23fc0b40a44f69af6c823657ac11da(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return infile


def func_ca480249bfb9472e96e02e6d884bc4d1(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return xs


def func_cdb6973a08794a00b4928d8dbbf7425d(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return h


def func_0cd15808c9404b008d7d6952bd3036ca(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return a


def func_626aeeb2ee7e4f039c917bb62013595a(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return x1


def func_e37a9b3732ca46aea479164af369e78e(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return aa


def func_e6b43babffdb4043ad27e256f357e1b5(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return A


def func_9a1d851f2d334a199d61994737be9500(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return i


def func_8e72b0dcde304013984bb2ac90f16737(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return p


def func_fd2b3e54ebea4caca16d973d0ea4cfb1(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return y2


def func_aa735cb0a0f346b6bf6a5f82f258c26a(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return p


def func_a93c6a1e9b5c4135b17c0ed955151807(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return upper


def func_7f05bf18e1ae4add8adf85d13d38dc41(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return A


def func_05634ff650b04fbdbdbeb82091fd1d16(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return y1


def func_fa6243bed28443bea3f1021b3d23e2fc(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return x1


def func_fddcb04d28644dd1a5e6ba72eadf347f(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return points


def func_75eaa30efcf94707a0470fd64d2769fb(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return y2


def func_e61ea28a4664465db50ebebc48a9c7b9(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return x


def func_0825aed34cc44c3f8637b203e8d670e9(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return res


def func_3353a91fee054e78ad88a8074645bb2e(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return xs


def func_470dfee5f26244e897c05d3509e878a6(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return a


def func_971c47919b74407983d43a8e2949f078(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return h


def func_7f83afd9a1b846059f31f9fd63379534(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return aa


def func_3a2dbd1411e945e3b9272ca1af038a25(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return x2


def func_791ec9ed8f0d455cb995e01a4ffd90d2(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return infile


def func_458ead75d4f94024bd4aec1a95f8d1c6(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return i


def func_0a8390a0302740fdb85a8651cb790006(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return lower


def func_2b01654f97f346938606228ea0ae9616(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return aa


def func_83ca37f24e614bfe8e3e9070152111a9(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return upper


def func_db8b19532657491f950ef289063f7830(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return infile


def func_eb89775aadb04e7ca7f34d264c46314b(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return i


def func_a17ec9837cac4ab5aaf962e95d547863(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return res


def func_85a2c671117d47ab9169acc36c62b71f(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return target


def func_4cc4318f91994477b3d8e87b1d0111ad(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return y1


def func_6fec95ec26e44336a30a46bff4f59432(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return x


def func_9f4d2ac85d94433c8145fe6b56527894(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return sign


def func_0cc1b42cd74144dea17ed7a581792cf6(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return x1


def func_47ba1dfeae8e4c1a95cc233443e9e0ed(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return h


def func_6627b2978afa4ce3ba95444163551415(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return lower


def func_beced5fef577489582da2fa845240bfb(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return A


def func_d01b53eb812c4a45bb76cc70a558e875(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return G


def func_d3dff847d6694806b7db583167499116(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return xs


def func_05ae6e67dd3f43c4bc8282f63e950423(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return a


def func_e54b64583b0248fbad93d0dab3771aee(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return points


def func_15cf90de194445efa3d0739bbb80f812(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return frac


def func_c008b623b87149d3b2d60795ccb4d11f(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return y2


def func_2e5fc6c14ee848979744fa47efbf1b1a(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return delta


def func_f9555a3c912045d5bd4b7fee3fdded4b(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return x2


def func_1ff4df7d054643d2b3436b86e23d92d2(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return m


def func_3e800ab2088f44ff8401a41f23136fb8(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return x


def func_10e72c107082450db865e7f26a1917ef(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return sign


def func_ab844fcc46454e57929d974f7217b2af(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return points


def func_5564131663a841de886ae4f1f86be955(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return res


def func_c1999090705c4d43a8f545b89d453a79(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return infile


def func_5f87d299d3904b4b994d48a6bf1dbe5e(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return lower


def func_1fb8ebcf350342108eac546a27d89c10(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return a


def func_ddbbec59bbfe4201afb57650f3056608(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return xs


def func_3fcd1e2c92aa45428c34179387020076(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return target


def func_c813bb0ede994bf0889ea943ef5f69f2(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return upper


def func_92eee0794d6f42cfbf710f7e5b8983ef(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return aa


def func_3fe534b7b11944a3babddc5ab236cbf5(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return G


def func_86599e36833c4fe280edf4ac727fcf85(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return y2


def func_c8018a03500640d5b48c21a5896930ca(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return A


def func_5aea44f9bce840e7ba5055707e8220c9(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return x2


def func_d70332e804f640d390a3fcec8083fee1(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return frac


def func_cbe6cf105bb74754bb01f1bae03291c2(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return x1


def func_923f961f1f1b42c7aa8c9219f67cdc11(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return case_num


def func_c53cc3dbb9e7482c80a6783866c0ab5a(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return delta


def func_69facd595258497085cedda70c9ddca6(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return i


def func_d583550b48254d8189c8248e6453aeb0(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return y1


def func_87bc8db75eeb4d8fb63dca0fe0a3aa55(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return h


def func_431e238bb3fb41fd8630d7efc7690af4(xs, upper, points, case_num, lower, G
    ):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return m


def func_5585b579820540ae86ac8c3bb6b8c31a():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return U


def func_4b7efa0281b345d9ac53f63a886a8f30():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return points


def func_a2695ad571e14b67908e08492ff0660f():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return lower


def func_451a575147934a738a576558d5754ab2():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return L


def func_2df0b332fd624c4a82b3912af9c77a87():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return xs


def func_abbf42a1542b48ada12a34d4e0fdd343():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return G


def func_818d0db2af7049cdaa8c81e8f9059fea():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return W


def func_59351b7d427a4771b9fd4b0c06f54704():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return p


def func_f24237989fd14f87b41bce7dc4a771f0():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return i


def func_dcd988a638b14cc4920f2d8af806d8c8():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return upper


def func_d13eb23ffae4471ca18fa6dba739d8ca():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    return infile


def func_b3925b8c0a3541e08ce94a49fa299a86(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return i


def func_f832fb265b734dc8ad928eee2ff84935(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return U


def func_364d87a95479431d8a7c552a90b9a435(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return points


def func_1d527c7482674f93925d674d9b175062(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return xs


def func_96a60939b1be4f4b923a06f4c2b3cd68(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return infile


def func_e0012ae366234dcf89d2d397403db954(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return lower


def func_c114d8a0874e48c2baed2ec08408c71a(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return upper


def func_0ae0f6f5d3d24976a7fa5f18360dd7c0(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return L


def func_f609950fe98d48bc9b063cf41172b748(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return p


def func_42a7fa9c720c4c2fa9226b4a77848631(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return lower


def func_9f0e83e63a554a88a8c07d86814fc87d(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return xs


def func_cfb7178d5c8243b3a86a50a8ec75796e(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return L


def func_65017a654b4842299181f8959ea7e5bf(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return upper


def func_4ec0797908d944a8816243f145de24db(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return i


def func_a22d741536c3445aa6cc092348a97890(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return p


def func_a71f16f60dfb465a8aa90c6dc7aaea55(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return U


def func_936346d1408848c8b32188847cc74d82(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return infile


def func_f5a613dda07c4327b13f04d1870de4f0(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return points


def func_bf4fa20e46aa4bf28f201ecfca493c47(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return infile


def func_8d8f5122ab4f43b2acf8b1b22918fc59(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return points


def func_6e5217bdd8dd4efcaf83934d1450f071(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return p


def func_67cc6be93f58432eb34175b2d010b540(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return i


def func_0880e4a70e7344848092da13f6dbb609(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return L


def func_4102a777036b48918a500cd6a1eaacdc(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return xs


def func_86459a2c9de44b85accc964325ebc560(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return lower


def func_25f1d2b62a884073b0d591634269c375(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return upper


def func_aef58a2a4f1648c2b5c69c739cf19e5f(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return U


def func_8d2dc3f05e9142a4adddf3b2ef223f71(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return U


def func_ddc5535a88c2404c83a13cac34ee71ea(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return upper


def func_bd07523b69ab47019434aabc72da59fc(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return p


def func_e9034ff2a94e4a63b4271566fedd7f8b(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return infile


def func_06e8c40c0d144d4a9e7b2031e42c50dc(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return xs


def func_27d4e288d7af4f5abf6d65647281ab4f(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return points


def func_388242f7ebd844aeb18c3adfc82f8c4c(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return lower


def func_b3768c0ee2b84964820e8576e96569d1(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return i


def func_45be23d9594f47b7a0a1759082cd8d82(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return x


def func_0582f21cc2864701b757fdb316bc3a1d(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return upper


def func_e854df6f828a4fd495e258613c180706(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return points


def func_a9c8622bf1b34ccfb52b5bfc4d1ff2ce(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return A


def func_f273343b083a4c3bab7ef1e818a5b75b(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return xs


def func_a2b7519c59a44fdf87340b96618ef298(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return x


def func_23b83bc1e7e44fb389dc21d542f5c7f0(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return p


def func_01f3794cd9e14179a78dd78dd37543a6(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return lower


def func_f2e9a1859fff4e59841369eb22de9c1e(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return infile


def func_db9d83562dc0441ab75a455e076896a5(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return aa


def func_ca5d449e380c4a58af065ca65505f243(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return upper


def func_bdc82ac3752e40428da0bf051137c085(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return y2


def func_26979e89e4a342ca9a9856ad76173654(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return x1


def func_8b4bec4e5ecd477188b12c86967b0055(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return x2


def func_7030c31232d741f48a7ca8c62b674e22(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return y1


def func_228e4e29aac54831b29b67045e710c4e(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return a


def func_f00a2103bd15484386a03727b6bd1d91(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return xs


def func_289ffccfff6944dab92970328e441037(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return infile


def func_a7786744c71147f584ac99e67b5f0785(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return points


def func_348753babc084fd79e10557f46b15a27(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return A


def func_52d9eccd4bd54c1b801e70e90cbe39d6(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return x


def func_26a44ecaf0224463980547212ef1f698(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return lower


def func_2437e3201a8f434ebe55562757356248(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return h


def func_a4ae8cb00c5c429c8e5a40264d4e7b77(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return i


def func_5bc7bc2442104f798bd1c28f7489cd72(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return p


def func_f4c8cbf713dd4aa3be331e4335907b84(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return i


def func_b5f1e178531a4b749f3c6d6815157cf0(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return x2


def func_b0b8b93f96034704981bc9a570b013dd(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return a


def func_d85ff7856d804563a9f83864ec2c7967(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return x


def func_2327d77197eb4355a44b9d44821431c7(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return p


def func_1be0fc87b9c84b19a117686b0ccf20b9(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return points


def func_7c56a2eb85e147ba95378939897d82d3(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return aa


def func_7bd7167732ec4fd183bbb6a41cdc09f0(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return infile


def func_dbbae726c6d54a5cae89b754a4851766(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return xs


def func_4c191a615b8a4cd386c42df56c6b37d7(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return y1


def func_47497717c3d44c7faecbcdfc881b41b6(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return res


def func_b224352c9b054e1296d93508901b02e2(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return lower


def func_5bf9a809a9524cd395d2d6e040892315(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return x1


def func_93c94f36916045149f0e518f3d9cee9d(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return y2


def func_44713e771031417c9da9efe9993ce772(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return upper


def func_7fd3457911b942a9a42a0e0e35386c67(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return A


def func_f4bf4cafe1d847f0b69386044358a03a(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return h


def func_7f3f9787f87546a2a225df08c3e24f83(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return target


def func_dffd800852c3408bb21a48ed8d731b87(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return i


def func_3fa2f12b7aa046ebb563a05d8d13682a(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return y1


def func_a0cb901a71724649ac5a01ad6e13fe24(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return x


def func_efe43ca6ce844471895be1a871127714(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return a


def func_34151680aa414a5ab72c3f5a4026ad2b(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return h


def func_0c272f62b5a2439ebb5fad804a7c4ff5(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return sign


def func_fca037fb7adb4d4897dc977a4f56d0fb(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return m


def func_90278fcdb8264d23aecfaf1744e73259(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return G


def func_1272185dcdb745ca9fe9daa78beb196e(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return infile


def func_a98adc4c2fe444d99a569a2368a81cc9(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return p


def func_bfec1ae4d1004f4d928b06b8f9672acf(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return A


def func_a388dbf1efc0414d9f00c2717cfa3026(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return lower


def func_d788074b2b0646d9a76401c6deb99f65(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return x2


def func_9096f4a05fc04a40a9f6610a54dcb98a(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return res


def func_1d07a6e72669404fb73d7ca6420d6ee9(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return xs


def func_8eec12d2dfa9467ea9a2e76fd95fdaae(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return delta


def func_29b962db387148ccac2cede3cd639b75(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return aa


def func_096bb9ce380a495a82b81941d9f980aa(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return upper


def func_22ca062d8dcc4465b9a61797f9296e6a(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return frac


def func_852ebf7f8a574e1eb9c17688a51481b8(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return points


def func_9429b1e3d5e74a699a5f1a9c0d48a576(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return y2


def func_70f1c6e730c545f6a522c0293a3933c0(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return x1


def func_d4020906c6ea4b5283825d40177a6ec9(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return y1


def func_8e4e7202b46648b9b48a659935f61d30(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return xs


def func_735d11a7e55d4337a749131d0e9860f4(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return x


def func_bae0a59d5ccd47ab925ce73179d19d8a(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return infile


def func_4171f888a728402daf403826219875a6(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return case_num


def func_8b3b0372f9b549c99c53685a02d851b8(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return lower


def func_e7d505baad1144fe9f3433f605ff1ad4(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return i


def func_7a0b8127fcac4e20bf26f4916becf11e(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return x1


def func_9f3bcbf0026b4a598dc0f6094928fd94(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return upper


def func_32bc2a9bc32f4e30b6bac527e05f589e(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return A


def func_8ea56b2bff814773a049e8f954ff5e34(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return m


def func_f34067f13a5c4a87ba670a3f05f3579f(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return x2


def func_7f638683d91e4b1e9b8603f7ecf47f99(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return frac


def func_c75d77b91a09418fa4a50be440a0c5d3(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return y2


def func_f8de6903eb954a54b1855962665562cc(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return a


def func_80dcbaedaa9148ecbcf8e3d9c8e3bed7(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return res


def func_5dc08c8525d64120a6e5c8b9dd8cc636(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return delta


def func_c08a1f6705c540f681bccdbc0113ac3c(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return G


def func_448df8b98e6e4d1e8c01c1d22f97645a(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return points


def func_505ac38f8c4c48cd942dbf424d1841b5(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return target


def func_fba9630d40044576afc89ad3656324d5(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return h


def func_c485ad252d014cb39cf64b60846995b6(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return aa


def func_62f8a35990134a3d8747449472dd7cf4(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return sign


def func_47209f5abe0c49eeb7f22239d4a4c905():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return infile


def func_b8166cfd841746d0b38b18a14f491776():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return i


def func_c3f5576a0ec1405b863b1913b85f784f():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return lower


def func_aff10d4dddd64a728ac139417ea11e71():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return W


def func_c98074e32ed7441d9232040cf288265b():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return p


def func_84eca032e4ad445386f13c07bb69b21c():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return U


def func_bdbe55fea71a461fa0e2935cfc44b849():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return G


def func_9d3e408293454731b203599040e32017():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return L


def func_a6d67d9599ae484f80fd8de8361602f5():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return points


def func_a3c07ffba09b4d0c9cd6e18f40eb7a12():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return upper


def func_679b14035e0c4aaf9d73773e7bbb8cc9():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    return xs


def func_86bb340100074c229a446fde79120ad1(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return U


def func_b2b99b484c67410680cc214b9706a64f(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return upper


def func_04fc7828031e47228eed4d123b6c8e87(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return lower


def func_5f0d621f982a445ea4df829848acbf48(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return points


def func_2efcbbfb86ef4e43a86c1ceb2a979bbb(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return p


def func_883f92d5f50e487e9a482a61658670a7(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return L


def func_c5806272200d497885675e77b635cbfe(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return infile


def func_9d86032559544e2b8e2ec9dd30d086cf(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return i


def func_7c368881588a4b26b23d0a6f0468169f(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return xs


def func_ad06b1de1c0b43ee8af49c1bd0e7c86a(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return infile


def func_ab55010c60e74567888e853e47c78ae2(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return L


def func_c668fdcd03624b49b902b0d93abeb82f(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return U


def func_eba9d78abe41481399a923b17e2f3f3d(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return i


def func_5f9929d7a20042e796444a3f78c280b3(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return lower


def func_98fc95304a1a481780ce56a64f980f1f(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return upper


def func_a11e8e4c13a94ef38e5e06a8b3e15ced(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return p


def func_9031669bbbff4436b7a8a39c22c56bce(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return xs


def func_ef020237d60d42c09bc92556bf14a253(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return points


def func_2521054fbee545c08c7a7cea19ac3b2b(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return U


def func_9cc8f72e835045a2b75eb9eb990723ff(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return xs


def func_63ebc3a8a6e9483da99f83f6c102100c(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return i


def func_37fd2c1e6e8b4b44b82d10b92bde3ff8(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return x


def func_91d4edc52c2548fabd17be06ff607c2d(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return infile


def func_cf77a6db7c714d81842f4bc55e376e11(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return points


def func_b0a7187cd05741158e77f36e6ff6df9c(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return lower


def func_4c646879c8974eb48511ee35a105b0e2(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return L


def func_5f19b820da7041fc9994b2167ddac92d(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return upper


def func_98490a0d9ae940dab718674f418d9d03(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return p


def func_cca6a54dab4e48c18d0980bd7326a279(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return x


def func_e6fc393a6c2140b9baeefcca332cd5a6(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return U


def func_1311d316979646fc963e4c89f3d114b2(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return upper


def func_fa014389b84848ab9654a46f3e5b6e16(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return points


def func_30b1e4a621db4812a79009a069836e8d(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return A


def func_2c40a6c472b04891a07288e9622617a0(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return i


def func_a6ddf85dd6664a19add60e1bdd021dd1(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return xs


def func_9f627dada7ad4a2096b675a41dfd6661(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return p


def func_ee2315625369423ea0d9c2e00b373c67(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return lower


def func_ff0c66bdd4c34823a0eb649630291860(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return infile


def func_e5c8279474b2422abd4a31d5b0cc8ed2(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return x1


def func_4d9b63637cee45e59e70a5ed199fd867(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return xs


def func_2abd221c8b684923834b9e94bd3bc7c0(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return h


def func_0e265984848441458beac48b64d32f5f(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return a


def func_2f1dbefc564f47f099a6779112f16b1c(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return points


def func_9b94de34660e4870b0b0513072273b18(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return lower


def func_005ee431cc47469490ececaa05aeae07(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return x


def func_e5222c2586994d4eaf7701be2a557d67(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return A


def func_758c5f672f7843d8b761cafd655d7411(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return y1


def func_585e5350a58e4cd79d765bd9db40e0c7(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return aa


def func_ac4616bda5894d30b380d027c5b169ec(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return i


def func_5d9bcbad15de421ba5ee5d153465d9c7(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return infile


def func_c44fa27a91724356a2759cb9ddd02718(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return upper


def func_01c881b8a5714b968cf835acc8af0c69(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return p


def func_f25a2beb949747f889957673af90ebce(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return y2


def func_c3182b3ebb2443f09c6bfb6e8fdd43a1(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return x2


def func_40cdcbeec2374c75865a33b330bcc7a4(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return A


def func_0a09c5950d344bd4997f98fb51e6f110(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return y2


def func_998e03f6dd3c40f8a9f6a4aa41b2253a(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return upper


def func_5d850637b12744f89072ef7360572666(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return lower


def func_05ebb35c9da34f63a138db95fe6f23c6(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return y1


def func_c4ced6b224944ba0865c557bc30d2d00(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return x1


def func_5452fce5c05b4fce8ff0819dafb1e889(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return aa


def func_06582d4bf97f428ba7d69c13d89b6ef4(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return xs


def func_635f92e89ca5430d86a561f6214333d5(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return x2


def func_773e68b0cab54dce93d0733b16a3d736(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return p


def func_c962538f4d0a48c198111cdaf1ae87ae(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return x


def func_f366538c0d51452dad15cf7953b310f7(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return res


def func_5b49d94002e547df85470868cf17500f(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return infile


def func_117679f2a91d4ca3b187f7ac97ccb5c7(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return points


def func_6f1b967f7b2a46d8a21cd89eed85ce32(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return a


def func_b7c905901aa24993a2ba39562d5c70c6(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return i


def func_5e6c50ae7316455a9c575ffc0f43f3b1(upper, points, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return h


def func_12f29c7868d04edca26e8537f0193b4f(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return res


def func_e78d768d35a849d79b0ebf1776337a16(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return G


def func_a1d51f34a75d4f1aa95f43fae92331e1(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return x2


def func_32bea528a2674c36800dc368d0e032f7(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return p


def func_c7f3c9fd4c5c4f45b864ef016374b1ca(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return frac


def func_7c565a22f9a9487e9ff53cd27b2254f6(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return y2


def func_4b5a64724c1c40088eef6ff9d1d80c30(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return sign


def func_4d313fe1fa9b4e91acaa500e4e756fbd(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return x


def func_ea528406f78341e1a2d43099fefec8c5(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return lower


def func_b0d303eaa1c34e568d4da733981a4ea9(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return delta


def func_5fe65dd2668340e68da493d1ce79c0ca(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return xs


def func_72c6dfd2dc6c45b4832d5b6e6efc55ee(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return m


def func_477a813cab264f4e8678b0f75dc4e4af(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return target


def func_0721ae5d2ec149e8ae1f8bc4b2c4e9d1(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return x1


def func_5dd4ac403fc14e4a8f1397cde5fd2950(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return a


def func_bc6cfe7890ee4246b4c6edd6a03d3006(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return aa


def func_648fa3ac134146c292257f067c7044ff(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return infile


def func_cdd46e76157e443f853bab9d34405edd(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return A


def func_19a3bdb220a94fa5b9872ea7408ff920(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return points


def func_665bf87dbc3a41a589d6af6b0f49d7e7(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return y1


def func_5091e6935d3349599a5462e2b6407539(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return upper


def func_20bd861b567a4d8ea4d8e0be68acf1a7(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return i


def func_8f66f9e0a68b4469966ddbc45889d6a0(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return h


def func_fce68b4c1d76401fabb1359e7ccf074f(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return y2


def func_422fad4d46c041a1aaf10a6d5fdbe060(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return x1


def func_b1972357bdd742b880375f17ad4ba547(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return case_num


def func_6d83df13afa94c1183a8a6f24cd05c80(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return points


def func_66491f7a578f42a493d0ce7440aa1664(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return m


def func_487e7c02f2c24850ac93865b59decb35(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return x


def func_6c0ff726512b4a66823cb0bc458ae6dd(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return a


def func_0bb0d4cba6074371ab74b0c0e97361e7(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return h


def func_630b6a39447547c2b21ec79eb0f1d582(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return res


def func_b9ebd89cd36b486782dee4fac45db127(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return G


def func_a1d0d05c7d284b7ca792a15c63fa7e4b(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return y1


def func_0f5f448cdd8a441d852538975cc2f184(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return infile


def func_2c77c0c0ccde4048b60079553dea3558(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return x2


def func_d6a3e24dd1744e9da1b982e9dfde1be8(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return target


def func_8154f53132d445a88d95dedef3abeeb1(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return p


def func_9c8c473789274342b32861bd29a98340(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return aa


def func_c33d3dfd88074c7ab0d8ab497d4a8448(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return sign


def func_043a8868f6704c41a33c71e90e0fe531(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return delta


def func_6941000708324d828d96a728f4ac4a9c(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return xs


def func_30d09cd08f7b4f07bd4bd0bf5a2a428a(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return A


def func_4d62afdecfbf412e9bd3196ce730f52a(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return i


def func_71780758d377413f96bd4ae6893e7e1d(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return frac


def func_b26d5d7f951245a99be2abe360385614(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return lower


def func_c9c3bee369e047a38d8e2694d7ace143(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return upper


def func_a0629a97cc9244ebbcef2736b3e245dd():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return upper


def func_072ee396c1634546a12f6e03f8f4151a():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return points


def func_df87ad0d00534d49996f84313108beac():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return W


def func_cb69a318af6f4df89d2da0db60c6d98c():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return lower


def func_f1fabeb05fa9480f8d1abea5237fe536():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return p


def func_1953266e938e418095c03e8276ba5a07():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return G


def func_47dd9fca81644089935a02f8f7273470():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return U


def func_dfdbade98f544a68a48b1f0059d482e7():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return xs


def func_bc19a10f74fa4e06b511e3d77d854178():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return L


def func_42f4b768ed4d481dbee7dc7756c8f61f():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return infile


def func_7a899b5f3e4a47ef81cda018b23128d4():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    return i


def func_02b9a826894146f98c17c5f971875fb7(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return L


def func_983c838d0a134301af9e0c4412184529(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return upper


def func_80d092d15ada4305bc01ce8722c75fa2(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return points


def func_386dad6f194f4800b157542f09d9a97f(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return U


def func_f03b2508c4be484292bb9fd0fc0548fa(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return lower


def func_555ef6404da7470180effd13af1af0b9(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return p


def func_b403cc1d7a0548198c3b132f1116cbe2(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return infile


def func_4b96793c141b4be8bf3c2f8343c4b3a0(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return xs


def func_84e4f631d177482bab1b39ade8714002(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return i


def func_117cdf42e20448e09a77f34586014b65(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return points


def func_6a0f4af6e99240368eda6f2877547807(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return infile


def func_f6762bf013d140739afb2edef7a5719f(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return U


def func_9538361ffc5c443889900116298bd64e(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return x


def func_89e14c8ebf154180b1ab23701f47a1ba(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return lower


def func_e3e1ceb3cec74a458bdea5fdc3f3a219(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return xs


def func_237160c297cd475c8d3fff3e5e0684c5(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return upper


def func_94375105dadd4d949466e3c5942b2058(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return p


def func_d826f8d19d044a64b972ced37773939a(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return i


def func_1d3e48c907d844718ada49817baf73c8(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return L


def func_d8fbe456ab074cdf8940335249851fca(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return xs


def func_3c8c0f690c084ccb879209a44863fd76(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return x


def func_e21a2058795943338da99831c5914332(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return lower


def func_4b7b27ce4e53462d8f46d87bb7ff5e4b(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return L


def func_14e2a15626e94e35ac7101f94db966f3(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return upper


def func_125d0b750ebc4cb4b12519f86751b388(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return i


def func_d5b75d3638e64e1a8735af7dbdc40087(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return p


def func_6376374cc6e44d9a95e0e020fd20c28d(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return points


def func_11026334e4d148d2bc396e002869af68(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return infile


def func_40e72725c65b404295f8db104bc7ce4c(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return U


def func_c8b7e33662824f4496fc0c679f03d903(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return A


def func_3168602846bc47eb99bfebbcbe464063(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return A


def func_6b787ec3303c4052a6d93db9a81f4806(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return xs


def func_b17ea65f8e214ecc9263714687af4223(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return aa


def func_3a213626ac3e4d5ca61364b75de2fe1b(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return U


def func_0094f35e06b34e069d396816a6487cd2(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return x2


def func_9d738f4b1cc04b6ba9869caee5f6ef42(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return h


def func_b86f8c5543504fe4a7a589f6ff7b7540(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return x


def func_581305adabed408da2eff0a7a270c4b9(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return y2


def func_90ff7d9396c5426f8214d0bb5ff414bb(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return lower


def func_ca2c43375a8c48748c56d013b0562613(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return x1


def func_8ab47777e8d745c8912ad957f0e5bbc4(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return y1


def func_c55cc377fdeb48cfae72b792e2498c76(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return a


def func_e41a84eef36a4a89ba385946a809d35b(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return infile


def func_729f151a34fd4cf1a0ac552e0c8bb3bd(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return upper


def func_59552c12911443ab87f324440ede6124(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return i


def func_0db982deacd64e84b7db91d502c8fd09(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return p


def func_ec2b3012a4f14d51b4aa7f4742d7179b(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return points


def func_ee9f890e733b4fad8b78acddc4f54c85(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return i


def func_18fb0f55cd9d46c1898808c3b727e59b(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return xs


def func_ab6642e8f2ec480292716456b74955e1(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return y1


def func_0098c2bfb63e4897889f9543abb4a0d4(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return points


def func_d07d7cb1d468431ba6d0173b03bc5a54(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return infile


def func_0db17150ee5e46f58703dab279df2b15(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return h


def func_afc2d0ce492447ec96753c74f5a795f2(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return x2


def func_b41111ea52e347069290f14a16bb097e(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return upper


def func_517dbd27ed564acca12ce9f08a37d013(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return y2


def func_3458787150e244368f06f6020100a29b(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return lower


def func_6ff81f868f48432b8e19b8dac6cfff85(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return a


def func_318158adde384136899bc2526d4cd32a(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return aa


def func_b6f0581a971c4ad69809711192f7b79c(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return x


def func_91b49cb45de54a96941ace83c7794881(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return A


def func_66381323490c474294e52352ece6b006(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return res


def func_caabb6cb6f6f415daf3d1f0bc29fd3ff(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return p


def func_89199ad3b87845ba87a0c2f5ae260677(upper, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return x1


def func_c31c9753bde84d709496101ed217768d(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return x


def func_ec44ab07d1804776a2f04bc233b29b71(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return infile


def func_902e6e35593d4f0585b732799cdc6cb8(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return upper


def func_4d931d28b1a94e4b97b9a90d37dc471b(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return frac


def func_3bbed06e974c4db4b12380a6f85c1246(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return y2


def func_85671937669d4bc4b8295f1b6f6e4496(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return aa


def func_b571dbc8fce647578fb2a1eaf45cf21c(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return xs


def func_3412c5df925a4d979f22062898944d61(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return delta


def func_60f796873c1a465eb9212e177222b491(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return a


def func_c31bf62ba16d45fc85f9c316b4fdbea4(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return i


def func_b6985142ee364354a5aad40c64add7c8(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return lower


def func_61fab29548c546d09fe9ff86bfb9792d(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return x2


def func_eb7f1ce0cb9b46b58e8c7fee37399673(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return x1


def func_2a3819e1b8fc42a3863e60f55c424d43(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return points


def func_33e01a6159194d41a41caca83d7c7cfe(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return y1


def func_e22b3bf44b284231a7f330868f31386f(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return G


def func_1b318cc37b5f4d2297fa6aaa31a8edfb(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return target


def func_3529b08eb3d046ccb853b8e70e25096b(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return A


def func_463b246d551743dd9a0ccc18fa563fc9(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return h


def func_1acc1ed1268845c483db2141713cbdd6(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return res


def func_7bb51c2a5e1c40948035c1c0304e0f50(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return m


def func_16b8a9c40f5f40d68fcc2de707689882(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return sign


def func_499bf976dab14f918d3407f3434d5424(upper, points, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return p


def func_57f9c1cd099e4d8292ee7ad9d99cc972(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return target


def func_c39d794e6a4f4517ab12e2aac378fbf0(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return A


def func_7d761342eb9b4557812fcf4aba12e762(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return y1


def func_1f8ba974f4ef48f5a7b923b37ed1c52b(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return delta


def func_870abb8d4a364c30a863d43b8915be1c(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return xs


def func_32e150290a2b42d9bd48f10a932ea59a(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return m


def func_2ba1adaf4016463db9eff1658f264709(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return infile


def func_7971b7c63a2c46ab8d8b4bfbd017b0b0(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return lower


def func_e065c3b8f8e14f5eb96b34b961bbc6aa(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return case_num


def func_9ed158a8ce9045b898e45ba5840a4ee3(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return frac


def func_0e21589f61e44c52ad89d602e8f8cbe6(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return x1


def func_a4c52f4ded264cef8b94f159cede25e2(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return a


def func_b188b4c11d324819b61e260f9c92e62f(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return x2


def func_352ca576e45a4de19b5afb93e61fd00a(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return x


def func_7a2c15cfb4694909936b77f77809a2b6(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return points


def func_1dd8eb3bd1ef49dbb6b206284901b1b7(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return aa


def func_170deb824ac747bc9e518a1e581fadf3(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return sign


def func_ca0fb913a1164f439d980c033b856d82(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return res


def func_8ede130857ca45d1bf7827a9ac2dc386(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return p


def func_e0943792c9044d5682cf11eb50826aee(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return h


def func_f9ea0f289fb24a9186d722cf4b600255(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return upper


def func_c12f9465ab4245d4af6807fd10851834(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return y2


def func_d63afa761fe546abab08d0cd44eab334(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return G


def func_3661563d526a4380bbcc48ff245d59f6(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return i


def func_57d72f689fdd469cab64d2d502c2158e():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return U


def func_3cae4e7c5e434453a5a257a0f69fb79f():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return points


def func_f57f9da1a4bb4fddbed5205a7d1491aa():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return L


def func_8a3a326335a74a83983f9de639b1f441():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return W


def func_b11ad01c3b8a4aac960dd8eefb5d1845():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return p


def func_7565d6e74fc44dddba7a6ca59587e535():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return infile


def func_3417d8592fce47d5ac688e8d9d4e3015():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return lower


def func_6968750f532e4d5187de713b23e7ea74():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return xs


def func_d21960caa71a46d6ae2323716dc1ad4c():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return i


def func_5ca7caf2fe514fda8823572312ed431d():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return G


def func_122be50748164afeba3809e81d554d7f():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    return upper


def func_814619695d51487aa8df9719b464eccf(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return xs


def func_3ade806f93c84ce6b17e8cb009045dd6(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return i


def func_3fdf1f6705ea429eb748f4c7fa61b538(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return infile


def func_fb4b14cdb3b64755b7e3c0e4cc68616a(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return U


def func_7dc6bb9f5f0d43a292d292f5d029dc52(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return p


def func_c50afd15dc2046b78e90df851f68621e(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return points


def func_b79efdaacc204a98a75bf90514868692(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return lower


def func_030a7eebdc024cf4acf1b28c98b10352(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return upper


def func_ac59b78be7ce4c6c918fe3978e09eb1b(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return x


def func_0086970d4f3b4d23b928d96b6b1a632b(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return L


def func_091bb1530de648a2aeedc4bb5493e98e(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return xs


def func_391404417a5044468f29332296a5d972(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return points


def func_9855347b899445769ae98c08a24b2aea(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return upper


def func_011e569038df42afaee990aeb961aff3(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return A


def func_350377a69a7d42fc9d4e92bac07facc5(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return L


def func_03403836ae5443f69ab63e9d378841e7(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return p


def func_f5190a658637438eb479e178063fb536(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return U


def func_e419d7eb0d5c48e48d820bd1f7787765(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return infile


def func_d7d9f94b11f04ee7bfaf42e26c2fd38e(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return x


def func_239cc7b07727498db6acfa6aeab0b28c(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return lower


def func_5ba5b4927c794cb88b9dbf01d94a6e3f(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return i


def func_812da265ab244c8ab0c557fcf10bb2f0(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return upper


def func_6dd4b71291ed45b4b7daca5ebcf587f1(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return y1


def func_6493f42e8e8f460481bb34e6934cfc4c(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return i


def func_ad1ce8731f434adea8930f138168e698(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return U


def func_8fea2e9e8503432188d6a4d17e26c9c8(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return lower


def func_36e8766842a64f059d632b37c5f0525d(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return A


def func_abd6f53f3f9f437cbe7cbdfa6960b64c(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return a


def func_6f184170753f4e17a0cf5954ab5c48ce(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return h


def func_f6fd7b8aa75d4a74be0b75d490c7f515(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return p


def func_858d280f669b4b04ade319cc2875d28d(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return y2


def func_25f7be6e89544607b77c66d2b0097b26(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return x2


def func_c6fbd8293cc34710a8b26b8b8486a232(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return L


def func_e6db2d8f4d6046329546a5fe43a40ba3(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return infile


def func_337b938e47b5437f9ffd38ca98748932(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return xs


def func_8811e55e8aa040a2b7283062fc6dc8d9(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return x


def func_e0403d63195246e9bfdbb3eb06ab106e(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return x1


def func_ffc743c31dde4e4e9de394923f7dfaf7(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return aa


def func_634217126b424fc99d78c188424711c1(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return points


def func_39282c31892f4c318516c56ab19f7a45(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return aa


def func_57cc214cdfb34716b09ac3c3ad344685(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return U


def func_35da16d7c22f447585b67c8ddad27c43(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return lower


def func_fc4cb6040aaa4f47929b74c308758243(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return i


def func_93e2a888ecc543b987d61d3ae738fb3d(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return p


def func_a56ca7379bd34ce9b848b7e1c2394372(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return upper


def func_4dd524ea6e224d1988c1bb3c9583ad68(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return x1


def func_ed6df915f00942fab0d6e23308d2e5bc(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return x


def func_0204d81aead4471c89e09f8cc82dde34(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return points


def func_8782914edc544b368950cac5299673d1(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return h


def func_252cc922a2a54bc49c951e016a1ba747(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return y2


def func_aef2de860a12491bad504a70f78cc405(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return A


def func_11e81f114b2147c19e246c6ac630d908(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return x2


def func_73a3a58a0a7e402a8fbbbb96b3c8eaa9(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return res


def func_9a0b723b33cc4993b855d33118432d9d(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return a


def func_22e60c882ddb43f48ea0315585598659(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return xs


def func_3169020c94a34eba8d43e27902f0e1eb(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return y1


def func_82d91e82a8304266bb35f1d27b93fb64(upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return infile


def func_6d005f11e66f433ebc0378980afb91b1(upper, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return A


def func_c51adbdf44e34bf39943c8a2030b4f10(upper, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return p


def func_12405762dbab4f398d178336dc0990d6(upper, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return sign


def func_5becbaad9abc4d8fb0a497f67a629824(upper, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return infile


def func_b89e0a6cfa464bdb96eb19d8395ce273(upper, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return delta


def func_9ad186c2907546ba886b83f1a31021e6(upper, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return upper


def func_90aba21b505b40e89c7e6c2088175bc3(upper, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return x1


def func_31314c0bebab463f9e68a327a967a6e9(upper, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return x2


def func_d6168870a09e4d98b836b416190f8ef7(upper, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return points


def func_1ef07f4d4a3943889f815536ba26acac(upper, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return res


def func_a47ffa56d76b442080ee0b85bf470b73(upper, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return y2


def func_f80a338d68c7486d8dc5f60088cbfb2e(upper, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return target


def func_a2d801d953044a62ad01b4dc1aa6423b(upper, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return frac


def func_f60b270e45404dd08510b844acd84554(upper, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return x


def func_ced662488a4440cba19d78ac8493c21c(upper, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return y1


def func_54036f8c432743889688843f515bbd6b(upper, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return h


def func_6136940ae1354e278767074cece07d85(upper, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return lower


def func_36a437d1322f471b89035a8924f7cb75(upper, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return G


def func_5d75e4f9c60b46dbb32a420c34296994(upper, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return aa


def func_5f6718663072454db60cbb4de14e5d4e(upper, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return a


def func_05f351670dde46ad9d7b821cda11da99(upper, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return m


def func_9d0c3369f146404ea80401ad2e9552ce(upper, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return xs


def func_54af42347b32472fb8f17eb264be8a1f(upper, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return i


def func_778882b3015045778821f1ac95edf4be(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return case_num


def func_c2d1a842405c49d1b3f6734e0ff70ffe(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return G


def func_519d2091dfa247dca6591da20e2711d7(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return delta


def func_cd3b864ac4b947ee9a43e3de3dcdc0a5(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return x2


def func_58dee52fca6c4b98838c0e5786c02fcc(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return lower


def func_40cfa8a76f6f4ba49c83a8e5be88bd76(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return p


def func_00a71e89edfd4df9956c26a8d4b18089(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return infile


def func_a864cd263ace421b8bf83c354b84c93a(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return m


def func_0c7f66b8d73e457f9b027e808d7a368e(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return target


def func_d93408b0d44c4426ab1c2aae27a7312e(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return a


def func_821c35a0bbd04cc391929f01978838b4(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return res


def func_7030c662017f46d980fa2b3d388dc744(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return x


def func_5aaf91d2906e4a3980d78315435446b4(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return aa


def func_2b7d6dfec5e64ed6a5e0988f130fc90e(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return x1


def func_fe7b850fe04d47d4a7ca729e9e44f789(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return frac


def func_3b70ac875afd4ff69ef83c145a3884ec(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return y2


def func_12c3de1d54ce4116bf9ca53846e6e8f7(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return upper


def func_e6b055a94494496ba380fdff839ed33f(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return A


def func_1ac9728b79194f9b8ce6ba432954ba5e(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return h


def func_315897da56e0472fa93c4ac8250555d3(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return points


def func_be2be66a50a84da28bdccc918f10d261(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return i


def func_c27110cbfc5b4cacbc587d381fe0d4a7(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return sign


def func_e112008e7f7145c194ed7001564456a9(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return xs


def func_448bc37dcd97461b9a45cc397db38b6e(upper, points, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return y1


def func_65c36342f7bf480cbd68c079312cfa07():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return points


def func_38457f2a422c4ab39a984f160d897b66():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return infile


def func_433f5dd961084ec89b28f69e73a740f3():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return i


def func_40376353c51549f39494dc354af16882():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return lower


def func_f0b9eece2709495682ef4e7fbbb262f9():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return p


def func_717b56060aad433e92383a49a0d894d6():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return U


def func_0d7647a1559a4c96b8c01a94da06d753():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return xs


def func_dd1576a34c7845a5bf766331fc90316c():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return x


def func_363b53c54d1f4974bd77ce2f2f5b43bb():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return G


def func_a195c34f7b7f41b5bbf92cf86574ce4e():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return upper


def func_8e780e96e9554e3298a9ad84ece3b968():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return L


def func_8b4eacfbc00a479bb84ae5dc139861a7():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    return W


def func_2217690582bf41e7a33df9854cc60f85(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return upper


def func_196f6f52a03a4be78ad6dabc0260dde7(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return xs


def func_721e4e66f9e74961821747f36732e219(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return U


def func_5ffbff6a980e42d799437d556335467b(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return p


def func_0c2275cac76d4779ba2c135010d4c4e7(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return A


def func_b432ca27ce1d4ba38010107219e46bb1(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return L


def func_1fd6734ed0fa44b0af6d5c77b56516d7(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return lower


def func_212d0a69fd224b85b25b15b0be8b251f(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return x


def func_11a7a9acff014c67bcd1228f03adf8af(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return i


def func_b2ece9c3bba4484aa3167f58bccbdc91(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return points


def func_f029faa8590542deb971df0f89f38ec4(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return infile


def func_2caf9933f06840d29d651e75045916ab(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return L


def func_e6da9908fbc24d9a9f11827d3f0c66f8(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return U


def func_29a11c2ace764bf18aedea24a3e5f9a7(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return x2


def func_883ec24531ef48e5b685ecd6b071a6dd(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return A


def func_9daa4e64f42a403c91536d64edf97a4a(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return points


def func_2bc7b400da544892b91c87783fa59179(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return y1


def func_793684a0f26143afb17fddb26d9dfc84(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return upper


def func_1ba4afda22a6499c87ec21ff33429d72(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return p


def func_517f1077f914430585cbab6a29c5fb05(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return lower


def func_38a369d2952b49d8854d669ee1d1ab7f(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return xs


def func_71bb4c27c0c84346ad376b500739fc59(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return y2


def func_96c586c624c54d06b4f8b75e57873b58(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return x1


def func_58663e236dea4c549a36874053573726(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return aa


def func_b76bb8c261f845b9a976e6910da1797e(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return infile


def func_ea3b018f2c414650a10611b9819e7b37(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return a


def func_f1f95bbf49944016812a3407ac4f6991(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return x


def func_7bfd1fece1594b9d8454e30c782ebe1e(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return h


def func_39d69f21b232419cb3bfc59e27d36ba7(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return i


def func_d8641ef06358466ab4b878c6983465d4(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return aa


def func_959f89516d174ca68bef1f252a81bb93(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return i


def func_d99ed13337654497aa7d012911c28824(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return p


def func_16cd75b1a6d6469083c49f0fb2ef9301(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return lower


def func_8231978a24d14f59bb8982af7cae074b(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return x1


def func_1235c0a26b7d473bbec132dea2a60980(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return xs


def func_fcf93fa4c1074600aec6ea25df4cf2f6(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return y1


def func_e1f1a1ee821a4c7f960c77029537ad7c(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return res


def func_2049b21191e44ec8829e04f6b39a8e56(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return y2


def func_6c506914373c4cbf9642f3a6a4c2c26c(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return U


def func_9eff7d1299fb4d28a005df29ba550680(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return A


def func_a16415fa8aa64455bf621f47e04d3c81(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return h


def func_ab2e3aeaea7a4ae6a203b0efb955954a(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return upper


def func_e69e4865836847278db0e406e94128ae(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return a


def func_1d3978d063b945d49e0c79b955d3cc56(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return x2


def func_b307d8cd4b074b40a733721749ee06e8(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return L


def func_ad2bf515565e44a48bc805316445e0e8(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return infile


def func_c1e91d6dba40404cb52d26e25bba977d(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return points


def func_a9fc031f515d4db49c9bcf16d041a9ba(L, upper, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return x


def func_0365acd1a75b4ed489a3d80cb11b0c93(upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return A


def func_42a47a8d28dc49478ab5b483373669e1(upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return a


def func_b639fa1df3044ec4972c105853199b92(upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return y1


def func_c49d6a41d3cb4c2f9be7653988ba5e6a(upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return x


def func_9e357bf5b65d4b13b2f64f8f014d47a0(upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return x2


def func_8cb9e385a28e48b0a7786044e7ba6f7a(upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return i


def func_1f2d139d7d3d4bd1878e1c42dd6c7c92(upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return points


def func_2beb95b3dc274c25afc60dbced2a6dda(upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return infile


def func_d802de67fd45478d82882c38f853c3c2(upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return xs


def func_0589d1ffdd4b46ad8fa082a3cdb52522(upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return res


def func_9d20a84360644be58c0a2de10110d986(upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return p


def func_412c5f2361834c3f8b68cd7a0b3babe4(upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return h


def func_927a13c7419640a5a3d5fdd7869c930e(upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return G


def func_53d47c3445e34044817270cfff750b55(upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return U


def func_add3a92dedfb48c49c95276251d00b7c(upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return target


def func_2f1f87b81a5e404abf6d247efc0f88a9(upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return aa


def func_996423a7e4b244ba8ef30aabf0934705(upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return delta


def func_2c01c8e133fb4b87b7f55e372c58e4a0(upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return upper


def func_1836c535ea5f477ba402fb7e547695dc(upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return m


def func_6685be0c4872496db94dd7c2c393675b(upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return lower


def func_7bad0e3fbd994c80a68403da00dff71e(upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return x1


def func_3a6c5552e200443aa92c1eb536c5e594(upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return frac


def func_c56b3b5ff5624555a73780168976cd51(upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return sign


def func_77243dfc603840f98a0d87b7c628cfe6(upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return y2


def func_cf72469e97184a41b2bc09a7c7e5995a(upper, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return y1


def func_dfa48b442cb54ebfbbd1cdb32834e899(upper, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return target


def func_11482638f6b14253815c6de93236f440(upper, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return A


def func_44c408579d9d43c2b54259911a49fcae(upper, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return upper


def func_fbcf1c877a164769b9d7ab2f94f6c2e0(upper, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return frac


def func_dcd680114b724626a4a384e18ce98a52(upper, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return delta


def func_8f033d99893b4b519820c6acab3781f3(upper, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return x


def func_d7bed52976744d9e8cea00781fca5806(upper, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return sign


def func_6c747864c78840e5b01a8fd7b3eb5405(upper, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return y2


def func_6a373dc3303c4cfbb77404166959b036(upper, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return xs


def func_3c4273267e1c47ba80e8cb04b424fdda(upper, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return G


def func_6150c0dc8cba4fe68726406a696f52f2(upper, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return x1


def func_2f0ec09205054d44849add84ee13e378(upper, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return h


def func_d864d0c95a5b433e871a2047ea0a2069(upper, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return infile


def func_3895350bca40440bacfb2f08c96c0260(upper, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return m


def func_4240116a04cb4bf1bb6336c4fa55121d(upper, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return p


def func_21be805c9f204d1c9b8227a7b7523962(upper, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return i


def func_b9b99b60a9fc4b3eac67a36cd512c1f7(upper, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return case_num


def func_959560a0dedc4829816242125bcb562c(upper, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return a


def func_cb2a6a04b6554b70a5bcdd1ef9e0e5a5(upper, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return res


def func_1e616b940a7146948a27d5ea55abd726(upper, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return lower


def func_5e99e483cc6748d99dd20d67eeccc8b4(upper, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return aa


def func_c522db9a5e8647f6a5a47fdaae60f083(upper, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return points


def func_9ad34adb79a84f19838c894b16a40a0d(upper, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return x2


def func_88584c61c6464e8d911dddbba1988685():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return x


def func_5eeda4b1a88046869d6453ef27056a39():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return upper


def func_a751084165f3475d88a5b17238060204():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return G


def func_7c31af6d99644e55ad80d2568242c893():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return p


def func_3a9c802e3eff45d5ab75ebfe6359c5fd():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return W


def func_7c9a1b47ea9e424ba476ed6fe1d4791a():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return A


def func_b4e490f1390d49e7afa9305af1d5bfe5():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return U


def func_35d069396d8b4443af807522460bf960():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return L


def func_4f1993699ed642f6b9d1e166986f9550():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return i


def func_7f79398b81f04f3a89b0c7309dae966c():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return xs


def func_855108ee45e442048d18bd0f830c5f43():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return lower


def func_a38932febcff49a09c0d0a523a3f3214():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return infile


def func_aced3a884ff94805ab0b7fd29fcf5340():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    return points


def func_5d699d33461e4ef2a231d6b084e8be41(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return h


def func_e978f74ddd2b4dd1b485a4fa8ef84165(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return aa


def func_e8de01f7e35b48848f8dfdbabd10ab29(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return x


def func_427dccff61a04c38aa7b247e01a4ceff(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return L


def func_58893218710140368320cb0fe0acd2cd(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return infile


def func_ac467adab5444bfd97dbdddd2fc61ad3(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return p


def func_6b17f7a751ec4faebca70ad2119b7325(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return U


def func_bcacf3dd7ba44cdcb314fe932e494687(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return A


def func_1ca10f24d0424bbeaac7ad3e8abd32c0(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return xs


def func_39349df238ff47c8a682eba9cd77bf95(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return lower


def func_f0f6b9a054d3481db588dad6c0a514ec(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return x1


def func_ca998d30578744768ef64227e62a0f85(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return y2


def func_ee3c71c8c5d44652b8dbc94c9eea7d9f(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return x2


def func_714983be5581482d8d4c552d2bb1c00b(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return upper


def func_77de027eb6704ac78078d2eb50221479(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return y1


def func_3ec617368ad7479d86f47e55926394ab(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return a


def func_a05ca9fb97c9454f9fc3419728967526(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return i


def func_6907393834ef44b1991a605be3cb610f(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return points


def func_0475fed9cbde49269da505bbd97f85f8(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return res


def func_0a361e63f58c42ec9fa3aa2289816bce(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return a


def func_a4787b33abfa438da6b2cc41a1d0a7b0(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return x2


def func_af7d769c8cc9408aa26acfa8e580f31b(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return aa


def func_dea47c7957d54b1483e1e7bf2b4eae36(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return lower


def func_56096c36788c468b83be0a0610607aa0(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return infile


def func_29b0885e440f4ddba7805a9ffc99b457(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return y2


def func_1ce86a11894f4ddbbcc51bb8fcfd6568(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return i


def func_9d8ce339e45d4515b57aee57db547b4d(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return x1


def func_159ce191f07b4383855a86c0d328a33a(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return points


def func_9514fb4203284c8cb1cb7f3284fb1a0d(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return A


def func_38d7e0db210349489e801fab7c52ee39(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return h


def func_96454541fa6843e58fe81095494f7462(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return xs


def func_9cea22a9b49048a78021e87d914bc3ed(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return upper


def func_8be32b10c60e42dc8e5c1b726a253aa1(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return U


def func_a358615919db4953a8f20491bc6bea2f(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return y1


def func_6c46adf039f74708bc9fd90d6aaa0883(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return p


def func_61b26638c0ab4164bdbeddd4e7a96070(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return x


def func_fef9ab113f4e45b7aaf37ad591c5f347(L, U, lower):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return L


def func_cca8f25f6533466384a476999bd25c61(L, upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return xs


def func_09fd99b4c5be49f4b9fe49f762e9d60b(L, upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return aa


def func_7357e66df7a64a529eadab0c5e7d10f6(L, upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return lower


def func_20ee97e88f3e4a0ba8ffe15099b3f31c(L, upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return U


def func_b9e64bca32da4d2e99a8f694c22f7d6d(L, upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return h


def func_cd9af851da244b4bb57281012c7b5d25(L, upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return p


def func_1d5d15d742e542dc9e86e92f50fad9cf(L, upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return res


def func_9025f284fdc44bf18fd51ae79b9d4b97(L, upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return sign


def func_ec5760a1c88547b99fe85c19fcfc05c7(L, upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return L


def func_7380631620dd4078895622b63e6da7b9(L, upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return i


def func_7b8a7a392cfb4f5082e7c82467ed16fa(L, upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return points


def func_b043fa71096e4ac7aada0e22954b85f2(L, upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return x1


def func_735d7686657e4b87b1d53548f4df723c(L, upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return delta


def func_cd1bbd49f12a44f1bc85e7aabbd19e23(L, upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return frac


def func_2f533ed1aa8d4f90b8d880c26caceab5(L, upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return x2


def func_a6cdff7d315546819df545ab11d0926c(L, upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return a


def func_8f4053f208994caeb374fa49bf02e0b8(L, upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return A


def func_54129aa22e314394890e3c7ee5b3d293(L, upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return upper


def func_f1eeec65f7584369984b7698b3acc419(L, upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return infile


def func_9cef110fc21341f190f8ff1f1e90b5e2(L, upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return G


def func_6ab7c54c937c4328998bab8b0a9c81d1(L, upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return x


def func_da8d68081ad244e1bdd650072f691093(L, upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return y1


def func_0dda530d4c384be584891e1e7a741977(L, upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return target


def func_7bd9d7f52f084849b805199a19ff910a(L, upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return m


def func_19e65c4b8a0a4257887892e3588bf9a3(L, upper, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return y2


def func_0adda456ee7d4ca6a9e4110baf948e29(upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return target


def func_581f46829af645d9ae7ed67ffb8ead2e(upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return infile


def func_33ec7a145ccf42118964851b7d738979(upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return m


def func_37f23d50c6cd4dc4bf225815a45ddc44(upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return points


def func_21f06e5eb2af42eb84d6e6e72424fbae(upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return aa


def func_664973a11404444da3c4a0c9753b0987(upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return lower


def func_2c6a5cedb2ef4475a3852dafada7f79d(upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return y2


def func_85b9b3e170dc4fd7bd3fc1432a977618(upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return frac


def func_73f5b460d4984f5baa3c047592040c42(upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return h


def func_99f44297b83b4d17addb047cdf985dec(upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return y1


def func_7e72b3070e89429699cc1d135f63b85e(upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return res


def func_5379034dbd9141df936e39d7db2d9894(upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return delta


def func_270bdff3dba94793883e82a3a5da62af(upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return G


def func_ac292457444e44d88533562434a5b478(upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return sign


def func_b3bc1c06ce614c4d90daafadd7cf8331(upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return U


def func_4d0328c357ba4576a5790b10bb158436(upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return xs


def func_c0480c5e884d4f008f30bc5601263a53(upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return x2


def func_2a0e16b9813c410cb502c1b5487fc0cb(upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return x1


def func_02165d448720470c9d154347b00598a0(upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return case_num


def func_94dcd9ae09814459b5002f9288499bd6(upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return i


def func_d6539277380149c68a195a16377db542(upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return x


def func_d1ea98feb2804066b1039989fa648e64(upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return p


def func_0282115ae8584575be6ad33bdf508a84(upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return a


def func_963e0af5e310424fa8410cc04805287f(upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return A


def func_6336b22c28d049699443e726156a928d(upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return upper


def func_0a56f76949fc4f6e840c2921e9eb4b5f():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return a


def func_0ac2d450e30049d287c4898ca945c622():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return infile


def func_51d2facab4e644c0acb533109b0046be():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return A


def func_81c7bb95d1f044a6bd1f60d4b70ce7a3():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return h


def func_fb98303c45704404b7498374f1a5dd56():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return x1


def func_922fca04aa964105acf7f308e522b655():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return y2


def func_c4a2edf46fed464ebb1009c00138af7a():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return L


def func_5c7f999197a04eb19331ce60ab374c0f():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return W


def func_71d482a3bad1486ca749780a94cdd4ab():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return G


def func_b597a224d44743e89c95d5e37941e875():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return aa


def func_5847741ec6a24aa3bf1cd47471f604ad():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return xs


def func_56eb0c8d72b84a88a36983f52659241d():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return x


def func_68ac971e4e234bb28e8a1abe6e83d43b():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return upper


def func_b6c06abcd5914ad1a28731d6b04368a1():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return points


def func_24ab27b91af6458789545b190a161a45():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return lower


def func_37ffaab7a14c46d5b44ecf124e84ed39():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return x2


def func_8b23585ff14740f7838cb08b839298c0():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return p


def func_487832a816474560be54916f79653b90():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return y1


def func_77d2a978e99e4c2a848c02da6960cd10():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return U


def func_26c7c23b08df433a949d606993b913d0():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    return i


def func_c8eda6dbe324438498c3a27c626c070a(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return y1


def func_53436f385cd34bc09ffc0b17af668630(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return x1


def func_65360d076f1245e09488986dce5cbf01(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return xs


def func_c1ce58a4e9e84678a0eae89184e5273d(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return infile


def func_b40579f6757240e4bb3bbcbc033cb856(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return i


def func_e855e562737740cf87296353bdc5ee29(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return points


def func_fbad3448ac944d1fabd1568ea05260c5(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return p


def func_a93485f78fa6493db262d8fadb8429d6(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return a


def func_c8b90af1bafd44e496f1a3c097430db6(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return L


def func_aa704898d6484e51ba5b361470c9be53(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return x


def func_6c901682752b40e4bc270296f73cd315(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return U


def func_118e813c688a44768e0fbcc5be760499(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return aa


def func_5d264c161d094378a92fff89b7516a76(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return h


def func_de840585ba5c4ccdb7f6083ea53eafd8(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return res


def func_9c8299ac7099400b8f40cc9ef22c4ed7(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return lower


def func_ed3820a0441948f9aa8dc0dc9a3e9e39(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return y2


def func_1c3872141fc94cb2b74368b2872079b7(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return x2


def func_878abd68cad346be8000d7866e6b87ff(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return upper


def func_16bc58448f7244dfa503048de70cdb45(L, U):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return A


def func_34d482bfe5c04681af148e5a9fbae32c(L, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return aa


def func_13a93d47b4f94381b33e1fb915ce8eb7(L, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return x1


def func_9e309f270c9c4d269c805694a8601ab4(L, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return points


def func_aabc7a7b27934c2891dd5163c75b5bf7(L, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return y2


def func_bb1ac1d1d3b8455db77a5be00f9ae8ff(L, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return G


def func_394a59daabff4ad58335e29839fc52ae(L, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return target


def func_72f4328d31884935a3224723ea606fb0(L, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return infile


def func_7ef498bba49446c8ad58a1a7835e651f(L, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return upper


def func_ba71bb3b6e254441a1d97c599c6eb778(L, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return res


def func_b2fd0d2a99494e66b57f944aea3278f7(L, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return a


def func_4967102e2ff64ce5b4cfb5f18b9d55be(L, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return x2


def func_770064f16bef4d19b50eab9856a45474(L, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return xs


def func_23bd34bd50f64dd8b438568c59ad1c89(L, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return U


def func_a0b935d69cf749da8c2b2e75895eb749(L, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return delta


def func_b91736e006f2498e8ae4e4cd8b487d04(L, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return i


def func_8de692b082414ef1b52148e291ccebd0(L, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return h


def func_bb64910c484e4e24ae016b471f16d2aa(L, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return L


def func_a8973ccfefb445b88b8cc1d6ecfc20a4(L, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return p


def func_f6aae1ca40ef4cc695ee267f2e179b0a(L, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return y1


def func_2062d46be5cc4193bd0fa90d6c9bf6d6(L, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return lower


def func_caaee11f7284443280aed7180939bd31(L, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return x


def func_d0bcd83157f74bd097f6001ff3986f70(L, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return m


def func_56594c3d5b7647d59b2cacbe10636da0(L, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return frac


def func_7dafe9db63fe48a5b70818d7e4028316(L, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return A


def func_ac114ff75a524f0c87e72b818e913501(L, U, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return sign


def func_f0b71a44babe4c37bf48f007c9729fb3(L, upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return A


def func_f3bc98a0b01b4b988cffd30190c4e1ce(L, upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return aa


def func_ded28073d4414317b3e7de6a6b783ab7(L, upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return lower


def func_5d0b0125dae642509863bac8cb462aa4(L, upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return xs


def func_b803921e6c4c45c3b35665557087ae02(L, upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return upper


def func_341ea933d3a3407b8592b2be89a7e3ae(L, upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return x1


def func_692e31297a3d4d098daf696c334ebd7a(L, upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return target


def func_d1fcba4a956d4ca99f97bfc3ecf4f78b(L, upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return x


def func_64c31eabe3a442cb855df690d33d00e3(L, upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return i


def func_4df6257ccd424d6e96c621b64ad12b96(L, upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return res


def func_a47327563a0e484bae501e430d6e7cd9(L, upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return G


def func_e6832bc50b3a4f308ff43a4ca013d116(L, upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return U


def func_426812e0d85a469a9d65531b4373eba9(L, upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return L


def func_15d85275f085409fb46ffe964a373577(L, upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return x2


def func_cf80f6e152d64d728849c5131c2a085d(L, upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return p


def func_5537f682d4794fb68dc013e1cf5fa5a1(L, upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return a


def func_5e9708002fe94e52b5ac079f8e1be90a(L, upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return sign


def func_438f4b306c8e476fac435e92b30f1efc(L, upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return case_num


def func_fa99ee02bc7d4082a012257b1ba1c5ea(L, upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return y2


def func_7a1baf4266b74b649f52df57ce04727c(L, upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return h


def func_30bb4515ba73478f8605c37c15e10c72(L, upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return infile


def func_7af223a79bdf44ba9494be2d0daad193(L, upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return frac


def func_3c79b3ab65ed4e7a8967eddc50493346(L, upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return y1


def func_a64b5d56f4494198bc063fe3b1d6e73c(L, upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return m


def func_5a138c3fbda34ed392a2ee571c8eaba2(L, upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return delta


def func_9e2deff8f2c7448492f4f3c594b110ff(L, upper, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return points


def func_eb78c5cfaec247b58d27bdc7e0d4f9f0():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return G


def func_f53447695b0547e388ee0cbfebb14cad():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return W


def func_63e802d1df3549fcb2f960c9590491bd():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return x


def func_53e1338edba1424c8b59dcdcd588ff69():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return y1


def func_14c9b35394994ea2b03a4242856b2272():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return L


def func_fc282c061ae4437fbe296a3b28b12a33():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return h


def func_f00fe764fdc94a00b68f36d9ec2230a1():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return xs


def func_a1b91bb05d9b46ed9066e3ccf01a8e15():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return A


def func_f1822e5badbf42b4b387696eeeef11b7():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return i


def func_a25e2c5950db4ab8b80d15dd027b0959():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return p


def func_c7bf3c8797b849a49d85c3005707c879():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return a


def func_3ec3b8874d8e49339f5dc5114ee0aea6():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return upper


def func_3148aa94ccef4afcac0c0d53e431b410():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return x2


def func_dc506076ffd341d3a1b9f7c4bdb41935():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return res


def func_5cb9a445883945c19779ebc4dcb925f3():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return points


def func_b9b840633e4d4a91bd856542da491d60():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return y2


def func_69802e28a1b54ae585c22e46e0d7d02b():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return x1


def func_53807147f7e645a7b1930985098a402c():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return infile


def func_35a359d349814109a6b8bcb1fefb4aa7():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return U


def func_9053c5ba5b5c477d9c2e4bbbaf583be6():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return lower


def func_d52a2061aa8a43e5b7e70a40ecbfefc8():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    return aa


def func_579bfa674a1a457ca0059c806ce0deef(L, U, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return upper


def func_a232471e887146bab66282f3fd864add(L, U, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return h


def func_c3c8b76a193b4906889ed623e21c302a(L, U, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return A


def func_2f9365f3b2fc4f73b6e6705d2a630a6b(L, U, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return x


def func_16ae3aadedf14102b842f1176549ce22(L, U, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return x1


def func_8c580e83723a4bf7bb5ea90a1460001e(L, U, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return L


def func_cbc12d1ed10b4a2ea55b27c65c24c466(L, U, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return delta


def func_90ae017bb1e6458a92aebb3409554c3e(L, U, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return i


def func_bef0a75011f9492ea9d08abe8d36045a(L, U, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return sign


def func_1fbebd769fc04ce19d3b7dffcf0433d3(L, U, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return p


def func_72c0a419a1bf4be4a66728c15620f613(L, U, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return aa


def func_f3a9a3367ff74feabfa300e56ca93e7a(L, U, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return points


def func_77dd798c8d254d0d8ceaa907bee4b8af(L, U, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return a


def func_ef8130326a7d4383be18fa13a75a5eb4(L, U, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return G


def func_60cfa1c0dee64745998ca9abdaf93ea5(L, U, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return lower


def func_e8f6f7f4e6d44581b4e4669af924243c(L, U, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return infile


def func_6e55f586c94f4bb9ac65e783a8477bf3(L, U, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return y2


def func_b05edfaf6be74dbe9824858ee2611634(L, U, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return target


def func_ff702e5677a84a388417fe89df009c6d(L, U, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return x2


def func_ec685ebee67b443ca8c37e90c2a23eee(L, U, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return res


def func_b1cedb6871bc4658aa423a5513b87ea0(L, U, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return frac


def func_d9e3bb803b3745e5be632124cc745b22(L, U, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return m


def func_78185002202049a98c08a60ad6b49ace(L, U, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return y1


def func_ba512fb1fa5e45cbad7d18ed5175eafb(L, U, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return U


def func_0a43b751d45d4c0c8fdabb46fbceea3d(L, U, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return xs


def func_cc53010387904d34a4337b67b057d954(L, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return infile


def func_530b509055a844b1ad9c29fd20d95008(L, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return target


def func_2e88d89927374f7ba309ae218aa4562f(L, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return aa


def func_19a2cb78fedf4a5d89f4f75230374362(L, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return points


def func_3f2e0ca524ad4a879e06a00c07843731(L, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return x


def func_8dc54d5d6c11403187178dcde9fb24fd(L, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return delta


def func_9716356127814218aa2abe3abf79da65(L, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return y2


def func_7e7fecf1ece84fb6930e9e7e3cb8d201(L, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return p


def func_3d06f79bc1cd4b15a51c1c844f8e66f2(L, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return x2


def func_71cd5289f98e427295e95948839b55d5(L, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return xs


def func_35a50438a75a4f1dba9f33a82c7a5058(L, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return upper


def func_aa3856f292f2470f837ee57a35ddf7ae(L, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return frac


def func_fd2ea08971e24288be07fb481d8de992(L, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return h


def func_8204692408964bb8833a04c05c4ff5b2(L, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return A


def func_cce22ab5e98a46e2a5ed4c1b1ad6914e(L, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return a


def func_2f556d97919c4db98d9bfd8e63ef2a47(L, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return res


def func_1a8316bc89734e5aa398c81d94d91f54(L, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return i


def func_7b49b80575c3421a99b04ea5511dced1(L, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return case_num


def func_61727b500ea74402920479862ff4010b(L, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return y1


def func_6de1185aba6c452085899126f03a2162(L, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return x1


def func_3df23ca9279f46619b9e32b4c2adc6f7(L, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return G


def func_63802f009fba4baab61ddd8cbfde902d(L, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return m


def func_6f8f4f76a69548b9a7d28d24cc502ad9(L, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return sign


def func_d38c1cc84d754098bf23c7d96d331087(L, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return lower


def func_468be8ceb5574082827d5d86c2837389(L, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return U


def func_129496f8d15848de9fbafff80e878b2a(L, U, case_num, lower, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return L


def func_6eecad3078e74ae8a2bf19225154f7ef():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return x1


def func_d3eff480e8694d64922e62ed3a23b234():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return lower


def func_36d49ee603d54d7094e5ce7c2bb9468a():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return delta


def func_7ebfad39837e4290ba13f1319ca55708():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return A


def func_1428b4fea0c14b95be4b86186a5f1c93():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return i


def func_7a2bcb3fd3b648e98648fcaddb793774():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return xs


def func_61ced34a60124fea9743052681f3a862():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return points


def func_e2cfcfa8057443309955134a93c98125():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return x


def func_cac6f993f6c64c6b9cbd59495b101fa8():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return m


def func_989974fdf3b44a8197d7e9bdc4cbe3e9():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return y2


def func_96d40712c2154f57b90692111a5f038f():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return x2


def func_76d219c6ab13400e988b8140c9d10eb5():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return U


def func_f02059df544849ee9d5df6b2aa5591c6():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return infile


def func_6e2c7469ee49474da2334d654f1e9b75():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return upper


def func_411a9698a21347d3b8a385ff4e64231e():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return frac


def func_ca519ad25b564da6ac13db50c40a0234():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return sign


def func_2da359509eef48fa8503f08ab046a467():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return p


def func_eb75be21a88f4d76bf8500cd03114925():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return aa


def func_8a9895eff068464e8172b9d7e2290351():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return G


def func_95c33d31f26845b1a17bd0be2c3fe444():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return res


def func_153053db93264a918bf0d17d6f749168():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return target


def func_f577b3da63404f3cafa13d7374d4a5f9():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return h


def func_07d49807ba094c7481640dd05ebf7c0e():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return a


def func_439ee6f4de9f462e8388f39774754cb3():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return W


def func_520e376ec8044eb0a2e7cfc7a42ed2f3():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return L


def func_ceab762916e241109c077c3bfea4a2b4():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)
    return y1


def func_dbcf73b49a794d05b458eb0fa76bf0e4(L, U, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return G


def func_06af97129e174d3693300024d50b4193(L, U, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return delta


def func_300f2d2cf90b4cbf8879da8d066f443f(L, U, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return res


def func_0c9c3dc568954e579219033a79fd41ca(L, U, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return xs


def func_d0a1d0a8213f4d259d1b83d4f15beda2(L, U, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return h


def func_fd684365091e412096333cd09d3ad92d(L, U, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return U


def func_b4fa1b71833340f395ed23ab2412918b(L, U, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return case_num


def func_a8eef64bb48b4b1bb111299f3728bd95(L, U, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return upper


def func_b1fead6ee0444946b4e0c98df9f7c696(L, U, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return points


def func_3bb9396c9d4243859cd16144083c1170(L, U, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return y1


def func_6fc38c0a0a6d49bea2d333af15fdf4ac(L, U, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return A


def func_74fb67c451c14ba5ad10f8dba9c8a897(L, U, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return x


def func_83180d602f5341ab81f45556cd324875(L, U, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return aa


def func_bfba124bb8dc48c4834f600640d44959(L, U, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return target


def func_39c76bd2f2ae4744bdd9240952f969ba(L, U, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return sign


def func_135089c1395a4a75b85860076b916f90(L, U, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return infile


def func_a01d9b7db3504dbca269289d826a2228(L, U, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return m


def func_ed0cd1012a8d4b168a7432fb6be5c6a5(L, U, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return x1


def func_86e33b2a155748acbfb7b9e29eeccc7e(L, U, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return a


def func_42d624a6172e4d359e5186a09d315c1c(L, U, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return i


def func_e920769ecaee45f29ff3dfebfece160f(L, U, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return lower


def func_1ba05dbf90304f81bfaea492e525c8d0(L, U, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return frac


def func_bb2fec25f2644027ad9abcd4b3715def(L, U, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return L


def func_f772bc21baf64f72a20b4390d431c841(L, U, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return y2


def func_e9962b5dcd4a46019b607ede4daf1b46(L, U, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return x2


def func_26c9d22d13fe4c5d90c3517a0385b2b9(L, U, case_num, G):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return p


def func_ad31945c361e4456ba242e0d0c1a0aea(case_num):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return y1


def func_af27cf851dc24eb4b87aaa5182c7fb71(case_num):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return i


def func_9e646498082443329ab02ef6f397cd0a(case_num):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return upper


def func_ef369ace6dfe44bbab71a80ba1daad1f(case_num):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return p


def func_f635baff36284a939009d3f662584eac(case_num):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return a


def func_385942a95ede49db80e00e1c4d745c6f(case_num):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return x1


def func_f8357b01708e4ca2b8ed3c21620af902(case_num):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return target


def func_7bee33cc9b8f440fa301e9c5fc0bc27c(case_num):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return points


def func_48c7533099c345bcbb21810d45c01def(case_num):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return x


def func_698200099b8547c9a96a61a19d586c02(case_num):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return U


def func_2e0e35b968b146a4a28aacad583ab796(case_num):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return lower


def func_c6ee3be56a784dbbb7b57d1fe7355d42(case_num):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return aa


def func_442132f8f5b74712a98a3bfc14f50076(case_num):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return A


def func_bd5df5a6dcd64b5fb04189ffbb32daa3(case_num):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return sign


def func_981a3943bf0b4879ae797df6f05e3a90(case_num):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return G


def func_2967f6fb1917416183a4143a8018e376(case_num):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return y2


def func_db6a404a89624973bc8d2656ab30b438(case_num):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return x2


def func_094807fb212d4031811f92b71e6aa67e(case_num):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return frac


def func_69757fbea7364a08afd0413d682e1aad(case_num):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return res


def func_27df127f30c24703b60a955ad2d90159(case_num):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return case_num


def func_5ff5ed132236411abefdcb0290b25aa6(case_num):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return h


def func_953359cfc3f34b6790d38270be949ed9(case_num):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return xs


def func_91ffb318543c46d190f45d8337aec5e2(case_num):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return delta


def func_104ce5a692744a7eb3413bb9bec48f33(case_num):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return infile


def func_85d13b316e52440e92cf2d510a980bbb(case_num):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return W


def func_82f0efdd9db74e8196251436111a43de(case_num):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return m


def func_a94ddd46fd8d4109b1f818c794d54de6(case_num):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    W, L, U, G = ints()
    lower = []
    upper = []
    for i in xrange(L):
        lower.append(floats())
    for i in xrange(U):
        upper.append(floats())
    points = []
    xs = set()
    for p in lower:
        xs.add(p[0])
    for p in upper:
        xs.add(p[0])
    xs = list(xs)
    xs.sort()
    for x in xs:
        points.append((x, find_at(upper, x) - find_at(lower, x)))
    A = [0]
    for i in xrange(len(points) - 1):
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = (y1 + y2) / 2.0
        a = h * (x2 - x1)
        aa = A[-1]
        A.append(a + aa)
    res = []
    for frac in xrange(1, G):
        target = A[-1] * frac / G
        i = 0
        while A[i] < target:
            i += 1
        i -= 1
        a = target - A[i]
        x1, y1 = points[i]
        x2, y2 = points[i + 1]
        h = y1
        m = (y2 - y1) / (x2 - x1)
        if abs(m) < 0.0001:
            x = a / h
        else:
            delta = h * h + 2 * m * a
            sign = 1
            x = (-h + sign * delta ** 0.5) / m
        res.append(x1 + x)('Case #%d:\n%s' % (case_num, '\n'.join(map(str,
            res))))
    return L


def func_1c908ca7079b4327bdf776d429aacce5():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return sign


def func_8bc22b64285f45548af0e7c8ce01f3b6():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return G


def func_e836da7f8bec437e91e4e7ac6dd324d8():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return p


def func_8d70cfa885fd421b8b5823da0b50b573():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return infile


def func_17068e9ac35f4c8cb477e836c4bc2518():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return xs


def func_7f3b42b836c544c9a916c5fb9c53776c():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return h


def func_8296263eb640434fa867f4a7ab85410c():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return points


def func_a17ee41928994772b03a8f43d58b0079():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return U


def func_9741e32f4a814b668faceeef55285247():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return W


def func_894716f7c2e5440ba601376d5a059a52():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return aa


def func_eba7ad89b62b42a78f75ec7e231fb461():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return L


def func_ee88742f5fa14e8b8bd189f78fd822d5():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return x2


def func_41c48c54e96e42f4a3c5d75e77b2dac1():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return target


def func_0818fafd699443b79a6ae1bc0e929d6c():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return a


def func_ffe2fc01be384b9da986aae4cf7793de():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return i


def func_58cab05af98146969b5fc84170bc1e06():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return x1


def func_2c69afc116e6408ca788c89cc5b762c6():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return upper


def func_71304e1210c7462eb19a204aebd0cf2f():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return delta


def func_4bed0b623e074079be73a45cad617113():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return A


def func_ff9004b9c38e49da8d12daa4d08ff18d():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return y2


def func_79d514a0a93b4a978c94119477bde58b():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return x


def func_39672a7fae28472ebde07120ef86833a():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return m


def func_d8e9fe3639f54e50a5ac8c7d23be9ac7():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return num_cases


def func_125edbe7a947451d8dca768040cf22b2():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return res


def func_5967148031764fdc887ec4e44e297c1b():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return frac


def func_5292750cdc1645eb91c495354c6fbd67():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return lower


def func_ed7d10dbbecf4b639ea52c49eaac81c9():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return case_num


def func_66ccfaf6ca514d19a971eb1831eb476a():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return y1


def func_4d2c206452df417295d99492672f2940(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return U


def func_250567ecffb24dfbbd2ebcd2eceea340(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return num_cases


def func_fed9dcaa5879405eb54c2c138caf676b(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return res


def func_016cb76f38c74b1dbc0f4602c150889e(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return a


def func_545ef39744814d618ebe58811cab3da8(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return A


def func_6c7655adf44549b9afea72f21c26d0f7(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return target


def func_8f5f43b3308b4ba696cbd947204dc853(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return i


def func_b6ea0a18fb0a4c0491295125afefc911(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return y1


def func_58768dc80cca48b3ac68bc3c08984918(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return aa


def func_151e9e864a1447b58bda46f54f8fc7b5(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return lower


def func_0a5565dccac847e5949170c4e3bd428a(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return x1


def func_95de323fb62849b7b4c55f7d12b17d4a(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return L


def func_df1600160c00425b855d5135c2e31c7c(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return case_num


def func_33c990fcfff346328527c81e732ca1f8(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return frac


def func_3c38c07d9143441a804c3ea328755003(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return m


def func_8ecbe17e53dc40f98bf544bb82486fc4(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return xs


def func_c5c03981bb0447259a9a105190b226b9(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return x2


def func_9a874bc6ecae45878f76253777c58d36(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return sign


def func_0ce18c00ef8449f9a87061895172a089(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return h


def func_4b564ac2f5a74fe8b2f75870d333a425(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return W


def func_7774a918721b4f1dbea904a92cb2c057(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return upper


def func_92aeb60c555244d594ddc891767c1301(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return delta


def func_f898fab460c944f786f0ee92614e56ce(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return infile


def func_f900b9412fd744adbf6b176d989583d7(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return G


def func_9efcd367493e45d7a3e0f3c9800fccaf(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return points


def func_cbb8325e32ea421c8c37ab249a363114(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return p


def func_223334adee4b41eab25feb60c281505a(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return y2


def func_0546807c3eb24c0bb06a7c60002f6bfc(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return x


def func_dcd70c9033494d83bc806f8a0c2abf7e():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return p


def func_46a5e4fc50954864b0f61ffbac700151():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return A


def func_f851655b48e54aa2bf0c8d8160fedec3():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return L


def func_5e0ac3102e9845ba823f650bccd25869():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return h


def func_53a99dac4df74cbf9f73d3be99cd4a3b():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return upper


def func_6897f27d1f9a4612aeeb4b06f701101d():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return target


def func_c3f03d8f7f834a26ada07eba9f73f886():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return xs


def func_5b988f873e5e4c5188ace0c24709bf5a():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return m


def func_bfb8174f47aa4eeeaa7124f66b21fd44():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return delta


def func_efea8f0a16524537bb78600047418859():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return x2


def func_d60b022c44814b1e97ef9b10a92461dd():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return y1


def func_77824ab6506a47e8b9ac57f042970ae5():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return num_cases


def func_289d9e8fad034b5fbf44a8be4abf52f5():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return i


def func_8ea86228b7224605aeb38efac24a8997():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return res


def func_7b9b605c4dfb430da76c5432f8b13d9e():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return a


def func_f1e6ae30b8d445e59f59d3a560561310():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return frac


def func_ba9affa6b9704929bbbffd8304e3f99f():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return U


def func_ec27f1c8f5884c80b0140d913e5ea0d8():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return y2


def func_a96afa10354f4b42a3c8d3c2ec24ba19():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return points


def func_b569ac7c2d144d9a922d1a04621d7c7b():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return G


def func_efe6abccba844449af2b570d795a6ac3():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return W


def func_2ea0a05e040244ee841b311ad5d60f76():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return sign


def func_b1bbfe8207cc4aeb87947245dc4719d2():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return lower


def func_f43e1c01c76c423c8450c6b856875056():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return infile


def func_61628ab75d8741cebb3dbf62904cc16a():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return x1


def func_233e9c687a2c49488d4567e5709b70b3():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return x


def func_52f843aefc4f46e79eab01b5666a3e75():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return aa


def func_7ce15cbd29684f34ba12a42b306facba():
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    num_cases, = ints()
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    infile.close()
    return case_num


def func_94456e33239844a1bf7fdd4b8d934914(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return G


def func_bac4caeb625a4c0a8886d5ade6c5b866(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return x2


def func_12fa04a2c97449aba287a4aa7c413029(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return num_cases


def func_5d4ccd8d9ab74c99993db41538a464b4(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return W


def func_2400d2caa3594c87b3ebd7d2b1a88957(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return delta


def func_69660acbcad84de49dabc7ec0e55c731(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return a


def func_06c5977369bd478da8a73c995fc37811(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return L


def func_249bd86609f74eaab2523b0de7fbd430(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return p


def func_4e3399c23ed04e67a044dc0dc69dd205(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return y1


def func_c2cc485893734f24bca0c79eac896d4e(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return m


def func_30546664f94c4b4bbd19dea4619830c8(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return frac


def func_a0496a787a054917aa5f67be895d890b(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return xs


def func_45d636be27da4ee0bc025a142cec1741(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return x1


def func_3959a82f89ea4b6b9c8c470991458a36(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return x


def func_d4fc2402ae354fd1821832a27e78c0f6(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return sign


def func_81f6d9d6e7ba4218978c80637f815b3b(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return y2


def func_2a576eb08cb646faa5a6421d7a1a88cb(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return U


def func_8a91fddf0e264437a1d5dcbb82738ac7(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return lower


def func_e4f70199cc2a4b9bbb9db2b1451cf83a(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return infile


def func_031b0b87b13745a287a05d6542148f8c(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return i


def func_567885c7e99f401d8d94018475baeca0(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return upper


def func_7dd0f23da7b44f3a9e3c4d31c02333a9(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return res


def func_56b1a614a0fd4b739b04d1776a645abf(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return case_num


def func_aafcd37b79864786a49946328dbb3d03(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return A


def func_8464d7946c40489f8ebe5e86d2e294a4(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return h


def func_4cf0229ba9ed4700b4db926b316c464a(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return aa


def func_5a6f29633f7f401d8a4d41741dcd4c39(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return points


def func_92ebfbdde87841c39220abe721a7aa77(num_cases):
    infile = open('codejam/test_files/Y11R5P1/A.in')

    def ints():
        return map(int, infile.readline().split())

    def floats():
        return map(float, infile.readline().split())
    for case_num in xrange(1, num_cases + 1):
        W, L, U, G = ints()
        lower = []
        upper = []
        for i in xrange(L):
            lower.append(floats())
        for i in xrange(U):
            upper.append(floats())
        points = []
        xs = set()
        for p in lower:
            xs.add(p[0])
        for p in upper:
            xs.add(p[0])
        xs = list(xs)
        xs.sort()
        for x in xs:
            points.append((x, find_at(upper, x) - find_at(lower, x)))
        A = [0]
        for i in xrange(len(points) - 1):
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = (y1 + y2) / 2.0
            a = h * (x2 - x1)
            aa = A[-1]
            A.append(a + aa)
        res = []
        for frac in xrange(1, G):
            target = A[-1] * frac / G
            i = 0
            while A[i] < target:
                i += 1
            i -= 1
            a = target - A[i]
            x1, y1 = points[i]
            x2, y2 = points[i + 1]
            h = y1
            m = (y2 - y1) / (x2 - x1)
            if abs(m) < 0.0001:
                x = a / h
            else:
                delta = h * h + 2 * m * a
                sign = 1
                x = (-h + sign * delta ** 0.5) / m
            res.append(x1 + x)
        print 'Case #%d:\n%s' % (case_num, '\n'.join(map(str, res)))
    return target
