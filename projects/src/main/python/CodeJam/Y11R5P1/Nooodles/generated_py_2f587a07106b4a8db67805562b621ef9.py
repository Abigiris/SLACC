import sys
sys.path.append('/home/george2/Raise/ProgramRepair/CodeSeer/projects/src/main/python')
from CodeJam.Y11R5P1.Nooodles.A import *

def func_deb4ba7572064141aa618bc60683bb31(L):
    R = 0.0
    for i in range(len(L) - 1):
        R += (L[i + 1][0] - L[i][0]) * (L[i][1] + L[i + 1][1]) / 2.0
    return R


def func_0b44d29c528f49b2b7f31bb00faa4c76(L):
    R = 0.0
    for i in range(len(L) - 1):
        R += (L[i + 1][0] - L[i][0]) * (L[i][1] + L[i + 1][1]) / 2.0
    return i


def func_67e514f847224addb3d559d9633b578c(L):
    for i in range(len(L) - 1):
        R += (L[i + 1][0] - L[i][0]) * (L[i][1] + L[i + 1][1]) / 2.0
    return R


def func_d27471e658724a2faaaee8fa5f711504(L):
    R = 0.0
    for i in range(len(L) - 1):
        R += (L[i + 1][0] - L[i][0]) * (L[i][1] + L[i + 1][1]) / 2.0
    return R


def func_5d9a107b5e8c4b51bc314b23e5af50c6(L, i, target, Eat):
    todo = target - Eat
    x0 = L[i][0]
    return x0


def func_8d0f9e17c0154bc6a69d5d4b1f41b9c0(L, i, target, Eat):
    todo = target - Eat
    x0 = L[i][0]
    return x1


def func_cb24c47c7172436cbdea314a7bbb482c(L, i, target, Eat):
    todo = target - Eat
    x0 = L[i][0]
    return todo


def func_14a915739a90423c946a059aa4eb7777(L, i):
    x0 = L[i][0]
    x1 = L[i + 1][0]
    return x1


def func_9aebfbe2337f448780bb1e19e28f7164(L, i):
    x0 = L[i][0]
    x1 = L[i + 1][0]
    return x0


def func_e91db68ec2b34a35a13a77e4fcda0a16(L, i):
    x1 = L[i + 1][0]
    y0 = L[i][1]
    return y0


def func_e125579374e445e18a6fcc578b1c400e(L, i):
    x1 = L[i + 1][0]
    y0 = L[i][1]
    return x1


def func_aaea7500b78946cc9a1dea187f94b6a2(L, i):
    x1 = L[i + 1][0]
    y0 = L[i][1]
    return y1


def func_f50674c1ae9f4bd49355bbe2b47ca004(L, i):
    y0 = L[i][1]
    y1 = L[i + 1][1]
    return y1


def func_15c84143e0bd497688c9db11076bdb6b(L, i):
    y0 = L[i][1]
    y1 = L[i + 1][1]
    return y0


def func_7aea7fcc6e7d40899280b9754e5e31b5(y0, x1, L, i, x0):
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    return y1


def func_fd7ce8969df84897af5969dca0d415a1(y0, x1, L, i, x0):
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    return slope


def func_d0be86820ba248549b5d95e458c17df1(y0, y1, x1, todo, x0):
    slope = (y1 - y0) / (x1 - x0)
    if slope != 0:
        dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
    else:
        dx = todo / y0
    return dx


def func_5a8e3bebfc554c3ab8363a7bc317e8cd(y0, y1, x1, todo, x0):
    slope = (y1 - y0) / (x1 - x0)
    if slope != 0:
        dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
    else:
        dx = todo / y0
    return slope


def func_d5b09cc46cb244d384bf5c088bec7537(y0, slope, todo, x0):
    if slope != 0:
        dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
    else:
        dx = todo / y0
    return x0 + dx


def func_44fb1188e0ea46a0883458673cc03b12(L, i, target, Eat):
    todo = target - Eat
    x0 = L[i][0]
    x1 = L[i + 1][0]
    return todo


def func_daf8049fb34d4aaca1ae9cb9fcf5eee7(L, i, target, Eat):
    todo = target - Eat
    x0 = L[i][0]
    x1 = L[i + 1][0]
    return x0


def func_8e877b3c42c84f5aa6f18a5ab3834d40(L, i, target, Eat):
    todo = target - Eat
    x0 = L[i][0]
    x1 = L[i + 1][0]
    return x1


def func_ee6b5af188cc4aa28aaa6d71697abc73(L, i):
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    return y0


def func_be409ebd113f4f63864fa968774ced5d(L, i):
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    return y1


def func_d32a214c8c4843c3947377912bfdc2b0(L, i):
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    return x0


def func_e73044d2d70643e2bb1bd361aff17f5b(L, i):
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    return x1


def func_d9bffee623cd4d6ab3a0503ba39f5684(L, i):
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    return y0


def func_a51bfd3f5e4d47679dc6f039640e0387(L, i):
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    return x1


def func_5a16bcaf1f6f4a458b85446ec26aee07(L, i):
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    return y1


def func_a456ec0bdb234e0a9c881ed20552655c(x1, L, i, x0):
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    return slope


def func_44cf200aecc740c7b2f7d6fd2d58f903(x1, L, i, x0):
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    return y0


def func_373e759216f9403b9dab7882ada59560(x1, L, i, x0):
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    return y1


def func_295e0285f63449c2aef51396a07c7de6(y0, x1, L, i, todo, x0):
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    if slope != 0:
        dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
    else:
        dx = todo / y0
    return dx


def func_cad61287c8584c728811d7750c84cdd7(y0, x1, L, i, todo, x0):
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    if slope != 0:
        dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
    else:
        dx = todo / y0
    return y1


def func_e9922963c7754b33a29e46182a016dfd(y0, x1, L, i, todo, x0):
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    if slope != 0:
        dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
    else:
        dx = todo / y0
    return slope


def func_414d4ab949ab47949531eda46ad8721f(y0, y1, x1, todo, x0):
    slope = (y1 - y0) / (x1 - x0)
    if slope != 0:
        dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
    else:
        dx = todo / y0
    return x0 + dx


def func_a679b194b43c4226b57db9b17477b6b0(L, i, target, Eat):
    todo = target - Eat
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    return y0


def func_0b44cfe4996849ebba932d6407a070d4(L, i, target, Eat):
    todo = target - Eat
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    return x1


def func_14f53af20bb44bd6b43550c836b66391(L, i, target, Eat):
    todo = target - Eat
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    return x0


def func_f4b6b670d5824d02920779e418252e78(L, i, target, Eat):
    todo = target - Eat
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    return todo


def func_a51341afd8194bfaa3d694c037e937a6(L, i, target, Eat):
    todo = target - Eat
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    return y1


def func_75bace73cc5741c88b3033d061412256(L, i):
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    return y0


def func_94f1ff3ef4e04cc4a284a30e3d3adf6e(L, i):
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    return x0


def func_69a024fdc3a84fb2850f758e4cc1c53a(L, i):
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    return x1


def func_36f6db760c1747b3b88d5c2daeef4b9c(L, i):
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    return y1


def func_2ef2cc0116704cc2a2b01838a8425748(L, i, x0):
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    return x1


def func_4edc156251ad40feb86fac0315a33d72(L, i, x0):
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    return y0


def func_2945624f85bf4fe29e3f10969deec423(L, i, x0):
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    return slope


def func_0141b3c1b5ce45e7942c282cb2ae9dd8(L, i, x0):
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    return y1


def func_eccf136dc56a4f5d83189b074a4448d8(x1, L, i, todo, x0):
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    if slope != 0:
        dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
    else:
        dx = todo / y0
    return slope


def func_da546c2170f8439090cf2897d7d3a46e(x1, L, i, todo, x0):
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    if slope != 0:
        dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
    else:
        dx = todo / y0
    return dx


def func_2619043458044ee2b2ea84ab8e3d7b5f(x1, L, i, todo, x0):
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    if slope != 0:
        dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
    else:
        dx = todo / y0
    return y1


def func_ee58b71fc5ba4d7a80266264958fe066(x1, L, i, todo, x0):
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    if slope != 0:
        dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
    else:
        dx = todo / y0
    return y0


def func_7b6fc241ab35487686f9b3d172207f4c(y0, x1, L, i, todo, x0):
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    if slope != 0:
        dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
    else:
        dx = todo / y0
    return x0 + dx


def func_15e1fec131d645bb865a9fba0bec9db8(L, i, target, Eat):
    todo = target - Eat
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    return y1


def func_f2f7a8ab5f6d4db8a9fe2ee638910c14(L, i, target, Eat):
    todo = target - Eat
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    return todo


def func_08f923a0a2b346e3be2911d4bee96984(L, i, target, Eat):
    todo = target - Eat
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    return x1


def func_c1141e28fd21408aae8f9994b8ddd6bd(L, i, target, Eat):
    todo = target - Eat
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    return x0


def func_5a26491b5b914fc28e0081c0b153681d(L, i, target, Eat):
    todo = target - Eat
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    return y0


def func_ac8374ed594c4eb8846b42ab6090d0ad(L, i):
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    return slope


def func_8916f695d33241f89ba37ee4509ea2b6(L, i):
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    return x0


def func_83e93227b7dc4787b59009298392fd67(L, i):
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    return x1


def func_0c8d8055a5354e81853e18de8c01d83b(L, i):
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    return y0


def func_2713d395e28b4fd18a040e0907228387(L, i):
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    return y1


def func_5f3ea3085e234e03bc2057bf8872c031(L, i, todo, x0):
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    if slope != 0:
        dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
    else:
        dx = todo / y0
    return dx


def func_4176859c261a4f3fa1be1ce26d18fe9a(L, i, todo, x0):
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    if slope != 0:
        dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
    else:
        dx = todo / y0
    return slope


def func_410401e21b91461da8b471ee99e63b27(L, i, todo, x0):
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    if slope != 0:
        dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
    else:
        dx = todo / y0
    return y0


def func_27e11daae3054f168aec45fc98215df6(L, i, todo, x0):
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    if slope != 0:
        dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
    else:
        dx = todo / y0
    return x1


def func_1581a0b4a39148f3863be22f3c1dac18(L, i, todo, x0):
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    if slope != 0:
        dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
    else:
        dx = todo / y0
    return y1


def func_c94f7f7ddb1049fd83dc63066e817c20(x1, L, i, todo, x0):
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    if slope != 0:
        dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
    else:
        dx = todo / y0
    return x0 + dx


def func_e6e9aa569a2b48eb949cea39c8e77148(L, i, target, Eat):
    todo = target - Eat
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    return x0


def func_487193cda43d46f6ab7b285741da049d(L, i, target, Eat):
    todo = target - Eat
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    return todo


def func_c34605c5b8ce44bbb6370a5e9393ac21(L, i, target, Eat):
    todo = target - Eat
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    return y1


def func_bedccbeaf3e64b95991e3682ed2c04aa(L, i, target, Eat):
    todo = target - Eat
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    return slope


def func_448cde5d538d40639453f92b2409403c(L, i, target, Eat):
    todo = target - Eat
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    return x1


def func_92e50e520b5941578828ba7123f2769f(L, i, target, Eat):
    todo = target - Eat
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    return y0


def func_084f71683f70461093dc98814e5b26a3(L, i, todo):
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    if slope != 0:
        dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
    else:
        dx = todo / y0
    return dx


def func_96bfdcee510c4bc2ac678650fe7a3a75(L, i, todo):
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    if slope != 0:
        dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
    else:
        dx = todo / y0
    return y1


def func_1d1dd272f74b4c559e9f62f386e3e9d9(L, i, todo):
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    if slope != 0:
        dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
    else:
        dx = todo / y0
    return y0


def func_f36d45bc472b4075bb56021982bbba5d(L, i, todo):
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    if slope != 0:
        dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
    else:
        dx = todo / y0
    return x0


def func_c239db7d435e44119e8cd8f98fa3ea02(L, i, todo):
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    if slope != 0:
        dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
    else:
        dx = todo / y0
    return slope


def func_c3a57331458c4634b84d274298598433(L, i, todo):
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    if slope != 0:
        dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
    else:
        dx = todo / y0
    return x1


def func_801b8c719942464885fd97f973245fcf(L, i, todo, x0):
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    if slope != 0:
        dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
    else:
        dx = todo / y0
    return x0 + dx


def func_a22e4f4433294f96afd205ff6ba57daa(L, i, target, Eat):
    todo = target - Eat
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    if slope != 0:
        dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
    else:
        dx = todo / y0
    return todo


def func_bdd365fccb714833a19ffd041bce659c(L, i, target, Eat):
    todo = target - Eat
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    if slope != 0:
        dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
    else:
        dx = todo / y0
    return x1


def func_a5346bb0fb664a10ac90918e152293a5(L, i, target, Eat):
    todo = target - Eat
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    if slope != 0:
        dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
    else:
        dx = todo / y0
    return dx


def func_483a7faf59634203ba45220e030808a7(L, i, target, Eat):
    todo = target - Eat
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    if slope != 0:
        dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
    else:
        dx = todo / y0
    return x0


def func_b22145ccb7834da1a7f6e3aa387ba7cc(L, i, target, Eat):
    todo = target - Eat
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    if slope != 0:
        dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
    else:
        dx = todo / y0
    return y1


def func_9aa21eeeacf847f880269e31027ff8a5(L, i, target, Eat):
    todo = target - Eat
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    if slope != 0:
        dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
    else:
        dx = todo / y0
    return y0


def func_993f2192da164c9e9c70622328874b23(L, i, target, Eat):
    todo = target - Eat
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    if slope != 0:
        dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
    else:
        dx = todo / y0
    return slope


def func_6fe9032d348743e69a061a185f26bf9a(L, i, todo):
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    if slope != 0:
        dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
    else:
        dx = todo / y0
    return x0 + dx


def func_a39aed38ccef4167914e0bd107cd377f(L, i, target, Eat):
    todo = target - Eat
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    slope = (y1 - y0) / (x1 - x0)
    if slope != 0:
        dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
    else:
        dx = todo / y0
    return x0 + dx


def func_b33035f588cc4e64857c13e936651ceb(L, i, target):
    part = (L[i + 1][0] - L[i][0]) * (L[i][1] + L[i + 1][1]) / 2.0
    if part + Eat <= target:
        Eat += part
    else:
        todo = target - Eat
        x0 = L[i][0]
        x1 = L[i + 1][0]
        y0 = L[i][1]
        y1 = L[i + 1][1]
        slope = (y1 - y0) / (x1 - x0)
        if slope != 0:
            dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
        else:
            dx = todo / y0
        return x0 + dx
    return Eat


def func_46ce5d7d4948463aa1613ade7d68f134(L, i, target):
    part = (L[i + 1][0] - L[i][0]) * (L[i][1] + L[i + 1][1]) / 2.0
    if part + Eat <= target:
        Eat += part
    else:
        todo = target - Eat
        x0 = L[i][0]
        x1 = L[i + 1][0]
        y0 = L[i][1]
        y1 = L[i + 1][1]
        slope = (y1 - y0) / (x1 - x0)
        if slope != 0:
            dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
        else:
            dx = todo / y0
        return x0 + dx
    return y0


def func_424b5941c2b8450b987b828960340491(L, i, target):
    part = (L[i + 1][0] - L[i][0]) * (L[i][1] + L[i + 1][1]) / 2.0
    if part + Eat <= target:
        Eat += part
    else:
        todo = target - Eat
        x0 = L[i][0]
        x1 = L[i + 1][0]
        y0 = L[i][1]
        y1 = L[i + 1][1]
        slope = (y1 - y0) / (x1 - x0)
        if slope != 0:
            dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
        else:
            dx = todo / y0
        return x0 + dx
    return x1


def func_6a69c63620384165a3fd0c1ec5e8467b(L, i, target):
    part = (L[i + 1][0] - L[i][0]) * (L[i][1] + L[i + 1][1]) / 2.0
    if part + Eat <= target:
        Eat += part
    else:
        todo = target - Eat
        x0 = L[i][0]
        x1 = L[i + 1][0]
        y0 = L[i][1]
        y1 = L[i + 1][1]
        slope = (y1 - y0) / (x1 - x0)
        if slope != 0:
            dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
        else:
            dx = todo / y0
        return x0 + dx
    return slope


def func_5375c73e767241da8026bc55f5e11f45(L, i, target):
    part = (L[i + 1][0] - L[i][0]) * (L[i][1] + L[i + 1][1]) / 2.0
    if part + Eat <= target:
        Eat += part
    else:
        todo = target - Eat
        x0 = L[i][0]
        x1 = L[i + 1][0]
        y0 = L[i][1]
        y1 = L[i + 1][1]
        slope = (y1 - y0) / (x1 - x0)
        if slope != 0:
            dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
        else:
            dx = todo / y0
        return x0 + dx
    return x0


def func_d1a9d5def2664b53bf04397c6386f047(L, i, target):
    part = (L[i + 1][0] - L[i][0]) * (L[i][1] + L[i + 1][1]) / 2.0
    if part + Eat <= target:
        Eat += part
    else:
        todo = target - Eat
        x0 = L[i][0]
        x1 = L[i + 1][0]
        y0 = L[i][1]
        y1 = L[i + 1][1]
        slope = (y1 - y0) / (x1 - x0)
        if slope != 0:
            dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
        else:
            dx = todo / y0
        return x0 + dx
    return y1


def func_997a8dd06ed540c2a6054488bc85b53f(L, i, target):
    part = (L[i + 1][0] - L[i][0]) * (L[i][1] + L[i + 1][1]) / 2.0
    if part + Eat <= target:
        Eat += part
    else:
        todo = target - Eat
        x0 = L[i][0]
        x1 = L[i + 1][0]
        y0 = L[i][1]
        y1 = L[i + 1][1]
        slope = (y1 - y0) / (x1 - x0)
        if slope != 0:
            dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
        else:
            dx = todo / y0
        return x0 + dx
    return dx


def func_0262e4f501234f32b7086cf9a9186a01(L, i, target):
    part = (L[i + 1][0] - L[i][0]) * (L[i][1] + L[i + 1][1]) / 2.0
    if part + Eat <= target:
        Eat += part
    else:
        todo = target - Eat
        x0 = L[i][0]
        x1 = L[i + 1][0]
        y0 = L[i][1]
        y1 = L[i + 1][1]
        slope = (y1 - y0) / (x1 - x0)
        if slope != 0:
            dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
        else:
            dx = todo / y0
        return x0 + dx
    return part


def func_c622e459ee2d4572b21485d24a589537(L, i, target):
    part = (L[i + 1][0] - L[i][0]) * (L[i][1] + L[i + 1][1]) / 2.0
    if part + Eat <= target:
        Eat += part
    else:
        todo = target - Eat
        x0 = L[i][0]
        x1 = L[i + 1][0]
        y0 = L[i][1]
        y1 = L[i + 1][1]
        slope = (y1 - y0) / (x1 - x0)
        if slope != 0:
            dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
        else:
            dx = todo / y0
        return x0 + dx
    return todo


def func_a160ec5b4a504a7d94cf90096e92a428(L, target):
    Eat = 0.0
    for i in range(len(L) - 1):
        part = (L[i + 1][0] - L[i][0]) * (L[i][1] + L[i + 1][1]) / 2.0
        if part + Eat <= target:
            Eat += part
        else:
            todo = target - Eat
            x0 = L[i][0]
            x1 = L[i + 1][0]
            y0 = L[i][1]
            y1 = L[i + 1][1]
            slope = (y1 - y0) / (x1 - x0)
            if slope != 0:
                dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
            else:
                dx = todo / y0
            return x0 + dx
    return x0


def func_0165b3e9bb214c0ea7ddfe87789b5eff(L, target):
    Eat = 0.0
    for i in range(len(L) - 1):
        part = (L[i + 1][0] - L[i][0]) * (L[i][1] + L[i + 1][1]) / 2.0
        if part + Eat <= target:
            Eat += part
        else:
            todo = target - Eat
            x0 = L[i][0]
            x1 = L[i + 1][0]
            y0 = L[i][1]
            y1 = L[i + 1][1]
            slope = (y1 - y0) / (x1 - x0)
            if slope != 0:
                dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
            else:
                dx = todo / y0
            return x0 + dx
    return part


def func_61f67884aeff49c896d79302bb1f6a9c(L, target):
    Eat = 0.0
    for i in range(len(L) - 1):
        part = (L[i + 1][0] - L[i][0]) * (L[i][1] + L[i + 1][1]) / 2.0
        if part + Eat <= target:
            Eat += part
        else:
            todo = target - Eat
            x0 = L[i][0]
            x1 = L[i + 1][0]
            y0 = L[i][1]
            y1 = L[i + 1][1]
            slope = (y1 - y0) / (x1 - x0)
            if slope != 0:
                dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
            else:
                dx = todo / y0
            return x0 + dx
    return todo


def func_3a9599b183c9438984df2fa99e3cd269(L, target):
    Eat = 0.0
    for i in range(len(L) - 1):
        part = (L[i + 1][0] - L[i][0]) * (L[i][1] + L[i + 1][1]) / 2.0
        if part + Eat <= target:
            Eat += part
        else:
            todo = target - Eat
            x0 = L[i][0]
            x1 = L[i + 1][0]
            y0 = L[i][1]
            y1 = L[i + 1][1]
            slope = (y1 - y0) / (x1 - x0)
            if slope != 0:
                dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
            else:
                dx = todo / y0
            return x0 + dx
    return slope


def func_6f526b85346a4470bce5a99dede58cf4(L, target):
    Eat = 0.0
    for i in range(len(L) - 1):
        part = (L[i + 1][0] - L[i][0]) * (L[i][1] + L[i + 1][1]) / 2.0
        if part + Eat <= target:
            Eat += part
        else:
            todo = target - Eat
            x0 = L[i][0]
            x1 = L[i + 1][0]
            y0 = L[i][1]
            y1 = L[i + 1][1]
            slope = (y1 - y0) / (x1 - x0)
            if slope != 0:
                dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
            else:
                dx = todo / y0
            return x0 + dx
    return y1


def func_4e35305fd43a40c3ac753d55a89a7497(L, target):
    Eat = 0.0
    for i in range(len(L) - 1):
        part = (L[i + 1][0] - L[i][0]) * (L[i][1] + L[i + 1][1]) / 2.0
        if part + Eat <= target:
            Eat += part
        else:
            todo = target - Eat
            x0 = L[i][0]
            x1 = L[i + 1][0]
            y0 = L[i][1]
            y1 = L[i + 1][1]
            slope = (y1 - y0) / (x1 - x0)
            if slope != 0:
                dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
            else:
                dx = todo / y0
            return x0 + dx
    return x1


def func_a6b16f535a604811a19da7851a3113be(L, target):
    Eat = 0.0
    for i in range(len(L) - 1):
        part = (L[i + 1][0] - L[i][0]) * (L[i][1] + L[i + 1][1]) / 2.0
        if part + Eat <= target:
            Eat += part
        else:
            todo = target - Eat
            x0 = L[i][0]
            x1 = L[i + 1][0]
            y0 = L[i][1]
            y1 = L[i + 1][1]
            slope = (y1 - y0) / (x1 - x0)
            if slope != 0:
                dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
            else:
                dx = todo / y0
            return x0 + dx
    return i


def func_772a2ea378944627a62e4cee49bae960(L, target):
    Eat = 0.0
    for i in range(len(L) - 1):
        part = (L[i + 1][0] - L[i][0]) * (L[i][1] + L[i + 1][1]) / 2.0
        if part + Eat <= target:
            Eat += part
        else:
            todo = target - Eat
            x0 = L[i][0]
            x1 = L[i + 1][0]
            y0 = L[i][1]
            y1 = L[i + 1][1]
            slope = (y1 - y0) / (x1 - x0)
            if slope != 0:
                dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
            else:
                dx = todo / y0
            return x0 + dx
    return Eat


def func_4fe8ffd5a83d41a2837758d397357b67(L, target):
    Eat = 0.0
    for i in range(len(L) - 1):
        part = (L[i + 1][0] - L[i][0]) * (L[i][1] + L[i + 1][1]) / 2.0
        if part + Eat <= target:
            Eat += part
        else:
            todo = target - Eat
            x0 = L[i][0]
            x1 = L[i + 1][0]
            y0 = L[i][1]
            y1 = L[i + 1][1]
            slope = (y1 - y0) / (x1 - x0)
            if slope != 0:
                dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
            else:
                dx = todo / y0
            return x0 + dx
    return y0


def func_ed08e8aec11a481c99edc4e9c81df1de(L, target):
    Eat = 0.0
    for i in range(len(L) - 1):
        part = (L[i + 1][0] - L[i][0]) * (L[i][1] + L[i + 1][1]) / 2.0
        if part + Eat <= target:
            Eat += part
        else:
            todo = target - Eat
            x0 = L[i][0]
            x1 = L[i + 1][0]
            y0 = L[i][1]
            y1 = L[i + 1][1]
            slope = (y1 - y0) / (x1 - x0)
            if slope != 0:
                dx = (-y0 + sqrt(y0 ** 2 + 2 * slope * todo)) / slope
            else:
                dx = todo / y0
            return x0 + dx
    return dx


def func_df3d42c836844416b878d00c1e948311(Low, Lower):
    Lower.append(Low[li])
    li += 1
    return li


def func_05e6e259e1d4485eb9e12a2db40bccc8(li, Low):
    x1 = Low[li - 1][0]
    y1 = Low[li - 1][1]
    return x1


def func_c7bdfbde2a6e49c6b7c15693eec2a25d(li, Low):
    x1 = Low[li - 1][0]
    y1 = Low[li - 1][1]
    return y1


def func_ef6e83a318fc4ddfbf70d5ea7f800377(li, Low):
    y1 = Low[li - 1][1]
    x2 = Low[li][0]
    return y1


def func_7695fa5617bf472b81d678035b9e8561(li, Low):
    y1 = Low[li - 1][1]
    x2 = Low[li][0]
    return x2


def func_f314cad7e0264799ae9d163b6265c391(li, Low):
    y1 = Low[li - 1][1]
    x2 = Low[li][0]
    return y2


def func_68b53bcae3ed429381f799bccf23d6be(li, Low):
    x2 = Low[li][0]
    y2 = Low[li][1]
    return x2


def func_9a330b441d204d8eb2a9173aa3dde36e(li, Low):
    x2 = Low[li][0]
    y2 = Low[li][1]
    return y2


def func_4a8cb6e77c6c4788a467cdebcf4b75b4(x2, li, y1, x1, Low, x, Lower):
    y2 = Low[li][1]
    Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y2


def func_2c38238525da47598aa667e70f6ba837(li, Low):
    x1 = Low[li - 1][0]
    y1 = Low[li - 1][1]
    x2 = Low[li][0]
    return y1


def func_5715264fedd04aeca714e439339701e0(li, Low):
    x1 = Low[li - 1][0]
    y1 = Low[li - 1][1]
    x2 = Low[li][0]
    return x1


def func_382372d0e9e04750827d4d325850e55f(li, Low):
    x1 = Low[li - 1][0]
    y1 = Low[li - 1][1]
    x2 = Low[li][0]
    return y2


def func_a00ddc7ffca84a7ab72a37d87a804cd5(li, Low):
    x1 = Low[li - 1][0]
    y1 = Low[li - 1][1]
    x2 = Low[li][0]
    return x2


def func_6510b097e5074f0d91675cd140f103f4(li, Low):
    y1 = Low[li - 1][1]
    x2 = Low[li][0]
    y2 = Low[li][1]
    return y1


def func_433e275adf044c1185abd2651159dd44(li, Low):
    y1 = Low[li - 1][1]
    x2 = Low[li][0]
    y2 = Low[li][1]
    return x2


def func_bd426755e4124f9eb1350653238094f5(li, Low):
    y1 = Low[li - 1][1]
    x2 = Low[li][0]
    y2 = Low[li][1]
    return y2


def func_bb8cd89430f44b4782204853dd5ce4f5(li, y1, x1, Low, x, Lower):
    x2 = Low[li][0]
    y2 = Low[li][1]
    Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x2


def func_ddb99a5869f54ffca6efcfe774779732(li, y1, x1, Low, x, Lower):
    x2 = Low[li][0]
    y2 = Low[li][1]
    Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y2


def func_8a82de4291734ab68429fec0a1f60806(li, Low):
    x1 = Low[li - 1][0]
    y1 = Low[li - 1][1]
    x2 = Low[li][0]
    y2 = Low[li][1]
    return x2


def func_afa023584a644994bc782d996f7e51e1(li, Low):
    x1 = Low[li - 1][0]
    y1 = Low[li - 1][1]
    x2 = Low[li][0]
    y2 = Low[li][1]
    return y1


def func_89c722908b97446d8d7da378753e8347(li, Low):
    x1 = Low[li - 1][0]
    y1 = Low[li - 1][1]
    x2 = Low[li][0]
    y2 = Low[li][1]
    return y2


def func_5cbdd7086ba84a93b8e9d27aeeda5839(li, Low):
    x1 = Low[li - 1][0]
    y1 = Low[li - 1][1]
    x2 = Low[li][0]
    y2 = Low[li][1]
    return x1


def func_d5e36a643a8545f6a34ddaed64a88bf2(li, x1, Low, x, Lower):
    y1 = Low[li - 1][1]
    x2 = Low[li][0]
    y2 = Low[li][1]
    Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x2


def func_c621ee510047472897dba7e8a2ec4dc5(li, x1, Low, x, Lower):
    y1 = Low[li - 1][1]
    x2 = Low[li][0]
    y2 = Low[li][1]
    Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y2


def func_118ba1eb3853482d96c2fcd79dfe8bed(li, x1, Low, x, Lower):
    y1 = Low[li - 1][1]
    x2 = Low[li][0]
    y2 = Low[li][1]
    Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y1


def func_5d00ba9afe514bcbbfaf9d4b42a6de53(li, Low, x, Lower):
    x1 = Low[li - 1][0]
    y1 = Low[li - 1][1]
    x2 = Low[li][0]
    y2 = Low[li][1]
    Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y2


def func_328b2ddd77574e19a7cb43f5229512e3(li, Low, x, Lower):
    x1 = Low[li - 1][0]
    y1 = Low[li - 1][1]
    x2 = Low[li][0]
    y2 = Low[li][1]
    Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y1


def func_248543a47ced4480b25e0922c144e2a9(li, Low, x, Lower):
    x1 = Low[li - 1][0]
    y1 = Low[li - 1][1]
    x2 = Low[li][0]
    y2 = Low[li][1]
    Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x2


def func_a728a12665584f289906f098d80bd84d(li, Low, x, Lower):
    x1 = Low[li - 1][0]
    y1 = Low[li - 1][1]
    x2 = Low[li][0]
    y2 = Low[li][1]
    Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x1


def func_39fa0e981d0249468b05e591abeb7f0d(Upper, Upp):
    Upper.append(Upp[ui])
    ui += 1
    return ui


def func_0af065ecb4ad4385b4e63f666dc83e9f(ui, Upp):
    x1 = Upp[ui - 1][0]
    y1 = Upp[ui - 1][1]
    return x1


def func_a1c43ae3ce6a48038ccfb6e3c52b06df(ui, Upp):
    x1 = Upp[ui - 1][0]
    y1 = Upp[ui - 1][1]
    return y1


def func_da05a8a5dc26435ba6f3e129a482f03b(ui, Upp):
    y1 = Upp[ui - 1][1]
    x2 = Upp[ui][0]
    return x2


def func_7a0633c3f07a4acba64170d11a01958a(ui, Upp):
    y1 = Upp[ui - 1][1]
    x2 = Upp[ui][0]
    return y1


def func_dd33226fb4774301b1f179a733a986d5(ui, Upp):
    y1 = Upp[ui - 1][1]
    x2 = Upp[ui][0]
    return y2


def func_ff1cd731d98246079206cfb74d6dc80e(ui, Upp):
    x2 = Upp[ui][0]
    y2 = Upp[ui][1]
    return x2


def func_e36f9089d12941729b6c5f80815a7a12(ui, Upp):
    x2 = Upp[ui][0]
    y2 = Upp[ui][1]
    return y2


def func_2e60c3d69a514f55b7563ceb7b16b56d(x2, y1, ui, x1, Upper, Upp, x):
    y2 = Upp[ui][1]
    Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y2


def func_61aef7474c8b4995972bd2b3ce3d0742(ui, Upp):
    x1 = Upp[ui - 1][0]
    y1 = Upp[ui - 1][1]
    x2 = Upp[ui][0]
    return x1


def func_18ea594068ef46e3b0796b0941fb742b(ui, Upp):
    x1 = Upp[ui - 1][0]
    y1 = Upp[ui - 1][1]
    x2 = Upp[ui][0]
    return y2


def func_82880f7979614c4b846913f07d5830cc(ui, Upp):
    x1 = Upp[ui - 1][0]
    y1 = Upp[ui - 1][1]
    x2 = Upp[ui][0]
    return y1


def func_1596fb93ca8845c88a3587cf3cdfd1d5(ui, Upp):
    x1 = Upp[ui - 1][0]
    y1 = Upp[ui - 1][1]
    x2 = Upp[ui][0]
    return x2


def func_4a4e8892569b4b0eb1b660913a1e751d(ui, Upp):
    y1 = Upp[ui - 1][1]
    x2 = Upp[ui][0]
    y2 = Upp[ui][1]
    return y2


def func_ef0be9ca7b73483daf6e0fc368637a86(ui, Upp):
    y1 = Upp[ui - 1][1]
    x2 = Upp[ui][0]
    y2 = Upp[ui][1]
    return y1


def func_77dc9dc0a96d404c8f7728dae5dd6f32(ui, Upp):
    y1 = Upp[ui - 1][1]
    x2 = Upp[ui][0]
    y2 = Upp[ui][1]
    return x2


def func_1ffbdbfe1de64565a74bafe7d853345a(y1, ui, x1, Upper, Upp, x):
    x2 = Upp[ui][0]
    y2 = Upp[ui][1]
    Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x2


def func_261c600a273a4fe18c2117dafdc27707(y1, ui, x1, Upper, Upp, x):
    x2 = Upp[ui][0]
    y2 = Upp[ui][1]
    Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y2


def func_e77edbd2ff494df6928c4bef44222a43(ui, Upp):
    x1 = Upp[ui - 1][0]
    y1 = Upp[ui - 1][1]
    x2 = Upp[ui][0]
    y2 = Upp[ui][1]
    return x2


def func_bf4329edae8a43a293c932065df28d47(ui, Upp):
    x1 = Upp[ui - 1][0]
    y1 = Upp[ui - 1][1]
    x2 = Upp[ui][0]
    y2 = Upp[ui][1]
    return y2


def func_85ff4b296e7b4c8ebcac944f41c64070(ui, Upp):
    x1 = Upp[ui - 1][0]
    y1 = Upp[ui - 1][1]
    x2 = Upp[ui][0]
    y2 = Upp[ui][1]
    return x1


def func_c986ca9ffa184653b13e35c173da0b35(ui, Upp):
    x1 = Upp[ui - 1][0]
    y1 = Upp[ui - 1][1]
    x2 = Upp[ui][0]
    y2 = Upp[ui][1]
    return y1


def func_2b658c5460e54a4abeaf1d9af7ee88e4(ui, x1, Upper, Upp, x):
    y1 = Upp[ui - 1][1]
    x2 = Upp[ui][0]
    y2 = Upp[ui][1]
    Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x2


def func_7a5f119026f24fef8330657079d69c22(ui, x1, Upper, Upp, x):
    y1 = Upp[ui - 1][1]
    x2 = Upp[ui][0]
    y2 = Upp[ui][1]
    Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y1


def func_ea1db51bdd6341e09e28c4ba68e383a3(ui, x1, Upper, Upp, x):
    y1 = Upp[ui - 1][1]
    x2 = Upp[ui][0]
    y2 = Upp[ui][1]
    Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y2


def func_f42b091701134333ba806030ded1dfbe(ui, Upper, Upp, x):
    x1 = Upp[ui - 1][0]
    y1 = Upp[ui - 1][1]
    x2 = Upp[ui][0]
    y2 = Upp[ui][1]
    Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y2


def func_82ec53c4fcb74ee3903058ca55a91bbd(ui, Upper, Upp, x):
    x1 = Upp[ui - 1][0]
    y1 = Upp[ui - 1][1]
    x2 = Upp[ui][0]
    y2 = Upp[ui][1]
    Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y1


def func_89c4d1db7b8b4a52bdf24de77ec61f36(ui, Upper, Upp, x):
    x1 = Upp[ui - 1][0]
    y1 = Upp[ui - 1][1]
    x2 = Upp[ui][0]
    y2 = Upp[ui][1]
    Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x2


def func_985aac8aca8840c0927e5994740cb46d(ui, Upper, Upp, x):
    x1 = Upp[ui - 1][0]
    y1 = Upp[ui - 1][1]
    x2 = Upp[ui][0]
    y2 = Upp[ui][1]
    Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x1


def func_5d6e1b8c17e2469f9552eff1189ff725(AllX, Lx, i, Low, Lower):
    x = AllX[i]
    if AllX[i] in Lx:
        Lower.append(Low[li])
        li += 1
    else:
        x1 = Low[li - 1][0]
        y1 = Low[li - 1][1]
        x2 = Low[li][0]
        y2 = Low[li][1]
        Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x2


def func_c0ad0d79bf1b4959b9a047dcaf936cf8(AllX, Lx, i, Low, Lower):
    x = AllX[i]
    if AllX[i] in Lx:
        Lower.append(Low[li])
        li += 1
    else:
        x1 = Low[li - 1][0]
        y1 = Low[li - 1][1]
        x2 = Low[li][0]
        y2 = Low[li][1]
        Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x


def func_7a350c6b272a419dafd866f6fe602475(AllX, Lx, i, Low, Lower):
    x = AllX[i]
    if AllX[i] in Lx:
        Lower.append(Low[li])
        li += 1
    else:
        x1 = Low[li - 1][0]
        y1 = Low[li - 1][1]
        x2 = Low[li][0]
        y2 = Low[li][1]
        Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x1


def func_368acd67127e4214b90217dcd4513508(AllX, Lx, i, Low, Lower):
    x = AllX[i]
    if AllX[i] in Lx:
        Lower.append(Low[li])
        li += 1
    else:
        x1 = Low[li - 1][0]
        y1 = Low[li - 1][1]
        x2 = Low[li][0]
        y2 = Low[li][1]
        Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y2


def func_93f81d0447b04b02a9f2547bcc581b5a(AllX, Lx, i, Low, Lower):
    x = AllX[i]
    if AllX[i] in Lx:
        Lower.append(Low[li])
        li += 1
    else:
        x1 = Low[li - 1][0]
        y1 = Low[li - 1][1]
        x2 = Low[li][0]
        y2 = Low[li][1]
        Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y1


def func_48cecfa4886242b6af4465aea7df1f0f(AllX, Lx, i, Low, Lower):
    x = AllX[i]
    if AllX[i] in Lx:
        Lower.append(Low[li])
        li += 1
    else:
        x1 = Low[li - 1][0]
        y1 = Low[li - 1][1]
        x2 = Low[li][0]
        y2 = Low[li][1]
        Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return li


def func_97f491ca88b64312a6fe03cb30ce2df0(AllX, Lx, Upper, i, Low, Upp, x,
    Ux, Lower):
    if AllX[i] in Lx:
        Lower.append(Low[li])
        li += 1
    else:
        x1 = Low[li - 1][0]
        y1 = Low[li - 1][1]
        x2 = Low[li][0]
        y2 = Low[li][1]
        Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    if AllX[i] in Ux:
        Upper.append(Upp[ui])
        ui += 1
    else:
        x1 = Upp[ui - 1][0]
        y1 = Upp[ui - 1][1]
        x2 = Upp[ui][0]
        y2 = Upp[ui][1]
        Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y2


def func_5e796168f4384be9bbb61d2312374f7f(AllX, Lx, Upper, i, Low, Upp, x,
    Ux, Lower):
    if AllX[i] in Lx:
        Lower.append(Low[li])
        li += 1
    else:
        x1 = Low[li - 1][0]
        y1 = Low[li - 1][1]
        x2 = Low[li][0]
        y2 = Low[li][1]
        Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    if AllX[i] in Ux:
        Upper.append(Upp[ui])
        ui += 1
    else:
        x1 = Upp[ui - 1][0]
        y1 = Upp[ui - 1][1]
        x2 = Upp[ui][0]
        y2 = Upp[ui][1]
        Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y1


def func_3a2eb55925cb480394842fc0ea3ea44c(AllX, Lx, Upper, i, Low, Upp, x,
    Ux, Lower):
    if AllX[i] in Lx:
        Lower.append(Low[li])
        li += 1
    else:
        x1 = Low[li - 1][0]
        y1 = Low[li - 1][1]
        x2 = Low[li][0]
        y2 = Low[li][1]
        Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    if AllX[i] in Ux:
        Upper.append(Upp[ui])
        ui += 1
    else:
        x1 = Upp[ui - 1][0]
        y1 = Upp[ui - 1][1]
        x2 = Upp[ui][0]
        y2 = Upp[ui][1]
        Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return ui


def func_9555d244503a4de4ad29c24521c42a22(AllX, Lx, Upper, i, Low, Upp, x,
    Ux, Lower):
    if AllX[i] in Lx:
        Lower.append(Low[li])
        li += 1
    else:
        x1 = Low[li - 1][0]
        y1 = Low[li - 1][1]
        x2 = Low[li][0]
        y2 = Low[li][1]
        Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    if AllX[i] in Ux:
        Upper.append(Upp[ui])
        ui += 1
    else:
        x1 = Upp[ui - 1][0]
        y1 = Upp[ui - 1][1]
        x2 = Upp[ui][0]
        y2 = Upp[ui][1]
        Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x2


def func_302de70446f447cc8311468ec410e023(AllX, Lx, Upper, i, Low, Upp, x,
    Ux, Lower):
    if AllX[i] in Lx:
        Lower.append(Low[li])
        li += 1
    else:
        x1 = Low[li - 1][0]
        y1 = Low[li - 1][1]
        x2 = Low[li][0]
        y2 = Low[li][1]
        Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    if AllX[i] in Ux:
        Upper.append(Upp[ui])
        ui += 1
    else:
        x1 = Upp[ui - 1][0]
        y1 = Upp[ui - 1][1]
        x2 = Upp[ui][0]
        y2 = Upp[ui][1]
        Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x1


def func_cce81cb30eb64ae3807dfe9d13082a1f(AllX, Lx, Upper, i, Low, Upp, x,
    Ux, Lower):
    if AllX[i] in Lx:
        Lower.append(Low[li])
        li += 1
    else:
        x1 = Low[li - 1][0]
        y1 = Low[li - 1][1]
        x2 = Low[li][0]
        y2 = Low[li][1]
        Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    if AllX[i] in Ux:
        Upper.append(Upp[ui])
        ui += 1
    else:
        x1 = Upp[ui - 1][0]
        y1 = Upp[ui - 1][1]
        x2 = Upp[ui][0]
        y2 = Upp[ui][1]
        Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return li


def func_bce89a3b89e44983ae385861d7eeecab(AllX, Lx, Upper, i, Low, Upp, Ux,
    Lower):
    x = AllX[i]
    if AllX[i] in Lx:
        Lower.append(Low[li])
        li += 1
    else:
        x1 = Low[li - 1][0]
        y1 = Low[li - 1][1]
        x2 = Low[li][0]
        y2 = Low[li][1]
        Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    if AllX[i] in Ux:
        Upper.append(Upp[ui])
        ui += 1
    else:
        x1 = Upp[ui - 1][0]
        y1 = Upp[ui - 1][1]
        x2 = Upp[ui][0]
        y2 = Upp[ui][1]
        Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return li


def func_05ad5d0caad34c11b5f8511b5f0ddfd4(AllX, Lx, Upper, i, Low, Upp, Ux,
    Lower):
    x = AllX[i]
    if AllX[i] in Lx:
        Lower.append(Low[li])
        li += 1
    else:
        x1 = Low[li - 1][0]
        y1 = Low[li - 1][1]
        x2 = Low[li][0]
        y2 = Low[li][1]
        Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    if AllX[i] in Ux:
        Upper.append(Upp[ui])
        ui += 1
    else:
        x1 = Upp[ui - 1][0]
        y1 = Upp[ui - 1][1]
        x2 = Upp[ui][0]
        y2 = Upp[ui][1]
        Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x1


def func_9c031e9f193248b9bfcb0c3587db2c2d(AllX, Lx, Upper, i, Low, Upp, Ux,
    Lower):
    x = AllX[i]
    if AllX[i] in Lx:
        Lower.append(Low[li])
        li += 1
    else:
        x1 = Low[li - 1][0]
        y1 = Low[li - 1][1]
        x2 = Low[li][0]
        y2 = Low[li][1]
        Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    if AllX[i] in Ux:
        Upper.append(Upp[ui])
        ui += 1
    else:
        x1 = Upp[ui - 1][0]
        y1 = Upp[ui - 1][1]
        x2 = Upp[ui][0]
        y2 = Upp[ui][1]
        Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x


def func_cffcb865255d46cdb54cf228e6d37297(AllX, Lx, Upper, i, Low, Upp, Ux,
    Lower):
    x = AllX[i]
    if AllX[i] in Lx:
        Lower.append(Low[li])
        li += 1
    else:
        x1 = Low[li - 1][0]
        y1 = Low[li - 1][1]
        x2 = Low[li][0]
        y2 = Low[li][1]
        Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    if AllX[i] in Ux:
        Upper.append(Upp[ui])
        ui += 1
    else:
        x1 = Upp[ui - 1][0]
        y1 = Upp[ui - 1][1]
        x2 = Upp[ui][0]
        y2 = Upp[ui][1]
        Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return ui


def func_c45755446f3c4835af196db9a9c518e1(AllX, Lx, Upper, i, Low, Upp, Ux,
    Lower):
    x = AllX[i]
    if AllX[i] in Lx:
        Lower.append(Low[li])
        li += 1
    else:
        x1 = Low[li - 1][0]
        y1 = Low[li - 1][1]
        x2 = Low[li][0]
        y2 = Low[li][1]
        Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    if AllX[i] in Ux:
        Upper.append(Upp[ui])
        ui += 1
    else:
        x1 = Upp[ui - 1][0]
        y1 = Upp[ui - 1][1]
        x2 = Upp[ui][0]
        y2 = Upp[ui][1]
        Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y1


def func_8ce376c3be694913a97cf23658769241(AllX, Lx, Upper, i, Low, Upp, Ux,
    Lower):
    x = AllX[i]
    if AllX[i] in Lx:
        Lower.append(Low[li])
        li += 1
    else:
        x1 = Low[li - 1][0]
        y1 = Low[li - 1][1]
        x2 = Low[li][0]
        y2 = Low[li][1]
        Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    if AllX[i] in Ux:
        Upper.append(Upp[ui])
        ui += 1
    else:
        x1 = Upp[ui - 1][0]
        y1 = Upp[ui - 1][1]
        x2 = Upp[ui][0]
        y2 = Upp[ui][1]
        Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x2


def func_744c18f5e94a4fae92d6f74ff496c9a8(AllX, Lx, Upper, i, Low, Upp, Ux,
    Lower):
    x = AllX[i]
    if AllX[i] in Lx:
        Lower.append(Low[li])
        li += 1
    else:
        x1 = Low[li - 1][0]
        y1 = Low[li - 1][1]
        x2 = Low[li][0]
        y2 = Low[li][1]
        Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    if AllX[i] in Ux:
        Upper.append(Upp[ui])
        ui += 1
    else:
        x1 = Upp[ui - 1][0]
        y1 = Upp[ui - 1][1]
        x2 = Upp[ui][0]
        y2 = Upp[ui][1]
        Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y2


def func_285b82ffb6de47168c2bc604279f18be(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    return U


def func_52940ec534474de093a9d7361b313949(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    return W


def func_a7a2d6ff6311484b869245f91ac67653(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    return L


def func_8c29e7273b9d488cb223d936bfba79dd(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    return G


def func_910b169a29154bbfae434390be3501fa(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    return Low


def func_15e8ccbd157841d3a93987b7dc3b1845(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    return Lx


def func_59a749e7ac0a48b58a01abab7721a727():
    Low = []
    Lx = []
    return Low


def func_ce193f1a20a2490ebbc5702654f34d09():
    Low = []
    Lx = []
    return Lx


def func_cf23c53f7f8540958efed974934e34b3():
    Lx = []
    Upp = []
    return Upp


def func_4bfb3bd6821f48bdad31024e557107ce():
    Lx = []
    Upp = []
    return Lx


def func_0c4c340d7f244b4897bb6c2794bfd89c():
    Lx = []
    Upp = []
    return Ux


def func_f8e3a3f981a44ed0a134c0228167db11():
    Upp = []
    Ux = []
    return Upp


def func_2e37e7977edf49579acd09f4ea465da3():
    Upp = []
    Ux = []
    return Ux


def func_0015a0d08bac496990d48086113aecd2(infile, L, Lx, Low):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    return i


def func_10e03021f564491dbcf77412c153f211(infile, L, Lx, Low):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    return Ux


def func_623b6fa16f134880958a4c9f0d879644(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    return i


def func_c1972f8533f948ce90ef8025665e72ef(infile, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return Eff


def func_97fc82f103f4421482d3e31ed7d89db0(infile, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return i


def func_23a22242a76f42e0aca73d9c3de3b8f5(infile, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return Upper


def func_fe204292bd8e4f47a1f5552deef6d303(infile, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return Lower


def func_5f2cde19b6214034903eddffb5aa9dfa():
    Lower = []
    Upper = []
    return Lower


def func_2d23ee34f3fa4994aebf24adf5106949():
    Lower = []
    Upper = []
    return Eff


def func_b9066351a4414bf193774dbf7093cf7c():
    Lower = []
    Upper = []
    return Upper


def func_af2f161b04ba4679b655c1b2c7c0f85d():
    Upper = []
    Eff = []
    return Eff


def func_cbb8edeedf294c1fbb4f864051ed628c():
    Upper = []
    Eff = []
    return Upper


def func_1997aec1e7df4f2c8c5b46ffdf284576(Lx, Ux):
    Eff = []
    AllX = Lx + Ux
    return AllX


def func_42b8910d99394557beb6ae8af24693d7(Lx, Ux):
    Eff = []
    AllX = Lx + Ux
    return Eff


def func_f82ce60db44b458c9f85b3db1298ce14(Lx, Ux):
    AllX = Lx + Ux
    AllX.sort()
    return AllX


def func_9da2e7929d1c498db49acf5eacdea7af(AllX):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return i


def func_9adeb81e10bf41128ee765effce0ed98(AllX):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return li


def func_9a2cdf1b78b341ce8cb11aa7e6174647(AllX):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return i


def func_72b1033005e6492ead4585f7c804b848(AllX):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return ui


def func_19d55ace27c44e31af7b9404d47b0ec0():
    li = 0
    ui = 0
    return ui


def func_075a2fcdcb384d50aad9853c26e9c03b():
    li = 0
    ui = 0
    return li


def func_a2e61339ed4d4927a3134b5bf48c0a24(AllX, li, Lx, Upper, Low, Upp, Ux,
    Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x1


def func_d652e8fbb42446b5955bb51e7de48733(AllX, li, Lx, Upper, Low, Upp, Ux,
    Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x2


def func_57b0dfd283844fc7a5d5e226ec91750d(AllX, li, Lx, Upper, Low, Upp, Ux,
    Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return i


def func_0d14ad8ce0d54f9c9e5f3050d284b744(AllX, li, Lx, Upper, Low, Upp, Ux,
    Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x


def func_c395844eebfa4e6fad5030aaaf9ad0da(AllX, li, Lx, Upper, Low, Upp, Ux,
    Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return li


def func_3b0a78c1770443b6a9b03ac00803cd93(AllX, li, Lx, Upper, Low, Upp, Ux,
    Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y1


def func_7a9beda58c5642199fc983c70f8cf6e6(AllX, li, Lx, Upper, Low, Upp, Ux,
    Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return ui


def func_e773d9d997e34061be98c1838bbf35fe(AllX, li, Lx, Upper, Low, Upp, Ux,
    Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y2


def func_9b226bc73bb54224ad784f436dc8ecda(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x2


def func_41183861f6224990b87850e5810133b6(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return ui


def func_2d9aed8c4f7c4206880af10438c269cc(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return li


def func_ed688c85995d403f98423ba9ede94ed9(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return y2


def func_4d19bfbaaf3449f1bb66cecb218ea9a6(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x


def func_5eac6f083a9c4560bbf459135ed164a9(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x1


def func_48984019672547a0912c871863c836bd(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return i


def func_de2996226a26404490807b92fbae8d48(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return y1


def func_2d5c92a815fb42a3819789a07a7dc4c1(Upper, Eff, Lower):
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Area


def func_bcc12f37626f4defaca895d1f86e2d77(Upper, Eff, Lower):
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return i


def func_2d340e6f0679430395675171c8bc3b7e(G, Eff):
    Area = AreaSum(Eff)
    Slice = Area / G
    return Slice


def func_5ce7d0c19e144a76a5bcebedea3e2ce1(G, Eff):
    Area = AreaSum(Eff)
    Slice = Area / G
    return Area


def func_0b20bd2ddd824eaca723da8d0ea0a136(G, Area, Eff):
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return i


def func_6a5720bfa94a41ce9c74c35ab34b5163(G, Area, Eff):
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Slice


def func_f90e3a73afa541c08bf1cb9d7612f5c6(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    return U


def func_61ea54f54120413293a0e621caee79a7(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    return W


def func_cae344188980461b9e3b652d07756146(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    return L


def func_664bc8235ddf42d6a80129f2a75aa2c0(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    return Low


def func_6bc8480a7c1f46db96d248f6e18e55ed(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    return Lx


def func_f0cae24a64084b8990c0bcf1353883d0(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    return G


def func_0f125b2319784cbf8769580ee0d5fa8e():
    Low = []
    Lx = []
    Upp = []
    return Lx


def func_920daa1b53814445946c9f490aacccd8():
    Low = []
    Lx = []
    Upp = []
    return Ux


def func_cc2d63cb95b4445f96fcca64bbf23af3():
    Low = []
    Lx = []
    Upp = []
    return Upp


def func_74dd0b9cecfc4a26b85eee19a80ed814():
    Low = []
    Lx = []
    Upp = []
    return Low


def func_90511741d4d649e6875128c18894517a():
    Lx = []
    Upp = []
    Ux = []
    return Ux


def func_36cf9fb132c64c30bfc06effed8f1db5():
    Lx = []
    Upp = []
    Ux = []
    return Lx


def func_281839a083564a30a1a9ed72fe43f884():
    Lx = []
    Upp = []
    Ux = []
    return Upp


def func_9e65fdcd77b746b6b0cf48e2a06f525c(infile, L, Lx, Low):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    return Upp


def func_c828ed52e5c248118fee3c2a3ba7e211(infile, L, Lx, Low):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    return Ux


def func_2f405f18b7a744afa46af6c755abaea9(infile, L, Lx, Low):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    return i


def func_f75bf498e46e49bb86559447dcc62473(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    return i


def func_19d8f22919e14038a305104d9f0bf54b(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    return Ux


def func_9076378df1c14cac85845e1325bc81b0(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return Upper


def func_0c4739bdf1994d9c98a45801d3afab80(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return Lower


def func_2523932be2854033b3dcbb2ed880748d(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return Eff


def func_ee878777b7cf43409a0482cc139bee10(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return i


def func_de588be305cf464b969e7c46f07f81b4(infile, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return Eff


def func_dee897bf81db4cf68350072c7eafe015(infile, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return Lower


def func_59a27e1fe0ad405c8b12e618fdb439cc(infile, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return i


def func_e5706e011b3b4b92a64176c0629a932d(infile, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return Upper


def func_58bf9922ef7d43aea8e2f2ae8fdaca43():
    Lower = []
    Upper = []
    Eff = []
    return Lower


def func_355fef49400648d3a5fba80347559aaa():
    Lower = []
    Upper = []
    Eff = []
    return Eff


def func_d7e3a9a83ef74a8c81a40092d9d6f97c():
    Lower = []
    Upper = []
    Eff = []
    return Upper


def func_f5501e618c134dce808f9808f74accab(Lx, Ux):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return Eff


def func_71f0a1cf9c9f4d13b654aebdd75b25fb(Lx, Ux):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return AllX


def func_c7209d1f736946da8fe597668a218d8a(Lx, Ux):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return Upper


def func_bcefd4e0920b4524a0a38c82dab6c6ea(Lx, Ux):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return AllX


def func_93bfb822f6d14c8aa27f06823b763aaa(Lx, Ux):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return Eff


def func_9af53f0bee794cc9bb40117b17f07a98(Lx, Ux):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return i


def func_41c8b3846eba45f3afe0180d897b9810(Lx, Ux):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return AllX


def func_4a5d60c7b8b4481ba2097a7ac0427e63(AllX):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return i


def func_4f0cce6cd33e43f498204497943ad208(AllX):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return li


def func_ab86ea2218234511862453a9aac137f6(AllX):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return ui


def func_1e83cf8bdb174382bbc98c6fa7a2dafc(AllX):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return li


def func_165c3214df434353be141bb538247b7f(AllX):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return ui


def func_846aad91376b48b1a5e87aec785f576f(AllX):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return i


def func_fdfc360839844acca79259e3c94dffd5(AllX, Lx, Upper, Low, Upp, Ux, Lower
    ):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x1


def func_52463c1b090f42e6b56bb75b029c18f0(AllX, Lx, Upper, Low, Upp, Ux, Lower
    ):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x2


def func_4fbba489b23744a38e73f573d26835da(AllX, Lx, Upper, Low, Upp, Ux, Lower
    ):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return li


def func_97a1cbca7d1a4feb924d4e7a243295e3(AllX, Lx, Upper, Low, Upp, Ux, Lower
    ):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return i


def func_c82146c08ddf4c4cbbf354e2a751727a(AllX, Lx, Upper, Low, Upp, Ux, Lower
    ):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y2


def func_9dd970585326432892636864b1c03fad(AllX, Lx, Upper, Low, Upp, Ux, Lower
    ):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return ui


def func_02603e812d4a4178899d44edc9df7325(AllX, Lx, Upper, Low, Upp, Ux, Lower
    ):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x


def func_0dcc43b8d79a4029b7717d85e4e1283d(AllX, Lx, Upper, Low, Upp, Ux, Lower
    ):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y1


def func_5270422a075f498a85e9435254bfa338(AllX, li, Lx, Upper, Low, Upp,
    Eff, Ux, Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return y1


def func_28d571d6ebdd40e7a63f79e076746c2e(AllX, li, Lx, Upper, Low, Upp,
    Eff, Ux, Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return i


def func_8e10b4e6c83f46618000775840f4527c(AllX, li, Lx, Upper, Low, Upp,
    Eff, Ux, Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x


def func_de5580be12a843028278fc48bede2aa7(AllX, li, Lx, Upper, Low, Upp,
    Eff, Ux, Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return ui


def func_49ac53f08a6a4f12b3e82fb4ebde2717(AllX, li, Lx, Upper, Low, Upp,
    Eff, Ux, Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x1


def func_9cc56cea06884f09809d5ffdb0b2bcf1(AllX, li, Lx, Upper, Low, Upp,
    Eff, Ux, Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return y2


def func_fe985c4f23514cd3b8d2968c9252f17b(AllX, li, Lx, Upper, Low, Upp,
    Eff, Ux, Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x2


def func_623a3443fd3447b4a760680f67c59d14(AllX, li, Lx, Upper, Low, Upp,
    Eff, Ux, Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return li


def func_1d71dfe4517e434e97255056973d8092(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x1


def func_77f1930eeb834d1bab858117a17fd73f(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return ui


def func_ce729308ec6d4d0590b18e932e714f1c(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x


def func_1f0cab99b5f9455cb796f4f17efec079(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Area


def func_84d59a5633c44438ad0c202537540bbd(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x2


def func_0067abdcddbc48259bdfea855921b5fb(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return y2


def func_e0ac6cd5427c4e4dbc41773573a735d7(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return li


def func_d4b0ff54c5b340db952cf26a81878f33(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return y1


def func_4dce767318d14a5c8a406415cca4ca2c(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return i


def func_b5c04222120548d8865b28cc448675fa(G, Upper, Eff, Lower):
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Area


def func_1d30f90e975f43eba14b2d5fc94c147a(G, Upper, Eff, Lower):
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Slice


def func_07349bca8ee04eefb12297218d75f9ab(G, Upper, Eff, Lower):
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return i


def func_ccda8ce724eb48e398bac481377d5501(G, Eff):
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Slice


def func_bfaa9e111878472f8e62fe68db6eb256(G, Eff):
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return i


def func_3c4c7a40caf4441fbebc8fb1db4e0d14(G, Eff):
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Area


def func_e4c91b47df9946bebf4fc4007edbe444(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    return Lx


def func_e708ee8a111e4ac38d258de4f7a97316(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    return U


def func_5e13c169bc8f4843bb18eb98316bf0b6(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    return Low


def func_443a798935d4486b84c2bc5d70fca415(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    return W


def func_5f8526d8cf5a4b118983e80f29b972d2(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    return L


def func_df301f7c7f754895b6b5f0c14f0d184b(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    return G


def func_403b4d7534c449b6bf62d9c2bda31e8d(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    return Ux


def func_19b7815c0f684c1a98f1225865a02863(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    return Upp


def func_aa02176c0daa4088bdb837e67085b6fb():
    Low = []
    Lx = []
    Upp = []
    Ux = []
    return Upp


def func_30fcf3af8ba944d591ed38b957988394():
    Low = []
    Lx = []
    Upp = []
    Ux = []
    return Ux


def func_19f36f46e98742e69b42b483ab7eb794():
    Low = []
    Lx = []
    Upp = []
    Ux = []
    return Low


def func_c52b784683444b6ba084840b844c799a():
    Low = []
    Lx = []
    Upp = []
    Ux = []
    return Lx


def func_a0391962b8204d1c8be153c1346ba051(infile, L, Low):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    return Lx


def func_705b2d83c33e42398afef0cc5cdf0583(infile, L, Low):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    return Upp


def func_30f15eca0c6e4806937f7bbb057dcb9b(infile, L, Low):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    return i


def func_edb8c6eb606740e0b862093729a895c7(infile, L, Low):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    return Ux


def func_7ce8c4f6e3904e0d8dba9923a1bbeadb(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    return i


def func_e0f7731cb95d4b6aa8c3bec7cabccd43(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    return Ux


def func_9bc298140e9f4dfe995eca83944e0cf7(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    return Upp


def func_21961cc2d32544d2a76cef8cd0d19826(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return Lower


def func_3177b758c0554eb5b60291aac6b89a14(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return Eff


def func_aa095cf1dbeb42c8bdc88b3c402de8d7(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return Upper


def func_a138f29638a4440a96d12b04f4dbb302(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return Ux


def func_c37d498480b341e8b7721d4ca734f2e4(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return i


def func_8f3b85539f1049baaec9b244b6a0b1d2(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return Eff


def func_29ebcdc3ec1e42afbb9e5592006e6e9a(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return i


def func_721e91c5e666418384c232771607c531(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return Upper


def func_185eb7550e2f4f159ccbb1e2de5d16a8(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return Lower


def func_adfaaa758f18439a91a1117ff3367fa8(infile, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return Upper


def func_7b56788f327746b5b06e46643b48f562(infile, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return i


def func_a9f6243380314715b255760ad6bda078(infile, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return Lower


def func_2a32a004089f45888937c85af8c99cc2(infile, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return Eff


def func_6ba7097d99584fefbe7b0486941fdf1b(Lx, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return Lower


def func_cfb156acff294f439e2d08e23dcf2e3a(Lx, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return Upper


def func_ebdb57bb131649d4b82be74493b912f3(Lx, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return Eff


def func_5bbe855e1f7e4f9e8f2db64512595c01(Lx, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return AllX


def func_2cf7d1933ffa46cf872fee6cf5224add(Lx, Ux):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return Eff


def func_ea5298ddee8a49a28cac5c22fb9ecfca(Lx, Ux):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return AllX


def func_f9843999d0c74d13a378bb6cf8ca2302(Lx, Ux):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return Upper


def func_4749205234e54f3095f5434cd3c82e74(Lx, Ux):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return i


def func_be95cb9f053d434f8dbe3c88ea7e3162(Lx, Ux):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return Eff


def func_544780f203984dec8a7ac48bb8d70e1c(Lx, Ux):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return AllX


def func_ae079d601964457e90acefcc2c2b6a02(Lx, Ux):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return AllX


def func_c76616a690584e249dad7cd2aa4c7f81(Lx, Ux):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return i


def func_c18deffdc9da4099b3661752bb4f938d(Lx, Ux):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return li


def func_47e0683697de45de930be931ed432708(Lx, Ux):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return ui


def func_a9f5543dae9f4f41b378c432fd06722e(AllX):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return ui


def func_09528f035fa04a53bd663167ad5f21f9(AllX):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return i


def func_c69733f536fc43c09987ef5e2106a109(AllX):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return li


def func_6d676da9f31e4413adc7a3e66ff037a8(AllX, Lx, Upper, Low, Upp, Ux, Lower
    ):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x


def func_6c7210a52c61438690378d1a1463e9aa(AllX, Lx, Upper, Low, Upp, Ux, Lower
    ):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return li


def func_3a7da7d7caad4d5f92226a86299ada0b(AllX, Lx, Upper, Low, Upp, Ux, Lower
    ):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y2


def func_2c19795534a74d3a8f659979d8524139(AllX, Lx, Upper, Low, Upp, Ux, Lower
    ):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return ui


def func_36fea21aa5f74cea8529ee21b120f2fb(AllX, Lx, Upper, Low, Upp, Ux, Lower
    ):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x2


def func_270e55c02e8e443db952478fc37c5aba(AllX, Lx, Upper, Low, Upp, Ux, Lower
    ):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x1


def func_003d3060dbb74e57a754e946eb53211e(AllX, Lx, Upper, Low, Upp, Ux, Lower
    ):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return i


def func_5646e471a50040d79f7984607a9b1a46(AllX, Lx, Upper, Low, Upp, Ux, Lower
    ):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y1


def func_2bcbb75e905a499bb4a4cdc62653e33c(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return y1


def func_00aa116b142f4424a2d17e7e773618aa(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x


def func_be91bcab807547f9b6f19c9aa4f31685(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return li


def func_0cabfb2b5e254eec8188248462ff0cc6(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return y2


def func_5be2c6448fc84baf9511f1c467db47af(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x1


def func_547738819efc4dc4a69a78dbfaf80839(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x2


def func_2d871aec8b854e389d3d8a90c16e7c68(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return ui


def func_19a4c44236f148b68ab674d5b5a7b3f1(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return i


def func_3bdb4e02afea45ac95f2e758aa19d4dd(AllX, li, Lx, Upper, Low, Upp,
    Eff, Ux, Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return y2


def func_7773b18830e341ada94bb724ee5e391f(AllX, li, Lx, Upper, Low, Upp,
    Eff, Ux, Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Area


def func_d8d02c3629dd4d7d83094bbc6739e95b(AllX, li, Lx, Upper, Low, Upp,
    Eff, Ux, Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return y1


def func_3d57b9a309704d6584de095524e7cec8(AllX, li, Lx, Upper, Low, Upp,
    Eff, Ux, Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return li


def func_f56d918574774c49b7fd4a6ed0b8cf3d(AllX, li, Lx, Upper, Low, Upp,
    Eff, Ux, Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x


def func_7116a2a9c4b042cb89bd84e61426b508(AllX, li, Lx, Upper, Low, Upp,
    Eff, Ux, Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x2


def func_ef8d01f56fb342059bc311ad3842d763(AllX, li, Lx, Upper, Low, Upp,
    Eff, Ux, Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return i


def func_fcb9f51f9a474441ae65db944043a8e0(AllX, li, Lx, Upper, Low, Upp,
    Eff, Ux, Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x1


def func_d49c34e777404dd3acc6b033e8ef14d1(AllX, li, Lx, Upper, Low, Upp,
    Eff, Ux, Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return ui


def func_26df27dfe40d4e32b937d667c5231f0f(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return y2


def func_1723b97afe0143648679a108e4f72e85(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return y1


def func_8bdf5612585b4fd9b3e5e3b9798e0d03(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x2


def func_2b17016f8d9a478197c68ba7fb9fcf66(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return ui


def func_a3e602b979b945d8aedaf0215ef5fbd2(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return li


def func_baf4ff7509d54ee39a955035442dcb9a(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Area


def func_0bc0e98acaf546cb994790c405aee9e5(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x1


def func_1e4425d5301d4794825e881a8759b2c8(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x


def func_f0b73cbeb8e84d6d82be36156956dd44(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return i


def func_fb17b3c7287e4d45b1606daa9edf88f3(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Slice


def func_0223317bdbdd4f49994390781a764a1f(G, Upper, Eff, Lower):
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Area


def func_defa5f0770874d8aaabf6733aa6e9609(G, Upper, Eff, Lower):
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Slice


def func_5332e9a584e54bb3922846d50df8dc92(G, Upper, Eff, Lower):
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return i


def func_ad3e287fec8944dea043ed2b1ea28855(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    return Ux


def func_0bcdaed07c3c4feda836c1e1fc2565bf(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    return L


def func_b1bdf8b2c94d43478fa3c04de5ca84c1(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    return Lx


def func_ba768aba2b6d427f831ca71488831e05(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    return Low


def func_68b1ea43ecc2456eb78692bd496b79a0(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    return G


def func_f4480aa6985141919b58dcb03fe9a11f(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    return Upp


def func_f895cee705844bfa809d1e6eef6d5afa(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    return W


def func_8faeca27c810465abb1e102f77f7984d(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    return U


def func_dc41dadd4eb045ffb4c71d280339d045(infile, L):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    return Upp


def func_d96a2b69980048e5b6380a6c9cdfaf56(infile, L):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    return Low


def func_341466959a5f458c969efb868452b84d(infile, L):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    return Ux


def func_4874a7da7b6b4c55a45e4662f06cffe8(infile, L):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    return Lx


def func_d5bf721ac0ad4107ba20f414f2edf05e(infile, L):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    return i


def func_502bef28fe0a420397f2d4727c6eb734(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    return i


def func_d444a2bf6176431b9b0086f89e88a0ac(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    return Lx


def func_366b288fb3734ca68a7e446395b1eba5(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    return Ux


def func_08d201ad98c94298b21fc26e3f4a9c44(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    return Upp


def func_3148b609a7264805b555d24491052b7d(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return i


def func_7278599aa4cd441389b7484e621b1cb9(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return Eff


def func_4209c81c9ca64651a59b231cf3574a87(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return Ux


def func_bad4cb98c6c841deac843db90812c26f(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return Upper


def func_43cb85f512ce48a29e5a833729e82dcf(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return Lower


def func_f80876b000ba4b7780fafa19c3768589(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return Upp


def func_4fdc3eab40324d93b2b794f899ddc2a1(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return Ux


def func_2d31076950b143c6b17c475fb0a504e4(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return i


def func_502498b1724b4e0a907263837b4c0e40(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return Eff


def func_dbd993b5e9714ad6bfb35ce1a26d38ed(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return Lower


def func_45ee8cab227b4b3c9157b071db5e1b84(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return Upper


def func_53f7833a8d2c4ea4ad1fded10d94e5b6(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return i


def func_7ac20b22e7d94d27b4862b8df155f31e(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return Upper


def func_dbeb19fbef424d019e3bd82b18e57e94(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return Eff


def func_7fb8c7d82eb34846883f72c5209eb730(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return Lower


def func_ff3281730ffb41babafbaae0452bf2bd(infile, Lx, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return i


def func_24cd15a1901d43f392fcc2dee48b3d84(infile, Lx, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return AllX


def func_6b7a1bccd266425883db5ead35345734(infile, Lx, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return Upper


def func_60e6b7486664475896adefaa6b319a9f(infile, Lx, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return Eff


def func_d4b9a0d124aa4c379e974e524bac19ad(infile, Lx, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return Lower


def func_6399b843a7ca4a648df7d949e3e286db(Lx, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return AllX


def func_d128e4adeede4d8c8fdfdaee1908eee8(Lx, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return Upper


def func_ca6b1089a91d49c3b00c6d9da7e69604(Lx, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return Lower


def func_9fc75ee5269d45889404a3080d27ebf7(Lx, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return Eff


def func_8598ace6c01d46e9a06de34626f344c6(Lx, Ux):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return Upper


def func_937c382b58944885bd6fec8deec5dabb(Lx, Ux):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return Eff


def func_0865bee1482845b096a2f317e532b8e7(Lx, Ux):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return i


def func_070133205c8047f3aa3b54f7d4f51f33(Lx, Ux):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return AllX


def func_33b1662131da410eac8aa6ca631ba7ad(Lx, Ux):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return AllX


def func_3657fcd77b824484a1ce4b8ee708d9a1(Lx, Ux):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return i


def func_209c55134e5842e59dc26286ed17eb13(Lx, Ux):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Eff


def func_75dbfebe5c6d42a1a0dd9c92d36eed03(Lx, Ux):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return li


def func_4541b139f1aa4364a27593873e26b65a(Lx, Ux):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return ui


def func_7d699a8ca58c4e9c8b646d662b264c1a(Lx, Ux):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return li


def func_5e4cf6bc62ab4409a0bf093b4d4bd432(Lx, Ux):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return ui


def func_b2106a902eba4bf8a54fabe2d95862a6(Lx, Ux):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return AllX


def func_2699041456fe41d59f11e6b37e6b12ba(Lx, Ux):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return i


def func_ee2f6a6f0b9949aa8cd90a83ca5d446c(AllX, Lx, Upper, Low, Upp, Ux, Lower
    ):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x2


def func_683821e79f554039916f244ccac37bde(AllX, Lx, Upper, Low, Upp, Ux, Lower
    ):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y1


def func_f7efdd2ede1a4616b20ba61e5412bcf5(AllX, Lx, Upper, Low, Upp, Ux, Lower
    ):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return li


def func_395749d789c641758e7f23273a024f74(AllX, Lx, Upper, Low, Upp, Ux, Lower
    ):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x


def func_d62d5901638a481499ad0ffd4f628160(AllX, Lx, Upper, Low, Upp, Ux, Lower
    ):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x1


def func_26611c5b405e4a05abaa1f7fa1b6a613(AllX, Lx, Upper, Low, Upp, Ux, Lower
    ):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return i


def func_b8905f3988494d1bbeae8e10f0be9763(AllX, Lx, Upper, Low, Upp, Ux, Lower
    ):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return ui


def func_d32e437ff2b84915bf00bb450c3a056f(AllX, Lx, Upper, Low, Upp, Ux, Lower
    ):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y2


def func_6d4dc0e8253643e2a2a1c689e10f5bc9(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x2


def func_855130b506ea4c83af82717c35085617(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return i


def func_c0b03716a30f4686897abac21e6e4a70(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return y2


def func_475d61bf5dee49c2a78034c892664994(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x


def func_9d88b10b4db24a789e47ae4889e0411d(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x1


def func_324694f53221427cb180e8bcb9cc8211(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return ui


def func_240ddeecea7548f181416bbb8b3322d2(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return li


def func_fc3ffec1af8d44deaef57ba5a6ed5d9b(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return y1


def func_8ef33cc945c74a94b124ed9fedc9071e(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return li


def func_97953fc80aa24d05b5756cd0a069ad4d(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return i


def func_8740ef7b47204f2ab8b95ce7a01f292a(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return y1


def func_3937bd7205b04b68a28cca1a5e80fe30(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Area


def func_be1a4bc533dc4cb491e4fd0366b5aca3(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return y2


def func_c621bc03dd104188b6e6246d14cef2f2(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x


def func_3086a84b0c9540e39e18d7249e0a2e66(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x2


def func_ea7e683dc5234e7386720cfebd3adba5(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x1


def func_d2c88eccd42142538548b40fc929c731(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return ui


def func_f4206f82826b4bff8165a7e3e792333e(AllX, li, G, Lx, Upper, Low, Upp,
    Eff, Ux, Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return ui


def func_6137295d6be1495ea15744ea2e5088f2(AllX, li, G, Lx, Upper, Low, Upp,
    Eff, Ux, Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Slice


def func_3e784916cdbf4da78f324c6a93042187(AllX, li, G, Lx, Upper, Low, Upp,
    Eff, Ux, Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return i


def func_bd6cf22a4b144eb3924dc84a324f84dc(AllX, li, G, Lx, Upper, Low, Upp,
    Eff, Ux, Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x2


def func_25b0ac8e79cf451985e11427c572f0a4(AllX, li, G, Lx, Upper, Low, Upp,
    Eff, Ux, Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Area


def func_18d3c95eb0d44e5c99e14f35b4898a2b(AllX, li, G, Lx, Upper, Low, Upp,
    Eff, Ux, Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x1


def func_41aa8535adb9493a89f3ea3a2ab438b1(AllX, li, G, Lx, Upper, Low, Upp,
    Eff, Ux, Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x


def func_e981c9b8e7ff47548547288a66933dfb(AllX, li, G, Lx, Upper, Low, Upp,
    Eff, Ux, Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return y2


def func_01f01eaa876e48d5a1e486cdf78c3aa7(AllX, li, G, Lx, Upper, Low, Upp,
    Eff, Ux, Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return y1


def func_e4d6d37bf8d8456097cc6db6a3203eac(AllX, li, G, Lx, Upper, Low, Upp,
    Eff, Ux, Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return li


def func_6ffa02cc54f24947be046ca1dfc6e375(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x2


def func_6d3b0ca935f04b528aa6c782f6cfc946(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x


def func_6c727a9f9c1448fab5b58400c734bb05(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Slice


def func_3f613a06c2f34802bc845081d075690f(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x1


def func_bf09c4bd5fc64487916c2cdbd6f73cf8(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return y1


def func_e2fa3aac85f5400b9a0d1b9a7370a9ae(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return i


def func_eb4368c765b14b79a600c8fd88a7a628(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Area


def func_fe57e1f6d4524be5a79b55428b7aeb2c(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return li


def func_4bdb5f856635478aa7398b2bb13a781f(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return y2


def func_923159b50853452db754fa2215f3f89e(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return ui


def func_84078d5064314509b3eaeaf09364d322(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    return Upp


def func_a7ff79c45edb48d9ae131e9ca4bc3ca4(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    return Low


def func_3fd20afd52664d45a1c69989e620b97e(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    return W


def func_bc287ef130f340a8a3a9969ba35b0c1d(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    return L


def func_5c0eb2167f4b41e7922c16f2206edb0f(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    return U


def func_a8acfd43a8184c60928e1ebb3c49fe5c(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    return i


def func_ad53a76897a34e43a4b5b3e8291727f1(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    return Lx


def func_9d2dcb8199284725a7baf889698ed708(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    return G


def func_a615555ba0ff4cc5a912c767855345c6(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    return Ux


def func_d0a504875dcb47cc8a94bd781fff9818(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    return i


def func_dc8f295fb7ce469e912be1bb6e077f02(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    return Low


def func_d39b11abc7794f908d014daf0de7db7c(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    return Upp


def func_4798b92da787474e9a0bce57f21ae515(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    return Lx


def func_778dffaeb4004a10908c0b9b434459d5(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    return Ux


def func_b48cdb3006a2430f98cf3254ead02f34(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return Lx


def func_0aad3ed33f9c4bcf8f57c7832303446a(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return Upper


def func_771510b0264b4f1f9c327eca47e01ec3(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return Eff


def func_f38ba1a248ad456ab5dc296a5b2dbdd0(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return i


def func_ba51ff9eb2864523862c93dcb552a19c(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return Ux


def func_1c5e8bdcd8634ece9faec4d0394bc0a8(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return Lower


def func_4e994d347c04404ab08f0670359b3ded(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return Upp


def func_6f4adec63d77486781e3e76237fb4487(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return Ux


def func_b8fc29b9240f472698ac7fb246fdbed4(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return Upp


def func_c4b724eb01724a318763b347df45d441(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return Upper


def func_09a1e1e62a8b4f2c8bd57d02e369df40(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return i


def func_29c745b461ca4afc9f784acd9f26ef00(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return Eff


def func_f553c403b6074bc08593a6a423d90de9(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return Lower


def func_573f17491b3244caaf06ec85b750fda1(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return Upper


def func_c415d12981ed4aefb4fa68b71eb6133f(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return Eff


def func_5034c7095b0e4a658187738d547a7e48(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return Lower


def func_ae83bbbdd33a4002976843cc867ed49b(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return Ux


def func_4a014e2515444b959dbb8cfead987100(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return i


def func_763efe0a527d4b1c9874b587aa27ea1d(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return i


def func_f8cc4a7ac1484d1b83cd2a855a4c9cf9(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return Eff


def func_e140ce61d39042288016507444fbdb7f(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return AllX


def func_8c512fc06cfb4381bb8681cd2d078846(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return Lower


def func_de9bddfb269d4e66bd417ef3a7bcba7e(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return Upper


def func_57a311799ed54c99981a847edf1adac9(infile, Lx, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return Upper


def func_f1955d14d8cb4f7b8887b44402a4325a(infile, Lx, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return i


def func_c337f45bc1b64eda834b82285c8e2b53(infile, Lx, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return Lower


def func_df886dbae74c451fbedac4c8311bc037(infile, Lx, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return AllX


def func_45ed873a419b4877aa81e01026ba9ef1(infile, Lx, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return Eff


def func_837dd809d94e44a686c74811b74c6f94(Lx, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return Upper


def func_3e2cb391a95b4e33b9a3d6caf8a611f2(Lx, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return Lower


def func_5aa939786fe444bfa0feb0c21819bf41(Lx, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return Eff


def func_f2ade4f497e84c87a697d4eb033a491a(Lx, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return AllX


def func_37e15bf8473149198e36f73fec7ec162(Lx, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return i


def func_2a72881ce9f84742934c90ca726dd502(Lx, Ux):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return ui


def func_c370fa4132244feb83a643fe1b69f844(Lx, Ux):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return i


def func_be5732e1939b45d49d1a672aaaaeb6b8(Lx, Ux):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Eff


def func_52f7064aec61417981bd6438c4db6ed0(Lx, Ux):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return li


def func_dfff07103f244d7b8c060de78c1b0a2c(Lx, Ux):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return AllX


def func_aaab07da76ab42a28ea35c5ad0cd4226(Lx, Ux):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Upper


def func_259e2d7292ad42bd8db6d82d5372c158(Lx, Ux):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return AllX


def func_9aaa56774cc6450d97ed29d3d41b60cf(Lx, Ux):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return ui


def func_1ca66c3538a04b43882565a6c050cb89(Lx, Ux):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return i


def func_0e8511d2aa264f9d827917358eca54bc(Lx, Ux):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return li


def func_5cd04d2fa7be4069b3acc7eb10885c8b(Lx, Ux):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Eff


def func_82157c18eced458fa9e498b1455aff1f(Lx, Upper, Low, Upp, Ux, Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return li


def func_6bee706e775442a28f8fdb0823e98b5e(Lx, Upper, Low, Upp, Ux, Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return i


def func_13c994d04ae347bd9f250f54847cf005(Lx, Upper, Low, Upp, Ux, Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return AllX


def func_cdceceed9ca34aa7a493424cb3311214(Lx, Upper, Low, Upp, Ux, Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x2


def func_8cec6674e0964660a550c2d2da4b4061(Lx, Upper, Low, Upp, Ux, Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x


def func_c59851c9057d462f881aea573eb88e5f(Lx, Upper, Low, Upp, Ux, Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x1


def func_7d1b534940ae4d3ebde9b957b7d3527b(Lx, Upper, Low, Upp, Ux, Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return ui


def func_1ed4ec1e50424bd2870e282de801727a(Lx, Upper, Low, Upp, Ux, Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y2


def func_a740d0f3824b468689e647d448c530b5(Lx, Upper, Low, Upp, Ux, Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y1


def func_635fe16b124440db96830487a89ee443(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x


def func_b120a6c7b86a4f9f8de089fa7a59d4d5(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return y2


def func_12defca98cad4180b0cde8e3001d906d(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return i


def func_e0cd18754c7b4f32b44f50b84f298491(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return li


def func_fd69e012da4549ba8537b1ac6600262d(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x1


def func_5c13ecf7544849799fd922a16fb6ac73(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return y1


def func_c05fc97d55a04f0a9d0b52d3c90142c0(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return ui


def func_bd51c68376ad4ab78645e50dafec78e0(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x2


def func_9e56b3fd641743bfbe6c793ea505649a(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return i


def func_94b4d84bcd284ba8b33a077a48ddcec3(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return y1


def func_d5ed5a3d83054dc2affc9cb3011df6be(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return y2


def func_77252cd629dc4841bbef375f1e17666d(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Area


def func_5e325ec180764eacb2bfff4389cb08f2(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return li


def func_a895c982bf7a467b996a9cb10cb36791(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return ui


def func_5552c893f4dd4307b2137999a11fdf3b(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x


def func_f7670b6d5239439f91d3aa77319e0a09(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x1


def func_0dcf289998184036a3cb82c80ac2d869(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x2


def func_4a801c8a46a94c15ae8be7ed54efbba5(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return i


def func_c7a4d6aa3f994d068357ba373072ae31(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return ui


def func_13f5d68b197f416a9c4a0e1a715d513d(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x1


def func_90251f9e17c34b399364e2a7f03fa2d3(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x


def func_57a1a333ba7e4c4bba09175791180358(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Area


def func_0c397ed8ecf4451ba325c4a343eb6d10(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Slice


def func_f2a884da4481483d899526d829162570(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return li


def func_e6cdb946f82b4a9293c21122bb0d02e2(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x2


def func_015b0b82a7434f878353d98bfd36ffef(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return y1


def func_cf3a44f63a054164a688e34d0b1adaec(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return y2


def func_0cd82590691d44b7832c450191b62249(AllX, li, G, Lx, Upper, Low, Upp,
    Eff, Ux, Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Area


def func_0944d47466fc43d1b5752b5479ca2ee7(AllX, li, G, Lx, Upper, Low, Upp,
    Eff, Ux, Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return i


def func_f4de6ae3c96a4722a65729fa54f6bf97(AllX, li, G, Lx, Upper, Low, Upp,
    Eff, Ux, Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x2


def func_9977ddebdb59428eb53bde04ec05bd2e(AllX, li, G, Lx, Upper, Low, Upp,
    Eff, Ux, Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x


def func_4b6c23e0a4f94a0db94d5c20c67545aa(AllX, li, G, Lx, Upper, Low, Upp,
    Eff, Ux, Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Slice


def func_c22a53425c024a3682d8b97d2fe789e8(AllX, li, G, Lx, Upper, Low, Upp,
    Eff, Ux, Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return ui


def func_4ad32bbdd3ec43e79afcc62450a4d72a(AllX, li, G, Lx, Upper, Low, Upp,
    Eff, Ux, Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return li


def func_0d7e4565358c4252b5b69cbf90c5f417(AllX, li, G, Lx, Upper, Low, Upp,
    Eff, Ux, Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return y1


def func_cc7d3bc4bb5f4cdc8735c42819e52139(AllX, li, G, Lx, Upper, Low, Upp,
    Eff, Ux, Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x1


def func_913bba167ef6421b84d31a08ee3c52ec(AllX, li, G, Lx, Upper, Low, Upp,
    Eff, Ux, Lower):
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return y2


def func_c7f0c2d77f524b7089f5f390930c086c(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    return Upp


def func_20954cbe83a9444999bfc1a582911cd2(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    return W


def func_c65699a59c004ea2b5f0f092420e522b(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    return L


def func_bb4f17bf72e349c0a455c3f070aa031c(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    return Lx


def func_e072c769e7b44c05b13b646e7b59a036(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    return G


def func_fa9dba4a432f4a46b7fc65a2724394b8(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    return Ux


def func_fc41086d70564671a8276eb5d447d022(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    return i


def func_778dd0afca8d47c0b37c9335089c2418(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    return U


def func_8cbbac01e67942429fb070eb1859cfef(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    return Low


def func_2caac1f4b65b46549305a47acc8f2084(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return Lx


def func_38fb8dec4a9a40278b7d6f083a7a15b7(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return Eff


def func_af6bd1abc1794c7cb930b228b4ef74c7(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return Low


def func_909b823724de46dcbe7d28b897bf51f1(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return i


def func_b80886d8561d454195f60aa43faa675b(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return Lower


def func_62482d8e42f5475b98dfeca09e0246c3(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return Upp


def func_c873632d1e5743928ce6692117ff0460(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return Ux


def func_4f0de398db5247b288bce978db71aa66(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return Upper


def func_7dd03cf6ef024bcbba20dc9e8f8e5e38(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return Lower


def func_8fef42fa1e4c4d04befccf8d894f3493(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return Ux


def func_88d24d4e1ae44ea3b4e83bad4c4b1053(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return i


def func_41c2c7c8ed7d4a7296847d114d05cc92(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return Eff


def func_5560e174e60c4622814da83c4ebee651(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return Upp


def func_c3d9f616a2b544e286f2332bfb935beb(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return Lx


def func_deb5ed66fb6a4deda31e8dedb3da44c3(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return Upper


def func_0c30894da1794e9b8b31d35a91a98087(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return i


def func_4d3e26becc2440e085abec199c11623b(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return Upper


def func_bcd43e69e2c3419eb7ebde45f43d8962(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return Lower


def func_826cc98b91a54d5ebde2188686e4a0f8(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return Eff


def func_1d7ea2e12d514381830dda3224356fed(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return Ux


def func_5d4fd54e7df14b3a82b2d20903c9d549(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return Upp


def func_2251c2d717034b4ab868365af4abab3e(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return AllX


def func_6245b6f06fee48fe841e9d4e5d1f3a64(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return Upper


def func_99ca28b4357245f08a39f63a37f6e7d3(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return Ux


def func_31d637bbe3024327bea7be72e0f30806(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return Eff


def func_6f8993b6e2aa433db384a6e179486556(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return i


def func_ff086ae419694fb8a30e65fb32b6ea69(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return Lower


def func_dfbcd131f7f84f2ba2be6efca3d91441(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return Eff


def func_0c8833a178e64821b8bc2cd6a9769e60(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return Lower


def func_948ddc597a4f4e42950f3a2b6ba5f849(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return AllX


def func_816344f3937a4ed399716e166933ad76(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return i


def func_7e8025199ed04738ae0300826bf8d1ed(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return Upper


def func_39336f1f2eec460ba4573d492108fd4a(infile, Lx, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return Eff


def func_d3d8258b829647459d838f5bddd18329(infile, Lx, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return Lower


def func_5acc67d8e44d44baa7f6a420327bdfd5(infile, Lx, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return i


def func_1039395100594bfc84a58121623722fa(infile, Lx, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return AllX


def func_e9411f8e68a6465f805b23397f42cd26(infile, Lx, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return Upper


def func_30e5267a7b0348ecb4d8719df0d33b40(Lx, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return i


def func_d2b6cbc857444218a95bdcd99fec0ec7(Lx, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Lower


def func_759296e0ef564ebb873070abbd177e80(Lx, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return AllX


def func_5f879cc110204b61a2b406ba1b664935(Lx, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Upper


def func_d93765fc0d2341798b48bb95371f51f9(Lx, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return ui


def func_191f32de5ca24f9b82f780ff0ddef634(Lx, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Eff


def func_8c64884540b94f2c81440236097ea1ac(Lx, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return li


def func_ee9632af561045b7ba7390ee8653140f(Lx, Ux):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return ui


def func_3c625053a2514b0fa3aa11513f98a70d(Lx, Ux):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Eff


def func_32868f470f834a3287839098ad32169d(Lx, Ux):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return li


def func_f9d1bedbb26b4218a330562e3dff5fae(Lx, Ux):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return i


def func_5c0b4cfe1b3f4239a885e05489c5baac(Lx, Ux):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Upper


def func_2a24d722a90b4a2a9566d8c80120f2ce(Lx, Ux):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return AllX


def func_e7a9908e37f64b56ac3ce63d322884cd(Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y2


def func_0a6300b8dcbc430992f5b4dcc9808bb4(Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Eff


def func_1720c3be83074ae0918cf22532969d1f(Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x2


def func_70519ae47e77410daf0c48b2a74bdf2e(Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return li


def func_8e3bb5e069ac43b1a5415c62e46ab01f(Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y1


def func_ffa2bac4b6b042bd8718f80a77ce4c73(Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return ui


def func_bb7a7ef9238a45278cb85ffac712cb32(Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x1


def func_3716dd6cea47464dae3ada6d68e443e9(Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x


def func_6c33eb42bd344e9797c37f8df75951de(Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return i


def func_3d13dbe5a5a1423d94e9e55f429124cd(Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return AllX


def func_ffb1b7e885594b3686ce223ad9c29a0f(Lx, Upper, Low, Upp, Eff, Ux, Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return AllX


def func_2cfb908b9b8f453196f36f892816cb1e(Lx, Upper, Low, Upp, Eff, Ux, Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return ui


def func_0ff16d5534a941688f7d42dc62de16a6(Lx, Upper, Low, Upp, Eff, Ux, Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return y2


def func_bbd87c037ae54646b31716d69bfc091e(Lx, Upper, Low, Upp, Eff, Ux, Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return y1


def func_c04d4b22d5bb4e318285995f25e5d05d(Lx, Upper, Low, Upp, Eff, Ux, Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x


def func_90a694601795480db12ef56c3b36a202(Lx, Upper, Low, Upp, Eff, Ux, Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return li


def func_57ab196253ab450485329405a571fe3b(Lx, Upper, Low, Upp, Eff, Ux, Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x1


def func_d1620eefbeaa414093233a846cdf53e0(Lx, Upper, Low, Upp, Eff, Ux, Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x2


def func_de0375dcedb74c7a85ec4317961fcf32(Lx, Upper, Low, Upp, Eff, Ux, Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return i


def func_79ba0a17e3af411b8beb86b0b0a6a15d(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return ui


def func_0384482a47774cc4aec80e76e27b6c90(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x


def func_e51cfcad4d2f446c9086763339c59252(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x1


def func_f9ec0804373247788541e7a15defb7e6(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return y1


def func_ad46b3e59ae945baba427ff60fa685d1(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return i


def func_bb259d3cff3b45979fc2d2565cbd93bc(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x2


def func_53d3576b3f5a4809a7645a22e54c5c3d(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Area


def func_5eda622752ac4baa887f9e7710b33b26(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return li


def func_08718c87662d46daae618021639eb6e1(AllX, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return y2


def func_53751c43f67f4a06a2ecbe394401125a(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return i


def func_9d1919804fbd47069a5d0ffec4c13a5d(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return li


def func_8156a180512e44848ef8529fff521ac9(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Slice


def func_bc1bfc2324b14f5690eafdb1f4c691cd(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x1


def func_9fce162fd66e4164838d78906c4b5d99(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return y1


def func_287ed2b9fa0b4f61bf07c31753bb4b0f(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return y2


def func_33de27bde90149279ead6a3da29bb3e1(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x


def func_768a476d047c441082dba722c322d4a6(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return ui


def func_251d3efe529445a19ee1c401b9bb50e8(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Area


def func_16baa189ad4f49ba8ed796999c82451d(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x2


def func_c1ba009574a340f79069659013f31e1d(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return y2


def func_3264419dc164491794fe242cbba88125(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x


def func_b9a00622cbaf4df2b0ab613bbf3ec61b(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return y1


def func_bb4a8a54831c4dc1a62af95a600aaf3c(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Area


def func_4e1723ccb04646029565fa2d91468afd(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x1


def func_badbb51b586f4847a12f0a52c97b8a49(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return ui


def func_d5b68825f63f4722ab01006677964c07(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Slice


def func_f266d2c8b0494cc391127e3672932f6c(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x2


def func_19caef69eddf4b33994cf69d127ffdc3(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return i


def func_4cfb793de81b43c28f32abd5d4ba2a50(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return li


def func_804c417a7bd446dbb798f17970bad6c4(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return U


def func_65f58feaed9f47dbacb4a7ffe8ae05b8(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return Lower


def func_0e36d55bafda4aa8ab3c10ff79630b41(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return G


def func_5842ff52d981474ba8b811d907a35cda(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return i


def func_8f84614f80c540efae1484413f113fd8(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return Eff


def func_14dbecb42dbc48f3aa91bc74e7f5a438(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return L


def func_d9166be22d8845e0b6877bd387462ec2(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return Ux


def func_c916d5284f2d410faee34f674bc53af3(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return Upp


def func_d0636edd203c46c4b3a3c1f5861cc6ae(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return W


def func_b1ca6a47032a44cab9d12509b7286e8c(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return Upper


def func_3b11f13fdb6c4e6bbc4f0d8125a68fac(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return Low


def func_04c1956473cb41aea3e67d9e0d2d4664(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    return Lx


def func_6519df15343b4b2689f1f78f7a5cca14(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return Lower


def func_b5822bd0ff31494fbffccc11249bdf7a(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return Ux


def func_365ca0297f1c4c18abdeda9d8a4b7e8f(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return Lx


def func_da6084b570744eb98327a2b4c39df5ff(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return i


def func_4270218b367449cf9f86a3e143d4c25c(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return Eff


def func_f0f106fd0758463c847b3b9f88237de8(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return Upp


def func_2804cc86df13433099a55b74c545a5b3(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return Upper


def func_cbe95f436c8e4867b57a188fae9c01f4(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return Low


def func_ca4e0b14e08f47029dfda210a661dd2a(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return Eff


def func_a0942cfe22d74f9bae2c0353547c3d38(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return i


def func_893def4d1b8f46f49562760bc603067f(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return Lx


def func_18c8406c719143b5b1fc252dfbaab1b4(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return Lower


def func_cad2b5aacfc24239b82fd5a43fb9a3e8(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return Upper


def func_daeec55cc3e84c1ba26d8eb29783e256(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return Ux


def func_85f02d866b0f4174860efea9f694b356(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return Upp


def func_f21a92d50dc442ea96433800d3b0f385(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return Upper


def func_0db67e56748641a79604d1fe62268458(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return Eff


def func_f6acba01ea2f4131a032de1ab9e631ae(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return Upp


def func_b5a96a33cadb4c5fb263d61a8fa17dc6(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return i


def func_7cd2194e123540e5a7edb0be48df3e29(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return AllX


def func_46f1a59d086045308f9f82e172b629de(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return Lower


def func_703d4babf17d494799ec58c644c731ad(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return Ux


def func_228bb0969a6e49fea5ce30e81cee7fcb(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return Upper


def func_937305e4c3ed4025b1426599efcc02e3(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return Eff


def func_7bbb14e8a0d64c5f826ad3339d19b270(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return Lower


def func_3f6a07f0743e477884b5f16a9d846d7b(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return Ux


def func_c0ae159b2a014549bfa2684356cc9700(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return i


def func_bc28c3ff37a44b318640fab381d16f8a(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return AllX


def func_d8dec922fb98441986dcbc0c07fff97b(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return i


def func_6c2e351cadce491984decb01f04883da(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return AllX


def func_19996f9f54eb4dd8a989e92508ef528e(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return Eff


def func_8eb1ec9340554e0bac452bba078e27d6(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return Lower


def func_5b9202ffb4c34b09b3c480b589c61a85(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return Upper


def func_78e3ac7f2f6f4579871e1eb6e6c299e3(infile, Lx, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return AllX


def func_76c5f203979e43598b27c99886372f63(infile, Lx, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Lower


def func_5253d8c1a0264a6faae9b4f13aaed244(infile, Lx, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return i


def func_8fa36f8e8982493fb1455042b1bf84c4(infile, Lx, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return li


def func_ac0c9da31e2649bf8f4275c7e0c83abc(infile, Lx, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Upper


def func_f681bd0e3c8f4fa18d0ffebfc5337512(infile, Lx, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Eff


def func_ae7bc9bf154a4817a3ba930f5c47649f(infile, Lx, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return ui


def func_f6a04e7e8c15495da28d374c55009505(Lx, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Lower


def func_a927d5365dac453ca90eacd1e2d2f315(Lx, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Upper


def func_0495869f934e48dd960f179767532ad0(Lx, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return ui


def func_686d8e0caffd4a37a5dc13e25a24ccf4(Lx, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return AllX


def func_6cfd0a32b74146a6991663ad6165c134(Lx, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return i


def func_47a3bd7d014540078f3edf15098412b8(Lx, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return li


def func_bc6684d8fa954a03a8d026dc2a396434(Lx, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Eff


def func_a44f5fc83cc04ca8b5e73508f6a3458b(Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x1


def func_7028880e86374afeada8af93fd7a84ae(Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y2


def func_c692edeb81194e45bacd87255c1906d3(Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Upper


def func_3fb0837850e049d19194e0032f2cefc3(Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x


def func_3951e9e6b5834612a2e5c514f47ebbb3(Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return AllX


def func_69b7aebb0e0d4e8a8f9227c0d55f2e4a(Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return ui


def func_e53eda922a464f3b8181bb18cf6977ed(Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return i


def func_2de90293e25e4d5e8330693cc92e1f10(Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x2


def func_871d3f0a3b344b7087f6a0f8a3541d47(Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Eff


def func_c455f09d060c4df78fec4275510ac9c4(Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return li


def func_c6ea6460b9fa409fb138fc56fd4ce33d(Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y1


def func_6808b05a552e465e99992f7d77b9e078(Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return AllX


def func_1ea9504849c241909e3f526389deaf71(Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return y1


def func_60fc17d0bfd14dda87c9c4fa4a285423(Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x1


def func_fe900d130cf746e2aa35c1231e094947(Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x2


def func_c5d89d4a245341e78ffab396fe0c92ea(Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return i


def func_a52682fc04374227a20622c34ad43046(Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return ui


def func_4752aa60451c436f9b41f999b28daea0(Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return li


def func_afb2873230b140c4b483db9ab5cc688c(Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return Eff


def func_e337921509af4a70adf70c5e1bb58972(Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return y2


def func_c25b8be00d4242ac86ba7713fb558294(Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x


def func_f96ca33bfbb1472fa213530258f43730(Lx, Upper, Low, Upp, Eff, Ux, Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return li


def func_0c87ca2adbb54b2482b44a8056ef70f9(Lx, Upper, Low, Upp, Eff, Ux, Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Area


def func_53376fecef854819ba286ef846273671(Lx, Upper, Low, Upp, Eff, Ux, Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x1


def func_a3325167a8b646ebb16993ed3caca182(Lx, Upper, Low, Upp, Eff, Ux, Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x2


def func_8c8770ea6c244a1b8093537997ab3ab0(Lx, Upper, Low, Upp, Eff, Ux, Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return i


def func_dee37992f3dc4217be6a988d9c09636b(Lx, Upper, Low, Upp, Eff, Ux, Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return ui


def func_a7204f1b515e47ed8d4bcfa5cb2226e8(Lx, Upper, Low, Upp, Eff, Ux, Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return y1


def func_28786dcaf6f84c47aa2315722eb9e055(Lx, Upper, Low, Upp, Eff, Ux, Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x


def func_15a432782b8944a58596ca46695f2be0(Lx, Upper, Low, Upp, Eff, Ux, Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return y2


def func_61e940fd35e34d068fc232189380395a(Lx, Upper, Low, Upp, Eff, Ux, Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return AllX


def func_a7207dcbc8f0449eb931ea18e3d9ef58(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return y2


def func_63ab51ee24024b4c934f3e0e0e84f24c(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x1


def func_b0884eb1b523457a831929e6c5422525(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return y1


def func_3d8fd41727c3479f9ee9e0bd061c71e2(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Area


def func_f63a0a0168404e5a854c7d8c81bbc419(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return i


def func_46107053fa0c428d88a4ce5df7c6c6c7(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Slice


def func_ab3d7b91bcd74df6b4f229181d474043(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return ui


def func_64b6cffa06024c62bc2a737c998f8ca5(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x2


def func_26ca0cbd9687414090e6da48985708e9(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x


def func_2b4980c50baf476ab915ff6e88ef17a8(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return li


def func_f06e2057890349ed98f2e8f8932b2525(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x1


def func_2f4f62e80615404cb25dedf7125503dd(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return y1


def func_679175a94d0242a689e55d9254544304(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Area


def func_73bd39e701c94ee0adb68c311f2ba628(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return li


def func_3d146acc84cf4c438bc7952a7ce93f61(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return y2


def func_f3c2dabb16e0472c8c8f25d442aa0837(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return ui


def func_eedb964ca1f64ea9b1afec0626678ad1(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x


def func_8d647b0ad2c744b2bf136b27f7a2289f(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Slice


def func_f79ff0bda90f4991b7636284494b35e0(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return i


def func_cec9ccd54a994e4d83357aa7ff674b47(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x2


def func_9617856b7cc04b5ba5af04221de45688(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return Eff


def func_e08b84f718024801b7e9be810fe78a27(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return Upp


def func_c8c53712babf4b17a955612e445ed8ab(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return i


def func_9978e9bdc4e14099a431fc2d5dc09197(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return U


def func_23f208d06a524d0987c390a02d627c81(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return Low


def func_4c7f15923d354b86bf1a9ae3b1cdc4de(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return Lx


def func_1dc1c3923ae54c1cb5ca669c94ed9051(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return L


def func_b9960d360f2b48fb8e999d8c5402fc39(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return Ux


def func_5aee819e538c4eb6ac051955a9f6668a(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return G


def func_15c7be4f06f648299be632a289813b25(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return Lower


def func_4593437e89974c09a00900e0888e4966(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return Upper


def func_a7a9af061c984f6fb9b515a86ecd449f(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    return W


def func_1ff7c655b4574d3099724a036b7be37f(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return Lx


def func_99235a0084544377942698478cb7920c(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return Low


def func_1fedd415f6604519abfa7b48fd984fd4(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return Eff


def func_cd1611c5de534505ada1a37631ac5ae4(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return Upp


def func_32d658c0fca04d3086e11b71d3698e11(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return i


def func_3edc83e6e01e4111a00f01ebd46209d7(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return Upper


def func_21064e3974184a9282c3eb4815846b9a(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return Lower


def func_c704bc604c7f4d5887e3b5d8b0651f11(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return Ux


def func_956f960857344bbb957571ff31b223c5(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return i


def func_01cb24b076994711b362cecacc856852(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return Upp


def func_1f1081cd957a4ba297ad89701d559868(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return Eff


def func_a3eff443d3ac453ab71dd9500cf36536(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return Ux


def func_4f7318b204ed4d97be29a2ef3eb60872(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return AllX


def func_77b6980d069c42e59bcc3e4171f87fc0(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return Upper


def func_c39578799ad0472da677b3204da881d6(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return Lower


def func_1f6727ad056d449e9d53e5f1802842de(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return Lx


def func_6da4d405c2ac4c139e2321954bb9383c(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return Lower


def func_61b80e09755b45e881c4b55696344b7c(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return Eff


def func_6e4444ade882408b8325c93463403557(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return i


def func_68f9067945b048cf967d80ca46a79f31(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return AllX


def func_dc97186db7c24ecf936fb1251c0998d9(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return Upp


def func_687d4261649342de8e7af335e6f3256b(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return Ux


def func_8dca70371078484cb84d2f4b5437f77a(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return Upper


def func_b3fd2336afce4b0d94ed55a12bd945a8(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return i


def func_66bdd1ce1367470b8bdf17f37ce6c919(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return AllX


def func_6e8e8c0f07364dbc86f273ebe82cc534(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return Ux


def func_afd86acb897b4e9c8fc29e08eb40e30e(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return Eff


def func_40f3d677f1624cddb92604fb1787e7d0(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return Upper


def func_6d3f2791e0054e118e0aa0ac5e36ecc9(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return Lower


def func_c9d0ae1a31be47f598df8af6e7760612(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return li


def func_06bb8ad294f14db3b4f442074ca95eb8(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Eff


def func_3eb46261e5134d0aaad7c3f6ec27245c(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return i


def func_59a5ad6261694d1f88942981d6bb856d(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Lower


def func_64352fe383cd49aaaca5363af9be33a7(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return ui


def func_06e9a054dbd3427c89af2e5f258deed7(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return AllX


def func_c0186db9531143ec8040490b33bb6d5c(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Upper


def func_5f8ed9b2e0ef4a5a92c52a7ddfcb2f0f(infile, Lx, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return li


def func_f259283e3c5348b18db07ea64caa9653(infile, Lx, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return i


def func_f9f05f37f94d45c8b261f5c99eaa5931(infile, Lx, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return AllX


def func_ce6a9e7cbbbe408a9f4beea6e8a25ad4(infile, Lx, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Upper


def func_2bcc12444fdc44938192cd142ae589af(infile, Lx, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Eff


def func_b716505238784159b20f097f8e02fadc(infile, Lx, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return ui


def func_3e5285bfbabb4d29af55bc4d5c1029c3(infile, Lx, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Lower


def func_e8058e0cbd8548789c228b7c23e19696(Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x


def func_fe8c905ea1774803af4e7e2c5d310858(Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return ui


def func_d7daf7ab24ac4acfbe1eb5a3075c5999(Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y1


def func_62ebd1cc3b1140f7a3d4b33fac0d15d7(Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return li


def func_b3ded5cc7ab44707b1fd55d664de805c(Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Lower


def func_5659d3ee972f4ca1a86bf9ed0cbf8380(Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Eff


def func_35ee8ab402ae4c4193dc28ac4cdce61c(Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Upper


def func_62536bbce54f4b96a1833a8b4cd3f293(Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x1


def func_0bcaeb7b8964405fa5c183100f26021f(Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return i


def func_9cbfaf25c5564ecfbb6029aea3515423(Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x2


def func_fef1c2b66fb94ac580181c94be243146(Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return AllX


def func_f3637bc75f8a41d99e03375a733cf108(Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y2


def func_4460e34a1ffa4db69e39ccf047937bd3(Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return i


def func_3e703e072a434adc8e4a1fb8b09fd104(Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return y1


def func_1308ab70f240410da92d5ef2f693053b(Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return ui


def func_e915eddc8851457988e52002ae39c250(Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return li


def func_e123efbc6fbd48dd83149c0f79f0ab85(Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return Eff


def func_5484c89522e348a9970fe00e604cdab2(Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return y2


def func_da4cf68dcddb4b6181f08381c0426075(Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return AllX


def func_e60a921e375f4901b715871e4e763f73(Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return Upper


def func_e70a4e3d0bcd44ee98e6e0569ca2cc00(Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x2


def func_24a5b3a66a8641febffc80351734eadb(Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x1


def func_df58f03477234c6c964bf482a7258a54(Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x


def func_5ec4417ceda846f99b4c15f390869c23(Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return y2


def func_9f216c1e0b5442dc8129282598343d40(Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return AllX


def func_9ed61123cc1c4eedbbdfa5b8c135296e(Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return y1


def func_39b3511793e54c0ea4608f59ab40ed86(Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Area


def func_9ed23fd772f64e3c9d05f5ada0d49735(Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x


def func_3a02bef048f8420aa66313bbe5f385a0(Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return i


def func_70905833b28347bf869748b12b7b3854(Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return li


def func_8c3cbb271ce24af386435f302bfaf20c(Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x2


def func_e544f6c90c724a28a1b7926fa875cea4(Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x1


def func_3f4d26d78e784b1e95f75996435509ae(Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Eff


def func_ca2acfa7355a4257af48881db880db92(Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return ui


def func_d802bb87df1b402182aedc3f3dbc7eec(G, Lx, Upper, Low, Upp, Eff, Ux,
    Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return y2


def func_29cc0aba7a4b450692255854bed048ff(G, Lx, Upper, Low, Upp, Eff, Ux,
    Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Area


def func_bff23ddd7ac247cfb2049ca7b8ba6535(G, Lx, Upper, Low, Upp, Eff, Ux,
    Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x


def func_9a098e844eaa4a26b1e8dc3aba3757ff(G, Lx, Upper, Low, Upp, Eff, Ux,
    Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return i


def func_ca029b043f5f412e8e6e43e615a9d2a5(G, Lx, Upper, Low, Upp, Eff, Ux,
    Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return li


def func_46e7075725c44d5c89157f4eefd3f257(G, Lx, Upper, Low, Upp, Eff, Ux,
    Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return AllX


def func_9e432b788c3d4c8c97fa243b406c90c6(G, Lx, Upper, Low, Upp, Eff, Ux,
    Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return ui


def func_7d149e75f0354ea6908f4580a6693e44(G, Lx, Upper, Low, Upp, Eff, Ux,
    Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Slice


def func_81fbc651831545eb84dc99fc305ff3e2(G, Lx, Upper, Low, Upp, Eff, Ux,
    Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x1


def func_85f2ba256c1d4623bde49c1e69e2d3ec(G, Lx, Upper, Low, Upp, Eff, Ux,
    Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return y1


def func_f42ca5a66902421e87e68e6ba189785d(G, Lx, Upper, Low, Upp, Eff, Ux,
    Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x2


def func_c7b8c3077c1840479b21ae658613628f(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return y1


def func_73d59db4b4104de3b7fa5c8b427b122f(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x2


def func_03c2604399ed4e35a39bb2ac71f1d7c4(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return i


def func_f7a21c75841a4ea9954287f73ee22376(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return y2


def func_0331dfb013ea403e955f5e69e22df47c(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x1


def func_abb1fe3b04664e9fa4738eaf6a378ad1(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Area


def func_101e087f27754c188e21db434a1761b7(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x


def func_cf640a97cedd4d7f8a47e9bd6ddf4557(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Slice


def func_bef96d195d574e318de08f8b1c6fe2eb(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return li


def func_6b8be20acde846f1a1ad2ad36da9abfe(AllX, G, Lx, Upper, Low, Upp, Eff,
    Ux, Lower):
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return ui


def func_800ade7afd354eb1a32dd142b7e2f2d1(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return G


def func_b4e1b19cd8974eabb384a9c39e5fc860(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return L


def func_1e86f8a03d124eb38d15dac8080fbc59(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return W


def func_ca44d49fb4a040afa649143605989d3a(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return U


def func_74142765002344448e17592ca1e97484(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return Eff


def func_1e97b101f2fa48a8bcb76972613a7519(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return Ux


def func_fcf3b1c9bda64652a23af0d8dd4c235a(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return Lower


def func_6d05c0e53b5e4b458c5e4b36d29d81ec(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return i


def func_76263d33948d4de4ab851ac1a045875c(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return Upp


def func_81772b2534614c04a08d75a766686f2f(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return Lx


def func_5bd8b694b67b492eada01bc041a80f7c(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return Upper


def func_83206fddd338452a97c21adf302bc021(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    return Low


def func_9a84717a8126411e9943cfc3fa74f94c(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return Eff


def func_bff9b45729bf45e29342505c5f8c4a3c(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return Upp


def func_a170a007d47b480b9654ba72bcd57efa(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return Lower


def func_65c510f2b04e4d00b014f9848262950d(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return Ux


def func_607259c600724f26aa53b86d23c3bd84(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return Lx


def func_ad8a82f02f424ebf9e1d18358d9b0df3(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return i


def func_752c8b2628d042deb1f31aa6d2d90e92(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return Upper


def func_8b4405b49d104f1bbc3b9be5cec2ba1f(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return Low


def func_1ce824305ca54111a42d4f9bfd4fd138(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return AllX


def func_ac7ce1da95064137b724736f97e2cd36(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return Ux


def func_865c7d5f90174370a1031304eec76e79(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return AllX


def func_77d9ecfa45bd46d4af92aa49d27f9409(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return Upper


def func_febc537f72a344b5b7244513be24af89(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return Lower


def func_a91fcf86fa434dcb81223f8fc268a394(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return Eff


def func_ca19908e32e44368a7af6d530ab97f32(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return Lx


def func_c8358c8a5bde4179b7548b94b83b4e3b(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return Upp


def func_248f0cbbec82483191949b3aa8de1815(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return i


def func_81b297b0200648389120a175ddfc7898(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return Lower


def func_945d636a73024006acefce357c75ba56(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return Upper


def func_82dbb3b86c5e4ab4934427fbc7ec554b(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return Eff


def func_5df52fa4e87f4e27a7f0600faeab1d04(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return Ux


def func_2b2b9baa6033451cbd86902120d5f9a1(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return i


def func_331ecb2ef9b149faa0328cf80d3ceb76(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return AllX


def func_22f773d29b0e48d9ac3f10637af2bb7a(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return Upp


def func_056add6a20d447099de27b19e161bb50(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Upper


def func_59895b5c5bff4c3a8f7c43779f545caa(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return li


def func_1656672c74d84c37b9486dee9ce7e28a(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Lower


def func_e18f62294d854fc6b4aa7289236faf9f(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return AllX


def func_c26ed26f0d114f0f8ffbd5aa7774623d(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Eff


def func_dfa91ad9d46249049faffa55553d2138(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return ui


def func_a56308e05350451b8c0c3e75165ba8e4(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return i


def func_4d434bee56dd4b9e99791ec92ae5c928(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Ux


def func_ef82cc9364b14a529eda7b5bb0d1ad42(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Lower


def func_aa59ca21f0d744bfa35d123fa27c7128(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return i


def func_78485cff853f412694d3063e4b27fcf6(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Upper


def func_7c0f24e716154aea9b164089b5a2b227(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Eff


def func_e139a45a7e8a43bc806cd186658dac42(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return ui


def func_a58ad83f746b40ae8e98ef3dd504dd6f(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return li


def func_8bdec08dfbd34982b5c95fd557f21a44(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return AllX


def func_7c99a3ae86c848559cd5187c58696534(infile, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return li


def func_c4f06eae5fd340f6ba9c5272e79a29c7(infile, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y1


def func_1e51b04ccafe4e50af3f6247aadc6999(infile, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y2


def func_945143fb50494451b94e9225eb35881a(infile, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Upper


def func_57271dde40f149b8bb0c1a79d239f186(infile, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return AllX


def func_29bf507cb8774addbbfcf387573c746c(infile, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Eff


def func_98913b92614a463db9218c0962aa3ee9(infile, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x1


def func_85c262765f0849f299ab00bbf9d0e0c1(infile, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return i


def func_aa97722dd9c0414e95572bb21442c2aa(infile, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return ui


def func_07825d43d65a4947a73a07161b165b63(infile, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x2


def func_3868c89480674b5c88246132b980166b(infile, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x


def func_e8fa9fd8f8384c1facc55f3a18368977(infile, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Lower


def func_56452b04e7934bacae7c058765a98b38(Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return i


def func_e41ef893169d4fd6962b2070bf37b3dd(Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x1


def func_fef50972a7444c1aafd7a0fc6db0aec1(Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return ui


def func_ffe636e5467e43b88a86dba8bde646db(Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return Eff


def func_40ce60e5cebf431688c8816c85471cf0(Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return AllX


def func_50386394dcd54e95aaeb19eb327b4423(Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return y1


def func_066f8029b8ac41489e2e1fa33b30e583(Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x2


def func_8b2aa73253db484fa11e2fad01a2f032(Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return li


def func_76cdef51754841ec8deb0efe6340e4e1(Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return Lower


def func_90bed661571048c18607a2cc34c70340(Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return y2


def func_33241889b0e24b1e9043a749807a2538(Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x


def func_7e1e7e15070c42a2912edfee933aaa8f(Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return Upper


def func_3e7bf83e55234150aca3cc471f6334aa(Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return ui


def func_75c96402060e410295fc4b891f57213c(Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return AllX


def func_31cb12281b6c4dfeaa35b11159aa41a7(Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Upper


def func_11150b1ecfb84ca182b873144d2ae33a(Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x1


def func_99fa095fd0524648b53c3cf1872c5a74(Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return y2


def func_6b1e785ce2ad4f0aa3acb246d4ff1335(Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x


def func_813472c9a81e4cf681c5994c10489b7c(Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return y1


def func_bfedb32bd975450389998c3457599356(Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return i


def func_7e6895ec5a2c427baa29e0cf307147b3(Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x2


def func_f36d4867b391437e811ddf0a410c3fd3(Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Eff


def func_b8bbbf4e683d49139de30a680865d1ef(Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return li


def func_db9d620cdf78430aade9bd778358b057(Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Area


def func_52b831d561e94038b5bfbec7d40969b1(G, Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x2


def func_ad36f3d8c2ad498aafbc247f40f9e651(G, Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Eff


def func_f537a5eee4df4d8881b6b3cbc5af73ea(G, Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x


def func_d200119cfbd847ab8b269bf8d74a89fa(G, Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return i


def func_2596b371cdd543b58a6040bd00c1d34e(G, Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return y2


def func_e95a90fabb2b4ec6b28f86702fe172ca(G, Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return AllX


def func_88c381432602423fb234173c80645a67(G, Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return y1


def func_820af6366bd24bbaa64a7894558ec3fd(G, Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Slice


def func_3f9f07719f8b4828812567dfe45fe285(G, Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Area


def func_3b25b2b8d6084d79b0ce2e299f87e694(G, Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return ui


def func_9e656e69a66a43c39d010228f1c4199d(G, Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return li


def func_5818c78306bf4fe0bb253da16ce23bc7(G, Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x1


def func_d3e89ce7e9fa4ac385569588bf7b903a(G, Lx, Upper, Low, Upp, Eff, Ux,
    Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Area


def func_26a35ab1850f441d91a33df541f3e866(G, Lx, Upper, Low, Upp, Eff, Ux,
    Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return AllX


def func_c7a95b38c7e042b2bee0ac4f58951b11(G, Lx, Upper, Low, Upp, Eff, Ux,
    Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return li


def func_d3652cc9f5004dc885ff851557a0d8e1(G, Lx, Upper, Low, Upp, Eff, Ux,
    Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x1


def func_f11db316070e44f6b03d6618c8058856(G, Lx, Upper, Low, Upp, Eff, Ux,
    Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return i


def func_0dd109850b444253a4c0d710cb7e23f2(G, Lx, Upper, Low, Upp, Eff, Ux,
    Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x


def func_c48888e7340a4f4e81901baf2464f55f(G, Lx, Upper, Low, Upp, Eff, Ux,
    Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return y2


def func_a98d4f1c656f4fb08ee11c38d95f44b9(G, Lx, Upper, Low, Upp, Eff, Ux,
    Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return y1


def func_b6bd0456a4fb4240bc6fb68f18e39a9d(G, Lx, Upper, Low, Upp, Eff, Ux,
    Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return ui


def func_9e2bed0f68fc436b89588ba8286f471d(G, Lx, Upper, Low, Upp, Eff, Ux,
    Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Slice


def func_7e1480606ec24138af9c09ccaebb1139(G, Lx, Upper, Low, Upp, Eff, Ux,
    Lower):
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x2


def func_46d873d9f06549db9026c1b73ef10313(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return Upper


def func_68d4fff00c5e4844aab15dca18ecd5e6(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return Lx


def func_267ec8b7a2a140c8899585a3174c54cc(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return U


def func_c60f229036df45fb9fa57d38a65987c1(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return Eff


def func_e930c7bddc5f4dd0b64b4da91f7a23d4(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return Low


def func_f975d397f833485499bd82e26736c48a(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return Lower


def func_c8db2a9443fc432cb876495f3fffafd7(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return Ux


def func_8884aa47ca0b4a5eb48c1671146fe831(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return G


def func_747d909d971446888d9daaefe4adfdee(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return Upp


def func_84417401316746bb8b6b62f8cbbe6514(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return AllX


def func_dd96bb6456ca4c09995b0f8a9036820c(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return i


def func_e2ff51f2c8fa42508995446781022c66(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return L


def func_d4c10017564a495e8b32490fb4232e76(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    return W


def func_6a4aa34c038c4f258d91d4595487bcd3(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return i


def func_4ba6897e6d6347329061e832d830af50(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return Lower


def func_d38b34c3757644dbadd44b9b1f411fd7(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return Upp


def func_005ff9b7df6849cc9d3f3edc33106a86(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return Eff


def func_24a874e4c5c54727bc22c8c0887c3936(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return Upper


def func_168c5fe0f0574502b4c2471f8e0f6f2f(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return Low


def func_1e6a68cc06264bc5b4dbf80cd922d5db(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return AllX


def func_a28fba32cd284425a2ba84ad23371a76(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return Lx


def func_1cf327e1ba88474399f0f08a429dc647(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return Ux


def func_dca3407a440a47679891e8b3f1918015(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return Upp


def func_6f77551a0eaf4399b686510b4de2be97(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return Lx


def func_b57aa203207f4a9c8bbe3696c729ae37(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return Upper


def func_732b0f4e141842e1a58e957a7b44578c(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return Ux


def func_9f63374d46e64e9782fccb00d98b8c49(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return i


def func_589d6a3e272b457f9be393d99c98abb2(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return Lower


def func_927d33c897b14882a7e2bfad14d4c81f(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return Eff


def func_bcca20c490804f489332c1d14cb0cdd8(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return AllX


def func_9b2712e631a44ea3b5b3d9c92940c857(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Upp


def func_08de4210db3d4695bb099c3a14dd758a(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Lower


def func_1bf4212f4908444296b2dac867e3b429(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return i


def func_2ffafc5621e54010bcf516ff17b2bdc1(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return ui


def func_2ef2e15cde2348c1b1472aafb4824bfc(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return li


def func_22a45a55206f4f97ae9996ecb5f91a3c(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Eff


def func_bccf6bb3b172488ab0d1851b4956cd22(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return AllX


def func_6b763dc2ffdc482b84404eecb05aca20(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Upper


def func_919ffbedae944709a3618a17e9d59f82(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Ux


def func_105dd1b64efc445da962dde003885289(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Ux


def func_6f5944f6d02e4bf1981b978546425a08(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return li


def func_7fd429ab4f59448a8c3a2a9d7de5ba3a(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return ui


def func_b457f39d52b9441f83e87ae232cd5347(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return AllX


def func_39285ce98b714bdc9f9acd5ce520c9e9(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return i


def func_997aefad20b949df89957085ae21af3b(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Eff


def func_1f56553e2c64472fb107246bd0709f72(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Upper


def func_70247bd7291a4a9a8ce22f6a492e2c98(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Lower


def func_74792d7755d74eecbe6fe9b8bf4cd915(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return li


def func_bd13f69a72864caa9ebd250d4edd186b(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x2


def func_02b7829fe4524e8f9ebd1831d8745089(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x1


def func_1d4ba9d436a54dbfb8143066682321e3(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Eff


def func_074be08399784c70b721f799273dcd92(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return AllX


def func_02029dbd31eb4efb8c491c9979f60595(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y2


def func_977b72a048304dbabc0544dcfff9fa12(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return i


def func_7fdbf6cb1a164f03a017c1f55270ebb3(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Lower


def func_9c402c55ba8148f996b3de5bf1aad772(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y1


def func_ae7e5f00a3554f8fbfa8eb98f7e154fa(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return ui


def func_21b1a7b0312b4145acaace48521c0140(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x


def func_2d40eb9c002348549874a758e3c1f0f6(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Upper


def func_5bd76321d7a14bbe8a322531da8c6ef8(infile, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return Eff


def func_8cf4e946041346638635f2d5fa585da1(infile, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return y1


def func_14e7f1fcc4424393b701b8888b84654a(infile, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return Lower


def func_37d4cf34e1704026a8ff2acb846a646b(infile, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return Upper


def func_92a3b27ead4b40fe8c71e275664d59b1(infile, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return li


def func_58cfdbe1984b4dadba4418dbabe51568(infile, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return AllX


def func_a74c01b806564e268d3f6157a1c1ea28(infile, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return ui


def func_adecfa28720e4522a3b76be03fc50b2b(infile, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return y2


def func_abd7f23bafda470f889bddfd8f18cd59(infile, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x


def func_c989409522d644ee94ecd8f6a829b8e8(infile, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x2


def func_197e4c1c2c8745efa5fd325b14d746c0(infile, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x1


def func_b3c6d2614e0749689df10edf5c26ff59(infile, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return i


def func_761ad136a8c34ca5a0b262e2a2181eac(Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return i


def func_b3464085099a499e82de06cdeeedc4c1(Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Lower


def func_2d22ad99939741488ce419de753c8ce6(Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x1


def func_20ac3f6fdf0946f992e17265f304f040(Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return li


def func_97b85bb8de534b5da06fa144afd1358d(Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return ui


def func_d5868d4daefd4332942b757e041b1e28(Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x


def func_76560d8fda954ee8a282aefe45307068(Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Eff


def func_e94c5f56e44749398cf8841400ce7ec8(Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return AllX


def func_b235ea98c8fc4e15b82682a067c2fc19(Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Area


def func_3fd21e6ace914aa0a7c4d24ecab9055b(Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x2


def func_2ab3fadf4434423dbdbba3082a3c6a9d(Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return y1


def func_e502bb4d5f66418383c7632fe8ae2a93(Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return y2


def func_70c805ff6c5c4e1481b03ce6b44189a4(Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Upper


def func_be9b94add1954e62b55593ba9738644b(G, Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return li


def func_a753804389a0430bbd013c3db87e9027(G, Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return y2


def func_a4164411ea4b42498f571c7bcb284938(G, Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return ui


def func_c38c084d7d8d43838451f0128eefc530(G, Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Upper


def func_4db480807356483ba880da2e0d0e30a3(G, Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x2


def func_e9937442813b4aa88163de7e752aaa3c(G, Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return y1


def func_94a62c11373147ccae8e493e1593a1e6(G, Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return AllX


def func_31156f60b2124e4d9d2cdb3ebd9484f0(G, Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Eff


def func_9e14a5e3c13d454c8d6f05126b443270(G, Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x1


def func_41dc76f6202648b18ad78d1f4fe7c6d7(G, Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x


def func_05b05dbc57ea43d8b2043ee654ee857e(G, Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return i


def func_e52e6b64a5e14359b29fa85a7f9eeaf5(G, Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Slice


def func_fea5dc9ebd5d4eec81372a108f6e477e(G, Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Area


def func_600b32a19de9438bbee1f81e8a82ebb7(G, Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Area


def func_5c4197f6d8ae4a3d9bf4e646e92712eb(G, Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return li


def func_17c897fc39474cdb8b4c4ef02bb19e7a(G, Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return y1


def func_efaffd3171bb454ba42dac5dcd5ba488(G, Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return i


def func_d3dfbcefa8fd48328443751ad9773679(G, Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Eff


def func_1c84f2f665114f48b4eb42c2894a008b(G, Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return ui


def func_a7022188285146519314a83c89b2b7e1(G, Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x1


def func_e490d085b9f14530bde72c6b05adf1eb(G, Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return AllX


def func_805c860a8e844019987df4634f92aed7(G, Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Slice


def func_a88e9d1226f64cd39a717ddd0266dd43(G, Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return y2


def func_758976c0c32543a3b7cb0acb04cea652(G, Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x


def func_48b76db9c30f4588b3fcdef80679df00(G, Lx, Upper, Low, Upp, Ux, Lower):
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x2


def func_6fc9999365704ee28aa948586f7dc936(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return Lower


def func_2c18a7a681774307bbe59b9a19f8a4b8(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return Upper


def func_50b7a232197f4e4b965a8a979d2ff5de(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return L


def func_7fa7ac26780c4780b86fb050d65ef405(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return Eff


def func_1a494f11166a481cbd0627bf9512158a(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return AllX


def func_fa47e1b7d89d4a7fa310e4b8f1fb448e(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return W


def func_5eb786a41ea449a59b6a9ab33c5e4471(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return U


def func_4da2a5ca1d7a42368d8f265f66a21084(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return Ux


def func_9c6b15be61e04557ac9622bb51bd5e93(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return Upp


def func_6e1a5fe493e542079957c61da4b0ee1c(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return G


def func_efb928d2a1aa4373bf7b96ba8f033ca8(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return Lx


def func_c0b97a4f71d044a5bce1e27a166f7063(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return Low


def func_d328b6325b2a4692be51a5d29cd1d1d4(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    return i


def func_c4d9993eb54345099efad0692bf1d5ee(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return Low


def func_4d9ad1d05a964174bf3a3245a9f7be8e(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return Upp


def func_2721c93d5c6a452d90f590571fdb6bc6(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return AllX


def func_aa3c603702d24e348f9092f008358f49(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return Lower


def func_0e6c1ed462de41c38c8637b707782412(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return Ux


def func_0a92f96203a64e85858140412065305c(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return i


def func_77887edb05ac4868924ab742cf9b8742(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return Upper


def func_27ab2d41a7924083bac4658261bb6c57(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return Eff


def func_e9c92234dd6246b6a4d54bb21e180c8b(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return Lx


def func_a291e5961c2f47c6b86058fad78bdbf1(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Eff


def func_144880f4aaf940479309f2cece92bd53(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Ux


def func_f1ea6d41417342d189cb056b9b756848(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Upp


def func_c3ff1370741b41c085e5a49299511282(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Upper


def func_b3e0cc41678640a9aca5ad66e45b80f6(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return i


def func_11561fb6a1e44275a093bce9a8e4210e(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Lx


def func_ca02e114f9444bad972a0f5857cc0127(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return AllX


def func_4f343dfb58cf41948f9cabd24b0a4147(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return ui


def func_54c490a5ecf94d8bac38165f4fb815b6(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return li


def func_9e3e3082065243f2b37af5c8311628ce(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Lower


def func_010a8ba8cb4341d7ba4ea7aaa9288306(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Upp


def func_ab9f1febceeb4eb1873e40ed4e7236cd(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Upper


def func_a79a9d271c67451d87243adccf9718ff(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return li


def func_d48412bd3c6e4aac9eb2c3de14ee8a77(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return i


def func_3c483b00f3be4d3291e8c34717780950(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Ux


def func_c3f3b52b45bf46d2b68cc7cdb9817844(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return AllX


def func_5eb7189e08694229ae24d96f0a246de7(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Eff


def func_c6706ad9d3204210837bb4215f9c5fbe(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Lower


def func_c9d8f231b0bd46db8f40210f2712a2f0(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return ui


def func_a9fbeb47ada54705af40c9fe2fc17955(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x1


def func_e2dd9a0bc0eb46b982b4cc44dc5b0a57(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Ux


def func_5899e658b51141b098be38ede8ad0a13(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return i


def func_6277462f5fcd4816a65f2e2873fe2c49(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return ui


def func_33e4b982164a4ae684fd64a5a0c91eaa(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y2


def func_bbf6dbfec74941b7b324d4c9c668917b(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x


def func_8f575410e5404fda8f0dc38d5df8313d(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Lower


def func_df1ed61e53cb409886d76d9127e64051(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Upper


def func_a5b2578a2a9e4907b7de1921264cb10d(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y1


def func_bd3458b1e80b4acb954e9fd10b049261(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Eff


def func_66d653f7da064e209a671984626c998e(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return li


def func_df591ec0a6884c13bf1b4debb449e2f7(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return AllX


def func_779242ee9c9046198d2b038af8d9c454(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x2


def func_bc2ee372690c4da69e12638e05af0043(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return AllX


def func_cf259cbea28b474a8b9d6193da9f8045(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return y1


def func_d8b3d54474444943acdb5f0cb1093a27(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return Upper


def func_cc6a7eb6f2a242dd8c3ec969c6288022(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return li


def func_806e846c688a43abbe0ecb047a5cd910(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x1


def func_291f8621eb5d49eca97d0952762d74af(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x2


def func_1ea9aea7984f4214ba24e54c6bb9d68e(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return i


def func_f14184dc84744365b27592eebd91b178(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return ui


def func_f966d9e1b3924e7087912407a34f6fb1(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x


def func_d0339736b1d149c9aaa38e47f7f11861(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return Lower


def func_c7e79f07fa1c4ecd96c8a426f7228b83(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return Eff


def func_029e04c162a64eaebc57d2c05d2ea675(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return y2


def func_3b67b7c0a47d494da0b3e5925110ed24(infile, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x1


def func_018a8c4a313e429389a39e645a0ce072(infile, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return i


def func_8358750aed7f443fab7efb3b293e80a3(infile, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return li


def func_5a58ebaaf85b4167ae056ca0314f9b0c(infile, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Eff


def func_b36b295a08b541f791c32f01e22c7197(infile, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x2


def func_3590eacf44ad417bbd416b58225fee8d(infile, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return y1


def func_5b7c60c765204445b700095b62d09ecd(infile, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Upper


def func_c5e1f1bddea84deda8bf940739d13845(infile, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return AllX


def func_fb89463e00db4ebd92b33a3ac35e2fde(infile, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Area


def func_cdf42095bf9a400ba14b3dcae6773abf(infile, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return y2


def func_79cef0d6de2e4e178380fc9b3fab0f99(infile, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return ui


def func_a15d65a9c62b434296299b5679943eb8(infile, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x


def func_9ae3dc2061a4494091a35c340762220e(infile, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Lower


def func_86fc08f898b04375aca8c3b384d42e08(G, Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x1


def func_9bb50e97b4b7499cb62ba7ab23afc938(G, Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return li


def func_1e235d1755984bc0bcd622fb386ba5bb(G, Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Area


def func_a022f169d40c42a2b0e8bcc4c576bc79(G, Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return y1


def func_bd32babae47e4097a14c334d36b03ff4(G, Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x2


def func_1a04307c381041ba95871e9025d08c06(G, Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Slice


def func_592434a76e3442cea3b0c2cc75388467(G, Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return ui


def func_c3bbe3c6680a46e6ab375727ed34370c(G, Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x


def func_3ffba7aed6db4ac9a1b09b9ec25631e1(G, Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return AllX


def func_9ed683d8a571420db2f3434a456a2bba(G, Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Lower


def func_de372aefaab443288ca7ae07821de04e(G, Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return y2


def func_d903da446dad45ab98aebcc4e49ad1fd(G, Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return i


def func_11becf62b0f6409f9ecd9dffc4fb4df1(G, Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Upper


def func_5002043865ba4f9cb2b0a5d774080661(G, Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Eff


def func_ca0792dc09e54080b6dd5fec9f786e45(G, Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x1


def func_1e850ab76fe4427eb54a4be280fa6849(G, Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Upper


def func_afe34aef9ef14dc8bf1af1c709326c30(G, Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x2


def func_bf6bed6c333a4f22a567e02943aff3c4(G, Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return y2


def func_4d361ff321a448fb8429d482ba890bc6(G, Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Slice


def func_b952a96abf0740a7b37b268b6c03d8b6(G, Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return ui


def func_d1aea8c7b30849128ca11efec6117b8b(G, Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Eff


def func_fb25eb1288dd40ac9c7337572c589b13(G, Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Area


def func_8f834f17c4bb4ab097aa51bf1eae32d8(G, Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return li


def func_bce9a52262994d5d85154b9a75069888(G, Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return y1


def func_dd78c8debfc143128cfafee0246ee950(G, Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return AllX


def func_95bdaa4f6e0c467682f38dd3dd5170d7(G, Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return i


def func_ccb1a8911b9d4fec9fd0f56653837ce1(G, Lx, Low, Upp, Ux, Lower):
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x


def func_61c69a74d7e24e73a9563eb509b3b85b(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return W


def func_777319863cb544f4a2e089132b92aa31(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return Upp


def func_1f224746926c4f6f9e29675f9cee9e07(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return Low


def func_bb273d3bd7f94daab40fed289e97f6f2(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return Lx


def func_b5c1b538b1504866ad331344659ed889(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return L


def func_a31cee7915af4d2284bcc957b40f3db7(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return AllX


def func_58c0cb6817fd4f38a4b592b529d3fdb6(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return Ux


def func_d1327847245945338ef856d0045a537a(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return i


def func_18ea75c599b44703903b79d098d95908(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return Eff


def func_4acd02da2ea94b8295eb440395dd2e1f(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return G


def func_94afc28bffc8400ba395b5fa745224c6(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return Upper


def func_d948527d339a4423966f835076de5d19(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return U


def func_5d31c1eeb7ea44ba8b2def1fdcb0d126(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    return Lower


def func_c6be7348f0c54e1ea8e71ee7b9e38b1b(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Eff


def func_994eabef51ad4497a4ab0b1b5a4e1125(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Ux


def func_b47b3d169fb948ab82c301f00d10bd72(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Lx


def func_23ed9fc99ea545c69abe91c79bed5f87(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Lower


def func_b2da55c8d8fe4652b0f51f86ab629466(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Low


def func_66d3d2eb9e4f48118db9fdc4eae0a6c2(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return AllX


def func_55745ff28e044977bbd3a1fb6822acac(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Upp


def func_7620dc1b9b904932aaf2653382210111(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return ui


def func_1619849a31a646eeb08e323845c69e60(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return i


def func_09e8ad0863c54872a478bbb3624edf47(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return li


def func_75ce98d69b0d449da7ef699433221809(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Upper


def func_b19f4f2968c04586b2455c48766aebed(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Upp


def func_7f8b16adb45441c28fe3d330d0252b3f(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Lower


def func_534cb180464545a084cc25ccbd67d496(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return li


def func_bc53562f99d04af7a348f9004a37518f(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Eff


def func_600b9ab1d48748d78664279604646c01(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return ui


def func_bc36221b42aa4ad98d6f04a0b570af5d(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Lx


def func_b0bb460324a24142b490c175f0ba371c(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return i


def func_6e95b9b6cccf440ea55ea0a518cc021e(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return AllX


def func_a08a8d56759d48279191ef5ac447bd13(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Upper


def func_a3b36bcf0bbc4495baf389768a71bd4d(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Ux


def func_ea2b07a3b1314203bf454b8c844824bd(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Lower


def func_c409a3495b1d4b6993bd3f69be601f55(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x2


def func_030fd89599f348a39c5713ebff6ae2e6(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return li


def func_091faa65cd4648d798083393e660f688(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x1


def func_fe6af625e85b41fb92fdb69a3c4afe13(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return i


def func_fb78136c734a432ea6ce259db16376f2(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return AllX


def func_b7edb9bac8994c74a7255e541ee8de13(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Upper


def func_5f2bd5f80cde4fdf96cd87d3121b6f68(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y2


def func_7a9040bc0cfc49cbb7a9a6a888ed6a88(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Upp


def func_ddfee849a7d24253ab34c569a8e9be02(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y1


def func_d233fe61bcd54807b37786c44344f1de(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Ux


def func_03c5a56ca89f413689e3e224856cf302(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Eff


def func_d53ac0577616405ab506aa69a3c127b5(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return ui


def func_31e763c6209a4bc69f82a16b8206dc08(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x


def func_1d78c45b3eec44a1b9503193d42abccb(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return li


def func_a5ecff1fe57c418594ee0f61e81ffbef(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return Eff


def func_93a0e54da85b4be2b24d960f6cba6f61(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return y2


def func_f5252e0393924dd0bd1121a21f1d6373(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return Lower


def func_0b4c476b28c74463b3fd74fc955add27(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return Upper


def func_c0dca3c6ef7d42ee96dc1d182af88bdb(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return i


def func_1b91f1b5e7714339b3fbf93438003f79(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x


def func_3511b24ba66743a9b004cc200b7c3ba5(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return y1


def func_2ccdc7043b3c411688a3eb1a6ad74c5c(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return Ux


def func_f02c0817cef646cb9ed81f2314378c42(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x1


def func_a3a586dde75c4df0935286a560b09005(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return ui


def func_6bbc9fd0b5ee4c4a83587057c610fd0f(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return AllX


def func_abfcaf578f874ff899c4385f244ad685(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x2


def func_b4021ba6842d4be0ae8d61aee6d05944(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Area


def func_4d85374097774bc980866de903bc3c25(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return AllX


def func_fea0bd9df1924dcb8f13f2920defd7c7(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x2


def func_2880ff8a1d864111be9f5228c58c3145(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Eff


def func_81445c9b03614b338d1d1fac77a26933(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return y1


def func_a31e68c092f244a8a769da0bb21972d3(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x


def func_6345e48a78cd4bf8ade740e39e54ec77(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return li


def func_578afc157af643399577cc17e7dd0787(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Lower


def func_e52984feca7e4e8f9a7659f4919bfdc4(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x1


def func_9942a740fd4642b2adf9dc09b45676a4(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return y2


def func_098e67a7b28f43a1994d91a53858c3d5(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Upper


def func_bafeeb1cb1254d558064b98fa0a9f889(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return i


def func_43946fb9743f4f2294c2fd17ef309aff(infile, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return ui


def func_45058e45d19948168e6b6d29d64dc75a(infile, G, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return ui


def func_66c3b42c411f496cbd0a3a25a94118ab(infile, G, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Area


def func_a575958eb5bf42cc8f5c4cf451a50eed(infile, G, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return y1


def func_726e8ddee49843f5b8bebb0030b926fc(infile, G, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Upper


def func_4c06ffa106a24a2b9b8aea2957543ca2(infile, G, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return i


def func_de423c5fcd1847aa8a75f2f1662c3496(infile, G, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x2


def func_09eb99f76bf24fe2851dd5e212efb97f(infile, G, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return li


def func_fe81395c5482457381eb10a35f12ba8f(infile, G, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return AllX


def func_5c5df7a764c0465dbb3d209115ecf25b(infile, G, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Lower


def func_923dd6aa12b24075beefe6f6f5d65fa6(infile, G, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Eff


def func_db63a4fa479c4d269f5de365d6ec170f(infile, G, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x


def func_eb05ded214ee4bd4af403ff2f6ba6736(infile, G, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return y2


def func_79fc5acd731d4000a65442696ebd234d(infile, G, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x1


def func_547988207d5543d6a1fd26f07a31d50f(infile, G, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Slice


def func_fdd4680834e94202bfefa6981cbacc56(G, Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return AllX


def func_01c0dd89bdd84c7f8a71810b859aed5c(G, Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return i


def func_791a76930a1246ceb42bd72988f98086(G, Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return li


def func_cc2739b7a41a4fcc897503033023b06d(G, Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return y2


def func_e67a7ac491834783986140f7fffd2e5a(G, Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x2


def func_e273c53ecab84753bc4478dd84a56bbe(G, Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Lower


def func_5cc73fbeea0444009bbe4890a03864a2(G, Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return y1


def func_18713c904e0d43b4804b8fda5a5d6cc6(G, Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x


def func_f1149958995a4b99a80a1d89dfd7fc12(G, Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Upper


def func_5ec82de1cb7d4736b16793ac01b3d06c(G, Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x1


def func_a3109bae4de94178ae4207bf6f4f7580(G, Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Eff


def func_2cdfb278c697478bb461ae43798c39f5(G, Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Area


def func_c808b506036446b19ebde43c991e5119(G, Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return ui


def func_09eb1379a7a148a38657168925844c8b(G, Lx, Low, Upp, Ux):
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Slice


def func_2d7b4033d416438a940bbdf98d101986(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Low


def func_9fcc9d9a82a84ad9a2a01e14ab7a9c0a(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return L


def func_a49ad9aec3f04d948cd38e4cf6d08cfe(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return W


def func_e220fdcf106942ec8deedab1a311b88e(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Lx


def func_d500946198654d59aa5573b100d8f47e(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Eff


def func_ca490d9606304866a823c0c5b2e57add(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return li


def func_e62c98096b3c463593c160ee972f350a(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Upper


def func_b0d1613165a248d79e424db3e562c95e(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Lower


def func_d7d77a530e064e338a7ec25b855c7180(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return U


def func_40da52e6cfee4ae49090f20aa0806056(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return i


def func_644ae4e795464f6780817c6f97344b6e(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return G


def func_63006243b8b14f258cfc58bc734f9c46(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return ui


def func_100a98ba13fe4a3aaf17bb521f4cd6fb(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return AllX


def func_97d2792fd5b243e1a56b2c451f6bf8b5(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Ux


def func_24902af4ea66406bac44553bc7a8ff91(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    return Upp


def func_a62506b45c4f41e990ac0fceac69ed4e(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Lower


def func_e7a1d0eb4688401cb00312617b252fba(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Ux


def func_15a146947fb54b1dbcaeea02c6a3cf7a(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Upper


def func_f78663b14f9b476b95379c6b947e4565(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Eff


def func_886f9a6c9d7446268c0cfa1682fd20ad(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return i


def func_ec7131fb7efe458c854d87a2b551cc84(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Low


def func_560e32bd67364eeaa4b106b82f43ac4d(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Lx


def func_9dacc92d738f4e27990fa399c8912239(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return ui


def func_09d126d89e8241989a801f1305f8280f(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return AllX


def func_56ddd888fc564b7081a78d7f8f6086ae(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return li


def func_77421e8c9c994c61981c424316f74064(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Upp


def func_6a71196c2fcd4b20901b971521cb2a1a(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x1


def func_51540df97a544a468318d39678b7e4c8(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Lower


def func_466c4f12e8854dea90ecb006fc5420e3(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return li


def func_f9871d7b9fcf4244a84557689dfce884(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x


def func_6e84a027a4dc4dd6a4e7d028f281c1ac(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return AllX


def func_618e59d65e4f499a92dee84b04b02e62(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y2


def func_820ff73bef594c01bfdb6d42ed5f049c(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y1


def func_0b9c6db0162647e7889640322e2e8170(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Lx


def func_8e39baeed074423e951015054d601874(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Upp


def func_33acb2fae699452bbec43b7a7d2e77bb(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x2


def func_a24991cae62b47248790ead94d61fe68(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Upper


def func_97190d94088244deb6c92d110228d5c2(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Ux


def func_a56a71d0651441b89c2a8a62812ef041(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return i


def func_21c00a000f2c4eeea144f88060115fe7(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return ui


def func_fe5eb5cb9ce143ee9400ba6422ca14ac(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Eff


def func_9732ca75e2a448599afd6c7aff04a6e2(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return Upper


def func_2c80d46d6ef54cf6b335d0b3fdfdb85b(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return Lower


def func_55799d075ea94e309da22a623f50b766(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return Upp


def func_7df503103d7c485fbf7a70ec43c83a49(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return i


def func_417fa32c246843349528489878c1c868(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return Eff


def func_acdb1ca86bdd476d82e0b1e4eed9f22e(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x1


def func_bcfa62a1b6ae40acbb9010e0c1e44436(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return ui


def func_fca87d7dde9b497084ff54a5e1f8b7c9(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return li


def func_7ce4acc565874179b164b6c10d33f39b(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return AllX


def func_c2dec6be0ae44d5987a6e06a517a5dca(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x2


def func_7050ec4b69cd4391bc6da9a16b05924d(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x


def func_97edfd51edc840f2ad1c17c048168c97(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return y1


def func_539fc4db2ad545c0a3ae8a921649361d(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return y2


def func_e7a29c1641644774a7316f6dcbb1d1b2(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return Ux


def func_a5df4b4285cc4996823a8cc2b01cf7fa(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return ui


def func_77505a56fca74a3ab173d4ac7ba0714f(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return li


def func_71e0e1c73e6a47f686b878437ba9d226(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Area


def func_bf6d59efeadc41489dc88c28112d0216(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Eff


def func_eb28dbf2c50144d99990600b0680bd77(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return AllX


def func_70ca72b8da6549cfbee6c0040a23391b(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Ux


def func_29a1aa3dae5447309fb9cc5febf74657(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return y1


def func_5355f6534fd34f7c8b423306ecb72ab6(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x


def func_01094cac3b234ee386905d29beb2f419(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Lower


def func_777515ec0a234c53be2fdeab598a4cc6(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x1


def func_603e5ab02ee24f3a8ad003c807e52c49(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Upper


def func_3224c9c360b94ed99cea06b8da1afddd(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x2


def func_2b4f33c46a6a4f7e9935301c49077c99(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return y2


def func_888dc31b74154171a8604335a7e2bb87(infile, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return i


def func_af6e4b58b98044e688d31812b57474b9(infile, G, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x2


def func_27d7f15a61c54975970f65c8c4237430(infile, G, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return i


def func_7a74e337665c49228e3ef2cd9cef273a(infile, G, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Area


def func_8e81c4636bf241a7a87da8796c2fb830(infile, G, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return AllX


def func_c13759259fd34786acc760f73e21f41f(infile, G, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Lower


def func_89de881d601a4e42841bf34a40e33994(infile, G, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Slice


def func_ca32a7fcdd844562b4e377778b867392(infile, G, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Eff


def func_e5d183c1b99d40fb898e5e8c26bf180d(infile, G, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x1


def func_b5659b59362b4fa698495a48e5c19784(infile, G, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Upper


def func_1119e5a9d7ba41599de217326ed5304f(infile, G, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return y1


def func_962883722f634197894627bea53a5ecb(infile, G, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return li


def func_45d7fc6b3e244c41a1120c57addd35d5(infile, G, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x


def func_d11b8eb81dfe4c6f99f6e5011a620f5d(infile, G, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return y2


def func_6a11b311f9174eac94cff1bf5cd9c6b8(infile, G, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return ui


def func_30e5198eb810494a9d59c78439c9bba2(infile, G, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return i


def func_f3fcd69ccf514f2abf70b8928f60fbb5(infile, G, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x


def func_db15e3df13e04a98bc606171d42c4657(infile, G, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x1


def func_623f60aadf0f428b890e4e5665587045(infile, G, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x2


def func_186a4bbd63214a54be3e6443c6764591(infile, G, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return AllX


def func_f3bdb63623cb4631a53dfde232e935d1(infile, G, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Eff


def func_5f41a89f33554caeb22da35d7e3a742f(infile, G, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return li


def func_1275ee8540a64fef98bcd748b9e8cfb1(infile, G, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return y1


def func_c6b60e56a1c14fb4bec4bbf94eb084f5(infile, G, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Area


def func_590360b17244423bbe4dbd7939c7ea23(infile, G, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Lower


def func_98553959498b4678b31d800244ccbd13(infile, G, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Upper


def func_5127c7ace3e34160b4b3dbb5a41ed6f8(infile, G, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Slice


def func_92f8cc1c2f214789a8f23d71c6900548(infile, G, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return y2


def func_b2776cd21cbf499fa19fa3d8f38a709b(infile, G, Lx, Low, Upp, U, Ux):
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return ui


def func_965fcf5adb36434ab744f43f30660c14(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return U


def func_38b54ae8807041f5b1e07bd9bd8c5e52(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Lx


def func_e027326a179844df8d85d9f34aae49bf(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Upp


def func_9c2231365ce2403ea079c9faa0946565(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return li


def func_14358c6cc91a4f09a140ff7a7d1c18d2(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return L


def func_50ac373302544a25955b5d4649afc0a7(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Lower


def func_3f9f634fccc940a2be572479eb2237cb(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return W


def func_88f3c5a875e6492c968e5b0099a5d29b(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Upper


def func_ad0c6ba72d7c45a28147b6c3ddaa8d05(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return i


def func_62014b00dc58448c818b54be1f85fe06(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return AllX


def func_301cf8161b0f4990b353b4033550dd41(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Eff


def func_0d79a9e4c3164ced8839f51f7ebf0fc4(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Low


def func_bb3aeb13e176405fafdb889b2d01fadc(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return ui


def func_293ec542008e4499b96a487a89903fd1(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return Ux


def func_f336e8f195fc47d591b5d922b6d11491(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    return G


def func_d8c1b492816c4337bc1b3d1e02a44652(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Upp


def func_bfa81966856e48f3b3b9b692a823b1b5(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return i


def func_a5d55bbe58274a5cb1bb4b4b846a5fcc(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Upper


def func_ac896d54648b4412841d651b367f2df2(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return li


def func_a264e9e1e9014c298e13a9073f6ffa0b(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return ui


def func_ae22f730825e428bb78c16e68218cacc(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Lower


def func_6710a71a81c64f028d8aa7dcbc555514(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x1


def func_bab42c8e5fa44e66b50d9621e78b9628(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x2


def func_1689a8a3b1964aa892494535853d68ba(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return AllX


def func_b6273e4978e348e38bb4195e46d95ed4(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Eff


def func_dc3f7cf9c29346b9baa226f15ab49673(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y1


def func_ab6616549fc94fabbb240bbbc01f4e29(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x


def func_c277983912ce45b9966b07813defeb52(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y2


def func_5c07d3e8cb1c430da53619fc1b7aa0ac(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Low


def func_d39bfa8da0e341b5bbb310d7f56a8c7b(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Lx


def func_5c01a1bd8d4b4a93852d0eb93ea18a74(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Ux


def func_45aca853201342e7a09294c40b8eda5a(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return AllX


def func_9591e9a677174c51b4850989e67bd4f4(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return Lower


def func_46536804c855484a98205acf78bdee28(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x1


def func_9a74404e8c174a6fad2c9640607f7a2b(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return Upper


def func_76438f3880cc49fb9b21ecfb077bc8e8(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x2


def func_d3a213170f0a47d589ad18d63c806cc4(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return i


def func_91a4c399c17e4ff9b174ba0b1348994c(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return ui


def func_b7051dc508d44002b7dfbb22598490e5(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return Upp


def func_adbdfcbc5a294072888b2aa976244632(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x


def func_cf362414084b49eaab79ed19f4b5e934(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return Lx


def func_8da5340bb92c483aa5b893c14bbb28b9(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return y1


def func_26191cd1185643c0a44bb7fbcd55293a(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return Ux


def func_7a9a2ad04155473684d69696e2dc07dd(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return Eff


def func_dc31271fafb544de9039c860ad94f040(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return li


def func_ccebfc33ac694fb688ac1043822161ac(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return y2


def func_304d1e6797534a43bbf0225c34ccb567(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x


def func_80a9218d182f4c95a973bfc20202b78e(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Eff


def func_fe1564b3c23049b28d0d87ce6846cb75(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Upp


def func_2060be1034eb4b56abf8fe6e6fd2d630(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Area


def func_b757e9c377824643a4fd99ffbc003bd1(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x2


def func_c9fa97f3f59542c59462d61540c2b8fe(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Ux


def func_89b97129658b4d218b983fb70882201c(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Lower


def func_ce075f50df9f44469250b199ccfe9929(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return li


def func_97b07079f7ab48a2a6e434732d16f828(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x1


def func_d2de114d64d64f7a96033cc184d5898f(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return y2


def func_7679e9870bdf4946957fbc400bd86a47(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return ui


def func_36283042b18c4cd0b20578023919c165(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return AllX


def func_c56104de2e344953805f5c5ee267d75f(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return i


def func_27231b5aa1054aefb12d5d12e5ef7dd3(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Upper


def func_4bd91dcb9d0641ec97ca331791a08cd5(infile, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return y1


def func_ed7c46fbffd04f598e9faaf7f604120e(infile, G, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x2


def func_b1c7d7a9aa1d4c2cb9efd1837540e0c5(infile, G, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Upper


def func_717b5261539447d58a6db8831cc639be(infile, G, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Lower


def func_ac9d26f631804fccb3bb874d4f567d81(infile, G, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Slice


def func_5187f94769ea4c909137bb73a980bc73(infile, G, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return AllX


def func_da2f1c3be293409e85bc75ae223a7e0f(infile, G, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return i


def func_311fd55753204d838e8a0f8c8353040a(infile, G, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Eff


def func_1f49a17b75984ccf81c3625354546379(infile, G, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return ui


def func_5dd9ad8cfea0440dbdc33e74aed80390(infile, G, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return y2


def func_ec71b8f5fbc74c00b38186d9d195a611(infile, G, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return li


def func_64e0430181604fd4801094d693bdf55d(infile, G, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x


def func_64a50a76569a488c95aea5347862a47a(infile, G, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Area


def func_bbc9af2913f14347accb8f2d30e5d134(infile, G, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x1


def func_e52f9fa8219046e088ef9076fae9224b(infile, G, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Ux


def func_750189928238483e88e7f4f1e5f6491b(infile, G, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return y1


def func_6b4e37cdfea046f9a39f213c5e1713d0(infile, G, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return ui


def func_72461c63b2bc4360860426bc666f4d8b(infile, G, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Upper


def func_061800e220294240bc37616ac887a2df(infile, G, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Lower


def func_9c92562f755c4bc5a5705103db723b08(infile, G, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Area


def func_8facdfa979e741f9be577ff2374e7934(infile, G, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return li


def func_174e4c1e3b4245478e1a5e15b84fe053(infile, G, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return AllX


def func_d3cba50fc04043c7bf78459c7d00653f(infile, G, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x


def func_84b35260e5354308ba5aaf4d89c2c34f(infile, G, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x1


def func_b03faeaa1fe64db1ab38eb88285b5d0a(infile, G, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Slice


def func_f09fb55b3fd64e5a82db3b60f780f751(infile, G, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return y1


def func_7c34884410624dc69a07bb555b63b32d(infile, G, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Eff


def func_281ea1c313d54c428a37a33d5f71a119(infile, G, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return y2


def func_9a1846042fc4466d9e2123e1b5775df9(infile, G, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return i


def func_89671dbcedb34562888afef6785a57ea(infile, G, L, Lx, Low, Upp, U, Ux):
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x2


def func_7224e42c364240a28a3545d8201ae7e5(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Upp


def func_e4b64c6821054a07a555bf2446fb7412(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Lx


def func_1c02636db0394048a02ccf2919e956fb(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return L


def func_ba347bdc027e43bc9009c77acf54fb7e(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return U


def func_9eef947ab3d64ff0b715c6657e5e2ae0(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return ui


def func_9bede097ad604ec3851a00d2137c1a3d(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x1


def func_059f954351634ae196ec47cf87f24459(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x2


def func_d64387b073ab46fb86efe8642da32f0c(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Upper


def func_9d41435bc6bf46a6982922858ff5d35c(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return W


def func_222a448125ba4a9b84f843f4af7a5071(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return x


def func_a4f9a5a3f3ab4be08553d6a98add8cee(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return i


def func_2cfbd1ac4b784a559fb9935ec330e6d1(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y1


def func_eb1651c1fb914dc29e343885f97768d7(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return y2


def func_486bb84c1c0340e6a06e99ace0bbd407(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return AllX


def func_4a039a83d78f4c5facf700892207ca55(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Ux


def func_c85fae548e5b4aa99a6032c6d7b130f2(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Lower


def func_8967470c6bb048cb94af02e1e1f275f4(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return li


def func_b6da1382e2f4406f94a296ef7d35f36f(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Eff


def func_46a40c4787404ce98d780afbae08dbd9(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return Low


def func_6c9c5fc9912d408fa6c0771ec84d1302(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    return G


def func_2019d0ebf4d94051bd70172f96acbc10(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return AllX


def func_e25e2c6ee4c44bd496ad4750d6bbfadc(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return Eff


def func_61808cbae45e46a5997ff05305002d5c(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return Lower


def func_5b1a9759a5a14f6da8b869cd565a9a2d(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return Upper


def func_ae19e70626e74c69ade47c22516b7ed0(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return li


def func_0a5ebdebfb1f4d479f7035f5a1f61b49(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return ui


def func_51404301b01845548d3eb7268df6a39e(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x1


def func_facf1f011279492ebe511c7e541908e1(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return i


def func_208deab542034c3a9a7f48053d5d4ec1(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return Upp


def func_95b4648a8d8a4d568ff8512e21f52c9f(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return y1


def func_a378e70fb0764641b09316f9e65d604d(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x


def func_8d54467dfe4741c6b9d1893b63f13098(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return Low


def func_9a66fa9e7eba4072b301c3b8723a3fb3(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return y2


def func_9e77564a6f594f88bd56fed23b867d05(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return Ux


def func_f50718aba9cc4b439e10252652fcd794(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return Lx


def func_bc391db1183f4d85990edeaf52ea78fd(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x2


def func_7915b4fc518b4af4a2260cfd7e435438(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Upp


def func_39bbbf2e7e0f480a8cf0549712e5dcf5(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x1


def func_d1e01b67386647fc84a76fd8c8cfa3ec(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Eff


def func_bb5b9295a8f8495dab88d4c4b69db457(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return AllX


def func_3bee882c048b4188a1f760615a293653(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Ux


def func_7623656a8bbb499893226751e7fcd319(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Upper


def func_888c435b484c4f689d1a057098c18965(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return li


def func_990de07160a2404e89cdd1bbff4c0852(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Lower


def func_8503e814f47c4e1b8f2e72363f7bc819(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return ui


def func_e74009f16dd74c779f7bea8c514c0572(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x2


def func_34d3b7abe9244ac59a014615e782aa29(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Area


def func_0aa0a83692984288bf2b947f0ca1bad4(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return i


def func_7289a074dfc3492ab38d2b623e005414(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Lx


def func_cda4089cd4644856beef42767dd89435(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return y1


def func_bb29976e340448868623d0fcd5023082(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x


def func_20f6e381c5204b33bbfa4115c86c6ef7(infile, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return y2


def func_aaab1e0197d741f89a526aabebfb1802(infile, G, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return y1


def func_6602c03c0633409ea4e148e6c352ea8a(infile, G, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return i


def func_8b9a35d234d84de483d7dab265073b6d(infile, G, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return AllX


def func_b02bff12b6314bfc8bf8a44cbff1f582(infile, G, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x


def func_8f89c5d366764f7c9a0759836c3bbcdc(infile, G, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Upper


def func_237f18aef75041b0ae7cdd428d94d11e(infile, G, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return ui


def func_fbfca1fa50fc4dfb9a2ef987eb5a87ed(infile, G, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Upp


def func_c3046132ec914d9caae55e5ae7c59168(infile, G, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x1


def func_91f6adddec1046c09b07b422bb35792a(infile, G, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x2


def func_990754744228490e833e6395d0f3b262(infile, G, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Lower


def func_cd0a1b75ac684c1693bfbe0301bd113f(infile, G, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Ux


def func_e3660535f39547aa850be7fc786ea8f5(infile, G, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return li


def func_99a7928728594db7b445ab92d691b062(infile, G, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return y2


def func_3d43a04eee1e459bba3a4f477e5e0cdf(infile, G, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Slice


def func_f3d18fba9dd047698c84c4070125d0e4(infile, G, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Eff


def func_a16814c1c1274435b7dff9d92657a9a1(infile, G, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Area


def func_c78d7b77cef74c358de5b1cf5e9eda99(infile, G, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Slice


def func_69171287955648bdaeacee28afee92b3(infile, G, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x1


def func_00c3d8bea39042ee9566167e0ce7f6b1(infile, G, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Lower


def func_dda3f38350af488e9e44d77ea35dc5c7(infile, G, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return li


def func_5a604922449a43459b73b833d8b9e736(infile, G, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return i


def func_d46b1898e8634b6bbf0cdeb354cca83e(infile, G, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Area


def func_ad90597b2a22411fa6f2c7bcb92d6ac7(infile, G, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Upper


def func_565690cb7d5d45baaf19afe34f21e596(infile, G, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Ux


def func_dd6b8a8adf1f4051a3f5d938cf450dc3(infile, G, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x2


def func_7e775a71ceca4e0e80175e27e9c8f5db(infile, G, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x


def func_f8e9b2570ad84092b3af6987a99b7615(infile, G, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return y2


def func_3df4335da5b3473b9708f94138b62c6f(infile, G, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return y1


def func_c81fbb24e4104b88b74d973e8e05a8db(infile, G, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return AllX


def func_38bd7de8138c4e65bff5cd920532853d(infile, G, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return ui


def func_864f9e7cb369480c8c82c4ae6139d510(infile, G, L, Lx, Low, Upp, U):
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Eff


def func_df87c3db33b946f0a3f6c529c0ce41ac(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return Lower


def func_e4d73bd0c6be4ebcaa118bebeac8c6dd(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return Upp


def func_c97fa5b5d3904ebaa79167489619ed5e(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x2


def func_94089b607c394b51b80acd30f6e748be(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return AllX


def func_98a578e3f91549c89ccc1dbb8f4c706a(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return G


def func_28dbc52124dd4ddcb6924d839416ada2(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return li


def func_f7f3f9b172c146efb7091e2dee29aa24(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return Lx


def func_f4d7af66d72a450caed7513cdb2dabef(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x1


def func_9d84785c7573470c8b2d276aca217880(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return y1


def func_5d171d11848b4dd4985d825a5cc6419d(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return y2


def func_da79ae023b4d4848a22d1cc50c6fead6(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return W


def func_7b5cb505fa9b44ba85dee3da1361e6c5(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return L


def func_208580efbc784c2aa6fab656804be122(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return Ux


def func_b658ad1a328346279642e1ffce2aaae0(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return Upper


def func_c0c5992f426e466b9ee514626aee0b2c(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return i


def func_8c1def0a6ebe4b8686c78ddf3163be40(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return U


def func_dcd63374a51c4e9483db41ebeca20fbd(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return x


def func_9483deda59674fe89d60e0083a4779d6(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return Low


def func_5ee79164e68a418b895646bbad2dc45f(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return ui


def func_0d337575635e4494ba325d3f849e19b3(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    return Eff


def func_5bfa76e67de54d09985f9850124f8eea(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Upp


def func_2e1a4ddf419c43b2a65ea3b71304c5ee(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Ux


def func_c7cefab54b224afcac595b63a5d9d55e(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x


def func_ed8da69bf54045ac9ea93452bab511f2(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Area


def func_7329f84755ce4230b31b3f70b1d939de(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Lower


def func_d685611bedea4cbba6f9cc86af7c3d20(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x2


def func_5e2bbff0aa12499ebf34c9101521ed76(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Upper


def func_df7a72f9c09b41f58f28e975f562bc22(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return y1


def func_e240228b8a4a410dad64944adbe78481(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return y2


def func_a30e7cbe12e74f34bf0de1a5f7ae98bd(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return AllX


def func_d6db54d2f645453f9b6b5e349ea976c0(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return ui


def func_73238ae758e745d582625b34480042d1(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return i


def func_06f9d91ef065452184ce211ede171216(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Eff


def func_aa8f8c83f46349218e5344a9f3c91fd1(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x1


def func_b87742c3783c47808dd18366e9b685d0(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Lx


def func_9c1ff6ae2ded4ee2bd737a0604c59720(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return li


def func_e741095ddcbb463b8a7d5600a8af794e(infile, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Low


def func_37da327e1ce442c183415e9c5d6f49b7(infile, G, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Lx


def func_91c0daeca8b146caa195b91a74f2d138(infile, G, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Eff


def func_b4a21a916bbc438aac018e1614ee7705(infile, G, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return ui


def func_f3936ba26ab440bbafee94dae5fe7941(infile, G, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return i


def func_0f7a4222d1d641bb919e3135f10e5727(infile, G, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return li


def func_3b1cadc4bafc494ab75d483aa467cb02(infile, G, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x


def func_e2228c26081942159f3fed7aefaebda7(infile, G, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Ux


def func_947d76ddf2564ccb85cea9cf249444e7(infile, G, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Upper


def func_5d02ee5415504c6eb50f782e353f3131(infile, G, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Slice


def func_129b9410a35a4fd58e7bee6598ddfab9(infile, G, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return y2


def func_aa2ad7d4b66346fc829c78eeee39ad1d(infile, G, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return AllX


def func_696e2b52309246adbbd6a0921cb9ff43(infile, G, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Upp


def func_8c8748f0c93d4b69a2274477e7c91900(infile, G, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Lower


def func_753abc88af50463b87638bf9f80938ee(infile, G, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Area


def func_667c6d078e304d3e8d0d14d12b2d4c33(infile, G, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x2


def func_3a135b1641b0439a904e58f8ed5a4f3d(infile, G, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return y1


def func_b1c4334d42704da1965ec03ca76a7089(infile, G, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x1


def func_122d1b43eb7a48a8b8f4fa210ee7c0ce(infile, G, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return li


def func_aa763132abb34189968b837cd37a82ab(infile, G, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Area


def func_72f886ac8b364d67a27da92a85906659(infile, G, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x


def func_6c4e1a19857f436db34dbf88830281c0(infile, G, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x1


def func_1c39223694d84f269849e730ae287a39(infile, G, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return AllX


def func_36c8d5c86e7d4b41b12b1f79c2845278(infile, G, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Lower


def func_2baa722e1e3c4642a3ef09c1430be9fc(infile, G, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Ux


def func_c569e965c9124e5f82af69ed2c75cc0a(infile, G, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return ui


def func_0d97ff2de9134b30aee1dcffdc350314(infile, G, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Upper


def func_8b445fbb153d43eb9626ecc180982a83(infile, G, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x2


def func_253661abfa824bdc923d109bc2d0472d(infile, G, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Eff


def func_75b0b788edf04f8a84722c09a17a13dd(infile, G, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return i


def func_acf9f10328f34cc5836fb00394592fbc(infile, G, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return y1


def func_7c3b2d8148694d9fb1ae3f0116475733(infile, G, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Slice


def func_5516322444e043edb165ad1afcdcb53e(infile, G, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return y2


def func_6646cf2c6ab0433d925bf66112ec55f6(infile, G, L, Lx, Low, U):
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Upp


def func_d817b75a974b48bf841fef7546e79ada(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return y1


def func_5763c59661a045fbb99fb509a7efbf05(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Ux


def func_96d4876e5a0a416189b184289917c2e8(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return L


def func_bf86fda1fc4349eba03d0853c7fb137a(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Lower


def func_cc08a5a76e234fe79eb725cbcb638690(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return i


def func_e4c62b18b2ed4f6d979a3aaadd54f59e(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Eff


def func_a8a9e28202bf4d0b9078b953645f2bbf(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return W


def func_2fbd5bff0d924594a63d408a4e5ca62b(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return y2


def func_4f170975ddfc4e5191ae0e143eee605f(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return G


def func_3d75ace55e2b499aaa10bdd9eb48c749(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x1


def func_7e202716216a4fe1a144afd24662e6ce(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return U


def func_779ec0c69db54d65b82be98615aa0aea(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x2


def func_39d3d7bb6d184de3ad99e2e68d047c77(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return li


def func_a37eb59e5e2b45a980d5a728d4dad699(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return x


def func_c39db404057c44848b49fb95429656fa(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Upper


def func_16bd97fa02794cfbab5679b6250bdca0(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Area


def func_a88dd3bac9174cf1a13bac56243bd793(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Low


def func_fbeeb3f3c17046e9b07c6af9d266f801(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return AllX


def func_3d87ceb4040e478081f7ab5d98c41af6(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return ui


def func_6ff3fd7496104aeb902af8181aac10bd(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Lx


def func_e853621e4e5f4b5195dcf0efe2f4da0b(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    return Upp


def func_d3e8177bb8524b38ac457a1906961d09(infile, G, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Upp


def func_96ad4bffdfc34bfbb59de25eacd9ff69(infile, G, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x1


def func_0ebae38356294718a29dfa8a4ab0b17f(infile, G, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Upper


def func_856535382a7f4353936a1bbaa2d3fb2c(infile, G, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return y1


def func_6c7b90c8858d4dea941aadd03ad04395(infile, G, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return ui


def func_8f3a3a63e01245179c30dcabd6ea38d7(infile, G, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return li


def func_d5ebd3cb819045dbb037dba5f8833860(infile, G, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Slice


def func_93251922e300417fbe27822499b13b73(infile, G, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return y2


def func_b99d62edf44941b7acf0102f2fb92f9f(infile, G, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x


def func_c1d03689fb7643129ce6d5c34d574989(infile, G, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Eff


def func_4fc9c8fc12a64735851510d2a19dea0f(infile, G, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Area


def func_95d3916ee0714961a08049d6786c5d0c(infile, G, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Low


def func_c9bf7bf804304c65bf77c180e3a6c4be(infile, G, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return AllX


def func_3e8625a666524bdd8fc5d69b39640d63(infile, G, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return i


def func_b2b437a560cd45939e3ad990294b40bf(infile, G, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x2


def func_fa434aea914a49308ab628f0efd747bc(infile, G, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Ux


def func_4eafafe02b5441479df3e5ed8802ceca(infile, G, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Lx


def func_d4c059a844ae4d7690f0433f07836b14(infile, G, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Lower


def func_11ce5363e96d45a7b44e0f6facc04d38(infile, G, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Lower


def func_a772129ae77948999ac35c819684ea5e(infile, G, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Area


def func_5e0bc1e7b04c43b79bdf5db96fbc0957(infile, G, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x2


def func_1b9f2c426a2c458eb256258540f99675(infile, G, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return li


def func_1fe26e76d43c45dd91b541910073ec23(infile, G, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Upp


def func_b52cb79540094ef98b975b941f1d5152(infile, G, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Lx


def func_9fbb3040655a4ffda469f569e79a3a47(infile, G, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Ux


def func_6e0d27c71b6742bd800e5f5b2d55d64b(infile, G, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Eff


def func_fe2509fb2697464aa5c5a322b949802e(infile, G, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return ui


def func_8eb31cea779140b9819f9fb21a6be7e6(infile, G, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Upper


def func_c94d98a75fb14e72b5867e3bb6675644(infile, G, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return AllX


def func_a633673bbae84d20b288907b33781208(infile, G, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return y2


def func_bd9dd9cf50f249c7a77090c396cc6d87(infile, G, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return i


def func_a317cc53950d4e0c9db376f1d063432b(infile, G, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x


def func_f7dceecb90eb4b5c97e15f0d74e75fec(infile, G, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return y1


def func_e766f5cfa14e4daa8641824606e985b0(infile, G, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Slice


def func_21cbb4704f9a46cc8a581c23b0f10498(infile, G, L, Low, U):
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x1


def func_46f52dfd7fc1437eb7c326745dae0f9d(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return y1


def func_d1fdfa825bcb4cd881e1684b6f5a3965(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return W


def func_94545635139c43b6a798afbda90187e4(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Lx


def func_580dbf9358c24218b19f838c914111f6(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return i


def func_4d2741fffc7648c0be5dba4877b69887(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Eff


def func_eb9e8cd7648246c69b0a2922f1f185fa(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x2


def func_5384317cf50d47fb85732e9abdf2ea76(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Upper


def func_b284a4b1fa094046ad1678c310459603(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Low


def func_53ceffc46ea34de2818578eadf2ddf92(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return U


def func_26a4036c424049b79f04d45c9402f604(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return y2


def func_d463c6c690174d10b74199c8a39c7451(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return AllX


def func_54d482a03c2c4d0188838a7c99d0e876(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return ui


def func_1ce822a0bea9465eb33a4c890d2485c4(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Lower


def func_e7e65fae6f0e47cc8ca383c7bda24bad(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Slice


def func_db1180c938fb401cb19e22cc2f609fc9(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return li


def func_88893ac6309d4b29a56b7c0925393d60(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Ux


def func_d7f283f935144e2091e3af89bbb7f7f5(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x1


def func_2a5b635ac68641aa8d1c1779afc6c4f9(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return x


def func_a518f22d91884383a611f3989664ab4b(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return G


def func_7b941e6e3dac48a5b322bc7722736529(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return L


def func_d0c6c5f5c8f6402393bb8a8fc0e04824(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Upp


def func_1bc2ee38ec4b471ea945f3cc69e3a55f(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    return Area


def func_327e2d011c0f465ea6090a7e556368d3(infile, G, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Area


def func_00b96f4ae3264710986afb1f74601fb9(infile, G, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Upper


def func_1b7dce03203044a2ab3bd9bfc13057b1(infile, G, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return y1


def func_785724ca802640c0ba2f73b13d94d04c(infile, G, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x2


def func_bafcd449dd2d4095bec8f3830afb6d4a(infile, G, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x


def func_db6512d08ac042949a06faaf8a65a204(infile, G, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Lx


def func_6af2c3cfa0bd4c7c94ef35f2222dea47(infile, G, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Lower


def func_8a848edc1e7e41028debba5cc6052c16(infile, G, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Ux


def func_c51a30a728df45778c5d52288aa4187e(infile, G, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return y2


def func_10f61d84389e4c07b0fc89529daef705(infile, G, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return i


def func_0d5c706b2aa4436aa124650d459faf6d(infile, G, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Slice


def func_dbc509fa8dbd4708bc1342054253dbe1(infile, G, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return AllX


def func_41c6f6f49d204ebdbfd042ae5528d701(infile, G, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Low


def func_934e931067244c86a569e7ae69aeb491(infile, G, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Eff


def func_42904240f1a245e8a7ffdcbc69bf49ca(infile, G, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return ui


def func_f34ee5059e384540a702b4f1975b551c(infile, G, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Upp


def func_a578c4b623ea4e44b7d79ab63d963fde(infile, G, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x1


def func_2ff76b13b06b4a4ab082e746abb3d13f(infile, G, L, U):
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return li


def func_f9c3271b2ba547129a5bda18ac9874b4(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x


def func_d893791c69fd421898de91bdf6da131a(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return G


def func_8a25f5ddfb124af0aa0fa75cd6002cf1(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return y1


def func_ee3abc3b5c1449438f2df9358e651fc7(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Area


def func_7472e9b710fd4ccd8254f71c073bc001(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return L


def func_158c3f8eac334a5bb074bccb3aecd91c(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return U


def func_1b60870a572346df8a72b3ab47c4105c(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return y2


def func_c8c41580e6b8453d881631689d53282e(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return W


def func_268576c26ce7432fbd0131c7de038441(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return i


def func_f2c743f522234287b471b9eec954bbe5(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Upper


def func_09507a69ce8840f988a6945efadf8efd(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Lx


def func_bce67a5bd58f48f8a7e3355108910092(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x2


def func_a3eb452f16da42fd98375c40ef153fa2(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Upp


def func_3e7ac49ca01647979e6881885cadb272(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Low


def func_2194077fe8af4118af5278d4447be43c(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Slice


def func_cf748939679040e696f06481799d8d97(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return li


def func_ffd3a4e511994a17bd4c4118533f923f(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return x1


def func_7ddd5446a7fb40919dac0de2ae46deb9(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return ui


def func_806b677a5b454b7696dec1fad652b28f(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return AllX


def func_5b6fc2d8be534364a068bb713b76c7df(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Eff


def func_7812c313c68f4e27b308131dfc596fc3(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Ux


def func_d0bde03f8a184e9489b52e9965f18839(infile):
    [W, L, U, G] = map(int, infile.readline().split())
    Low = []
    Lx = []
    Upp = []
    Ux = []
    for i in range(L):
        Low.append(map(float, infile.readline().split()))
        Lx.append(Low[-1][0])
    for i in range(U):
        Upp.append(map(float, infile.readline().split()))
        Ux.append(Upp[-1][0])
    Lower = []
    Upper = []
    Eff = []
    AllX = Lx + Ux
    AllX.sort()
    for i in range(len(AllX) - 2, -1, -1):
        if AllX[i] == AllX[i + 1]:
            AllX.pop(i)
    li = 0
    ui = 0
    for i in range(len(AllX)):
        x = AllX[i]
        if AllX[i] in Lx:
            Lower.append(Low[li])
            li += 1
        else:
            x1 = Low[li - 1][0]
            y1 = Low[li - 1][1]
            x2 = Low[li][0]
            y2 = Low[li][1]
            Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        if AllX[i] in Ux:
            Upper.append(Upp[ui])
            ui += 1
        else:
            x1 = Upp[ui - 1][0]
            y1 = Upp[ui - 1][1]
            x2 = Upp[ui][0]
            y2 = Upp[ui][1]
            Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
    for i in range(len(Upper)):
        Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
    Area = AreaSum(Eff)
    Slice = Area / G
    for i in range(1, G):
        print FindX(Slice * i, Eff)
    return Lower


def func_86bd46d8ea8f4fdb8d7a28e6890a169e():
    infile = open('codejam/test_files/Y11R5P1/A.in')
    T = int(infile.readline())
    return infile


def func_6243975cc72f4dd39ac875672139ce39():
    infile = open('codejam/test_files/Y11R5P1/A.in')
    T = int(infile.readline())
    return T


def func_3ef0b09a60594342a04f5799576915b7(infile):
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return T


def func_d937a749e43a4e2c814c53dedbff5daa(infile):
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return Lower


def func_6f4b820eced44f82b3b1e58cbb1c2b4f(infile):
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return i


def func_118b614e2100488a9b6063515874557f(infile):
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return ui


def func_04e8fc6f9dc147229564bac12dcf1a2d(infile):
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return Low


def func_695405c66e754e59af3c98627c47d90d(infile):
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return U


def func_1820bebfc9fb4f0eaefb199ca5702b1d(infile):
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return Upp


def func_80f3d279f7e440339f2b6c4f3d462728(infile):
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return x1


def func_68a9049c2839440fbf136e746a64c555(infile):
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return y2


def func_94b29f6d94284e84aa24519e3ccf49e9(infile):
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return Eff


def func_17a2a88639db4f24b8f48e64d209fd38(infile):
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return Upper


def func_81d52a7812b54c2dbab437a813d44ff7(infile):
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return W


def func_547420a5b21f4a65a3b6ff6aeb0bc441(infile):
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return L


def func_5f59a28975274a47bf89f45199fab3c1(infile):
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return G


def func_58a50a50b12e4a7fa790c167eac62898(infile):
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return x2


def func_e9183422f1e54adeb39a6af8e7ca82d8(infile):
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return li


def func_d19086acccf04808a995c2dcbffcc475(infile):
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return Slice


def func_2df76a842d09438cb18046ee5bb95d86(infile):
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return Area


def func_e44bb3d608af4628921f184b0644b2c2(infile):
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return Lx


def func_d2774eef3f634da4a78c481b04f8e30c(infile):
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return Ux


def func_5b084212950e430d8c10b26567814f96(infile):
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return AllX


def func_95c0ccee65194edda38ff5a206389df6(infile):
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return x


def func_4234b42ef96a4c11bfe1408aedc75f5b(infile):
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return y1


def func_05d206f47a7a495eb0466b7dd74cd37f(infile, T):
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return W


def func_2d0d8a7557ff41c0b192858e8f24080f(infile, T):
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return Low


def func_898645397dc942af9965c396264b1366(infile, T):
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return Eff


def func_323b17c2b76f469a86cb3518f8862361(infile, T):
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return Ux


def func_bd4899b2dd564880adf3f6bfd2303c1e(infile, T):
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return AllX


def func_ea94a9815e0d49c8b5979360a37c7959(infile, T):
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return i


def func_58bd168cb58348c4b56efff9f4a4bbfe(infile, T):
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return Lx


def func_e7bdee5994244014b5e1e7d6a2f5ff12(infile, T):
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return Upper


def func_9834465e5a6a498c92591cb30eb1bcf6(infile, T):
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return Lower


def func_39ffe7583bbf42fba200fe46e30bc0b3(infile, T):
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return U


def func_74c8720050264bf4b9edd06d2cdeeca5(infile, T):
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return L


def func_ecd59620394a418bbbb57351559242a2(infile, T):
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return G


def func_12cb66c6b71d4151827f1ca1647b0006(infile, T):
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return Upp


def func_f85eed8238f44f5cbb104ed6357be063():
    infile = open('codejam/test_files/Y11R5P1/A.in')
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return x2


def func_6b086b6eb8804b36ad33e1d50221cf59():
    infile = open('codejam/test_files/Y11R5P1/A.in')
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return x1


def func_2bcfadbe9b3440f6a2bfe7f0622da168():
    infile = open('codejam/test_files/Y11R5P1/A.in')
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return x


def func_41ddd83664384598b82318392f21de3d():
    infile = open('codejam/test_files/Y11R5P1/A.in')
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return Upp


def func_5ae21cb493674d7390ef1e70f28f8d25():
    infile = open('codejam/test_files/Y11R5P1/A.in')
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return y1


def func_ea3ff7f810974bd59c723a891f226b71():
    infile = open('codejam/test_files/Y11R5P1/A.in')
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return Eff


def func_59e0b55c63804509a48818a27f76bca1():
    infile = open('codejam/test_files/Y11R5P1/A.in')
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return U


def func_f12c5d07096349b19847de369470d807():
    infile = open('codejam/test_files/Y11R5P1/A.in')
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return Area


def func_a337f3f211e64999a320949f41eea19f():
    infile = open('codejam/test_files/Y11R5P1/A.in')
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return infile


def func_82b7726cf0ab4d7a820a4f7ab3ed6c2c():
    infile = open('codejam/test_files/Y11R5P1/A.in')
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return W


def func_eb6c6496b65a4258bc0189eb764758a6():
    infile = open('codejam/test_files/Y11R5P1/A.in')
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return li


def func_85696a166b204091b1a3abf1fae049bc():
    infile = open('codejam/test_files/Y11R5P1/A.in')
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return AllX


def func_f0763ca8e16041fb8bc3fae532928c3f():
    infile = open('codejam/test_files/Y11R5P1/A.in')
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return Lower


def func_d6b8c8a159f44848ac6c4dc11e623225():
    infile = open('codejam/test_files/Y11R5P1/A.in')
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return T


def func_65b91e7c4e044dab822f2cd7646d3a3b():
    infile = open('codejam/test_files/Y11R5P1/A.in')
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return Upper


def func_02f63d3005dc4bcfabe2b41cb89389a6():
    infile = open('codejam/test_files/Y11R5P1/A.in')
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return Ux


def func_c21e261c494e4e6f8fb0b60fc57968fd():
    infile = open('codejam/test_files/Y11R5P1/A.in')
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return i


def func_0d22566a71034dd18663432051a02210():
    infile = open('codejam/test_files/Y11R5P1/A.in')
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return G


def func_65fd77aecea14b9680af7ad504f1013d():
    infile = open('codejam/test_files/Y11R5P1/A.in')
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return Slice


def func_c2ccffcfc5174c399e071cfe536e0093():
    infile = open('codejam/test_files/Y11R5P1/A.in')
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return y2


def func_c6e7ee2bec6748388a195625a020bed4():
    infile = open('codejam/test_files/Y11R5P1/A.in')
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return L


def func_27d8a78c4ef547b3b7659c611ab5a3eb():
    infile = open('codejam/test_files/Y11R5P1/A.in')
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return ui


def func_ec9ebb6b51324f889fee22c6df654bd7():
    infile = open('codejam/test_files/Y11R5P1/A.in')
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return Low


def func_e21dfecc44ab46f7a01218314b575f6c():
    infile = open('codejam/test_files/Y11R5P1/A.in')
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    return Lx


def func_b0dbb6634fc44d6b946b4f9190bab850(infile):
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return G


def func_bf716a923e144a6289a12c5885ea8f96(infile):
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return Lower


def func_d025ad8994aa4c5698d12272b4b8e1cf(infile):
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return AllX


def func_15d11ab190b940bc91bb529d84d8e951(infile):
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return U


def func_1beaa5aa87ee40ecbf1a98d8bbbb7944(infile):
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return Eff


def func_d65b9645d75b4ba2bc793a01856d93d3(infile):
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return Ux


def func_3d80b0d3731f4623a80953dc70a530e5(infile):
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return Lx


def func_5de65f7b0d804c5cbc825ec44a8b8046(infile):
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return i


def func_de9926a799cb4069bec52e6338856d0a(infile):
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return Low


def func_cd9aa316d065443f8c7683cc3b77be5e(infile):
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return T


def func_7fe0fa1254d04c64aa7e1f7239beca45(infile):
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return Upp


def func_0bb9750274df478c964d030ea7acfad6(infile):
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return Upper


def func_05cc093d0af24bb6bc71f72aa184fb20(infile):
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return L


def func_6cbb641794a342b6867186b04279bb0d(infile):
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return W


def func_da7581d38a174ecb8f0e4b1139c73fe4():
    infile = open('codejam/test_files/Y11R5P1/A.in')
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return U


def func_7c122ce430914b48b6f25a20531ed112():
    infile = open('codejam/test_files/Y11R5P1/A.in')
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return Eff


def func_87cc38f4f9634cd1a041932266693317():
    infile = open('codejam/test_files/Y11R5P1/A.in')
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return T


def func_e8f7cf8cd05f4a39a815eeddc98e8ae9():
    infile = open('codejam/test_files/Y11R5P1/A.in')
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return Lx


def func_c6582b7f3a4e434ab21903cd63cdd1ad():
    infile = open('codejam/test_files/Y11R5P1/A.in')
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return Upp


def func_a6657758d89047dc9096bec8fb117ddd():
    infile = open('codejam/test_files/Y11R5P1/A.in')
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return infile


def func_1bcf9bab304047f7a5908342802b1331():
    infile = open('codejam/test_files/Y11R5P1/A.in')
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return L


def func_146078aec1d94c9b9fc720185ef56014():
    infile = open('codejam/test_files/Y11R5P1/A.in')
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return W


def func_c559491b38524f08bed316b498cac46c():
    infile = open('codejam/test_files/Y11R5P1/A.in')
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return Low


def func_b3422df1c7c344f497e08211a710c318():
    infile = open('codejam/test_files/Y11R5P1/A.in')
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return Upper


def func_a376939186c74704910cf137199af2f1():
    infile = open('codejam/test_files/Y11R5P1/A.in')
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return Ux


def func_561416c79df54f9a830e48a7d6dea765():
    infile = open('codejam/test_files/Y11R5P1/A.in')
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return i


def func_186ec5d85b9d4ae0a0744477f2ef448d():
    infile = open('codejam/test_files/Y11R5P1/A.in')
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return AllX


def func_4bf238b34de848b0b3455fc1567eab3b():
    infile = open('codejam/test_files/Y11R5P1/A.in')
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return Lower


def func_3f6250952c7a4e71b07a94b7e9c7f47f():
    infile = open('codejam/test_files/Y11R5P1/A.in')
    T = int(infile.readline())
    for i in range(T):
        print 'Case #%d:' % (i + 1)
        [W, L, U, G] = map(int, infile.readline().split())
        Low = []
        Lx = []
        Upp = []
        Ux = []
        for i in range(L):
            Low.append(map(float, infile.readline().split()))
            Lx.append(Low[-1][0])
        for i in range(U):
            Upp.append(map(float, infile.readline().split()))
            Ux.append(Upp[-1][0])
        Lower = []
        Upper = []
        Eff = []
        AllX = Lx + Ux
        AllX.sort()
        for i in range(len(AllX) - 2, -1, -1):
            if AllX[i] == AllX[i + 1]:
                AllX.pop(i)
        li = 0
        ui = 0
        for i in range(len(AllX)):
            x = AllX[i]
            if AllX[i] in Lx:
                Lower.append(Low[li])
                li += 1
            else:
                x1 = Low[li - 1][0]
                y1 = Low[li - 1][1]
                x2 = Low[li][0]
                y2 = Low[li][1]
                Lower.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
            if AllX[i] in Ux:
                Upper.append(Upp[ui])
                ui += 1
            else:
                x1 = Upp[ui - 1][0]
                y1 = Upp[ui - 1][1]
                x2 = Upp[ui][0]
                y2 = Upp[ui][1]
                Upper.append([x, y1 + (x - x1) / (x2 - x1) * (y2 - y1)])
        for i in range(len(Upper)):
            Eff.append([Upper[i][0], Upper[i][1] - Lower[i][1]])
        Area = AreaSum(Eff)
        Slice = Area / G
        for i in range(1, G):
            print FindX(Slice * i, Eff)
    if AllX[i] == AllX[i + 1]:
        AllX.pop(i)
    return G
