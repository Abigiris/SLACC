import sys
sys.path.append('/home/george2/Raise/ProgramRepair/CodeSeer/projects/src/main/python')
from Y14R5P1.waitingkuo.A import *

def func_c26bd85c9fb745d5b27f34dd69c07ab1(items):
    part1 += items[i]
    i += 1
    return i


def func_a82ba2466637436d971c2f04ddf06080(items):
    part1 += items[i]
    i += 1
    return part1


def func_a13d3d80544444a7b82dcdee73b9d01b(items):
    part3 += items[j]
    j -= 1
    return part3


def func_8c35f90b7a794750be9417d0d6e74ad0(items):
    part3 += items[j]
    j -= 1
    return j


def func_0b6b5fec69fe4321968d11b7062544e9(_part3, _i, _sum, items):
    _part1 += items[_i]
    _part2 = _sum - _part1 - _part3
    return _part2


def func_8c12e20eb92741b69413966546dce430(_part3, _i, _sum, items):
    _part1 += items[_i]
    _part2 = _sum - _part1 - _part3
    return _part1


def func_11c3ee1fe7a2460c94f7ea2563ad07a3(ans, _part3, _sum, _part1):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_b3e7d248004447d795a79601863a43ae(ans, _part3, _i, _sum, items):
    _part1 += items[_i]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part1


def func_81a0973a18754d60bbcee62557e356a4(ans, _part3, _i, _sum, items):
    _part1 += items[_i]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_aadc9ff98578411ebdb8318b8ad16134(_sum, _j, _part1, items):
    _part3 += items[_j]
    _part2 = _sum - _part1 - _part3
    return _part2


def func_5711f33a4cec4a60913b9a0f65678a10(_sum, _j, _part1, items):
    _part3 += items[_j]
    _part2 = _sum - _part1 - _part3
    return _part3


def func_6e8c510347cc4025a2b393da16cf44df(ans, _part3, _sum, _part1):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_e6377eb7006448e38da985e620c27375(ans, _sum, _j, _part1, items):
    _part3 += items[_j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part3


def func_fe2fcb9318ab4efd848725cd477ea878(ans, _sum, _j, _part1, items):
    _part3 += items[_j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_8837aa4cd880415a839211b073287dd2(part1):
    ans = 0.0
    _part1 = part1
    return ans


def func_c7d870c4a8964ae8a493f76c929ea930(part1):
    ans = 0.0
    _part1 = part1
    return _part1


def func_8e049bbb8e46430ca5ad5944cfc4695f(part1, part3):
    _part1 = part1
    _part3 = part3
    return _part1


def func_b15b0fa330d546f38e50dd22ebfa0c4f(part1, part3):
    _part1 = part1
    _part3 = part3
    return _part3


def func_94cc7775d0134b6c9e9623892ca55ed6(_sum, _part1, part3):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return _part3


def func_ba8d1f42e05d4ecc82976ae2ee19514f(_sum, _part1, part3):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return _part2


def func_acf82f23ba3f49c6aff346c40659ffcc(_part3, _sum, _part1):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_d08051a68fd5450dbf557adb76d1e968(_part3, _sum, _part1):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return ans


def func_07ba8cfe2a8c49b2967945698c2bc18a(i, _part3, part1, _part2, _sum, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return _part1


def func_f12ed1d828234f9db9ee02e03206d146(i, _part3, part1, _part2, _sum, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return ans


def func_abbf779f4f874a2aabd3202eed8c2fb6(i, _part3, part1, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    return _part1


def func_62130cc74ff74dd2946c3b0082662ed2(_part3, _sum, _part1, part3):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return _part2


def func_4cb4b7fd37bc42968ad1a3074969eb38(_part3, _sum, _part1):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return ans


def func_8d039571adaa401f820d00896a5a1fbd(_part3, _sum, _part1):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_955d377edbc8414082440e6f09db20a8(i, _part3, part1, _part2, _sum,
    _part1, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return ans


def func_f943a3d2bab44b13b8788bd41c54d12f(j, i, part1, _part1, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    return _part3


def func_a7b30eb615a742eeb11dc5ae8800ff2b(j, _sum, _part1, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part3


def func_a7eace14016d49f5855ad9d5ea02c11b(j, _sum, _part1, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part2


def func_a0c2b8de936244d7bdf65e8343ab56a8(_part3, _sum, _part1):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return ans


def func_3977c8395dd740fb9a48ec99629ce059(_part3, _sum, _part1):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_609cbb77434a480f8d5c358501919b49(_part3, part1, _part2, _sum):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part1


def func_c6fcbe3c1b224600b79452e4686f0fe8(_part3, part1, _part2, _sum):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return ans


def func_dc8dd6551d9b4ad8af5d729a5286d0f9(j, _part3, part1, part3, items):
    _part1 = part1
    _part3 = part3 + items[j]
    return _part1


def func_dc4f746c94574567a21a4cae51ed2fe2(j, _part3, _sum, _part1, part3, items
    ):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part2


def func_9666d51262dd4410862a83f60b0d160a(ans, _part3, _sum, _part1):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_eb1cdc6be003403a8fb31d9647049b3c(part1, _part1, part3):
    _part1 = part1
    _part3 = part3
    return _part3


def func_911b72bf908248c4a9b2bee6b8a94ac6(i, part3):
    _part3 = part3
    _i = i
    return _i


def func_d1f220def28d402e8dbb1ab82b507f10(i, part3):
    _part3 = part3
    _i = i
    return _part3


def func_f802652b701a4eb2ba77e3016114611d(j, i):
    _i = i
    _j = j
    return _i


def func_ee4bee801f754c3d86285f9df875ec60(j, i):
    _i = i
    _j = j
    return _j


def func_449368b1f44947bcb43e27a8a1dfc9c9(j, ans, _part3, _sum, items):
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _i


def func_c20a850c42704088a0e3ed716f09ff1e(j, ans, _part3, _sum, items):
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part1


def func_62c89179587a48539a0ab8b8967ba030(j, ans, _part3, _sum, items):
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part2


def func_36481e6ed0f9462dab1f09e78330b007(j, ans, _part3, _sum, items):
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _j


def func_29c92ee9cabc41619378de193b21acfc(ans, _part3, part1, _sum, _j, items):
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _i


def func_8394c60119684a1c96ca226ce67122ab(ans, _part3, part1, _sum, _j, items):
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part1


def func_20586db238fc4c8b9f17a6d890bfb0ab(ans, _part3, part1, _sum, _j, items):
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part2


def func_dd626619aafd47b191721174f9e90fa5(_part3, part1, part3):
    _part1 = part1
    _part3 = part3
    return _part1


def func_03adec3ae68a4a4f95208c236efcb077(i, _part3, part3):
    _part3 = part3
    _i = i
    return _i


def func_a4a4787e48014b94ae385b2a904ca214(j, i, _j):
    _i = i
    _j = j
    return _i


def func_5e78281d68f54d6b99f5eefa95cb8f6c(j, ans, _i, _sum, _j, _part1, items):
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part3


def func_ecf9f5869c6747c795a3115a5375d792(j, ans, _i, _sum, _j, _part1, items):
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part2


def func_b98931e2383d4ef4a7d0756fdbc9d072(part1, part3):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    return _part1


def func_971a855d20a544b483b9a50df771147b(part1, part3):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    return ans


def func_98478f36b4a347488fe761b66a705cd6(part1, part3):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    return _part3


def func_1116f5d93e54470cad250c46c8e5bb64(part1, _sum, part3):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return _part3


def func_0ab2af9c16194ad589e90aedac5acb3f(part1, _sum, part3):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return _part1


def func_95dfa27186f343c89fd088f230ea1bcd(part1, _sum, part3):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return _part2


def func_a2621117c5024bcd8890ecc97848d5f3(_sum, _part1, part3):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_0d89f62e39e2487f970aed44fbd4fcd8(_sum, _part1, part3):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part3


def func_9041f0a9ff4d46628574439cd338d5cf(_sum, _part1, part3):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return ans


def func_829a9b5544254db4b3db676d8fc6c161(i, _part3, part1, _sum, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return _part1


def func_2f342d1434c4498c85b166de2fd47091(i, _part3, part1, _sum, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return ans


def func_25c7de140b1e4153b8d641eef0c39a2a(i, _part3, part1, _sum, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return _part2


def func_7844188ebfb641708c1a573d1a1d7251(i, _part3, part1, _part2, _sum,
    part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    return _part1


def func_f4caa86e9eca4ea4bf818bf0c53693ea(i, _part3, part1, _part2, _sum,
    part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    return ans


def func_29ed76e362324e1ebda81814b42d07c6(i, _part3, part1, _sum, part3, items
    ):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return _part1


def func_0e642eeb6ac04a6abeb5d0bfc27f8436(i, _part3, part1, _sum, part3, items
    ):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return _part2


def func_6c63382e7266442d8cb44661cc7db5a1(_part3, _sum, _part1, part3):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return ans


def func_cbfe8b31874649fca2225a9ec607db38(_part3, _sum, _part1, part3):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_5168148501ab4a4ca3a7804774fa67c0(i, _part3, part1, _sum, _part1, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return _part2


def func_f263abeee54640ce87222d6e9f61a1f2(i, _part3, part1, _sum, _part1, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return ans


def func_829d0825ba0644468d4da6ab973f14b2(j, i, part1, _part2, _sum, _part1,
    part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    return _part3


def func_f7cf68d98f764887890764a8383df05d(j, i, part1, _part2, _sum, _part1,
    part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    return ans


def func_c446005c068040a2b8527d77016c7bc5(j, i, part1, _sum, _part1, part3,
    items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part3


def func_813f020890c7412a844ae92271e6d84a(j, i, part1, _sum, _part1, part3,
    items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part2


def func_97a198969aac4c83a34652ff5ac77fe8(j, _sum, _part1, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_0b5d7dc19c964b339bfbe15290e1bbfc(j, _sum, _part1, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part3


def func_0a9d06ccd77848858a3bff31298c91ee(j, _sum, _part1, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return ans


def func_b66448af044648efa691422969c85f7e(_part3, part1, _sum):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return ans


def func_85d20ee47bbc42d5815c2f0c92dfa6e7(_part3, part1, _sum):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part2


def func_9490fe047f9c499081e1aaca17671617(_part3, part1, _sum):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part1


def func_e0c2579dd49643349cd2f467730adb39(j, _part3, part1, _part2, _sum,
    part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return ans


def func_cc740661c86746c4acca6519187804f5(j, _part3, part1, _part2, _sum,
    part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return _part1


def func_3a4cb01a399c4b92b8313aae53efaf1a(j, _part3, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part2


def func_33dfe1eaec084c5aa637a701491b116d(j, _part3, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part1


def func_4c9917bb161c4a6695746317888f2935(j, ans, _part3, _sum, _part1,
    part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_31cad971d8294cf5954513eb1016221a(ans, _part3, part1, _sum, _part1):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part2


def func_74bd8dc1dd70467cbda8790082a620c8(ans, part1, _part2, _sum, _part1,
    part3):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part3


def func_55f8f2f4a04c4244876b8383b8ab23f6(i, part1, _part1, part3):
    _part1 = part1
    _part3 = part3
    _i = i
    return _part3


def func_22b8956ee6314e10af311972fbd276c5(i, part1, _part1, part3):
    _part1 = part1
    _part3 = part3
    _i = i
    return _i


def func_6277681aee8a4b7191645067068379ca(j, i, part3):
    _part3 = part3
    _i = i
    _j = j
    return _j


def func_0a48c613bd8443a9be31cf88df4d83f0(j, i, part3):
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_d0e5ef873dd94df69ced0e517b49c81f(j, i, part3):
    _part3 = part3
    _i = i
    _j = j
    return _part3


def func_bd3862318e504eb390013df3cec4824d(j, ans, i, _part3, _sum, items):
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _j


def func_affbfb2e87a0420ebd4f134597186733(j, ans, i, _part3, _sum, items):
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _i


def func_f12f8e1af5e4423f9848eabf652d0299(j, ans, i, _part3, _sum, items):
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part2


def func_00b4dfebfb4d45f8b34069e719bab05e(j, ans, i, _part3, _sum, items):
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part1


def func_2605f8c218ce4c7fbf4acb704bd62f26(j, ans, _part3, part1, _sum, items):
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part1


def func_1161cb855caf40008255dd9942112700(j, ans, _part3, part1, _sum, items):
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _i


def func_05d658cb5f0b4e989b40a0d4799e8a71(j, ans, _part3, part1, _sum, items):
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part2


def func_ce746b6dc5a94c2ab8f5dba4619431cd(j, ans, _part3, part1, _sum, items):
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _j


def func_f7efdaa3f3e344549b22308a69ed59e7(ans, _part3, part1, _sum, _j,
    part3, items):
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _i


def func_9848f452c4cc489d814a4932421b1d60(ans, _part3, part1, _sum, _j,
    part3, items):
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part2


def func_905573bb05b243028cbdf22a18f6506f(ans, _part3, part1, _sum, _j,
    part3, items):
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part1


def func_f57c410d07634cb699a3fa0067800f9a(i, _part3, part1, part3):
    _part1 = part1
    _part3 = part3
    _i = i
    return _i


def func_8d4d6d38f3fa4eea917e79f16e9eba3b(i, _part3, part1, part3):
    _part1 = part1
    _part3 = part3
    _i = i
    return _part1


def func_52a0526dcb9948e296dac77215e9be3b(j, i, _part3, _j, part3):
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_83a2daad2bfc4465aa1ce1e9f2a02560(j, ans, i, _sum, _j, _part1, items):
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part3


def func_7cbcd7b13b214dbf88833e3fa2b252d6(j, ans, i, _sum, _j, _part1, items):
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _i


def func_8756f044002243f0993ed050af26f58a(j, ans, i, _sum, _j, _part1, items):
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part2


def func_f9ef0588114947498e22739ccd3424ba(part1, _sum, part3):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return _part2


def func_2dcd5dad485c4105a0d56e481ee6f9a7(part1, _sum, part3):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return _part3


def func_26a7b505baec4590a6835ef97c809cb8(part1, _sum, part3):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return _part1


def func_d36bd65cd910428e887161d231b8dd6c(part1, _sum, part3):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return ans


def func_3507c49efb9044588cd4ce664d3896e3(part1, _sum, part3):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_a834469f271040cabdfc11cacd99e4cc(part1, _sum, part3):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part3


def func_ad453e01d38742bea522194d3bc5010f(part1, _sum, part3):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part1


def func_c47a3e1b1a4641d1a24a6f74deee7c10(part1, _sum, part3):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return ans


def func_6db71c5883214f7195c75cb6ac47f490(i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return ans


def func_1e06333623294d378a3bb7112135a75e(i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return _part3


def func_ca38688fb483426798a777827bc5dc75(i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return _part1


def func_bc77aea91bee4e39b4790e4ad94cec7c(i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return _part2


def func_3b624d2d97804b938c208c85507a8775(i, _part3, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    return _part2


def func_55aee01d7e514c8abef986fb984c0c25(i, _part3, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    return _part1


def func_0e51382f71e54ed89a6176388c604f26(i, _part3, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    return ans


def func_7c45cec4f27a4e05854948426d181590(i, _part3, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return _part1


def func_c445318e779840b3b8954ff6ebca2a00(i, _part3, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return _part2


def func_05d9d3d6b3104e24ac1e689da10ea838(i, _part3, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return ans


def func_26316f33a4fe4f47a17b8e90d1070637(i, _part3, part1, _sum, part3, items
    ):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return ans


def func_95131ca5e54240388e2d9fd6eff63a5a(i, _part3, part1, _sum, part3, items
    ):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part1


def func_2d0e5e290b584abea89f22b3a29951d1(i, _part3, part1, _sum, part3, items
    ):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_452440e53085449185ae74d9bf66f588(i, _part3, part1, _sum, _part1,
    part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return ans


def func_33d78dc31bac44658a8fca0671a6ffd0(i, _part3, part1, _sum, _part1,
    part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return _part2


def func_41890db43b9b499d9cf6ac6040be5563(j, i, part1, _sum, _part1, part3,
    items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    return ans


def func_dd1e514a02fd4674b9b1152c7f61544c(j, i, part1, _sum, _part1, part3,
    items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    return _part3


def func_b69df06d617a4261a31db9774fd0ed5b(j, i, part1, _sum, _part1, part3,
    items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    return _part2


def func_603053c8d5024ffcaed489fe5b36d4d8(j, i, part1, _sum, _part1, part3,
    items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return ans


def func_7eca175094e740e38ca59ec595d0182d(j, i, part1, _sum, _part1, part3,
    items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part3


def func_3e38b3ef3bee4478a2a5ad0c87e408e7(j, i, part1, _sum, _part1, part3,
    items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part2


def func_fd48270a30784eb2af2e22fd4e77d4a0(j, i, part1, _sum, _part1, part3,
    items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part3


def func_c9aea65400474c49a33386dd7353433b(j, i, part1, _sum, _part1, part3,
    items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return ans


def func_3da04bc983ea496b907c0071b57e3f6d(j, i, part1, _sum, _part1, part3,
    items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_d97ef2502cd842c9bcc2f712912f21e3(j, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part2


def func_3543935dd106478db9a94d21959c7d41(j, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return ans


def func_4aab3c419fc6412a96eebc0776152493(j, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part3


def func_7aa6ff47bdca4ec39486f117ca98140d(j, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part1


def func_5f7ab0ff638249048343ce392daff412(j, _part3, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return _part2


def func_a12f5480be1842f1beb972012def30df(j, _part3, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return ans


def func_6f4bd4e41c92461f8c9614f00ef7051c(j, _part3, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return _part1


def func_1a943ea6c963452d878f767229bc28f7(j, _part3, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part1


def func_4d7314c589bd42b985245f06a610f3be(j, _part3, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part2


def func_59597cc4c9db441ebeb4509eabd3cf16(j, _part3, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return ans


def func_cccfc5313adb4523886197316b82131c(j, ans, _part3, part1, _sum,
    part3, items):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part1


def func_98c0e33fc1fb433fac545031e3b36603(j, ans, _part3, part1, _sum,
    part3, items):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_714a476577b046b985e9593d060a3e1f(j, ans, _part3, part1, _sum,
    _part1, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part2


def func_de8e9016a65a4ca1962537ba12809184(ans, part1, _sum, _part1, part3):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part2


def func_715533395abb4093a7de16b06cd4823e(ans, part1, _sum, _part1, part3):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part3


def func_205deb56c3a546c192b56a82c5409955(ans, i, part1, _part2, _sum,
    _part1, part3):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part3


def func_d42a07d43ebc4cc68ce636a20e3ea805(ans, i, part1, _part2, _sum,
    _part1, part3):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _i


def func_911d467e302d4bab9dc566200fea6e35(j, i, part1, _part1, part3):
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _j


def func_7901ddbc24bf4d949634901f634d7d6e(j, i, part1, _part1, part3):
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part3


def func_06475ef212c2484898dba65d4157dac2(j, i, part1, _part1, part3):
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_c313593a093e40e48dee83b99a88ac3e(j, ans, i, _sum, part3, items):
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part2


def func_1a2ea272ab6141b7ae6e7d89bbf66218(j, ans, i, _sum, part3, items):
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _j


def func_0c6880c19b0b4681a7661a896f82990f(j, ans, i, _sum, part3, items):
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part1


def func_8256f0d6f4ef4914ae40a6f54c1afe0a(j, ans, i, _sum, part3, items):
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _i


def func_c365dfe128824013b540d3ded49175bb(j, ans, i, _sum, part3, items):
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part3


def func_6b3496fe328840c185bed8e6e9181a3f(j, ans, i, _part3, part1, _sum, items
    ):
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part1


def func_a4f4052e0bbf4bb39e982b3b5ce3eb85(j, ans, i, _part3, part1, _sum, items
    ):
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part2


def func_5713a0d699ed4960ac1c8e50ff937477(j, ans, i, _part3, part1, _sum, items
    ):
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _j


def func_ea99fe7c848f42f69d91f72583f9f35c(j, ans, i, _part3, part1, _sum, items
    ):
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _i


def func_d01a0b4f70184cfe9b827f748ea60c07(j, ans, _part3, part1, _sum,
    part3, items):
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _i


def func_c9a5b749b2754f85a6ddb0b27729bc79(j, ans, _part3, part1, _sum,
    part3, items):
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _j


def func_1f18edb5e4a047e1b0033625c01fa61c(j, ans, _part3, part1, _sum,
    part3, items):
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part1


def func_3a80bf94c30b478d97a4d1f0ebeeecca(j, ans, _part3, part1, _sum,
    part3, items):
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part2


def func_0b157e8744e74a36ba795d1ff9a146a1(ans, i, _part3, part1, _sum, _j,
    part3, items):
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part1


def func_43a08857912d4603a35aa5c9941aa116(ans, i, _part3, part1, _sum, _j,
    part3, items):
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _i


def func_0e61570035884aa9ba4b9a712a89bd96(ans, i, _part3, part1, _sum, _j,
    part3, items):
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part2


def func_04fab50579d04582b6e0f9697186f875(j, i, _part3, part1, _j, part3):
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_2555a1fbdbc34089a27234e9af56350b(j, i, _part3, part1, _j, part3):
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part1


def func_f5bc17b552c1434992064b7f93e5c9e9(j, ans, i, _sum, _j, _part1,
    part3, items):
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part3


def func_e1380c0d92b94a948ff6c387e7ef10a7(j, ans, i, _sum, _j, _part1,
    part3, items):
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part2


def func_a078298e4c004700989198f3d51c11db(j, ans, i, _sum, _j, _part1,
    part3, items):
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _i


def func_72640bd128574f7991a07de2eeb10612(part1, _sum, part3):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return ans


def func_4ce719bf55614a75a26f083a7be2df29(part1, _sum, part3):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_f34b9cd0edfd47e398cd1c3bd8e965a4(part1, _sum, part3):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part1


def func_cc4f13ba2b054d06a47a72ac964bcf05(part1, _sum, part3):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part3


def func_d49c0615324a496faba79affed05228f(i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return _part1


def func_bc382d3d2f7c44e4993b6187326fbd43(i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return ans


def func_d47cb3147a794002bba744567ee771fd(i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return _part3


def func_eebc330e6fab4b239bdaf479f5f08f2c(i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return _part2


def func_42d4a963708449b0b1938ea694ea9d8c(i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    return ans


def func_84f261428bf8459bb31a8cb9a4620b27(i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    return _part2


def func_1e2cd7bce0e84e6aa9717de6ddaccf42(i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    return _part1


def func_b3e45e0436dc43c9be457e1e27631c89(i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    return _part3


def func_04985b5346404f67b41b288b24fb138d(i, _part3, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return ans


def func_8c2fe841c99340fb8f867e7e5615bcff(i, _part3, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return _part1


def func_a2b8eb3b667246589baef4fcf2540855(i, _part3, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return _part2


def func_2b906eb16f3349a386ebc0ee19c5cfeb(i, _part3, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_c1996ed79cd9428795952ab2d44ece1e(i, _part3, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return ans


def func_9732902c1c9640e2aa9fb9bba10007fe(i, _part3, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part1


def func_4006760c75a64a0498c8e846e5c85063(i, _part3, part1, _sum, part3, items
    ):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return _part1


def func_63dde6177be04f1f92a892512d447112(i, _part3, part1, _sum, part3, items
    ):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return ans


def func_3f26bc02d8ed43f49722a15552f81d8e(i, _part3, part1, _sum, part3, items
    ):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return _part2


def func_07ddc52d7ef14df895eeff1abb0213c7(j, i, part1, _sum, _part1, part3,
    items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    return _part2


def func_b81c8d23c1ec42bd95d2e7cdac42ed11(j, i, part1, _sum, _part1, part3,
    items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    return ans


def func_fff50dd45d4148149f0592a71b6a36ed(j, i, part1, _sum, _part1, part3,
    items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    return _part3


def func_7a09ad9eebe6458aae82b404146a6d5f(j, i, part1, _sum, _part1, part3,
    items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part2


def func_6405afe840904aa784c577f98b576e63(j, i, part1, _sum, _part1, part3,
    items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part3


def func_8ea7b5820e7a4128a32af2f58efe31e3(j, i, part1, _sum, _part1, part3,
    items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return ans


def func_58687c2f2e7b4b4d88d969e5f2888c49(j, i, part1, _sum, _part1, part3,
    items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_86e5129c2df3467ba754b0b6775a585e(j, i, part1, _sum, _part1, part3,
    items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part3


def func_758e1dc3171d4f8c93dcd97cf9bd70d0(j, i, part1, _sum, _part1, part3,
    items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return ans


def func_82a2685ea8534a7580372cc2bbc22f55(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part2


def func_d7f7af4a32374f1ca77ab2cb6cdfb944(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part1


def func_14317d2a7f24428d8a3ea730140e8c45(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part3


def func_32a38e862ef448178ed40147819b5752(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return ans


def func_0055b3f3b2c34c3ba68fb629b07279b3(j, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return _part1


def func_2763fd1d12b648fcb50c0349c40f0ac5(j, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return ans


def func_18151908da7b49ed99535ed6d362eb19(j, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return _part2


def func_d5c1ca64ef3b4bb2b53d85702940247b(j, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return _part3


def func_0fa533b45468420cb84c7d898e32544a(j, _part3, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part1


def func_05238ca70e1c4c2f8691af14f595d155(j, _part3, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return ans


def func_022249f5f1c848a79adbdf14e29ee86b(j, _part3, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part2


def func_cdaa4e53da48408282b0dc3b14231703(j, _part3, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return ans


def func_71f963ce60804b398d06e577ddd7bb37(j, _part3, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part1


def func_8d1d323b1aea4ae2bfbb177d17c64379(j, _part3, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_d5ef6d0a490d4dcfa179bffbf57f39d2(j, ans, _part3, part1, _sum,
    part3, items):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part2


def func_7cad1f4d49f34ad69cde453189e15473(j, ans, _part3, part1, _sum,
    part3, items):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part1


def func_256e081b74c743a68949a253a548e67e(j, ans, part1, _sum, _part1,
    part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part3


def func_60746d58f0734fdbb15aaba9e126b4e6(j, ans, part1, _sum, _part1,
    part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part2


def func_2840d067e04745e79105612a87734c14(ans, i, part1, _sum, _part1, part3):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _i


def func_ddd45d117cb747598889145d60da7281(ans, i, part1, _sum, _part1, part3):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part2


def func_6c285c379ea549d382896b34976aee14(ans, i, part1, _sum, _part1, part3):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part3


def func_95868f282e6444849cee6c5865f2294c(j, ans, i, part1, _part2, _sum,
    _part1, part3):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part3


def func_180bd25a3e11413786b21b6a9840b8fe(j, ans, i, part1, _part2, _sum,
    _part1, part3):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_a7279448e5f340378c7b9e8208ec44bc(j, ans, i, part1, _part2, _sum,
    _part1, part3):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _j


def func_5a7e982823d14d98800988094d1c117a(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part3


def func_a16f221e74784f8f8b5edf700071be6a(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part1


def func_df1197d3931b4853892e8fa5d700a372(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _i


def func_2add3d325ebc4c889ea96ed53a9c0ddb(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part2


def func_f301440b98974fb6b510f7c342235fc9(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _j


def func_1c2c7b6c4af8495198f42b9050c3af07(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part1


def func_384489b8ffec4267aff8a110669da054(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part2


def func_f5ee3e38d2b047a2908df8438bfbe80c(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _j


def func_727429b03f4542ca9aec12131a01acf3(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part3


def func_7dd5d018e25c4d8b8e06327184624982(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _i


def func_9ac5a71558bf47bba5152cb932f432a9(j, ans, i, _part3, part1, _sum,
    part3, items):
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _i


def func_1b2f992448354a9db60a5cedc8cd3bbf(j, ans, i, _part3, part1, _sum,
    part3, items):
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part2


def func_a4a8b31e2bdd4292bd7bb1eeab742ab3(j, ans, i, _part3, part1, _sum,
    part3, items):
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part1


def func_ed3c09f4acae4b0383d011435a273437(j, ans, i, _part3, part1, _sum,
    part3, items):
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _j


def func_876de2b08a0a461984e8c533dfa67698(j, ans, i, _part3, part1, _sum,
    part3, items):
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part2


def func_63f6e07c43af407ea558f40f09f988cf(j, ans, i, _part3, part1, _sum,
    part3, items):
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _i


def func_2e28167086b6411296616d228f452e00(j, ans, i, _part3, part1, _sum,
    part3, items):
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _j


def func_794bb88af7e0492dbc3cae76eaf3d04b(j, ans, i, _part3, part1, _sum,
    part3, items):
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part1


def func_f84ff6b3387c4c1e8e90aa5708601ef9(j, ans, i, _part3, part1, _sum,
    _j, part3, items):
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part1


def func_a8de2136c5884e5191349366def3360d(j, ans, i, _part3, part1, _sum,
    _j, part3, items):
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part2


def func_d091e3e26d414ce5bd4b2544ec3e35ca(j, ans, i, _part3, part1, _sum,
    _j, part3, items):
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_40d7dbfd644946079247f1d02238c6ea(j, ans, i, part1, _sum, _j, part3,
    items):
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part3


def func_04213d6e097247b48e5172ca3612097b(j, ans, i, part1, _sum, _j, part3,
    items):
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part2


def func_5a55400c1bc249d7bc50de3a4e8504c3(j, ans, i, part1, _sum, _j, part3,
    items):
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _i


def func_7723c9232ab943a990d87d70f17d2524(j, ans, i, part1, _sum, _j, part3,
    items):
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part1


def func_18bdf6c388d5484ea98c99519c297da2(i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return ans


def func_00b563cc3767452a85a84e80b55414ff(i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return _part1


def func_acacc6c4c7f6496c96d9706807dc8929(i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return _part3


def func_c6fe2d8f104d4dbbab36a762f699a940(i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return _part2


def func_1121a3ea8ce142e3a691fdedea843ef6(i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    return _part3


def func_aaece64e91424b9abe9362f45c120007(i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    return ans


def func_b13eaab831a9449fb1454ae0b7b0e57f(i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    return _part1


def func_fe3025be5f1d4fefb6791dd10c8a7c2b(i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    return _part2


def func_8cda1edc5ceb4940ba9be69b0c23289a(i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return _part1


def func_7f7cbca0242a45ae9c542036b0038b03(i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return ans


def func_7054435f099849c1a00df8d6cc3de6dd(i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return _part3


def func_a6420929422b48a1bff625448a628347(i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return _part2


def func_af328ca6bb334dd8b969b0d8397e1021(i, _part3, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part1


def func_cd60309b439e4584ba413e89be66526f(i, _part3, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return ans


def func_79b6db2be8674f389bb05411512adbac(i, _part3, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_fd421352d58a48aaaa478dc3a39ace12(i, _part3, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return _part2


def func_c5540f59e1db46caa775687a61ee9c0d(i, _part3, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return _part1


def func_ca89989ab197485885d76f2518c1fdfe(i, _part3, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return ans


def func_ff1f884605cc4279a200abf5277d0157(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    return ans


def func_6ddc055e96ce4b668f63fb3405682d55(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    return _part2


def func_954117fb9ece42e7aa439e00ef975e3d(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    return _part3


def func_8305523b7e55498cbb8829983ca107af(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    return _part1


def func_0f3a587f383e473491f473be09436db6(j, i, part1, _sum, _part1, part3,
    items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part2


def func_2069a5fbacc2423cabc0ecb06c7e149d(j, i, part1, _sum, _part1, part3,
    items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return ans


def func_e4b43f85614a405caacb20ae00a304e0(j, i, part1, _sum, _part1, part3,
    items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part3


def func_86db61437dde4ed9a2e8b9f095558022(j, i, part1, _sum, _part1, part3,
    items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part3


def func_4ebdb640caa1482581116b8f74fe4a3c(j, i, part1, _sum, _part1, part3,
    items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_2849e62dbb8a4ee8af3dd62d477d03f3(j, i, part1, _sum, _part1, part3,
    items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return ans


def func_0bd7bee91c1d47fdb615e9a25d716bb2(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part2


def func_180fa3041ed04b97ae2c7a12aa7f01b0(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part3


def func_78bdc0ba0ae54c3fa7eec2563be87b18(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part1


def func_6c8208378545441a9ae60fb755b8eb49(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return ans


def func_8cfe71ea848f4754b6df00313241d54d(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return ans


def func_e15e9a35bb1d4e8c8e2096c6974ce129(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return _part2


def func_113ed4cc9e5148649c43b848b1551e38(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return _part3


def func_72261c7e0e79466b936a370cb8640175(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return _part1


def func_7b963cd47af3471f83c908814a2b1262(j, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part3


def func_6f7f915c0dbc43d7b0e8f8acbaaae072(j, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part1


def func_c6dbf9a94a13466c99c93553aaeabc92(j, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part2


def func_b859e71c39604f789f90cdd09dde4f8e(j, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return ans


def func_0eed15d15443447d88fffe71daf6d775(j, _part3, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return ans


def func_6dc8be46c78f455ca9af3652399014da(j, _part3, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part1


def func_d75b92793121491b87441a306c9cbec2(j, _part3, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_87b2c76a1697498190ba8f2638374397(j, _part3, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part1


def func_773b17ea7f7c4e1986533b4f98f4928c(j, _part3, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part2


def func_938b01b1413f4ef8a82f495630dc6cbd(j, _part3, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return ans


def func_227b88ece450456cad6c151b485b44d2(j, ans, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part2


def func_263c959b02ee444c83516a48c78b93f7(j, ans, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part1


def func_5f7fed9d40a4447a9f2e3b88bd1bf9e4(j, ans, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part3


def func_d16478c9fe72445d900ccd6176349e36(j, ans, i, part1, _sum, _part1,
    part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part2


def func_c101971ce1ca488dbef3d421169b7106(j, ans, i, part1, _sum, _part1,
    part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _i


def func_30a3eac2cf634134ab22882d7b2b3557(j, ans, i, part1, _sum, _part1,
    part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part3


def func_43686895d7844abab3679037a285fe78(j, ans, i, part1, _sum, _part1, part3
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _j


def func_ce60729837364c5b84aaab5c47017714(j, ans, i, part1, _sum, _part1, part3
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part2


def func_542d998e27634792b6a31274e4655fd3(j, ans, i, part1, _sum, _part1, part3
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_12d1641d4d564c8ca9a4019b8aebeb76(j, ans, i, part1, _sum, _part1, part3
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part3


def func_f8ef46051ec34e6aa04148fef8c3bdb7(j, ans, i, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part3


def func_ffe267ada8294b1ebf35f46463d28315(j, ans, i, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part1


def func_6fca7e1625464879baa7321b152d2866(j, ans, i, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _j


def func_61eaf3f4d708449db8d88127d858e1c2(j, ans, i, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part2


def func_4fcc4f135d92443baf24b3f4475b9c3f(j, ans, i, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _i


def func_638cd9eae20c4a9ba2302f688c1465ae(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part1


def func_b4f4658bff0d413b93ee2a9634cb9407(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _i


def func_86671ccc2cdb4dbe9a147ea82f29126b(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _j


def func_df545399566d451d8eff7085554c9321(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part3


def func_90d4d1f797f148419ace7a94e6e1d40f(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part2


def func_2a5f754db3c445e4b9a8c5ae9ba770a1(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _i


def func_faf28493b80343f3af634ee4039d1b32(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part2


def func_fe3f940cb14646a49d1e82454cc335af(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part3


def func_0a9c5370bf154cae914ad695b2489dd5(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part1


def func_01899473bbf14e659044a51255bdc7f0(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _j


def func_8450a43857f34af4b9cd1ed1e50ca997(j, ans, i, _part3, part1, _sum,
    part3, items):
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _i


def func_33617a2b602e4f0f8cab45f801d2ac75(j, ans, i, _part3, part1, _sum,
    part3, items):
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _j


def func_409b655ff3844da683af99b749886fcd(j, ans, i, _part3, part1, _sum,
    part3, items):
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part1


def func_5ea748edd1f54ac0ab244bd9129f0073(j, ans, i, _part3, part1, _sum,
    part3, items):
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part2


def func_c93c5e690fd54e3fbb4ba5d707a468a8(j, ans, i, _part3, part1, _sum,
    part3, items):
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part1


def func_596c24911b024bc9893a99a14c6a15f6(j, ans, i, _part3, part1, _sum,
    part3, items):
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_45763d03221745ba9ac1ec48b8862e81(j, ans, i, _part3, part1, _sum,
    part3, items):
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _j


def func_6081b40fc993424b864d16dec758e5ac(j, ans, i, _part3, part1, _sum,
    part3, items):
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part2


def func_820d49f3f7a34d4d838a4606e61c5b75(j, ans, i, part1, _sum, _j, part3,
    items):
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part3


def func_cd720227611143c29db7b35d80866b31(j, ans, i, part1, _sum, _j, part3,
    items):
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part1


def func_213c98518c9a44e7853b9e76d0015f91(j, ans, i, part1, _sum, _j, part3,
    items):
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _i


def func_aa5d8ca1c48e4423a19c549b9a07ecc7(j, ans, i, part1, _sum, _j, part3,
    items):
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part2


def func_6091ab35bbe44246a2acc76f7da78eeb(i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    return ans


def func_0127695c8e0f4945a4371d3f7dc3b11b(i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    return _part3


def func_84b2b2839647409a904c5668bd859ec9(i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    return _part1


def func_1acc009c20b246b8815fbce76a32d3e0(i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    return _part2


def func_6e114403211843a7870a415a677fe322(i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return _part1


def func_ff49d459c9414510bbf20679ebd42104(i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return _part3


def func_3ee2e6464df744c7b6a8a1964e7d9b27(i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return _part2


def func_aa232e4e03464cc59b2c0bd675fbdc24(i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return ans


def func_2756d5ffcdcc458eb42c0189e5cf03e8(i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return ans


def func_894c11988a5a4480b8fe54c407fe3f79(i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part1


def func_dfd55c1992fd469399098fcb3cc61396(i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_ea1d5a025a39456ba8cfe26615ae765c(i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part3


def func_3f18c188e8264c019512031767261dcb(i, _part3, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return _part1


def func_d2eb07712ebf438e9665c95c7240fbb6(i, _part3, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return _part2


def func_a63280d087fd479cb439069b5de3e69c(i, _part3, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return ans


def func_bb024b3d60f2462382efd0f6485cede0(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    return _part1


def func_01b73cffd6e245f3add282a52e4fce56(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    return _part2


def func_f5b41b1d8ff14f05b3cd4d5c3ecb20bc(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    return ans


def func_1cc0c477c6124ef6a5679ae296657511(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    return _part3


def func_4667c25794d24aa39db8f9c341e829b7(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part1


def func_c50b5de82eeb4411823866738948e82f(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part3


def func_2a09137010cd490ab63527759c246920(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part2


def func_7380d68fab0b4eb6adfbcbf08175be03(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return ans


def func_76de161572fb45d995dd33df31e6a1c2(j, i, part1, _sum, _part1, part3,
    items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return ans


def func_f505ae5ba6924050994015522925044c(j, i, part1, _sum, _part1, part3,
    items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part3


def func_f227c02e3e914f4eb63ffa180033473d(j, i, part1, _sum, _part1, part3,
    items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_dbf11295d9554c0e8348933c07a20211(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part2


def func_7ec71fde0dfe4a52a52d881f60ce25ce(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part3


def func_ef74e692bbd147069ee6c38910b6ea64(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return ans


def func_2a3107f6cf6441d39f7e5a8f694fd219(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part1


def func_121fffc42f994ca49f249b09bae4b95b(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return _part1


def func_06b68645e6b545d5ad5a21dc3dcac135(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return _part3


def func_b6ee29ec598643718f6fceee86c35737(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return ans


def func_a2ca1a089be94c4e9c690c54e3b83c32(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return _part2


def func_5cdb27d595eb4b6690887f3056d1880d(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part2


def func_3a8e872186be48bb8a0e23ffb07b0c26(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return ans


def func_26afc228f671455dbd315f9eb4e9192a(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part1


def func_9bf43a26d1304f4fab02c63acd29d07b(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part3


def func_eb71df0965f0458da154db216b4fda2f(j, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part1


def func_fd2e9d38e6a34b859dd5770e14cdfecb(j, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return ans


def func_397387ad5fdc4ce085b36929d523ff37(j, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_1dfba0811b0043cb8685978cd4267a6a(j, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part3


def func_dbbcbeb71fec4620a5ff5cfd6f7239cc(j, _part3, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part2


def func_5be67d8682d74a0288545d4233e32003(j, _part3, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return ans


def func_a4b4b20b92c9433bae43b0f30766a07d(j, _part3, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part1


def func_9c2cba46f38647448088e4989828853c(j, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part2


def func_3faa40ddbcff426ca6aebd689b615fc1(j, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part3


def func_452386c8b2014078b432611ee3834236(j, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part1


def func_197887819edc4c9197fe8f138b03245c(j, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return ans


def func_512466ba82994810b733d7e7587fb89d(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part3


def func_1d3ecbf6223441968698ff7eaaf5d7af(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _i


def func_4db38d321e4b484e89bda4939c268458(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part2


def func_a5bf9d8298b64331a61cb32fcf07a906(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part1


def func_59ea4790740e42bea922616d50dfed7e(j, ans, i, part1, _sum, _part1,
    part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part2


def func_e5d6264eeb5c4cb8b6b16ecef98c60fb(j, ans, i, part1, _sum, _part1,
    part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _j


def func_2260c389017d4a919bd1336140cbe906(j, ans, i, part1, _sum, _part1,
    part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part3


def func_d4628b2dfb7f4ab484b21f2bc4092385(j, ans, i, part1, _sum, _part1,
    part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_e705446c3a6c476d8b7c12ba9ed36c68(j, ans, i, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part1


def func_7607c77db10549ffac485b3f912b2940(j, ans, i, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part2


def func_5a030429042a44259ab9237e3951a36f(j, ans, i, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _j


def func_98f14b9b675d4f9faefca6d7bf064b4e(j, ans, i, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _i


def func_e7d462ccd11d4dfa90b5e8e6f1a2e43b(j, ans, i, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part3


def func_32f7880f6f314fce96ea662222e4803c(j, ans, i, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part3


def func_0f42805a9b3e42c2a722ccede3e532ee(j, ans, i, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part2


def func_5ae811fa1c0945ecabecc00526c97744(j, ans, i, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _i


def func_fbd164fc5e754577b81756165fbf6c41(j, ans, i, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _j


def func_3f4746b2c44f4a4c928f2e86373f9b49(j, ans, i, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part1


def func_9a9315988aed4e4e9bf9d92d8a46f5ec(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part3


def func_9f5945c067264b4496772c47ef48d070(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part1


def func_65f429d2a5de4540a9c2904e63876fc9(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part2


def func_ebfd3e825be949b7ab553f21b14dd190(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _j


def func_0fe648d178334cef8a377fd2c83e5c54(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _i


def func_f1d952c989874fdbbad4e9b99499116f(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _i


def func_a7b84807651d41ae952e675d6f862d66(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part3


def func_958de62fe698431ea57a78edd517e63f(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part2


def func_cdf6bc4c96e7403d8b356c2a331afc97(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part1


def func_4e17f660cf794b47852d59b2d0be8501(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _j


def func_abe62abb874a4995b32205bd848cc63a(j, ans, i, _part3, part1, _sum,
    part3, items):
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_c2e331149a3d446a9c650da792c5f3f5(j, ans, i, _part3, part1, _sum,
    part3, items):
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part2


def func_59700268c3ae44a8beb39c87b8496b14(j, ans, i, _part3, part1, _sum,
    part3, items):
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _j


def func_071a4731088444f0a52ab657ac99c346(j, ans, i, _part3, part1, _sum,
    part3, items):
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part1


def func_fe8f1d7978f94af5a358bba68c95369e(j, ans, i, part1, _sum, part3, items
    ):
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _i


def func_585f28dab23d4d05a1f0152aaccf2341(j, ans, i, part1, _sum, part3, items
    ):
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _j


def func_94b07770633340ed9e6547fab289e0d2(j, ans, i, part1, _sum, part3, items
    ):
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part2


def func_f8f980b1a55d4f798980c119180c8367(j, ans, i, part1, _sum, part3, items
    ):
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part3


def func_a5cf09ebdcff47f8ac7ff8b590e54e8f(j, ans, i, part1, _sum, part3, items
    ):
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part1


def func_cab3cbcdbde1434fbe81d4b727341d95(i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return _part3


def func_f514898d7d8b4a03af77c60c8cab1fc7(i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return _part2


def func_9bfecfdf62c94206ba77c971cb5a4740(i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return ans


def func_e15f6204b6194d23bad560c9597fd98c(i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return _part1


def func_d2da0c12685f43bc967b7c99d1e9e165(i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return ans


def func_e7d2319d686140d5ab0685c853412c5d(i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part1


def func_c9311af082d54f57bccaaac8b58b46cc(i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_d2528a466f634e1286803d89d02bbd22(i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part3


def func_fa2804fcf1bb43ad90867738ec47e3aa(i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return _part3


def func_e9fa3a98309f45b38c3de0711db1ae2c(i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return _part1


def func_f0f4a232b956488693e64e5a564938a7(i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return _part2


def func_eee3b5f5e0b74954ba23df06d0974c2f(i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return ans


def func_ba2e9a257c9048c69b536c9f03bbb63f(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    return ans


def func_13c8165872294a1fb189252d97b8577d(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    return _part1


def func_d8312fdc912c4b93867ae34d6e61eb00(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    return _part3


def func_254b3549ddc945ca9248e51a4c7c275f(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    return _part2


def func_18287205d343400d9665d36a422bbb1e(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part3


def func_8081f9710b4a4925b159b833370841d3(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part1


def func_dce850eec6e04de889eccc50496e0005(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return ans


def func_e9c489e4bc8b46ca8a5541fad617e22f(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part2


def func_2a9f5235fec340a6abc8fab1319e02fc(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return ans


def func_1e24ae3c96b4492ca08f23a16dccb8e3(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part1


def func_6daaf3bea44446118e65304f8cafda46(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_fc48b463443449938adec85c641201c6(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part3


def func_08528eafa1da47b09ff6db68b16c1877(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part1


def func_d099ef1144424482b44a9f6e53619996(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part3


def func_eb318384c44f4c4a8b3fd43be96817c5(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return ans


def func_2e9b1bcf29554739acb9a9bb20221207(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part2


def func_8d42cdaf7aa3466a83f38b5b94dc427e(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return _part3


def func_51cc7a493de54792ab3f3a896e917939(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return _part1


def func_079788ba9cf843089a49754d2db9f792(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return ans


def func_d1644adca01e4e1fb68c75dee65ed245(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return _part2


def func_dae4f3d7e8d943569236e1ed91e3dea2(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part3


def func_aa222a1414134a808e5f49758c9df6ba(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part2


def func_145337d525724a72aadc6052d285f959(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part1


def func_ff629a3aa7924a35a05dd663d2cec4b6(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return ans


def func_795c7d13185e47b0b05f1c90e9b8c82f(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return ans


def func_00fc72a32e8c439782ed1dfd20a4cfa4(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part3


def func_a4bef73bc3674474b7c33564124cc989(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part1


def func_8ba9cf60508f4bb38c962ff38acf9105(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_ae0cd29be566453ba39ae0622b0934dc(j, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part1


def func_79cb525a4b7b4e8a969c6c038a7dd18e(j, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return ans


def func_c4fb81a15d3d47408e68144b564789cd(j, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part3


def func_158a964a34d246ac9913adc47d72c05f(j, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part2


def func_7028f8913f9249f2b03d39c0d520ae37(j, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return ans


def func_d666da5279c54c4cb7ad43c84acf9062(j, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part1


def func_79e282a0241d4a2c84d1163330703130(j, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part3


def func_5a3dc4bb80b04bdeb06e652a35758f27(j, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part2


def func_65d7b6c4bffa46b98e1d5b383e787bff(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part1


def func_1ed6ff5e42134a0d85379f51bfb123d4(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part2


def func_4d4b6703c17e4246a1b947ae2341d499(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part3


def func_7683eb0c896342f8b948d23fbc023dc5(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return ans


def func_39f5b1571abe4fa79e1868f553bc04a6(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _i


def func_0c8242b611ca4bc490b0f985d09e9e6b(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_fdf815fc68c14bbeb1f8d57d986b3a1c(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _j


def func_2bd7026e82684cada82f3a0609a0a3ce(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part3


def func_a9c90c4f42ca48b88cb18164a4f7b378(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part2


def func_8931e0793d1848afb03699e06146a974(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part1


def func_76ff2a0e682b415e86488295aa5a0958(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _i


def func_fb6dc731a2104c0fb212430dd1640383(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _j


def func_a2c9ffb286d44953ba6d3c9ca39b1787(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part2


def func_6f1dcfe46ca24857988de68662e75323(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part1


def func_0a933257277746f488c40ab3806a0800(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part3


def func_58f80657de5e4d3691caea942fbd6629(j, ans, i, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part3


def func_6e5709f10e574fad8f405896cccf15dd(j, ans, i, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _i


def func_089bfcfdd35c4146bae8f66979696eaa(j, ans, i, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part2


def func_a3a1666a44204d4a9e5d4e7e9b782a09(j, ans, i, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _j


def func_0a24f31168fc484ba1cf4105f117112b(j, ans, i, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part1


def func_a123eb81ed9d4b609d771b80ae652b58(j, ans, i, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part2


def func_67c5a41cabff4714bb4c6cc837922dd6(j, ans, i, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _i


def func_8d53204ab95b4066af969a876208a8ca(j, ans, i, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part1


def func_4f96aabbc6c946938180dbe060e0e3bf(j, ans, i, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part3


def func_e8d7895386c44705be9761daee371eec(j, ans, i, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _j


def func_7e9298f9f3e04acba671bd9161a6845e(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part3


def func_bd51c84fb6a04728a2676e822e58cf7b(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _j


def func_9de173e2fb0d48dfa0fa25a761843b6b(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part1


def func_b66e7391e2394f2192fb78344d559e90(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _i


def func_1659e274f61145debb85055b529767d5(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part2


def func_fdfbea9eb98f4e5c8e237d8264bd3a7b(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part1


def func_75c51e58440844fd83ae79055779517f(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _j


def func_2bd306d7b3b54c8ba45693c1cd697e70(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part3


def func_5da8d7c3db664a81a0dd695da4731fd5(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_ab995446b6c9406a93f204a9c81016ab(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part2


def func_cc13a871ac9d41f6a37979cec505a8b8(j, ans, i, part1, _sum, part3, items
    ):
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _j


def func_85d5aacf37c8426fb1d9f57f4aa7bded(j, ans, i, part1, _sum, part3, items
    ):
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part3


def func_8e80bd5d34384260bf0a3fece6d47efb(j, ans, i, part1, _sum, part3, items
    ):
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part2


def func_eff312585386489187cfa12ba9d98e6c(j, ans, i, part1, _sum, part3, items
    ):
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part1


def func_8e5632858ed04a898e39f7e7f3788431(j, ans, i, part1, _sum, part3, items
    ):
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _i


def func_d067b97c3e554420b72f771c2a967941(i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_ccc2ce00a3134c29a17ab377a2864cda(i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part3


def func_e5fc71c1294e43df9d15cfda03ac4b22(i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part1


def func_2f91d15fcebb4ce89be5edebb22d28ac(i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return ans


def func_17dd94cde01243e1bf61e2056e06cd1a(i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return _part2


def func_a79ad0d4e54f4a36968fa167cbafa233(i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return ans


def func_55bc5dad12944144b19b2c240df2e6e1(i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return _part3


def func_86ae1ad25ec7430c8d54203ea9e150cf(i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return _part1


def func_9a23816f809c40609e7346772b9e44db(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    return _part2


def func_2920194f275a4599811ca44b666bf768(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    return _part1


def func_24ace1a2e7054ee99f9e40e5a36ee14c(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    return _part3


def func_2897cab18a0d42a8b26fb942111d424b(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    return ans


def func_b6b26d4fdc59446087deb5d15bcd144c(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part1


def func_48348781b60e41609623fb03a9699126(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return ans


def func_9644d10a2bd3497b80970735927ccd6e(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part2


def func_915a672ec422427fbe65148f0884ccc3(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part3


def func_4e6226605d81415693b3fbd47de780b0(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_b31acca20fe245989e33f2ce377d6e9a(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part3


def func_06af5160a9ad4003a23c52f5c8438fb0(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part1


def func_09542a6e8c12493ea297b9d44a1085b5(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return ans


def func_c15bd3bd4a414dba818f8000a0e0eb2b(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return ans


def func_97e287d1297748d68621ba5ce4381fa0(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part2


def func_a5776f6c4a304de2b0e14c3e7fec06ee(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part3


def func_61af5e1d48b44c1e98a91e04ac94f39a(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part1


def func_e172b40632ca4982b84b6fb99a451244(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return _part3


def func_8507e82f0a8348c29de030284296afd5(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return ans


def func_ddac2e599c264a70ac1e2240eaad72bf(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return _part2


def func_f3d1a18051474e809966c5d34c3c4959(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return _part1


def func_557c32fad7574935a7b2030404c47a37(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return ans


def func_cbb67ed8594248b1b1fa4aeba4f7dbe1(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part2


def func_347a682ac73c4e0188ffd3b5873ca519(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part3


def func_8f28412c716b4b769e318aac239c0b08(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part1


def func_21ff92fbd34e4aba959ab2e36951325c(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_96e7f5fbb24f4c4d9ce6b18d36b2f65a(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part3


def func_57438ca815e5482784580f55c9fbf635(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return ans


def func_276a669c754f431397de89fb409fdfc8(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part1


def func_fb8bbbb520c24ee6b9ab5aa42f321249(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return ans


def func_ed17598d410b4fe39a95055ab067d655(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part3


def func_b8464c982d794451bd8d7d9e305e80ab(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part1


def func_e4b1dc0a256e45f691fee589954c016f(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part2


def func_4fd9f3bdcd6147459ce8a1cbd64a469d(j, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part2


def func_1b1c99e7397a444289cf2d86ae597f39(j, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part1


def func_728529c392d64ab8b093261cd9cd07a5(j, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return ans


def func_06f30b1a0b3f425d9c61426d217dddc6(j, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part3


def func_3620a62330f44649ab0871df672c9bf8(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part1


def func_3ed12fa413fd49cb8cd89290387e1b55(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return ans


def func_97a3cbf1684b4444bd618b43ea62396f(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _i


def func_a6457b6ad08845858222a93eb6ee8714(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part3


def func_6729da1fb99946b890172f7a3750258c(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part2


def func_e037cd7357d849158102afc2af859559(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return ans


def func_69f18230f08248ef801b265d11ac3910(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part3


def func_89030b2a3b984400855e3249814515ae(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part2


def func_6d158b6367df42b3944a537b1fb51e73(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _j


def func_c5d05e8ce56544c3bb22567ee7bf1795(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part1


def func_0a6cff399e734c9bba2a6284f2917d98(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_ce4d546888904c368efcb3a721f8b9a8(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _i


def func_33ef0b9428e34617b02509eda4f1677b(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part3


def func_03904f9bcc1a4a079e997585d463a425(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part2


def func_d24e89aa61b34fd3bf18a36aa4787194(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part1


def func_ca0032bd302c40e0bf3356f4089685ff(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _j


def func_71e95fa677964093b8ac47aecb01a641(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part3


def func_bc11ee44275148efa9aaa484584c379d(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part2


def func_69bcd13898834a20bc9cc5523232820e(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _j


def func_39f6971c498e40f0b6ad5748137b5316(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _i


def func_256fb5e40ce04312ba2bc083e7c69840(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part1


def func_64c11cbf46fb4e7e8812329dc060a7f9(j, ans, i, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part1


def func_4748d332620040b9bbd90672cb089431(j, ans, i, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part3


def func_1e480c0ff5f042f2af8ee146b764e7bd(j, ans, i, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _i


def func_d25aaa3e388a4d1397aa3eafb8a00b1c(j, ans, i, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _j


def func_3025a68596fe449aa6e129b6fb140d4b(j, ans, i, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part2


def func_7ea6a1733e7947a08b8ec959fd2dbb9c(j, ans, i, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _j


def func_f540013ea6c344bab1dd1bc3bc9ccd0c(j, ans, i, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _i


def func_2d33157dd84b467a87684681169c9ed4(j, ans, i, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part3


def func_9a5dd00c7ff14ed69336ef4df06f4b7c(j, ans, i, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part1


def func_8c5033766af74ceeb00c302a97441339(j, ans, i, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part2


def func_ec8de61242d0452f8e02e07cc039d343(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part3


def func_f8cc20ebc83f4323a7f8732f3934ee8b(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part1


def func_645a74d308974e2bbab32fc0ba55de10(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_b474a2e2e4ca4eb284c02553d7e59c75(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _j


def func_ed89f182f9254f6387b98cd38d885228(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part2


def func_9433c9377faf4b7db7aef37f45b4bae0(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part2


def func_6f92c5a74fa241c1b8e32c3e0e1c3579(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _j


def func_22374f1c16924425b222a35fa477d467(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part1


def func_4a4c8329d7e1404d89d9d008d631047c(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part3


def func_fdf795048c584748acc58dcfceb412ff(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _i


def func_a193ba113b0d43bb87d41759c89e2744(i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return _part2


def func_f04c19a0839d4c3b9ef8ea6f0c649c9d(i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return ans


def func_272bfbadfc01464f9f4b8b8bcb9c35a0(i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return _part3


def func_aabfd4a155b24889a6c0659dd4df957e(i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return _part1


def func_a07b5b7d400f44f99e2e9cb2d9e85158(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    return _part1


def func_ba3ca42eb63e4a5e807256679ec66761(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    return _part3


def func_1600d1f0ef594fd498e31c225eb51492(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    return _part2


def func_a1069c49ba8a4991872c7beadd586800(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    return ans


def func_9b822080ae5e401f9e1cb1d98d1b902d(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part1


def func_3bfb0d931db84bc59a88fb32c3e24bcf(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return ans


def func_4c6b0b9dcf424b4aab9813813ce60826(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part3


def func_9a8cfc40d21d4b5093164bff2b05dabc(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part2


def func_1b0754563c444a9f8cf92a9112ac028d(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return ans


def func_05951de560c543d586cf7a185988dec5(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_976671205d5a46c7bca2fd1ecf54f02c(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part3


def func_a12ceacc87884a54b5daaef1ade63d07(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part1


def func_5c84a1b405764862a1ab9b7d615cae81(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part1


def func_8d04254e23af459a9b785abded14d699(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return ans


def func_8e2f365ee8d34499b3b0eada9735611d(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part2


def func_39f02fc61474419487ad9ece468036b3(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part3


def func_91697732523d44119bfaeaf52c373ac0(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return _part3


def func_eeb4d34824d142b4b7b6e128e2129be3(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return ans


def func_01ae95fb51194120bd0c53f4f26279fe(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return _part1


def func_62cdca1cddd04e95b8709817dc18cb9e(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return _part2


def func_008813f21e0d4dfd992162545301b70c(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part3


def func_db9a37cf0b7e48a79b5ab28c70ac9dbc(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part1


def func_f60b49449e3748898aa6f24e1d8ae516(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return ans


def func_f93962f6038d4c79b3904b5fb20cee6d(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part2


def func_722a302369f548f88c18b54efa38f4a6(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_9028c14aa275460c91d7091c3e3b9435(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part1


def func_043ce21a1c4348f9ace6efb13ec2936f(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part3


def func_2c57fb995b3e4a43b8cdaa62764a9043(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return ans


def func_ec957bff1f7c443c9a08c304d9914ded(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return ans


def func_a1db4a716de2418483f0c31d48622ff4(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part1


def func_9a30161c02ad4bf2bc0ac00890720ffd(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part2


def func_f007fd1832004e29bfe8b36a7db194c5(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part3


def func_bba19e071d774cd9abf2f06eb7160969(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return ans


def func_0472452c32144d9284c401578da40bed(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part1


def func_a080aed0632046dbb152617d7e92cc6b(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part3


def func_b04efb20909244fe95f527744382d367(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part2


def func_97485a6bc4c540b2a407a60697f68e6c(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part1


def func_f88dc4be89c440c6b4d107d6e13839b6(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return ans


def func_9e7abd4cc5a0471ca0418d6e53539169(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part3


def func_09b1715341a74a3c91d45b423967d086(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part2


def func_c777d83c3141412ba158a1a7107812c9(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _i


def func_b58cfc9a640b4c67bb08ca6345a8dc68(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_3bd4af0cf8fd4ef0aa3dc08e1f2fd223(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part2


def func_e87236d41bbd4658a5bac8f07d1731ec(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _j


def func_0081fd37041842e7b5056796217ede04(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part3


def func_a064cb673fbe4ab58208177f14bed515(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part1


def func_127cf27faae949b6945f8b048dc09ced(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return ans


def func_c2d5faa977bb4e3fbe66de2ff25b740d(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part3


def func_1478d3414e894cd4add97a33c1ffebdf(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part2


def func_603da5a0b26b4c5aa497a38ac9dd4f52(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return ans


def func_9bfe1efabb9d4779af33457548198107(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part1


def func_ac20ae305b4b495fad8c2602ceb73ba5(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _i


def func_3b71338c0f674377a9dfd9c3547116b5(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _j


def func_2dfcd99b70d548ae90259d3d90e354d3(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part1


def func_5017df79acf446f39a39a9d7a835f0e7(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part3


def func_b12c2226acc74777a6ba1067c662e6dd(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part2


def func_54444e52924549fcbb3a0f8a24a2ab6e(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _i


def func_6e06dadc50114b8daf11a54d66a06ae9(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _j


def func_ed7cf048f6a34963bef847ef45a9007d(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part1


def func_ec163074e8314828b2538d20459d78c2(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part2


def func_da2c6798f4f2423682e012e46a4d0662(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part3


def func_1f3531f1dc59484687e47abfd2d85504(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _i


def func_8778a57b059246a49457dd730ecc2f59(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _j


def func_0893e95858ff4bc0a11d84fb672c5802(j, ans, i, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part2


def func_a03ceb7d257b4c0d88a0c6f220b73b53(j, ans, i, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part1


def func_1fd3d49c10dc44debfe1309a80871342(j, ans, i, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _j


def func_b608b0faf1ac4b9fb002a627fcb26afe(j, ans, i, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part3


def func_4855a797111b471797b88f51a6ecb1e3(j, ans, i, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _i


def func_eaf47fb35627492597766df9f766d188(j, ans, i, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part1


def func_05591f43995b4108a9e76d76308419f7(j, ans, i, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part2


def func_91f63a2014ca4d558903634fd063d119(j, ans, i, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _j


def func_1077689277554010ad82c4784d63843e(j, ans, i, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_50a3d5c06fb6457ca2c017e2fb2d114c(j, ans, i, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part3


def func_893911800eaf47be8afd4e97fa5bcaa9(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part2


def func_1c132cae2605431bb48d236605af7ff4(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _j


def func_22c8bb1b41b041cfa4395b6cc37befe6(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _i


def func_9ec58a19242f49d799fd9304ad603c80(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part1


def func_95d6b823d31541979eff4ef8baab5d2b(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part3


def func_3dcc4cdbb11e4c1ab94b5ee155ad1dae(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    return _part3


def func_b92784fe906e412c88adcc944ad00be6(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    return _part2


def func_417fa557a0fd4656892e2c811679b1e2(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    return ans


def func_c2ab0658cdc94733b8f66fce817274d6(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    return _part1


def func_06b18cfdaab84b63b0ea26c85663c8c2(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part2


def func_1d53394fa9fd4d7caa9415d8208c9f70(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part3


def func_376afcf7f3cb4c228d96bff7fb2c2dcf(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part1


def func_2f194a98e66e4ff586ea454914163511(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return ans


def func_4ebad4b304bc4090a2d1d9eb728098ab(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_b3756c990dcc499f8802bbe087e38f38(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part3


def func_1b66b4e3e208424ab3f71f70fbf2ac32(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return ans


def func_32096b8ebdca4822b62227542a70f7ec(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part1


def func_4d4f78333a6741eea4b0131790e296ea(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part1


def func_86f4a5ff32b443d79677a57507ef69f5(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part3


def func_3e20897e01d64cb1b36363c27880ed02(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part2


def func_8449d50e324943d0aacec06defddbb25(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return ans


def func_3c42e02e8cef4b93a632772e95d1aedf(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return _part2


def func_c6a8a66de6904587bd3929558f3b0a37(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return _part3


def func_f13f6209994543cfa95475b0fe987c5c(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return ans


def func_b810759034b443318fd24a5c78246c55(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return _part1


def func_4569dc9833f5437b8425e1c47c3a0915(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part2


def func_b954c1e9376a4abc9a3eacae8de119f5(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return ans


def func_972387425c0b40fd8bd23c6909796f23(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part1


def func_7907d17a88304c11b24a45fbe8c377e4(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part3


def func_46de0c9316104a558ce41dbe2521a5e5(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return ans


def func_cb26c7dbe32e45e9a24761634144c4d4(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_36defa2f2b6443c691bdf84bd04825ec(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part3


def func_250e1a0e5760473ba8a567b20ee20f5a(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part1


def func_09aacc0d878e4a75bd089a7081dc3830(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return ans


def func_a1ffc97e3ea044c4be76234dc9b001f3(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part2


def func_e37a9769084e49919fa39e1eae5a3959(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part1


def func_f7810ad9ef724558931c259f288256b0(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part3


def func_7a8fdfaa994b46b3a2776e83eacee526(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part1


def func_1fbc7629f67543d7b47c33c1ef96fd3d(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return ans


def func_6faa6d4044a9437cbf9f7cca42ed1bcc(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part3


def func_b8d97ea0b4f54828885eda59615d495c(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part2


def func_246bffb3c1af44b6aa5864611f2b9f78(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part2


def func_acaca57ed745475f9792c948f0a68757(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _i


def func_d1b1e63d9265499bbd78035fe45a2870(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return ans


def func_b784a27b55be44a5a4b4c4d33e27b44d(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part1


def func_da802b15381440f8abddbee9cc94ef48(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part3


def func_2c24e78aaf16474fbe4abf110350ed5f(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part1


def func_4a95bf496edf4434a92236ebb587ed12(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part3


def func_ff14b60bf15e4241ae3b99aa25a1789b(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part2


def func_1d79936a41914ad3be74d12bdcb4701a(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _j


def func_abe9fddee8924187b3f8a12e78a3802d(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_a0f901cf7eb84f4daab3acadce8d86e4(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return ans


def func_664c8069182045ddbf16c7c48df02ea9(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return ans


def func_277cc1395acc4ca6bc9f0e0f9505cece(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _i


def func_db8d23d5fb2a46e296c1336809348a44(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _j


def func_d4311b51f75a45359dbbae6b22f13ccc(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part1


def func_02bf9e75e3e44e3786a293d170967c58(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part2


def func_be4dec3e80f7458387f6992f8ff936c4(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part3


def func_a950463f6cff4556bcc6b90821a5118e(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part2


def func_968e60ee3d11464a9bcb06fda6e99b3d(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return ans


def func_7dfcf072458b44459605dc549b2d39f3(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part3


def func_1722279a1e144000b64e42f42121d4d8(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _j


def func_608414c1e17c4acc8ebf43e1dc564418(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part1


def func_ad9796284be843d0ac818839e74d1923(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _i


def func_43069bcee66d4faf9db20160ead1b895(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _j


def func_fb1c0e6812504885b412009bd983ed95(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part1


def func_7bc8cc0bbddd4630b9da34102de481c5(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _i


def func_7c35bae42440435b9bfb266969c324f6(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part3


def func_eaf670d603454856b31de8dd75139690(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part2


def func_51ddeeefd38c475ca2b3ce2fd8784e27(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _j


def func_966a0056622545a5872a13ed2bad9d2f(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part1


def func_ef99342f8dcd4a238add80e14ea4ca57(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _i


def func_341e5c5e70d444bd913936b704027d19(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part3


def func_ce1af116aed24c0fa2a4adf959c04b05(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part2


def func_02ad0e4ddcf04a08886476e4db6bf138(j, ans, i, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part3


def func_b249e4e99c244434a223970d932e6626(j, ans, i, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part1


def func_553b6c266c2043da89c58519d3da2e35(j, ans, i, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part2


def func_1070459599ac4f0b8693f28d75274df4(j, ans, i, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_263b7a60395447ae8a8e58619818add7(j, ans, i, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _j


def func_0cb6a639df8e488a83bb5bdc6c591c64(j, ans, i, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _j


def func_f25120da449f4c57a47ac4abbd476099(j, ans, i, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part1


def func_59fec7b3c4644ad6b7b80c700f06eb49(j, ans, i, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part3


def func_004c296f81904560a883632917a3d227(j, ans, i, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _i


def func_916c8e3bf3094ef9b6e51ff2b95b7824(j, ans, i, part1, _sum, part3, items
    ):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part2


def func_e413caea753b41d6b207f37c97f54e1b(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part1


def func_4af194cd4d3749ca883a330e6c0e3dbe(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part2


def func_03f084d6c2374ab4ae2048a4612da1d7(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return ans


def func_5f2250ac7d694ea0a698dc5aae47fd09(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part3


def func_9520226850544a71935e8532939fb862(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return ans


def func_84983b12144f48a89393f24a6024db34(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part3


def func_164a31652d774207a984e1d4208b6789(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_94bf160dc8254c428058f3238e8249ef(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part1


def func_10a10c35a52b4bb6b1e605a0365fc47c(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part2


def func_ff50834a484040b3a79d60028bbdcd07(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part1


def func_39a5406c4b3044c0b6fda38da89ea4cb(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return ans


def func_dfaf2ebcf7e3442fa8f6b060e85ddb91(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part3


def func_e0fa4bc80abd41d88a81816226ce2877(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return ans


def func_b673f4d8328242018e56f344c010b06d(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return _part1


def func_25299b30244444d7a1e50ee4fc717d9e(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return _part3


def func_5a90455f04044e41809799c83606d86b(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return _part2


def func_60290b27d31f43f7ae8b39b597fc1901(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part2


def func_8e23d4b4d8a748beb2aceb095df63fc5(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part1


def func_e41052a11e234962adb4250108eb0045(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return ans


def func_2aeb26efc5a54d728234d96bdf143454(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part3


def func_9083b0b03c1b49bda932ab668d0dcd42(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_b4c961f885e6407fb21c005924c4e0d9(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part1


def func_b296f9d917c4414fb7b654047a85a758(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part3


def func_14545e9b0dbb4abab2499c805541d408(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return ans


def func_2e89644fe5ec4aea9eae53a38eb6c7f6(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part1


def func_3f89bddb1c024722afebf70847be660d(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part2


def func_21e5e0b4c8c34a57994f35f5a98f3bd5(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part3


def func_2ffbbd1984c3400bb5f538d92c410c20(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return ans


def func_1f9bae88c8c548e3b8fbb3ebb3a76fb8(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part2


def func_e817555e5e20406d80f764f4b7cde16d(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return ans


def func_5063e67117bc4fb98beb1806d486fbbc(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part1


def func_bb57bd10f5114658a1a6606815448aba(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part3


def func_6b4d23fc19a2464ca0d0a6c8c5589cf4(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part3


def func_e5a0ce9a63504488ac6c2f0de4145b78(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part2


def func_d42b666b9fda40b382960975924567e2(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _i


def func_59313e0abc0b42a2b1be70f163d30dad(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return ans


def func_5267d21c827446cd98d55c551a465400(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part1


def func_c96f756131724b40bb20bf7533258314(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_e262e3ac1bd64a5996bd8349034e5868(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part1


def func_573da356fd1a43f0a4d1b6defa7090cc(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part3


def func_3f358b479a5943a2a88874394d71559a(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _j


def func_e45237fecb51469d8ce12b685f50d69b(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return ans


def func_a81091ad78d04b698ef311a23546f80b(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part2


def func_4c7ca3bd6dc84d58b09d2a5f4bf20cf0(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _i


def func_23ce869cf5dd40eb965e8a2b93d03723(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _j


def func_b4a27b4620ba4948974136d0582dfbd6(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part1


def func_ae4bb5e098ef48b4b518fc301dcb784a(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part3


def func_5514bebc455c4777a4f6e9e858e3893d(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return ans


def func_22f6caeb3c0b4edcb5b97e70a6ec8840(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part2


def func_1d1da725b8ab47cbaa04f24ff758e30a(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part2


def func_1faf3d31b583482aa4985d7f38256195(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return ans


def func_02c2860b1ff14a47b5ab5acce9925966(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _j


def func_7867dd291e1f4f19949513d82170e842(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part3


def func_1c966d0f340945358b1f19f2b1c61d9c(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part1


def func_a45ac1744c99495aa8097f0e78b826c7(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _i


def func_64e35e918baf4c65b09cf3fa14c1de99(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part1


def func_31c85b2906c3417fab428e4351955441(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part2


def func_862e5b3dd9944bdf841c228ec10f91f4(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _i


def func_d2febe735d794525aaa53c13fd6cb1ce(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return ans


def func_fa9b35e9b2e547f2bdd55dc767d23eb1(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _j


def func_b69bc251e2cd499a9369592e4118c47c(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part3


def func_88e18a73eadc471ba0c6f94a46abc69c(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _i


def func_ac9db45cae1948b8b728e2e20bfbe120(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _j


def func_150d1a48722a43328aaefe1bba663907(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part3


def func_9d74b0a8339e4154af6d08e293d1283d(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part1


def func_cc1a407ab63649ca8f85b9fe37a48722(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part2


def func_1ff6f2fe4e864417b5915af3e27e7626(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part3


def func_6574165e80fd486fa152381de7f506da(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_6f618dbb169a456098391cfdae6ba9b9(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part2


def func_ad192b74c6a8449bbcfa63edd55b793f(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _j


def func_b465080fd3ce44578bb40d378fade331(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part1


def func_a8aa38fda2594bf18a615f22aa6fb83b(j, ans, i, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part2


def func_af3c856e17b94cbdada91294ff8a4d77(j, ans, i, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _i


def func_7e2b8c885a4e4c7d92f0aa3e2157b381(j, ans, i, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part3


def func_82c01bebcf04413db860d6a9a4eae4c3(j, ans, i, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _j


def func_3153159c41864bc4a9fb7a4506e1d558(j, ans, i, part1, _sum, part3, items
    ):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part1


def func_ed3f0f14247f4f7fb38d4b5b2c15a692(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part3


def func_3faa6a4f741d419f9e30ee0659a505c6(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_3d47389cbaa8401e8292c699c39d9ea7(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part1


def func_f9e7aa9c08c1417caf629da06cc7bb36(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return ans


def func_73e60919137944f1a250f3fed6ef735f(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part1


def func_c33cfdb150d24e91835a2de391e01287(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part3


def func_a6db276931964ae4af59d73d04540665(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return ans


def func_86b657e75fbd4ea5bc0156527981f605(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part2


def func_022cc2417c01487cb84a1c8eb7949173(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return _part3


def func_850cd52f86404c05bd96a0110bd62883(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return _part2


def func_e0bf161c9f7842bf8f2dd23cb65bcc8e(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return ans


def func_45f9f698fb1a4198b1aa9d62f0298a93(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return _part1


def func_0a24daddfefc4bee81d043b6b44214da(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return ans


def func_a3f0b04d3e044afebf1121338a1fd91e(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part3


def func_903c8e66a23a44f1ae6366666ce70fd8(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part2


def func_206107b2efca4f5eba480b50d301f476(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part1


def func_cf26f6a95a2c4a73bf8cdb4b3617f110(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part1


def func_e1b04c1dc6f443c4aef194bbdcf03461(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return ans


def func_2a7ee50ef80d49e0ae951390ac11215b(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_d701d6bb746d49bea6b5312ec4143b9d(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part3


def func_232c92892cc84576aa18f182da03c419(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part1


def func_970a1600c3424845b77a99353f6ae601(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return ans


def func_1035cf95f64a4f87b1a689eac8c38e1e(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part2


def func_d72049d8cc394f0eb22427d057eb6e04(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part3


def func_7a766dd87aa14fc3afb740c953c0578b(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return ans


def func_496c13b912dc4b10a5708c30e4e46309(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part3


def func_adce3ae5133042219d66321b8b9304dd(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part1


def func_c4e1678299924a709f0a02d248e7056a(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part2


def func_4845b574d21c419fa46c6ec88686173f(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return ans


def func_b8c687e15d12456e8f0009f4e4215d8a(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part3


def func_0a1753b354a141cf9afb2e6b7d30e874(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part2


def func_742baf04412f49dcb28c8aad86167566(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _i


def func_80d136530a664e78b3f3de59a8e34c83(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part1


def func_d239cb96a92147ea82725a1ad87739a3(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part2


def func_96ff201eaaf940658d7ce060a5566706(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_e564587f96314e648d440f838e86d316(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part1


def func_785111c8cf3a4559b8521616c625ee3b(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part3


def func_4e77af5cc0254a84a14b082e4a0974af(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return ans


def func_6e30cbb3345a402987881abcce1ffa89(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _j


def func_c2fe25972a2d48bf9419ba0b9c9b0a5a(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part2


def func_4da1763ad0ed469e895b68cdda0113af(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return ans


def func_04c2be2c164f445e9f80154227427656(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _i


def func_fdddcc21e631463889ecd0508b274cd3(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _j


def func_c28122bd20714fd58d1908513ee66464(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part3


def func_ec6825f1e1a041059d8e4dbbe08610ba(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part1


def func_032eb62b9a7b438f90020553faca297e(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _j


def func_6be75174acb241e2bfd3cdc12c987d58(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return ans


def func_64183377d2f64214af23e7f0df69b126(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _i


def func_7f1c3bd24a3f4fb082b807ffbbe39072(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part3


def func_e4a56f031911479d909146011a1cf69b(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part1


def func_473eac60132e4093a66ea300ac428ed8(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part2


def func_f01ce0a2c2f74a53a8c959b0ca01b21d(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part1


def func_f6c280392f22457f8278be9b35a01757(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return ans


def func_00629ac106eb4006a87d24a3e6644f1a(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part2


def func_3751b78851074809aed0493ec58516cf(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _j


def func_1f689dfa01504c77b961ae474a855687(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part3


def func_1a5ce2e6c79c4356820d7c1b08499313(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _i


def func_e530919efedd4c858a2a66cb01c97fc4(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part1


def func_b966c098c47147c49227792ff77e72d2(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part2


def func_7b423a71639b41dfb0fc413322955742(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part3


def func_0e3f2fec6b484fcd9a85cc021e50e675(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return ans


def func_f405a210c0cb40d3989ea6e464465644(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _j


def func_e3befc097a254c8296e909f61def1a91(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _i


def func_7d2fad46fc174039b36e89d350c37856(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part2


def func_c0fb0f5035dd4cd9a282fffc26a95112(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _j


def func_f3b8c14299524d37a5ff3c6497df0aae(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_4018d86ad71b480e8a0724d6fa7eeb3e(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part3


def func_4898f8b32ca0437497fd063307b8e5a5(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part1


def func_e54e6d3df0f1433b8d20c61e06e0ee4e(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _i


def func_049177c833a741e3b0a1767b945a7d91(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part2


def func_a6cfcf6b2a85484d8d77d772ee9bc2d2(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part3


def func_31004f86b8d04da58635ff8e25a19ef2(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part1


def func_37ce654cdbd84c6299df92ab759ad658(j, ans, i, part1, _sum, part3, items
    ):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _j


def func_38e847794e954a0cb61436fcbbdf318a(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part2


def func_1260f92e0fe04826bcca2ee8bd6532af(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return ans


def func_4668c1e0a58d4d8da1021887c22427b6(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part3


def func_388bd58622ad4eeaaa0103569910513b(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part1


def func_801a5167a0ba489290a39c43b3d2bffa(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return _part3


def func_0ce4c2b3b0b54d359f3a1a824fe9528e(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return _part2


def func_52a7bcb66a964c0184731c7ad1d96c45(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return ans


def func_7f1c6d5555a54e4ebe769d7d4c861cf9(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return _part1


def func_ea84a30e0abc4507be48138e374c1bad(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part2


def func_768301b0e4b8461eb57292c218f06feb(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part1


def func_febec774a7fe4a45adbe3c2b9ebf7711(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return ans


def func_b6e2ee3fb93544d8a319b1741cb09276(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part3


def func_3ff0090d2ae44f948e3a2e5e037bfc4e(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_b182655eb50a4c349938a4bea6fe0ec1(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part3


def func_8f9dfd4d407c447ca3dd12f2d6e59170(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part1


def func_4c8840e1356f450db175408816c2d2e7(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return ans


def func_ae8e92487f364d1196fd9342db940981(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part1


def func_927631746b9841219160e517001fd35b(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part3


def func_a05c9ebb88e74de682d0d0f12bedc076(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return ans


def func_d57b9cef559d479a8bb602d6041fea53(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part2


def func_dfea34bff0be45e591e7bc2668cd888e(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return ans


def func_1c28ce8489c9424aaa74766f32ec03f1(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part2


def func_5d200e9d8ab84e8291a8b470515a71ad(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part3


def func_01f0147b667a45fbae4abd806e8fbe2f(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part1


def func_0af817f944334148af12d9169b1e32fd(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part1


def func_181909a9504b43ff89b9ff8d2932675b(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part2


def func_0abfa361e9c24b488b1a8d19e334829b(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _i


def func_5f50bc3878f64b78bc5086e6db6aaea3(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return ans


def func_f5eef7f8afe748689994248adf1c5fbe(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part3


def func_3be6bd4cdf3146cdb888323eb3a4c0b3(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return ans


def func_dbd38ff344254bdab831d9de2656ac4a(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_cf80d57165944cfea16b752b53b43307(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _j


def func_993a604166ce4856ab75c89e29200fa8(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part1


def func_214177e2f90d470faf65ba9289429863(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part3


def func_5257c90b95a9417cac2979646956014b(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part2


def func_c93c7cb45e9b44959d71e530c583a5bc(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _i


def func_25445097d8974732817ae31facdd4fc5(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part3


def func_b16b12e3b2ba479698dbfe5e5b8e55e2(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _j


def func_01cb02c6b6874655a95f387d3e3cc954(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return ans


def func_f85467a00d3d4f12a7ff60b458828ae9(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part1


def func_df15dbe92df04bde82cfe292fb612562(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part2


def func_40bcdd8984c1499c818941ce27a3384a(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part3


def func_6b70003f74db4f5b9103e0b7a7c4f9c2(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _j


def func_d4141a479eaa41b891c22de44dc2bf83(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _i


def func_8a0df122932642df871251f743d7155f(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part2


def func_e84732d8e8aa4259a3c686ed7e64c409(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return ans


def func_9bf034828c234b08ae66a034c61e2c30(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part1


def func_3aa925ba275c45089784670104cfc3d5(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part1


def func_744b3ffcde4d477883c8469378c5c00c(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part3


def func_d39e2e1988e04717b2f1e0c9e1aba589(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _i


def func_04804ec19295453ba9d503ffbf4ec42d(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part2


def func_22788d1db91549cf91048ddf8aec01b4(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _j


def func_d18332fb342b4de293d67141ef21c8cd(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return ans


def func_4c3114683bde449a817c4015d84479ba(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _i


def func_38bd5c265db34cd9938af555fa64cdac(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return ans


def func_7aceda6f570a4de286e3a0c84348af93(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part1


def func_8e16af867c7349eeb79d59d474a99cee(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _j


def func_73c730f958c54d8daa52168dbd3b7c6e(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part2


def func_699283d9b0374b2ba0d5a28ecb8ef9d5(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part3


def func_10e00b16145b4fcdac4cc221b49d169c(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return ans


def func_aad87e099e9647d7a00acc393f5cc602(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part1


def func_4db2effd3da14266aea0c282c842d909(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part2


def func_b4b67ae342da4878827ff932485577b4(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_ec5034e07c074f4eb3e23f6b086217d6(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _j


def func_2ca9b15dec874d9d9c07e80db3caaa9f(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part3


def func_bef271be5a0d47c0bbcd04e0f3a2385d(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part3


def func_c34e6d9c3c0f43f29a04d1ad8d4f1f2a(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _j


def func_d35ec5a53a66445785abbbda653255a0(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _i


def func_e9b97c6ac1654ff89c853d4a928ecc8a(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part1


def func_af2401cc1eb04187af0b7cb0d7e5b127(j, ans, i, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part2


def func_1c14fa72fadc415d831e80e818571e4e(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return ans


def func_1d58feb5fc5b41c0b3eba476d9781c97(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return _part3


def func_b3849fa5831a490db939287100d1f11d(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return _part2


def func_3ca4447d13c14d1d80a6ce6cc5599478(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return _part1


def func_3878823287394fd7b0d2156419eec39b(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part3


def func_6041185edea8445483db1c37a4c8218e(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part1


def func_4e6b3c49538a430b8e843bbbf49950bd(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part2


def func_d4ae4ade4d7142a88566fa59f6300c2e(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return ans


def func_fbb4981051e14e049dd082f814608941(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return ans


def func_2e743757440b48efbadf1630a080891f(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part1


def func_dd66b7f0015347d2804e9646afb47f67(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_97edbf02e82748b4b12cc44b9a1fca2b(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part3


def func_2e23bedfa2824823802e422d5a81c576(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part1


def func_c09eecb7025a4743a852134043c79495(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part2


def func_357870e9aed84910ab66327917b9e51c(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return ans


def func_da990ca9a5314a428d7eebab20773e26(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part3


def func_02cd60c8baa948acbe459f968645ca26(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part3


def func_c1c289f7778049639b4a77376b6d8910(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part2


def func_f3b7c8c86a6a457383244229ad8f533e(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return ans


def func_7b8db085728844b295c9151a1517e837(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part1


def func_acd50a9633334a9c93029ebde32feeaf(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part1


def func_fd9852a0387343be9ba10f04200e8fa2(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _i


def func_417f25e7c1374cba82b650d4925d303f(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part2


def func_f24556e2638648cc881d8210416ae817(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part3


def func_d2200e4707a94f559c644381156802a1(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return ans


def func_d1de05b1378848e2a6d179d253e12bf7(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part2


def func_4bcfa8085de94d89a720ddc2f7c42bfd(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _j


def func_182c58e754d244e9894caf70018bdf52(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part3


def func_227328b1b8a743b08764362fbd4f94a4(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_317f9cda819f4507a49c6c909d8d878b(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part1


def func_856564f159b54e12a97194dbd8718c90(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return ans


def func_a5c53ed6a397445ea546d9e2ab883d07(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part3


def func_79d20c3338e245efa4ac1dde76f31679(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return ans


def func_63ea7810a25f4fc280dc2e4bcd1076df(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _j


def func_4e5fb0c0680045b4bc86b4fb47b4d566(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part2


def func_c61d71b62db94acf8a21e2c2e071723b(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _i


def func_631c0f6d7e52474288a85ab0c54f0749(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part1


def func_2b91f450b4134bb48db5c860071cb576(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part1


def func_1cdfa89914c249c19aa4829df72f63b4(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return ans


def func_0d61706ed3154a2ba2ba33a60899a1ef(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part3


def func_a99b751af5ab41bd9c5d113da62605c6(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part2


def func_ccb2018db56743d5993ac63a2a381b76(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _j


def func_4df13227e29c4a558f68e4f808bd7ec2(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _i


def func_94b17039cbc84b7aae05fa15543108a2(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part1


def func_2787b3eac13b41b2a18dbf9705d31159(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _j


def func_7af37734a349487b8f8374df8e067763(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part3


def func_83d867fa54ea4880a936e95c86caf8a8(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part2


def func_7ab4974c968644d2997284feb501b1ea(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _i


def func_0c7792666c2d4d4f94df1ae6d31c184d(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return ans


def func_8b2376d1c0d84c2ea3bee00496d7d1fb(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part1


def func_fb96d1181ef14b2283111d72b8a07eee(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _i


def func_22aedc7d6f8c4dccb4740ad0648ad07a(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return ans


def func_9e9a08a74ee84a36a637c3ca3b12b98c(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _j


def func_c80323582c3441bf804ddff732cdab56(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part3


def func_d2dd9262b1724a65bd880dbe154080bc(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part2


def func_55275c4762cd4ef8be181c497a7cbaf8(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part1


def func_7e11d92e5c8b4a9185a5020fb4c6ed8a(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_123e631d5d434677bc6816d9644eec56(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _j


def func_0884257de75d4a8898dfc72598b7e44e(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part2


def func_48548e7a76ca4be4b84d999500782ddb(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return ans


def func_fd70e275652948469eab4564d1d1eed7(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part3


def func_b2515c0333b34312a17a371699772271(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part1


def func_13255602eddc457f8e114f83970ca5a8(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _j


def func_ae4605ae7d374a5c91076deb9159b607(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _i


def func_0a2b6d0377a44bf88659084300092cae(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return ans


def func_c989744bf88047a081516f16dac11902(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part2


def func_2615a0442ac246caa67db9e0ed6ce3c6(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part3


def func_23905af0608b452d9ebaadb354bdec57(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return ans


def func_847546213b804b42a2c3a38b5358a18f(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part2


def func_280c3000c0d049b3a6c575666c4c63d2(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part3


def func_c1be858b697c4695a0b0580bd35a23b8(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part1


def func_127e5f90c6b047188f9fb1cb778f7ce8(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_835d8372d88747e19546eb8558fe9edf(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return ans


def func_f2d34bda1fbd4863844000d1dcc28fca(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part3


def func_d946303ea5c34f25967c4d9838cd26a7(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part1


def func_ce45204b01c5453c80350266fb987526(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part3


def func_f0d646f6c8af49288a02c97bc4866cf6(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return ans


def func_f97af76366544077bb62df159ed3ff1c(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part1


def func_85968213f69948d8a329c0a45ec67eb9(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part2


def func_3d3ebe46e3cc400fa22d393afee9bf5f(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part2


def func_a4bc0d66be1b4aa1a8429ca8669ba83d(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part1


def func_6d2edaed6696401d80ef80600a592328(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return ans


def func_3f2758fc07854646a1bbbc101da1c728(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part3


def func_4d462ea8ead241e39628f926cbf81ea2(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part2


def func_ecb15eac456b440299c891b2504c0738(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _i


def func_2a79b3e5d741443aba7dbb40e5fb532b(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return ans


def func_f6510c55a59347f4bd96334551846726(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part1


def func_081d35fe73ed44dc80a21fee7d90ae47(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part3


def func_48664d254f7b45cda30b5a7d9f23a38a(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_ac203ff112f242a499be3762e021dcd5(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _j


def func_9ff3776fa7934c26964ffd0cb387a8e7(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return ans


def func_711400e9af7047d8b61a93532a8fbc8e(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part2


def func_40d2ca2d275840a596dce2a342523a14(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part3


def func_64eea32e45eb405d8b83c6cf8f893559(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part1


def func_65d2c53b58794af0807b982111991b28(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part3


def func_ea533522aa5d49b0a41da7036b65bfce(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _i


def func_a1028012396340e7baa38b2ee3f54817(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part2


def func_10bed3db9310498a8fa3d735f4f78907(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _j


def func_baa3d2f53a0c4f36988d7c625853d41f(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return ans


def func_c74c38538567446fa798a5390d4d0691(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part1


def func_f6183aa628ff4ae6aca36a8141fa4bdf(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part2


def func_3c369e5f47514f18b3c4ebeb219c26ee(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return ans


def func_acb7d62fc2f043ea8fcfdd4bbe4ec797(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part3


def func_b1877dbce1cc4fb4be74c0728ac8db18(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part1


def func_1cef7882dc3e4f2d871f321a750db73f(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _j


def func_441f7bb136874309b6ca2fa675d525a4(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _i


def func_3a4a1ed5b041485f9365703e23c75d53(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _i


def func_2d776c374f834eb890076ea46609218c(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part1


def func_0259025c52d340528dba66c730ae6cb7(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return ans


def func_1022117d54af4e25a10bd7e8b18ec007(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part2


def func_1644edc9c9a0464c9c11cc6b9660784d(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _j


def func_deb3d7542dc443aca1cc5cba34589c52(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part3


def func_ce852f8437784d07887ab805fe3e9d7e(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _i


def func_29fb9688fa2c48ef9323b15a2eb878f9(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _j


def func_d041c7f3df2a4e159ba866862e7134ff(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part1


def func_068796fce8464b4e85d99d5ae028ded8(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part2


def func_8e4722456b4d4800961fa3c1d70ece05(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part3


def func_699df10bf3f546c9970ddfefb75faae4(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return ans


def func_34d28907e4144b12b5b18ecf7bb1a3df(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part2


def func_67c703b79e784da3bc3229fb88c986a1(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_23f2d60635f04dcf8980e332ef805e92(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _j


def func_198dc9bfd6cf40619913c85c2506ad3d(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part1


def func_9ff9d0e606744b2ca1a6a73154eeecdc(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return ans


def func_f7267a4d82ab429daa3ee110d4b5cfd2(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part3


def func_ad38561835a844cf81063d70ebad39d0(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part1


def func_a99f0361e1464d35938b727d4ee5ddc8(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return ans


def func_8e069bcd82bb4d73866c3cb5d0c48f87(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _j


def func_f7c61db63f5e44e884020afe22c81f2d(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part2


def func_b36c07866083429bbd64a315de3e8587(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part3


def func_7f9bcdd181a14bd9b3b57592e8d7801d(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _i


def func_5c3fec96dc994f6b8ddaadd5abf73ae1(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2


def func_c4d9ff00ef524dd98862299f3b4102b5(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part1


def func_37b8837297454d038d9f215ece4757a4(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part3


def func_5d98b384197a4b729753bb49cf67b138(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return ans


def func_5bd940a5367f4b11abe386fa92f19f0a(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part3


def func_e616981daf2049cfacaea73e1b6db911(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part2


def func_64b2773eb6ba466f908df5ea4a1fb2a2(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part1


def func_54cf9c35c941489a8cfac00db7471e74(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return ans


def func_d61c64a7d06d4d0aaa10abdf6b83ae39(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part1


def func_75a04e9b274247af8474b28172afccb5(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part3


def func_ffdf62110a4747bfbd5b6406227145d5(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part2


def func_7de71e5b16664a52921e2169cecc3c54(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return ans


def func_e39ad10482df473a8d8bb92e832a20c1(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part2


def func_8962e41a2a3f4384ad1946156a6de3c5(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part3


def func_7f7bcd6cadc64c078fe72db2f70fd9f0(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return ans


def func_ded7da6a4fff4014af00aec32631a7cc(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part1


def func_8bba017993e84707b935b8f24210423f(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _i


def func_c69ef3c1d63e4ad3ab2b01a8c99f4a27(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_2c72af783279423f8470833b5afe29a0(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part3


def func_9a78097970174f529088a647eadb8a3b(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return ans


def func_efdbcf87cae545399506deb62d86446a(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _j


def func_00ad11d577184b2f842437b272e5b96d(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part1


def func_a4e72f8397e1404d9fcacba408298a8c(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part2


def func_cecdb60bd8584beda303a23a52551c78(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part1


def func_afce5638ba7c445d87abfa5224a50710(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return ans


def func_338eb91cd89141aca261d5e4e49b6fed(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part2


def func_407f4d0f627744bdae0e38aaf9b398ab(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part3


def func_549faec411794252ad952d069ce56544(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _i


def func_e26b1fbc0139459885a53d3235c8545e(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _j


def func_85abe44d4bcf4d769f9f3ebd4f8754e8(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _i


def func_cd23c22e1e1045d1844156261c5e97b9(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part1


def func_b387e58045a34fd387d35a75601eb203(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _j


def func_2cdacc4460f84d41bff8e6c8f504ee1d(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return ans


def func_e51d3f0126744cdb984fb1939d39118c(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part3


def func_84bc4fa59cca418f9911489fd4415c90(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part2


def func_386fb0d17d294dba885139ecf9fa2a77(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _i


def func_681a28a1c7eb43448a97d7b4083dd1e5(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _j


def func_42df09513385432bb7295aa060dda68a(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part1


def func_7044b19e7a61428f89e0e3579236f5a6(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part2


def func_038db1b792e04d61b127c6f23c39db7f(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return ans


def func_8016e74565a64f57a38f1cd19b491508(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part3


def func_dd6d538a56824d4b8bd3a828118add78(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return ans


def func_35faa7d55dfe4fefa5527c0ee1434809(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _j


def func_d601ff50457c4ce1bd0c3e7d51ee412f(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _i


def func_ca27d656ba6841819bec24d199b5f5e8(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part1


def func_77f1feb049a6429389fec9bbd8db551f(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part2


def func_16a0dad07588488b81af35703a59e36b(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part3


def func_b425c36c4ebb495b8b945ad7ab2915f9(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part2


def func_7d2bd6bd596841669bc556628400d5fd(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_619af10c575b483a8a5bb734c370b11f(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return ans


def func_19e7f99c616347019b5e79562deb2a47(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part1


def func_86406006029c4991954ee2e4a2002c14(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part3


def func_b11b8ccf5edd46b9b538f4ac103ea25b(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _j


def func_09e21b029bae434382c52cb1a1a85662(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return ans


def func_4785244502df472995818f9ffc549523(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _i


def func_c767bddc0a414fcaab1a62a52556d4a7(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _j


def func_0a8f7f4e8bfc46c5b68d3ebecb4746ce(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part1


def func_60aeabd4db5b4f4d953fc67e795dca12(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part2


def func_380b5f127242411ba91b8601577a30aa(j, i, part1, _sum, part3, items):
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part3


def func_15bebce4d08c47d2b109842d0366a7e3(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part2


def func_41107dec112f4d4cba6ca1f19be6fa4e(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part1


def func_a2502d70b40b48a496f7a19a58ce1fd5(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return ans


def func_12c78ac208f740649688615bcadc91fc(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part3


def func_4dad52f82e474e46b3f397ec4bb7838b(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part1


def func_661ca10428654dd1a21a8fba1a67da10(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part2


def func_008825af2f814d8b9f47d00013b5a23b(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part3


def func_f8a98cdbd1bb4420bc52a35d6c813cac(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return ans


def func_04e9ed811d8547e49bb1935aad1af6db(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _i


def func_0daab1b475da433fbb0bd3df0290a1ff(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part3


def func_81c9666caef24bf4b26cf535bed824bd(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part2


def func_33552aa2cbf446ee90b946ef15bea6b2(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part1


def func_b081dba0ab504f6da5f5bb35a93960d6(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return ans


def func_0614869385b746afa3b1bae81bb38363(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part2


def func_205e5687c4434fd29851a280c9242d89(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part3


def func_6ee7468c9fba4064b19ef1bd98ad1088(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_d5e59086c20a44e98039f8b67351178f(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return ans


def func_a77351628e1e4ba4a237fd5458e67cab(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part1


def func_9b1abedbc6054911ab339cd8fdb7b2de(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _j


def func_df17ff216d5b43c984cae295f4b33888(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _j


def func_04d597debdbf4822a45707c0e726fc79(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part1


def func_07253f3b4dbf43689838a46596093d34(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part3


def func_5fc6c6dc1357424b972d321a949f4720(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _i


def func_f21a6aca5d64496195182934f04b4085(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part2


def func_58a424c351094947a50a2a25be874fb5(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return ans


def func_d079c7f011f84c5196b83a29619927ad(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part2


def func_2268651dd38b4ec79827db5af05e0fd3(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _j


def func_4468c8b287a046598491da1d6adc2f81(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part1


def func_ed17333dedcc4cf1ab0942141f6fbabf(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return ans


def func_a7fd84cfd10e4aaca8574a54721deef7(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part3


def func_8c9e3d51e5dc4c8796cc337288f045e2(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _i


def func_0783b99beb7a459d853ecfc7b0165aa5(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part3


def func_99220569ed644c24b9d7232c520b0909(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part1


def func_e5471a69a51541ccbacc57e110d45cbb(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part2


def func_91b96c7dee3e468d8ccd32302578f0ee(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _j


def func_a7ccbf32dd9f4690a3b7674295e177c1(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return ans


def func_56681d86dd29473eb7903d80f5edf4a3(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _i


def func_a4154cc2111442159d42b3a6ee2c2c6c(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part1


def func_8068d16834f3419ab5f918e442ca6ca0(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part2


def func_6ead9b8cc84a48c1a37e14a6735f81fd(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return ans


def func_d90a08cb8f014de5959ffb7e506cbf9a(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _i


def func_b6dd3744ef124d86a1e5be7fd406b89d(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part3


def func_4de62fe63d2b4aa8b8ba1bf140205776(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _j


def func_0c6089cb5a284b61b4c476689d33bae6(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_e7d7af24ad1b4f1097641a58af60dc34(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part3


def func_35a98ceba00c40d29b4c99bc3d237f28(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _j


def func_fa7b36dca5a34a11b9376b91a2a77fed(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return ans


def func_804d46b6768d436dacaec8015cb8f02f(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part2


def func_cf70b9c2382c4ef2a5d08d32a03d8d08(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part1


def func_e95953706de34db98a98d2741236783f(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part3


def func_ad98721a4f064f20a539d058d4a88790(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _i


def func_b90a1119926342d1900ffe740f05e90a(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _j


def func_70344f08a9c345b7b0893a1c345312ba(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part2


def func_fa745c536e8d45a5a52f8323decb6628(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part1


def func_49942c7aebfc4cc7893b29bcb7490c36(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return ans


def func_d00c71c91fdf471e88aa2d24861ab00e(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return ans


def func_2a3d6ae7f7b94262b330176c047f00c6(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part1


def func_ed899a3cf5f742b3b4d0a6c4c55cd61e(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part2


def func_67692b4263a142b197862a29de33e83f(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part3


def func_e104a375d4cc4dfb817c0512180889ed(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _i


def func_406d605b306c4944888243d659d91c35(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part2


def func_fa6a873cec924fc297c08a51cc9c48dc(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part1


def func_e42c5753c6714ab4bd1f63a5510d336b(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return ans


def func_be2082d35c3a418f830429034be14e11(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part3


def func_6d4800a3aa304f7c945abdda676a6c6c(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _j


def func_5159f0cf883f4d1eac55f3bfeab7be16(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part3


def func_d9131278e66b452bbb3c9b1ebbd2cb0b(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return ans


def func_498e79bdc4cd41e080057fed9529875e(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part1


def func_c4ecd3958be046d8b1806aa9230491a2(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_a54636641a8343c7b5dd80c5fd0d2cc9(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part2


def func_9d450bd25a2b4c4da7a9c6e03f924512(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part2


def func_b9d15b8e118a422db55fd0d8bb76b48f(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return ans


def func_60bf835b62054471acefa8a50e68051b(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part3


def func_a085507886fd438bbf6a10c22ca24609(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _j


def func_746a23da2dd64ebf9b7ff3f696825971(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _i


def func_8054b0ff227241ada2f26f399abd6245(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part1


def func_033fea27f66c4dfd95c870e8ffef08ac(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part3


def func_5a485ec97e0d4a71beba37946ca21ab3(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _j


def func_d0a58286c21e40e4878c18c1bd1e90fc(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part2


def func_094942b8f3c84d3da04d42ca1ac7a83c(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part1


def func_bdce052ea4e84c50adbcfc379868a13f(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return ans


def func_7477109cba354eddb6d91b62a7069cfc(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _i


def func_66f4688b29ef4cff9083e589073770d4(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return ans


def func_b2056c70774b4aa493cf4d5cf499c263(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _i


def func_ed890b05ffdc405fa7e6c9081b2b20fd(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part2


def func_93e2fb40d6954cf5a1a96314340a2393(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _j


def func_b379777c0fc54dadb0c688f284e22a90(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part1


def func_256a7201dfa14bd4a111d7cc27832c1b(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part3


def func_fbde084cafb349db9c5d233d5b8431a1(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _i


def func_8ea7039aa5d1486a864a81452bdfd657(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part3


def func_f7821dfafb8f4b438f9123ec5b48803d(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _j


def func_a328a8aa39aa4956b4f19999dd4d615b(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return ans


def func_b2b525715f614fc5b87c4987e67347f2(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part1


def func_53cd439cfc3f445f81fa0d4c6aa1efa2(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part2


def func_9ba986966fe64867846277985010199a(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part1


def func_3f8e689c272f48b1811693aa89fed5a7(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return ans


def func_71bc6002186346f390ec32086294e905(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part3


def func_abcd9e51038a424185407e3dd01a576c(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part2


def func_b2948473ddda45d9b4f2b8cf1f1c15b5(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _j


def func_c91b2dfdf1564e7e903e6c5fc6647035(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_48d5b02a083748b396e816e1bc52af64(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _i


def func_c69586aaab244650ace763c50e9f106a(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _j


def func_af366587439d4fbfb1a80c0c040b5c77(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part1


def func_34e179795fcf4953bdd366f2473090c5(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return ans


def func_d5dd31c970724725bf5aed295701da33(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part2


def func_e9f97fd1fda940eaa5ce74fcc979fec8(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part3


def func_db3bba41971749acbe9a66ed30a41f90(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _i


def func_1c70bdfc2aec497d99a7967ec95f8272(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part2


def func_2e47b16e4bb047b2918364748fd7bed3(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return ans


def func_5a0ffad0636349d7ae33fa8cea2385e1(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part3


def func_88903c5d031e4ef2835dff38c38ead70(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part1


def func_1b612b7f7be242fb9a29447b36a69450(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part3


def func_699545682c9e40ce8175afb86122deb5(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _j


def func_d0fb1b42220f4de8ba5e1b0de364860a(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part2


def func_0ef04c2dbd16404c89c9abff0814d910(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part1


def func_ab370ccb8278477489f60f32bf40a0d5(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return ans


def func_0fbe494f26824192864ea821fc64133a(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_718f5fad7c9349be8345b47e877d87b2(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return ans


def func_3ae48ea926eb4868b7a2603ca43a4b63(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part1


def func_de58bc50b57846e19ebdcf142afc4c9d(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part2


def func_8185ed2452784b00b80b97159662499c(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _i


def func_25b767571ba047038b9fa7d907357a99(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part3


def func_94b4a1d9ff984d118e0f9d1600e9b722(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _j


def func_c8d032c6bd8142e186f866eac4e694bb(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part1


def func_47fba1212e8a4362ac04e51756b6716b(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part3


def func_96ade91e9aba4374af02ed1235f3344c(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part2


def func_12704ee9a5564e3fae7f133e95b1b6e7(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return ans


def func_b13759e8564347ea98c42e8fb1bd5ade(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _i


def func_dea5c663434040419bddd68b93c30c62(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _j


def func_837e6a53f25749a0b632640800095235(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _j


def func_735e7e8e0a0545eaaf1101109c4b41c9(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part3


def func_15473db54d11488191eeaa8019650149(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return ans


def func_543703d61df9484a9b611fec8e4401a2(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _i


def func_427cc178ee9647ffa13a9c5f6797f4fc(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part2


def func_425300a42e544831af7e533743c7b520(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part1


def func_4447914bd3d84be98a25536b1a8b5450(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part1


def func_e5c6c2e7fbd24a0da74f292a32f6a65e(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _j


def func_b5569e6f6d984efc9e88cf8989d30fe3(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part3


def func_5e074c1fdec9438cadba2b12a6723149(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _i


def func_6fe33a0c188946529410eba7f0688f91(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return ans


def func_48799954194546ffa6c2a1529f4b7ad7(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part2


def func_8b6237c6f31744afac8fcdd042eb48a4(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part1


def func_c5e88fa8f8f54e5d9f6953ba0af5cba4(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part3


def func_f487288ab37d4544bee5ace5c85efc9a(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part2


def func_836eebfce63c4c8f9710171c9ac90611(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return ans


def func_c0c2940f95984e6ba8f073cfc99362fa(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_9e70332003ca4f15b1fc98eb1fae6acf(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _j


def func_ca3867ee365a483b82d0edc74f76e0a0(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _i


def func_a7fd62fe41a94dabb59ec0e0bf798a5b(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part3


def func_5e8cf1e5d3fa41fe8f29c4b9cc7390d8(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part1


def func_42073fb4d04f4915a9dd8d3c138cdbc8(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part2


def func_efcb501896404bb0806e4054cb1eacdd(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return ans


def func_d3a89a6ee94f4e6cb163211c28f10d07(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _j


def func_1392717442d847fc9793132aeec53ee2(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part2


def func_ed196d377f4244db9a90f38c629879a4(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part1


def func_497a85fd15234b6fa05adbf29edb9cc8(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part3


def func_39e6524a67c44db48c1968dff158c0e0(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_d19edc20a78c44318b5ecc05112795d7(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return ans


def func_7278f984a0f04aa4a7de4edcde69834a(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _j


def func_1ca2650d5ea941c2a7370b3232ed4cf5(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part3


def func_90f0753fe7994893884a58ed6f188c18(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return ans


def func_2a9a773bed3d42fb808af3d32fbe56e3(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _j


def func_73efa4aa02a04eb4a44ec8cd397eeda5(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part2


def func_66e5a4f95b9243eab66cf6488203839c(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part1


def func_64b3e290998b4f9bb2571929b4dbda7f(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _i


def func_5e4858d96e3f49e899950397c7c99c52(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _j


def func_f01a3c2c9c0943beb5396c0f40e0647c(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part1


def func_3f9decec50e6444788eb845fa9d418e8(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part3


def func_11bc818fe47e43bc94fad88cd660bd78(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _i


def func_c8d72732fbc44909aefcbe028fdc0efc(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return ans


def func_c56dca500e3c4917a50c6e1d324b2a2e(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part2


def func_6b6cf87633044859a1aab6def08f81bc(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part3


def func_2e84a8c5ab1748ea9e37c3e233e8fc6a(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return ans


def func_eefe0153c2a841d69362c6b50f257e20(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part2


def func_9989a63a7af240ea9b847840896f8879(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _j


def func_e1f328bc37fa4061a95e35d940d387ce(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _i


def func_4b61132778de426099da7e578fa6799a(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part1


def func_bdfcee74620448c28ccd3c6f9c173602(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _j


def func_dcf586df45474f099e41b8fcbb51061f(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part3


def func_15c45ea7903d40d69e96fb28cdf77b07(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part1


def func_38a5e8d4cb0f4f28904e1be68f59633f(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _i


def func_46f00ff7d9a0493eaa75a985ad9096e7(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part2


def func_fb5276b57eaf472fba8a2b0909a8ad5e(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return ans


def func_9049677b0d0148f18d7e893f628f06af(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_03af88aa7add453993285249769eefb5(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return ans


def func_05b04af5b23c417db9c180b062ac8bd2(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part1


def func_1eef3d60f2174ee582b7e95892114c1a(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part2


def func_f6ebd2b1087444aab03f6ae050784806(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _j


def func_deadc36b50e44270a1f90fe3237170cb(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part3


def func_c07d3fa72ab4420d89a4c06444460a79(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part1


def func_7139bc3603fa4d73ab87c825491a01a3(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return ans


def func_a7796013b34c470a8f9254a768fcf527(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _j


def func_c36bc93f4cda4b0bb840eefe4b145552(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part3


def func_2583609e253f43b58b1e32f0adf517c2(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part2


def func_9c98f1f8c4b7428fb8479ca5c1c0d216(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _i


def func_306e338fc0de4e4aa75e39bcd16531af(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part1


def func_f3308103b98349b0a5cdb366f5379fb0(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _j


def func_6c744d7f94fa4110aedcd968c9c1ede3(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part3


def func_dd7cef9150474233aa53c18121a0d5b2(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _i


def func_70003968eafc41fdbace2f08b28043d2(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return ans


def func_c5a1fcd25b4d41119dde1aee0f2fe289(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part2


def func_a95ffa54696e4c25be832c580726d439(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part3


def func_0dd0de2e01fb45eab88c2b2a803af2d9(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _i


def func_ef7d44ae75ae45d682d0251f59de7997(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part1


def func_d39d8c1aee26405dacffeeda5c7ddb98(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return ans


def func_13782fb024854762bf4cafad845762d2(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part2


def func_d476a2df67aa42fab3388bf66b5101bf(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _j


def func_df9da86f6ab340fd9545fc4f72b438e0(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _j


def func_55af5923e42d4a7c8328a5f81a79bfa4(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part1


def func_15011f7c2bde41a1a5e13932d6c4f2fe(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _i


def func_0b5e7a44800b4319ab4576ed240e89b3(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part2


def func_8ad9a38f2ff94803943beb0437b3c226(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return ans


def func_ab751ff5d756462dbd91ebac47f79369(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part3


def func_401504a14bd14abcb7da9b1cb844ad9f(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _j


def func_46dc09c19d4e4f07b61e874200dbdc40(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _i


def func_e5d9b0e2d86747a8bf162e4d202c6e30(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return ans


def func_d096b09875d345ac9b648934817fea40(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part2


def func_728bb9095f674a8d8d57baa5bd773aa2(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part3


def func_214ebaa595dd4e29ae8109f94b28a091(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part1


def func_fccc2e7faeb84122a01114c38d3e01ee(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_946c3daa671d4b60a2f092ee39f15ae1(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _j


def func_e00825fe27df4ef4b8dadcde351d15a9(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part2


def func_756c0eedad9e4875a9fe049dada07cb7(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part1


def func_f587c61ac96d4235901115e36df7f8c2(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part3


def func_5a5f4df300a0465a86416738e2404787(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return ans


def func_d477fbe1eb3c48eba5422e266596a5a5(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part2


def func_bd8eae10d968452e8eeead84f2fecf8d(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part1


def func_986db8f93c834b17bcff101f113274ff(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _i


def func_32e66faea3cd4b62b5b8cc0fb4067295(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part3


def func_0b5bd82a3b2d4a2ca030a2fa22c5de22(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return ans


def func_499719ca75ef424fa9d0fe22f6740746(j, i, part1, _sum, part3, items):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _j


def func_15ac539abf80447e8c158d9b51bb871f(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _i


def func_8ea861782f814637a1104963e62da464(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part1


def func_b6d312b27bf5485595272107cf8d2126(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part3


def func_65295e950cf54972b21a09ec8ec61019(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part2


def func_87b40f3673e947c9b16a534241ae86e8(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return ans


def func_de3bd9dc01b04c2ab1664a0907ba46a2(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _j


def func_66c43226932446a4a5e7ad90f001ef9d(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _i


def func_e48cb3d3e2584136a17de45c6dbff60c(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part1


def func_9a9f810c7f894b75a09aae1999198ff0(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _j


def func_8a92c3ad3a454b46b92021f60fdc4835(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part2


def func_02cc86ae61d24c08b5c607a132c7c583(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part3


def func_5b4eb7da4fdb4be8a402a6596aab823d(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return ans


def func_200f7101469f4e35b6a65c32fc19c70f(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part1


def func_a3fcd091eff64c139f0867c6be0c7174(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _i


def func_1b61445add424045889a31c9dd6324a9(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part3


def func_5e98c4ebc9c642eb8d50245f157924ff(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part2


def func_f28b6cb0e9284d9ea3950d2299050fb4(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return ans


def func_c5091287447a4a7c88c8f5af4a2baae2(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _j


def func_f243672ef76146f684b681877b85ab8e(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part1


def func_848757b113f440e0b9975aa9410a2778(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part2


def func_cf0ffb114281435ab63abf8518b9a857(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_24d6d2ec9ba84c3baafe06c6670551e7(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return ans


def func_8e1e11a3b17940aaa13aa55eb6d45e2f(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part3


def func_9fbcfa94dca34cf9be44db2a2f8f543d(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _j


def func_71981bf13ebe46dea023d655f8a0351c(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part3


def func_7b7743171deb4eceb81440dd416323aa(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return ans


def func_123b6e3d06fa44c18ea4e34676ac6b31(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part1


def func_e42f7237f22445ec974f22f744fc6e78(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part2


def func_f59267525bfa4eb5b8cd18bfa3c5d348(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _j


def func_fdf7adf1e538473381a47db1d001d6ce(j, i, part1, _sum, part3, items):
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _i


def func_8df66df40b19443db3999e8aace2a53c(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part1


def func_c353b964bc33477d88e7d469bd672ff1(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part3


def func_d8f62810e6584814ab0906b92d41ba5e(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return ans


def func_10b4a05b71574556b827212d318b5a43(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _j


def func_7f5f6ef57d0f4d20afd92fcb4e904192(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part2


def func_8e42588fec6f45bf9035f4e0b683b21d(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _i


def func_c4a49a33006d4f92965e94be66f5f9d8(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _i


def func_d0299d07019049469e4c70928023196e(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part2


def func_46a6413b644445b5a5f7d38333148d18(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part1


def func_d39bebad9e9b44bc858a4ec7668aa58b(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part3


def func_8b7d7b56c0c94c88aaf6ea54837de960(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return ans


def func_9338aae512684b539affc772bf7e7cdd(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _j


def func_72d4344de3c14f5ca1913aff718a09d7(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part1


def func_31090761407f49c88a0b0fee90b366cd(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _j


def func_0b4aa5bcd6624bb9ada5377ecda01395(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_f283f0dc47294beaa554a03c366e8c22(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part2


def func_363969fff2c8463fb9861947c50dec24(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part3


def func_db40f04577ab4685a63cd98b77d38730(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return ans


def func_d1f5ade53f204ae0bdc8966d9b43d8fc(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part2


def func_bbb4f2e5c26946b6bc95c9d9d348f2bc(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _j


def func_5e748bcba681472987895800563665ee(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part3


def func_e535a5ae1a7545849eef8327d0626a9b(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return ans


def func_7dc55c6bc97f4c75adad7001bc6dda72(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _i


def func_364bfe66a29f4dbda60e9fd00a54f2ef(j, i, part1, _sum, part3, items):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part1


def func_9e1fa5d585634b3ab2b104e0832ac157(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part3


def func_9e0fdd9b0fcb4ae180f9996c280de219(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _i


def func_9517b69a96cb41f08da4cf8d05a0fff6(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _j


def func_c28e4f8d5af6414db41f73e8e9bae3a0(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part2


def func_ec6526167e60414fa6810d658794f2f9(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return ans


def func_478d378089ad4262b90e7f673e166087(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part1


def func_620226b66aa34c778b55bd5434372d57(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return ans


def func_1ead72dd92e4437f8327ba7c17330fed(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_75296e0a826d4d629ad1c9605cb2e2cd(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part2


def func_f9d6dde2aff44e3c8a0224ac88da0843(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part3


def func_0265dd7199314523ad4e2448faf28fce(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part1


def func_5cdd74b3c665496db3a378a562a37ca2(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _j


def func_36f374cc5b6644a69c4d99dfbc417a1f(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return ans


def func_e04437d865da488c88596e2e1af2d144(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _j


def func_0f9b1881420d4ffbb7c5f2ac97f031fa(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part2


def func_e24a95b4d7044b8ab32efd04d2493e03(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _i


def func_2fb169a7985a4ab0a451b56b7e592290(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part3


def func_cc1ad05c2f2c4be38de1f1a35b0622b9(j, i, part1, _sum, part3, items):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part1


def func_fe8ed9a2621a4056905874358dc38d3b(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _j


def func_6e346776e43f493694dee6ef3304d05c(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part2


def func_2b4eeea4cfca4860b5d711caddc47435(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i


def func_b19ed6e91c6d4f6dac8ea18b0160fd0e(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return ans


def func_f925e42a0d0a4247a196cdab35a0d223(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part3


def func_f7ff472befa34eae9db03b1e6479f83a(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part1


def func_c07e5765882b4928998846457fa64f21(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part1


def func_e2c5074061fd4ae9af0891e498bd537c(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _j


def func_f48691e213624812b7002bc63b94d3c9(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part3


def func_ce07583beb4a48dabc2ccc5bd7b0a52c(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return ans


def func_f03109e35f0f4d7ba32544721d97de0f(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _i


def func_fcdf33740e8e4acd9232eee045ee42d3(j, i, part1, _sum, part3, items):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part2


def func_e77c9fa4be4347dbb6b979648057b9cd(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _i


def func_4bed3b0c8dce4f059acd3a381068284b(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part1


def func_72ab42c7152342e496daac744d27454e(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part3


def func_bd6c047eacc4498e913c365d573111e5(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part2


def func_24f4b4780c714f32aca6e0c7b2db2550(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return ans


def func_91b2c2082ff944a5a6f9f346ca01fd26(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _j


def func_7afa2d1e05624b31985df418a26fe6ca(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    return items


def func_94c63e26ed824fac9a044d2e8a67152b(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    return i


def func_37ae2229a57946409839fa0da55147b2(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    return i


def func_0c3407ff324e4932beb38aee9c963b61(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    return _sum


def func_b9de639e8b2a4849b00fdcc4f35595c8(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    return items


def func_631e519cf6a94c2c9de61e3fe39da828(items):
    _sum = sum(items)
    part = _sum / 3
    return _sum


def func_7c0f08add8b242db8c4aef3b20d87e53(items):
    _sum = sum(items)
    part = _sum / 3
    return part


def func_10c409fb25d24964958593022fb8bd0a(_sum):
    part = _sum / 3
    part1 = 0
    return part


def func_e666ffcf81814e9d8159029b5c5b97f9(_sum):
    part = _sum / 3
    part1 = 0
    return part1


def func_f75593f23ada4a4c8368034558038332():
    part1 = 0
    part2 = 0
    return part1


def func_7c278814a23e4bddb1b4839f7bc122c8():
    part1 = 0
    part2 = 0
    return part2


def func_4bd1024b46d84f40adaa2a9dc102242a():
    part2 = 0
    part3 = 0
    return part3


def func_a63760b2a3aa4216a884e30a9693a2be():
    part2 = 0
    part3 = 0
    return part2


def func_82d985864a6d41a881318f0488d9b6ea():
    part3 = 0
    i = 0
    return part3


def func_d3750b2ffa604951aa69c1a8e9f319f9():
    part3 = 0
    i = 0
    return i


def func_a8cb8c6a54c7471f85cb00bac1ee3743(N):
    i = 0
    j = N - 1
    return i


def func_00385f74f4444042a383f8c082f6f1a8(N):
    i = 0
    j = N - 1
    return j


def func_04197ad9e68247ea933c43bc23d3f37c(N, part, items):
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return i


def func_452cb9f6e1bb47a5bdecdfa0fa596dcd(N, part, items):
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return part1


def func_205cea0f630e4e6f9b739bd71341d801(N, part, items):
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return j


def func_1f702a31cefb4c81a246cbec1368b5f6(part, items):
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return i


def func_5cfe231c882a41d9814dba2756987ade(part, items):
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return part1


def func_e53f69f476b045f3b4cb7601d195a447(part, items):
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return j


def func_322405e4aac04af9877b4d1841922427(part, items):
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return part3


def func_0ec08f13548f4a3baca5a1cae2ce2637(i, part1, _sum, part, items):
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part2


def func_c8e437e0e62d4323ab5d7f26ab21f8a4(i, part1, _sum, part, items):
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part3


def func_3c5f0b99841545439b1d2a9da8645617(i, part1, _sum, part, items):
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return j


def func_fd5a7906419e423bb0f75703c744e788(i, part1, _sum, part, items):
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _j


def func_3f4cb419fda545e48008b49b6db616b0(i, part1, _sum, part, items):
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part1


def func_c4c14c2e8d604544bcd962ec9b3381db(i, part1, _sum, part, items):
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _i


def func_23d33f3d134440af9e9f878ceffbb0fa(i, part1, _sum, part, items):
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return ans


def func_bd9843fe865047d7819de1df9f7fdb88(i, part1, _sum, part, items):
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part3


def func_094f05b912ae4b909e4b52e11e23c887(j, i, part1, _sum, part3, items):
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return ans


def func_615557f9b941492a881560a3bf6060d2(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    return items


def func_e6040ad0a5974156885690765a9c6eb7(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    return _sum


def func_b7e31548b4874b628547650919148089(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    return i


def func_52fc974cbd944e9a9b02f13a1483b74e(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    return part


def func_e8bdc86d1359404bbfb878306ec0e90c(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    return i


def func_ccc0aa048ec846d18b715f42b5742acb(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    return items


def func_116b935df94d4c1981713c8195fed393(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    return _sum


def func_d6a80f40c8e94d5eb798e2b36981e2e4(items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    return part


def func_dd6176fd74a94303b665d9535c51a3f1(items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    return _sum


def func_37f5b44e3e77422b9dc9bf7ad2cefde8(items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    return part1


def func_d22558c9f43d4e62a4b672558c922086(_sum):
    part = _sum / 3
    part1 = 0
    part2 = 0
    return part2


def func_c5b1f230113b4d31a7aaff037bf338c5(_sum):
    part = _sum / 3
    part1 = 0
    part2 = 0
    return part


def func_428e016b26464380bc144a7da3bef238(_sum):
    part = _sum / 3
    part1 = 0
    part2 = 0
    return part1


def func_288f71366ce2444cbf26e6e7520a5234():
    part1 = 0
    part2 = 0
    part3 = 0
    return part2


def func_e7c2c2b5c2184d7980bb519d259f25a2():
    part1 = 0
    part2 = 0
    part3 = 0
    return part3


def func_c8478a978eef46d19333e3ad0f43e093():
    part1 = 0
    part2 = 0
    part3 = 0
    return part1


def func_4dbcb072692b4c81bde02e51cd5d628a():
    part2 = 0
    part3 = 0
    i = 0
    return part2


def func_34cff12f30f14eafa9f31f697b13e31a():
    part2 = 0
    part3 = 0
    i = 0
    return i


def func_4d7c12cf2a2f405ca9fdb7b91483b937():
    part2 = 0
    part3 = 0
    i = 0
    return part3


def func_a6a09c1e07904a78b15efd66946f7d26(N):
    part3 = 0
    i = 0
    j = N - 1
    return part3


def func_b0ba75a9d90747ca9e796d7e18a694ef(N):
    part3 = 0
    i = 0
    j = N - 1
    return j


def func_c229f22eb0434cb48e95133bf3cc12ae(N):
    part3 = 0
    i = 0
    j = N - 1
    return i


def func_f02b78f8b316416ea1894af897968c81(N, part, items):
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return part1


def func_be91854a75dc4afdb5fde93bbbe881b0(N, part, items):
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return j


def func_7304d9e050dc4c5990a8f2242d001ad6(N, part, items):
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return i


def func_3cdc2ae5a26947cf908b656ca93bb0a9(N, part, items):
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return j


def func_1804e18df72041ee927824b7d1006b06(N, part, items):
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return part1


def func_1cb90ed0ab084b6c94d48dd566f33fb4(N, part, items):
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return part3


def func_3f76d98c5f8a436d8eae2b4f0cdfd3d4(N, part, items):
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return i


def func_b8a40d9915b34dd6ae5c9aac8f2c5ce7(_sum, part, items):
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return ans


def func_5eb0e7753d7b4773af9092d95b130f8a(_sum, part, items):
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _i


def func_51e5620b5bff413c8dbcb1ed0d6291c6(_sum, part, items):
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part1


def func_5a34e417b39c41a98f46ca6cf9f6e165(_sum, part, items):
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part3


def func_87ce89f908024dc7bb3d61344a50bdb9(_sum, part, items):
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part3


def func_11009f5754b14df983245abc7d44ad22(_sum, part, items):
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part1


def func_9928c04a503947f194eb9ba8843156ec(_sum, part, items):
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return i


def func_e8a37ce932c84e599f5c6e94f991457e(_sum, part, items):
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return j


def func_155f74863ce3448b9b4dc6ce8880e562(_sum, part, items):
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part2


def func_0f59699ed0c94e1eb2a257501baae93f(_sum, part, items):
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _j


def func_0bf378200e4d4abf9aaa10c497e470a6(i, part1, _sum, part, items):
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return ans


def func_e6de47f328714cd2b369830f51bc0781(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    return part


def func_80ebd70cc61a41c993e6ed707f116fcb(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    return items


def func_a89142595f554c28842a5d7a0521abde(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    return i


def func_95e8872142c54fd497bb822911e31fe6(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    return _sum


def func_c24c54e35bdb45c283cf5e2cdb959e87(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    return part1


def func_334cfd2c0d744fd48932c75de413bfc9(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    return i


def func_a76eeb0b317646bdb466615db2fac227(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    return _sum


def func_36e0e4a41d94413db36db600756837f2(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    return part


def func_a54bf394b8854ee588d7b9e3c70cca06(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    return items


def func_0b0792481ef048deb1f64f0397b9e6a3(items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    return part1


def func_b0439f446b7045cbbc8365926a6a57b3(items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    return part2


def func_e30a29e2706a42b6ba129f621adc12d3(items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    return _sum


def func_693ad89e74234539acb22be90c452573(items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    return part


def func_c62b92a2942e443692b12864498fd2cf(_sum):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    return part1


def func_845c52af275649359108112515fd74c9(_sum):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    return part2


def func_208e42dbe0124230950e77caccdb5253(_sum):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    return part3


def func_8e7983e66b88472c8b68084898085705(_sum):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    return part


def func_e7ebd8f2f1c3444198405f71ae6d4ab8():
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    return part2


def func_1ab28d20abb546debfedafc83ef62e95():
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    return part3


def func_e4784ea87a2945bb9e9f3e5e1928f819():
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    return i


def func_3d7c63c700b5413bbd178a224139d332():
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    return part1


def func_c84c04ce97574ad9abd63280a1b45dbc(N):
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return i


def func_35ba8882836447938e47dc2eb25ecbb3(N):
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return part2


def func_711d26b303844f559819e8246d810afb(N):
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return j


def func_1cde699b82234008a02eaa186003d492(N):
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return part3


def func_bcf0031e289949e1a28c9fcb56b77ddd(N, part, items):
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return part1


def func_e10ce958906545f981c781cea0c31914(N, part, items):
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return i


def func_76428a33e5ff4662b74028c23556182d(N, part, items):
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return part3


def func_1fba6a732bd64754b08d9c1da2ef9f9b(N, part, items):
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return j


def func_8d7221ab38dd4822b82981fab3231a96(N, part, items):
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return part3


def func_7153686606e5452595d0f9fe4a519bdd(N, part, items):
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return part1


def func_63dd198e633b43729c36161cd8622c7f(N, part, items):
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return j


def func_f8171a83d57d42e8810a4a4e2db0594f(N, part, items):
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return i


def func_f1e7518f61a3411b968d623a05f53b48(N, _sum, part, items):
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return i


def func_f4904337c0ad48b1857ac71c3eb16d23(N, _sum, part, items):
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part2


def func_55b9c7b4c68a4d7a80b294f420f0404d(N, _sum, part, items):
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part1


def func_72846ca236d54563a877d19c29e078f0(N, _sum, part, items):
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return ans


def func_607d4f91279c4f47a2e01c0681aa7c8b(N, _sum, part, items):
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part3


def func_7c4a785f84354dbaac59774520d8cc84(N, _sum, part, items):
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part3


def func_761ae8b109a6497d80b358e1a8b63af8(N, _sum, part, items):
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part1


def func_d55fcf4353ea4b7eb81e0debb145acaf(N, _sum, part, items):
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _j


def func_e7f2d848429c45a59cd8a144e713d854(N, _sum, part, items):
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return j


def func_f45aa65dec9440da9b97fe0e50829ac4(N, _sum, part, items):
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _i


def func_793d4bb5579a4cd6be26f48a3f313a25(_sum, part, items):
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return ans


def func_4dfe060f69fd4520bb5b7514c51e0328(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    return i


def func_5b4772ff7e5a40558ff96b2677c80b8e(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    return _sum


def func_e098ef4d7d6b4954aeca7c501b8908aa(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    return items


def func_1e19e7c9e8ae467a8e50849bc965f449(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    return part1


def func_a1712fdb45f14e149cd8968850951673(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    return part


def func_769943e610f0407597b4b8d6563b891d(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    return _sum


def func_9d1e8a8759c4430d80d5b7729c64ab56(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    return part2


def func_579dce82d6774754b577b3f131ffd0cb(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    return part1


def func_73f2e71248304b88980882e3bfe23809(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    return items


def func_43e0ee31ab3b408f91f942f7298b07cf(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    return part


def func_dd498b8f055e4577abf2e4ac42a9756c(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    return i


def func_d52aa9bc5d7c40d89d0f301aefad7b04(items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    return part2


def func_eae0e2c2073c42a494a4e5825abdb0b8(items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    return part1


def func_480380f795c7446fb359a26b430a3af9(items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    return _sum


def func_643c4384e8de46f28ead58d85743c0ea(items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    return part


def func_4532c82f9f63417295840877abb761f1(items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    return part3


def func_abc3ecb2c4f94525ac86db98e32b4dc1(_sum):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    return part3


def func_b97b9489ed1a445fb015c60e710935e9(_sum):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    return i


def func_a3cab1da269b4856bae6e81cf937e71e(_sum):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    return part1


def func_3d9b510fcfeb44b1958a392167f6397d(_sum):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    return part


def func_e755e7b6a23f4061ba1b4e893a107606(_sum):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    return part2


def func_9740334c744645ebb4c421c9fc907fbf(N):
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return part2


def func_cf134e37f9c0426292c31e838acd3471(N):
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return i


def func_9abece6f2f3942f28f9072fa1a0e823b(N):
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return part3


def func_3ddb816ad01f46ab8fa68503399d1c75(N):
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return j


def func_5795b560c3b14172836150ddb5e2bea2(N):
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return part1


def func_795808b2ed5d498ab17686874f50efe7(N, part, items):
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return part3


def func_5095c2ae94754f07a2240b91513e8562(N, part, items):
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return j


def func_11ac718fd0d34941959e9872eb32c7f4(N, part, items):
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return part1


def func_dd810696f4a8429586b342d6db547590(N, part, items):
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return i


def func_32bddc01160e47ce98a1b88ae080ad65(N, part, items):
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return part2


def func_1745425d61e24449ba298baf6fdb5817(N, part, items):
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return i


def func_8ae3f7b7d30f491988ae13503b7aab26(N, part, items):
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return part1


def func_27db215f55c14072aa4529227a10ad09(N, part, items):
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return j


def func_78820c26bb8642d283c59d5b96ed8116(N, part, items):
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return part3


def func_badd4c312a7340289370730e8a809b5b(N, _sum, part, items):
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _j


def func_cd9055ad74424fdcb36ed8f9bc8678cb(N, _sum, part, items):
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _i


def func_72df05906fff4168ae71c7af6de8ffa4(N, _sum, part, items):
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return i


def func_a9c37a7d80f24897bf97cdaa61e263de(N, _sum, part, items):
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part1


def func_9af8cddeb7054c1cb5f0245125c33d40(N, _sum, part, items):
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part3


def func_d46ada214ec84e03bfe9fb88f4281577(N, _sum, part, items):
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part1


def func_4b72dbb6f75d406084d577de428fafeb(N, _sum, part, items):
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return j


def func_b8ca85e2c57346fa91b57a640dafe60e(N, _sum, part, items):
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part2


def func_0bb7ac505713441b89ebfbefca50eaf8(N, _sum, part, items):
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return ans


def func_4e76fb0859764da3aba83af70ec29deb(N, _sum, part, items):
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part3


def func_44caae2c6a824d9fa1b89680b402317b(N, _sum, part, items):
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return ans


def func_5fa645907b1f46e095f2e13ca94b710c(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    return part2


def func_a296bc9fa6f541ce89f821464999f1dd(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    return i


def func_4136bb2e04f14b44b55029457aca8621(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    return items


def func_ca13b9345d00450a83875f51c57062ba(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    return part


def func_5e8a60d8779448c6994b353e1d6f13fc(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    return part1


def func_4a85e7da2aee4a7b922f35c1bb700cad(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    return _sum


def func_9ea6776ec65346b3ac1e2c9aabc8b96f(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    return part2


def func_2d7be371d8c440308e68eca127ee2cb9(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    return items


def func_8160bae9784249859535a3da0730f02d(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    return part1


def func_aee55e80eddc45ba84b487019279934b(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    return part


def func_87e4040eded04ff191edb3c7d62f51c0(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    return _sum


def func_46caa039e878463bbab05be393888140(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    return i


def func_e8a3bfc66b744769b79e674e8b9c480d(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    return part3


def func_9f38e8b913134353b82f28bc7ddff41d(items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    return part3


def func_e7e6faa1e17344e6bcc4ff86ebd5750f(items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    return i


def func_cab04dba1e0b4213a2a7335ccfde7c79(items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    return part2


def func_c67ab3029efc453c8a44489ef11defc2(items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    return part1


def func_82993337cfb44b6c92aa9244fd759e5a(items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    return _sum


def func_dee3b22d1ee94722bae62d1ef9f8c049(items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    return part


def func_ec1ec8726fa04507bb8edf18fbcb4413(N, _sum):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return j


def func_bab8df7d492945118e72304728fb01d6(N, _sum):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return part


def func_4a637b5df79447f49768d88a5a2c7f37(N, _sum):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return part2


def func_4c7870ba81e148aea54753120460514c(N, _sum):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return i


def func_d12377d2776543fc9153f80533eb6ac8(N, _sum):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return part3


def func_dfc90f593eeb4c579b29894604351620(N, _sum):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return part1


def func_5640de0fee3141e78b987e88c7a27410(N, part, items):
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return j


def func_911b96967d334138a8f25cf6f088abdf(N, part, items):
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return i


def func_a0baa451baf24a4ca7c992500996d9eb(N, part, items):
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return part1


def func_09bb4b5b23ea429dbc3dd93ca39a4c71(N, part, items):
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return part2


def func_53879f8fa10941f6b8278b4938c707f5(N, part, items):
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return part3


def func_fd9b52672e81422fb95fc4259fe5313a(N, part, items):
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return part3


def func_9eed1903f0f845258aac7c33e7be6f92(N, part, items):
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return j


def func_32b57f23908a47a082eaec4a990498aa(N, part, items):
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return i


def func_214813282cfd451cb6ad99db698db233(N, part, items):
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return part2


def func_3ec010d074274b17bdc99394eb33ce50(N, part, items):
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return part1


def func_e576647b2d2b4c2aa960adb7c33add7b(N, _sum, part, items):
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return ans


def func_2c105e7456a049a2bb88948c5d248e99(N, _sum, part, items):
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part1


def func_a3ef475aac6348d9840d6c7d9bac1dbe(N, _sum, part, items):
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _i


def func_6098fc7190814133b917c4c61bf3b272(N, _sum, part, items):
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part3


def func_34c11d08db2b4dc9a1a15fd9a904fc12(N, _sum, part, items):
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part2


def func_375b91fc42cb4615b8c1b09cb9493dae(N, _sum, part, items):
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part1


def func_58ae55cc827540f4b371d9022a76ebad(N, _sum, part, items):
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return i


def func_8cc15e047cd44197977359197736c2ad(N, _sum, part, items):
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part3


def func_30154f8ea9af4686b14663768a1dcd5f(N, _sum, part, items):
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _j


def func_73965ff8785b4fdbaf6caa05c0bf1bb2(N, _sum, part, items):
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return j


def func_e7631bb6ca9b4ef5ad38408ff1e44524(N, _sum, part, items):
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return ans


def func_787caf75379d491383754d1d9961a4d0(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    return part3


def func_f32637d1130a4620ad09a16aa5192aad(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    return part


def func_0ce3e17235824ad08b46a3d9dc52902e(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    return _sum


def func_e120ab8974d148b980b6e92a8df8eb48(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    return items


def func_91937802611c407487440725b3678972(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    return i


def func_2db7bc7276e043738b7de3381174c485(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    return part1


def func_4ce68d3aa1f54e829ffde8dd67a0140a(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    return part2


def func_a6b0510f92ee4369b7c763535d312ab0(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    return _sum


def func_350c87657cf44134b842d9e43ce5feee(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    return items


def func_0aa8ac9c5e884e68bb80464a35788186(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    return part3


def func_8f88c381626b458e8ff9a0c1b91aea35(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    return part1


def func_aaaa058e19f445b68f6ffe4e9c0f31f8(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    return part


def func_501ff5bffd4048259ffdf904a8380bf2(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    return i


def func_71f89da5c7824314a16259242028a2c7(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    return part2


def func_0fa62ec5d9774332ae7fce3bea371167(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return j


def func_1621a9b232824ced9fdcb3b753553745(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return part1


def func_60dc5f31903845ee9991eecdeff1bbc9(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return part2


def func_43df97b566594717926f129003242a00(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return _sum


def func_9477578396c4408bba8b007f536afc98(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return part


def func_840c79b02fab4438833e029d0d44ee4e(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return i


def func_f89a682e13784d5daaef192c9c4ee384(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return part3


def func_c8c41556a8fa4673bf49b22ca6e1013e(N, _sum, items):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return i


def func_20d97a1877fd4b4e853afd59e0ea335f(N, _sum, items):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return part1


def func_6af530518dfa46cda1c1229126305a98(N, _sum, items):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return j


def func_e779ad73fa15485c9b49163e36391e6b(N, _sum, items):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return part3


def func_0106334a43214687ba8a53af3bb0cc8d(N, _sum, items):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return part2


def func_074d5d5457bd499989c5895783c6f358(N, _sum, items):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return part


def func_67c5a25587764b54aa56bf22b82bf431(N, part, items):
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return j


def func_9b6d52129ffc428ab64af33506f6c10a(N, part, items):
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return i


def func_8f8a31f19baf42b5baa2101cfba0b056(N, part, items):
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return part2


def func_4ef3b0ea4e7e497c924bc4039b961d9b(N, part, items):
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return part3


def func_e92635fcaa714604b160579806d973f9(N, part, items):
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return part1


def func_a606cc07112a4235ad0fed245251ce5a(N, _sum, part, items):
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part3


def func_fbf77d99c07d452e8d9edad534c8f98a(N, _sum, part, items):
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return j


def func_14bf1f82e1904333a992951af4def6f0(N, _sum, part, items):
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part1


def func_3e1ad3fd09e44114928c9e81cef6fd11(N, _sum, part, items):
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return i


def func_9e9a7b8b27e245f8bfc3ebf95d71d104(N, _sum, part, items):
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part3


def func_f2e2cbee13284a0886818970ddd735df(N, _sum, part, items):
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part2


def func_8c2ccc2e91d64671bc1d42270dc7421a(N, _sum, part, items):
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part2


def func_0171368d3d654aea9c6ccad940e65eef(N, _sum, part, items):
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part1


def func_f642f6fc3173404db26db2d33db522c3(N, _sum, part, items):
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _i


def func_0209fb64b1184a1cbf0a060083d4ab17(N, _sum, part, items):
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return ans


def func_26eb5d4f59434cc98be121df78be2664(N, _sum, part, items):
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _j


def func_c351da84e6e646749606f7e2a479db7b(N, _sum, part, items):
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return ans


def func_e0a21307ad2e44fbbacc70276a3f0ad0(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    return i


def func_137b18dcf7b24b27b7bc2ba47df66604(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    return _sum


def func_34eb0be8f6104867ab95e5b48bb4497a(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    return part3


def func_2890fe821a4f401689c74851d0e90bf9(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    return part


def func_117ae607674f417aa20588b5497280e0(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    return items


def func_c62c32b095a34d56b25ff46fdc825ac0(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    return part1


def func_f4dd3dcb676d424f858695eb88049f53(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    return part2


def func_86deaa12f0b542519036cdee25cb4d27(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return i


def func_008ec253f77540ac87471978a1c26569(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return part3


def func_53bd6c2dcb744f968f68312640138dac(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return j


def func_e4cecf0a14b1442cb9500a4feb2a95bc(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return _sum


def func_5d8d0304af294211ae15eb0d284d8378(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return part2


def func_e59035b89dd64f71b57b382c830cb0b5(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return items


def func_bf31b68d8c5c491baf33b8656936158d(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return part


def func_c7c027bb9e0d4a98af2d166680bac41e(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return part1


def func_ae50cc59c2544b02bd996e7e8ac32b4f(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return j


def func_fb7a0342026b4a6bab13ffd9be4b02fc(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return part2


def func_8dd5e47dd32a4dafa293363d4f202cd5(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return part3


def func_144b688619794c09a83807fafd67e7fe(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return part


def func_72322a0174134183965e45f1b5db277e(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return _sum


def func_cd12cfe118cd4c2fb12a01b3b98f2028(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return part1


def func_2c09ef78b8154497926ba4bc67131ae9(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return i


def func_898e324322684768a9cdbb703dee290e(N, _sum, items):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return part1


def func_0352caa370a7403abd33e7a816094c32(N, _sum, items):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return part3


def func_12e14f54ed2f44cf93515004c63447c8(N, _sum, items):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return part2


def func_6ee30fa8e171419b85b7f923753a83c7(N, _sum, items):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return j


def func_f99933add4dd4402981c7d20810c9dcc(N, _sum, items):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return part


def func_63d8442717434d96be59df8a5c1872c3(N, _sum, items):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return i


def func_f39cea7f5d9949da8ebdf71ecef69ddd(N, _sum, part, items):
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return j


def func_9cc3a26bf3e34fb0a42bd16686fe317e(N, _sum, part, items):
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part1


def func_373048ee424e45dca5a433e7cf44431b(N, _sum, part, items):
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return ans


def func_70e6efa2b62b4aec899f4e1104312f0e(N, _sum, part, items):
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part3


def func_2700b8186cfe4ba6aebcc0ab9ef93e42(N, _sum, part, items):
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part2


def func_cc2d57d7bd0f49b283c16fd8184503ed(N, _sum, part, items):
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part1


def func_05b974ad0822464f84fe60e856d51a84(N, _sum, part, items):
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _i


def func_82f6c2821f434845bf543225cc80eef3(N, _sum, part, items):
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part2


def func_c818a87292f04269a4f6ac5481a5bc05(N, _sum, part, items):
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _j


def func_2e8006ed58c8404898f9d9ea4da391bc(N, _sum, part, items):
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part3


def func_23b84150b4914c79a5ae09dc82e9c733(N, _sum, part, items):
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return i


def func_41a36e88ed4446f4bfb1c96f53a6cb16(N, _sum, part, items):
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return ans


def func_499499a78c5f41a7866f8038cc8e2444(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return part2


def func_26872f7f651641c58df6b52b4b827ed6(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return part


def func_0a3f35ebb236454289a2af252e2f2a0f(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return part3


def func_056b7f86641940fe8f157c8029e84687(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return _sum


def func_32749ee612d940dcae896ca835f8b7e2(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return part1


def func_727506ba13e842ec8196e1a916957043(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return j


def func_b25f32b5bfd84ae39c488f6cf8bfbddf(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return items


def func_589c43e923db4dccafa3b6363d97b0a4(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return i


def func_a64db2f60d9f4a3babff5e784933c249(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return j


def func_d53f55dffa054042a899f8e84928f9ad(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return part


def func_67dddff898764810a1421329613f95e8(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return _sum


def func_43f8ebce25bd4b0cb76cdc346f307362(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return part2


def func_c8e8d1d9069e4ff4a3313e996ab92fd2(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return part1


def func_5de20b502a5f429e8604b3001d36302b(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return items


def func_a26866b447be435a8c8c52db4ba09a73(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return part3


def func_401e983473ff42a5a8acab30e24d0edf(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return i


def func_83418affbbce4522aa182bcdc9b9d84e(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return i


def func_dd4db3c1170d4af78e89845e7732e29e(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return part1


def func_67069a7f9fda4ede91de4d4e31f1f2ca(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return j


def func_ec193e1a98aa42e0ab9bd99820a489cc(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return part3


def func_03105e3b73424ba9899e4e17f67c22c1(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return part


def func_c3177b2d0e3b4a8e93596f33485a0ae3(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return _sum


def func_06326824824a4ad79bd34330c4c4795d(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return part2


def func_644dcb27dfaa46b78b0596c0b0a6471b(N, _sum, items):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part2


def func_b4efa46d90cc4cad9e175dfd9613dad3(N, _sum, items):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return j


def func_7411ce662398486d9410e73c6d4a29e2(N, _sum, items):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return i


def func_395b9e063eac4520b1b8d1f4d967d5fd(N, _sum, items):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part1


def func_5f6fcb11fe16436d8f3566dd1c37bd70(N, _sum, items):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part3


def func_e225fcadbd8342338bbc389248b55c5c(N, _sum, items):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _i


def func_7a7acbcd078645a9915d8730ea7dfcc7(N, _sum, items):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part1


def func_f5e807ac13c04d3cbfe2275fb40aa59c(N, _sum, items):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _j


def func_7e542c7d15be426eaa475f797e6408be(N, _sum, items):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part


def func_deae798a3eea4ce6b641765d62f72f34(N, _sum, items):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part2


def func_7c69ed29a2cb4b9594773010bf7e7e31(N, _sum, items):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part3


def func_09d0e74ad7e644dea3f9329dd48da8e0(N, _sum, items):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return ans


def func_77ac8683c68447beb89422b8adb43703(N, _sum, part, items):
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return ans


def func_525d19ba815d4e2f9b39f78fe7f6374b(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return part3


def func_37f2bcd7a16d47459c751167490290aa(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return part2


def func_0441ada393104f0d8f4c411b2406cb9d(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return items


def func_2955e9e9e01c4fe8963b486068a8799c(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return part1


def func_d910f8c55c8a4d289511125f51ba7691(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return part


def func_0a3484ae214249b8af47286517574986(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return _sum


def func_d000324b17ef44daa18dc506eba01ab3(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return i


def func_2bb4874c0fb947818f4199219dc0cb1c(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return j


def func_9f4378ef96ee4a8fbd9fd1fbb600bbdb(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return part3


def func_cdcc5300d6044ee4b460c34f35eca5e7(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return items


def func_f45628b05d5b42d991f0a7b58d3d519d(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return i


def func_ba65e8271e5c46808b84ce258f06cbc3(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return part


def func_4ff39aa0f0ef4fe99f2a65225c397600(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return j


def func_87469cf43191405cbfee2603645e32f8(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return part2


def func_2953dc5df454444c98525540b9d70bbc(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return part1


def func_3991b4e7fd554a8eac5366f4c677bd3a(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return _sum


def func_af0490eb38774118b20c3734a12b81d3(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _i


def func_6678d70eae454912936eeabf3329b9cb(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part1


def func_f9978a425beb4a688c99ebc63ba4df2a(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return i


def func_c062e95e5ec5456eb5aa851a78c321eb(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return j


def func_76e22ca1809146eab09703ec611828b9(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return ans


def func_4f3af54ce1ed4028af35067ddfddcbbe(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part2


def func_7fc43ec0cd914a178ce4669b37d6de18(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part2


def func_d76564d9cfa14fe79f5a907b9f8708f4(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part3


def func_b758a128f4ed4ef29b202b2e3b2bdf9e(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _j


def func_b0a78fb6b9aa40e38931ed765b67f5c1(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part3


def func_1c6a95d7bc1e4ae797182b3dde8977e7(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part


def func_3fbf6ac4ccbf4c22996b6b9514ca65dc(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _sum


def func_f1c5a76479604b88a56603fe6f16338b(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part1


def func_b3c56575812c448f8fe47f327569263b(N, _sum, items):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return ans


def func_d33e8c0402ae485b8d349d41b70e6956(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return part2


def func_63322b5faf9a47a291196e99d6415b2c(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return i


def func_9f78d5e9c08f4765b2092435effa1748(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return items


def func_76f99e5bd6c647fdad25959e62dce16d(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return j


def func_31fed92f52594971b580b7d304086cd5(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return part1


def func_e44cabd5f5ab4fc7a99698de6c5f2eac(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return part


def func_ebed8402a84c4aacb3ea72d82d8eb8ea(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return part3


def func_a1cfbd29c46a4930a2a44572c4aadbcd(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return _sum


def func_38ff056b18834646b15ff677d678093c(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part2


def func_827f6d2a49594084ad39a6c9c01e4820(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part2


def func_804d861e8e9e4b909f02fbf51d968e98(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _j


def func_e51abe5a44434eb9b2b2c612fe346751(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _sum


def func_8394267731f748c1a45087a8e91c17e8(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part1


def func_6ec8ab2c72a7416ba1e2629959c8d1e5(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part3


def func_afd0ca261f0a4128bd0461ecebc9af78(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part1


def func_d5896bb0312f4cd3bf7974f5ea750d74(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part3


def func_2b1905b7be79462a961bd967f1ea00ed(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return ans


def func_a38b9bf10d244609b0ae76dc0938a37b(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return items


def func_565def852ef043908f60561666394e7b(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part


def func_6c9613c471e049a9855dac29fdc3b9b6(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _i


def func_0897b3cfcb6845f9a349bb766bc7c479(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return i


def func_a0693b4cd6684473825b5f15f0092149(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return j


def func_efcdc11208d54127b60d4954cab47c07(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return ans


def func_2873f7b0e6f2494faca59c1053323730(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return i


def func_6ec1c4732c7b43679e46da326ca36000(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part1


def func_59404e6aba4d4d23ad707f2424485064(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _j


def func_ffd4dfde24584be9ab3758631a1578c8(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _i


def func_d8cd63dfd4ce4ccbb9ff189e6f6f7f4b(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part2


def func_c7ba9e780f68478387f23c7b866a8b9c(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part3


def func_c05bd0e1e28b45859fb8b86e1905723e(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part1


def func_9e9e20fb29f84a83904dc284f90beafe(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return items


def func_c82cefdf98b642b193b07a2e6413019f(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part2


def func_3ba8499c8e8541688d612a716d309792(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return ans


def func_3d1a640060ff4800987e5fc74c7ac26d(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _sum


def func_546b98d1ca8148c3903628b1dd33885f(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return j


def func_8cf864a14c044ce38dc0b38d5d5b6168(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part


def func_a05bb545ecd1480bbda2bc5f7a037e17(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part3


def func_4a167d14408e43f3af659f77239cad6a(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return ans


def func_6af08b6cb62a437cb15fbd185c2a65dd(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return ans


def func_3a7bdfe692ac4ed28ab9e9a4973a33b9(infile):
    """ parse input """
    N, p, q, r, s = map(int, infile.readline().split(' '))
    return s


def func_ccb4d93d42484ba7918d37af847f3b14(infile):
    """ parse input """
    N, p, q, r, s = map(int, infile.readline().split(' '))
    return p


def func_e9151b2e1c424168ad6b5041e76a2746(infile):
    """ parse input """
    N, p, q, r, s = map(int, infile.readline().split(' '))
    return q


def func_c128961ef661478a88dd5446318f9fec(infile):
    """ parse input """
    N, p, q, r, s = map(int, infile.readline().split(' '))
    return r


def func_841b10293b544607a5298e7020cd7966(infile):
    """ parse input """
    N, p, q, r, s = map(int, infile.readline().split(' '))
    return N


def func_d2ed1ac5e2e549f38f195e8892ce7632(infile):
    N, p, q, r, s = map(int, infile.readline().split(' '))
    return N, p, q, r, s


def func_893acf88bd484ef79a4f74e19e40a50e(infile):
    """ parse input """
    N, p, q, r, s = map(int, infile.readline().split(' '))
    return N, p, q, r, s


def func_67e764c7cd73482988d22e39288bff09():
    infile = open('test_files/Y14R5P1/A.in')
    T = int(infile.readline())
    return infile


def func_9026e155b30b4c44b8787b46b344515b():
    infile = open('test_files/Y14R5P1/A.in')
    T = int(infile.readline())
    return T
