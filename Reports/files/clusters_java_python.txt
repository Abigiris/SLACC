

****** Cluster 0 ******
public static Integer func_d36d3672a955463187549fa5fbb4c6cd(Integer c, Integer res) {
    res = res * 10;
    res = res + (c - 48);
    return res;
}
public static Integer func_27bf7cac0e944ed1bad4d7517345853a(Integer c, Integer res) {
    res = res * 10;
    res = res + (c - 48);
    return res;
}
public static Integer func_ff02f09ef86d43dd8c1024a2eac6e590(Integer c, Integer res) {
    res = res * 10;
    res = res + (c - 48);
    return res;
}


****** Cluster 1 ******
public static Integer func_5aa12f10fe824c6e9f30183bc8e5d204(Integer c, Integer res) {
    if (c < 48 || c > 57) {
        throw new InputMismatchException();
    }
    res = res * 10;
    return res;
}
public static Integer func_8f205748d83b423f85d0ba2b516c7531(Integer c, Integer res) {
    if (c < 48 || c > 57) {
        throw new InputMismatchException();
    }
    res = res * 10;
    return res;
}


****** Cluster 2 ******
public static Integer func_0aaf60e7b55e45be975f1bf4195f807b(Integer c, Integer res) {
    if (c < 48 || c > 57) {
        throw new InputMismatchException();
    }
    res = res * 10;
    res = res + (c - 48);
    return res;
}
public static Integer func_1787ef039af246ae93be618f51a31de2(Integer c, Integer res) {
    if (c < 48 || c > 57) {
        throw new InputMismatchException();
    }
    res = res * 10;
    res = res + (c - 48);
    return res;
}


****** Cluster 3 ******
public static Integer[] func_76fcb22e16d64bcb9f27ee7a5dd6e7dd(Integer size) {
    Integer[] order = new Integer[size.intValue()];
    for (int i = 0; i < size; ++i) {
        order[i] = i;
    }
    return order;
}
public static Integer[] func_3bbe3ff438d643bd927ae9711320396b(Integer size) {
    Integer[] order = new Integer[size.intValue()];
    for (int i = 0; i < size; ++i) {
        order[i] = i;
    }
    return order;
}
public static Integer[] func_a06b012aaf1245a2b5cfbb65da2d46b0(Integer n) {
    Integer[] answer = new Integer[n.intValue()];
    for (int i = 0; i < n; ++i) {
        answer[i] = i;
    }
    return answer;
}


****** Cluster 4 ******
public static String func_ef2d08d7e7e64a20bab382460d60799a(Integer[] array) {
    String s = "";
    for (int i = 0; i < array.length; ++i) {
        s = s + " " + array[i];
    }
    return s;
}
public static String func_7acfe2113cd34ffd9fd943f74f75eb37(Long[] array) {
    String s = "";
    for (int i = 0; i < array.length; ++i) {
        s = s + " " + array[i];
    }
    return s;
}


****** Cluster 5 ******
public static Long func_450ff22e4edb40eb823fdf198920f73b(Integer use, Long[] V) {
    long min = V[use - 1];
    return min;
}
public static Long func_9d601325dfc54d079005a2f6772f2b73(Integer use, Long[] V) {
    long min = V[use - 1];
    for (int i = 0; i < use; ++i) {
        V[i].longValue();
    }
    return min;
}
public static Long func_c7e2f7065e8a49c2a2e35c7e851c5268(Integer winningThings, Long[] x2) {
    long low = x2[winningThings - 1];
    return low;
}
public static Long func_42fccbda6322456fa7a84c604104309b(Integer winningThings, Long[] x2) {
    long low = x2[winningThings - 1];
    for (int i = 0; i < winningThings; ++i) {
        x2[i].longValue();
    }
    return low;
}


****** Cluster 6 ******
public static Long func_d9903ea6276f48d99d7fbb01cd534fca(Integer use, Long[] V, Long min) {
    long minspaces = 0L;
    for (int i = 0; i < use; ++i) {
        minspaces += min - V[i];
    }
    return minspaces;
}
public static Long func_49b7ec2c3b924281ad68b2b4fee45fde(Integer to, Long[] a2, Long value) {
    long res = 0L;
    for (int i = 0; i < to; ++i) {
        res += value - a2[i];
    }
    return res;
}


****** Cluster 7 ******
public static Long func_2b70131246574158a9b16715ac726f1f(Integer use, Long[] V) {
    long min = V[use - 1];
    long minspaces = 0L;
    for (int i = 0; i < use; ++i) {
        minspaces += min - V[i];
    }
    return minspaces;
}
public static Long func_3b6e199c7d354ab79ab173456ae1067e(Integer winningThings, Long[] x2) {
    long low = x2[winningThings - 1];
    long payMoney = 0L;
    for (int i = 0; i < winningThings; ++i) {
        payMoney += low - x2[i];
    }
    return payMoney;
}


****** Cluster 8 ******
public static Integer func_347a308b48ad42459b0e856240dbb2f5$601bb27(Integer Lb, Integer La, Integer Fa) {
    int Tab = 100 * La + Lb * (100 - Fa);
    return Tab;
}
public static Integer func_e7273da11dc345d9bfa9cbc432ecec94$601bb27(Integer Lb, Integer La, Integer Fa) {
    int Tab = 100 * La + Lb * (100 - Fa);
    Lb.intValue();
    La.intValue();
    return Tab;
}


****** Cluster 9 ******
public static Long func_a9f008ec0b494675babc9259be195a6a(Long lowestBet, Integer winningThings, Long[] x2) {
    long ourWin = 0L;
    for (int i = 0; i < winningThings; ++i) {
        ourWin += lowestBet - x2[i];
    }
    return ourWin;
}
public static long func_b40b3748eb1541b2a33d6daa324b1281(Long min, Integer nuse, Long[] A3) {
    long money_counted = 0L;
    for (int i = 0; i < nuse; ++i) {
        money_counted += min - A3[i];
    }
    return money_counted;
}
public static Long func_d2d48de0e2d54c17a69caabb21813db8(Long min, Integer nuse, Long[] A3) {
    long money_counted = 0L;
    for (int i = 0; i < nuse; ++i) {
        money_counted += min - A3[i];
    }
    return money_counted;
}
public static Long func_2698c270a76d4999be515aad57f00919(Long l, Integer win, Long[] a2) {
    long cur = 0L;
    for (int i = 0; i < win; ++i) {
        cur += l - a2[i];
    }
    return cur;
}
public static Double func_a2d694af04424c7e8c36478c77add30d(Long l, Integer win, Long[] a2) {
    long cur = 0L;
    for (int i = 0; i < win; ++i) {
        cur += l - a2[i];
    }
    double sum = cur;
    return sum;
}
public static Long func_7beab28cdbd4436f8a6bfcedc4b24dc7(Long l, Integer win, Long[] a2) {
    long cur = 0L;
    for (int i = 0; i < win; ++i) {
        cur += l - a2[i];
    }
    return cur;
}


****** Cluster 10 ******
public static Integer[] func_5f8aab7c173c4a118967db6382b6c64c(Integer n) {
    n.intValue();
    Integer[] I = new Integer[n.intValue()];
    return I;
}
public static Integer[] func_d26edc6ab47e47c6a634a6e3f861f010(Integer n) {
    n.intValue();
    n.intValue();
    Integer[] I = new Integer[n.intValue()];
    return I;
}


****** Cluster 11 ******
public static Integer func_096bca4b2ffe48b0957c20d02c780fd3(Integer[] p, Integer i, Integer j) {
    int x2 = p[i];
    p[i.intValue()] = p[j];
    return x2;
}
public static Integer func_a18259abe06a4eb3b737f0bc2d42d15a(Integer[] p, Integer i, Integer j) {
    int x2 = p[i];
    p[i.intValue()] = p[j];
    p[j.intValue()] = x2;
    return x2;
}
public static Integer func_76d95a4f043f45d286b42b94dc6e2189(Integer[] sol, Integer a2, Integer b) {
    int t = sol[a2];
    sol[a2.intValue()] = sol[b];
    return t;
}
public static Integer func_037826ab1f8a470594be39625088321b(Integer[] sol, Integer a2, Integer b) {
    int t = sol[a2];
    sol[a2.intValue()] = sol[b];
    sol[b.intValue()] = t;
    return t;
}


****** Cluster 12 ******
public static Integer func_7330d21586ab485aa5f56a593969f985(Integer[] p, Integer i, Integer j, Integer x2) {
    p[i.intValue()] = p[j];
    p[j.intValue()] = x2;
    return x2;
}
public static Long func_b9d3ac3240f9489195a62073ee3bb114$922d671(Long[] partials, Integer i, Integer guess, Long rest) {
    long second = partials[guess] - partials[i];
    rest.longValue();
    return second;
}


****** Cluster 13 ******
public static Integer func_181771bef53a4affa8425686f0d62606$65bf6f15(Integer i, Integer j, Integer[] len) {
    Integer x2 = len[i];
    len[i.intValue()] = len[j];
    return x2;
}
public static Integer func_a1290e59612c458a80028e0b86c62b9a$65bf6f15(Integer i, Integer j, Integer[] ind) {
    Integer x2 = ind[i];
    ind[i.intValue()] = ind[j];
    return x2;
}
public static Integer func_83ab2ec24e5f4ed09d2fc529801542e7$65bf6f15(Integer i, Integer j, Integer[] len) {
    Integer x2 = len[i];
    len[i.intValue()] = len[j];
    len[j.intValue()] = x2;
    return x2;
}
public static Integer func_2d89e809d1514ae8b3e26b78c230266e$65bf6f15(Integer i, Integer j, Integer[] ind) {
    Integer x2 = ind[i];
    ind[i.intValue()] = ind[j];
    ind[j.intValue()] = x2;
    return x2;
}
public static Integer func_7b7f7134903c4c28bf98c717c324196e(Integer i, Integer j, Integer[] ps) {
    int s1 = ps[i];
    ps[j].intValue();
    ps[i].intValue();
    return s1;
}


****** Cluster 14 ******
public static Integer func_4a3b414c2fb344b08f9ee688a0164628(Integer i, Integer j, Integer x2, Integer[] len) {
    len[i.intValue()] = len[j];
    len[j.intValue()] = x2;
    return x2;
}
public static Integer func_e4322ff229024e999d2071a174eaf1e2(Integer i, Integer j, Integer x2, Integer[] ind) {
    ind[i.intValue()] = ind[j];
    ind[j.intValue()] = x2;
    return x2;
}
public static Integer func_b4d9de56326a4543ae094a6b6287a085(Integer i, Integer N, Long max, Long[] psum) {
    long get;
    int lo = i + 1;
    int hi = N;
    long left = psum[N] - psum[i];
    while (lo < hi) {
        long s2;
        int mid = lo + hi >> 1;
        long s1 = psum[mid] - psum[i];
        if (s1 >= (s2 = left - s1)) {
            hi = mid;
            continue;
        }
        lo = mid + 1;
    }
    long t = psum[lo] - psum[i];
    long a2 = Math.max(t, left - t);
    if (lo > i + 1) {
        t = psum[lo - 1] - psum[i];
        a2 = Math.min(a2, Math.max(t, left - t));
    }
    if ((get = psum[N] - Math.max(psum[i], a2)) > max) {
        Long.valueOf(get);
    }
    return lo;
}
public static Long func_aec175d58df44017ab0f1c986aa65529(Integer i, Integer N, Long max, Long[] psum) {
    long get;
    int lo = i + 1;
    int hi = N;
    long left = psum[N] - psum[i];
    while (lo < hi) {
        long s2;
        int mid = lo + hi >> 1;
        long s1 = psum[mid] - psum[i];
        if (s1 >= (s2 = left - s1)) {
            hi = mid;
            continue;
        }
        lo = mid + 1;
    }
    long t = psum[lo] - psum[i];
    long a2 = Math.max(t, left - t);
    if (lo > i + 1) {
        t = psum[lo - 1] - psum[i];
        a2 = Math.min(a2, Math.max(t, left - t));
    }
    if ((get = psum[N] - Math.max(psum[i], a2)) > max) {
        Long.valueOf(get);
    }
    return t;
}
public static Long func_ab6a3a661572484dbb77428f85a7b88c(Integer i, Integer N, Long max, Long[] psum) {
    long get;
    int lo = i + 1;
    int hi = N;
    long left = psum[N] - psum[i];
    while (lo < hi) {
        long s2;
        int mid = lo + hi >> 1;
        long s1 = psum[mid] - psum[i];
        if (s1 >= (s2 = left - s1)) {
            hi = mid;
            continue;
        }
        lo = mid + 1;
    }
    long t = psum[lo] - psum[i];
    long a2 = Math.max(t, left - t);
    if (lo > i + 1) {
        t = psum[lo - 1] - psum[i];
        a2 = Math.min(a2, Math.max(t, left - t));
    }
    if ((get = psum[N] - Math.max(psum[i], a2)) > max) {
        Long.valueOf(get);
    }
    return a2;
}
public static Long func_23c965aca9ef4c219a41ac3bd114a3ee(Integer i, Integer N, Long max, Long[] psum) {
    long get;
    int lo = i + 1;
    int hi = N;
    long left = psum[N] - psum[i];
    while (lo < hi) {
        long s2;
        int mid = lo + hi >> 1;
        long s1 = psum[mid] - psum[i];
        if (s1 >= (s2 = left - s1)) {
            hi = mid;
            continue;
        }
        lo = mid + 1;
    }
    long t = psum[lo] - psum[i];
    long a2 = Math.max(t, left - t);
    if (lo > i + 1) {
        t = psum[lo - 1] - psum[i];
        a2 = Math.min(a2, Math.max(t, left - t));
    }
    if ((get = psum[N] - Math.max(psum[i], a2)) > max) {
        max = get;
    }
    return max;
}
public static Long func_b8b508a2efdc43ef90cdacfe32a41258(Integer i, Integer N, Long max, Long[] psum) {
    long get;
    int lo = i + 1;
    int hi = N;
    long left = psum[N] - psum[i];
    while (lo < hi) {
        long s2;
        int mid = lo + hi >> 1;
        long s1 = psum[mid] - psum[i];
        if (s1 >= (s2 = left - s1)) {
            hi = mid;
            continue;
        }
        lo = mid + 1;
    }
    long t = psum[lo] - psum[i];
    long a2 = Math.max(t, left - t);
    if (lo > i + 1) {
        t = psum[lo - 1] - psum[i];
        a2 = Math.min(a2, Math.max(t, left - t));
    }
    if ((get = psum[N] - Math.max(psum[i], a2)) > max) {
        Long.valueOf(get);
    }
    return get;
}
public static Long func_4483ca7a505a49178c98f59620ab0554(Integer i, Integer N, Long max, Long[] psum) {
    long get;
    int lo = i + 1;
    int hi = N;
    long left = psum[N] - psum[i];
    while (lo < hi) {
        long s2;
        int mid = lo + hi >> 1;
        long s1 = psum[mid] - psum[i];
        if (s1 >= (s2 = left - s1)) {
            hi = mid;
            continue;
        }
        lo = mid + 1;
    }
    long t = psum[lo] - psum[i];
    long a2 = Math.max(t, left - t);
    if (lo > i + 1) {
        t = psum[lo - 1] - psum[i];
        a2 = Math.min(a2, Math.max(t, left - t));
    }
    if ((get = psum[N] - Math.max(psum[i], a2)) > max) {
        Long.valueOf(get);
    }
    return left;
}
public static Integer func_67649fe5c9684cf28f539c501ab637d1(Integer i, Integer N, Long max, Long[] psum) {
    long get;
    int lo = i + 1;
    int hi = N;
    long left = psum[N] - psum[i];
    while (lo < hi) {
        long s2;
        int mid = lo + hi >> 1;
        long s1 = psum[mid] - psum[i];
        if (s1 >= (s2 = left - s1)) {
            hi = mid;
            continue;
        }
        lo = mid + 1;
    }
    long t = psum[lo] - psum[i];
    long a2 = Math.max(t, left - t);
    if (lo > i + 1) {
        t = psum[lo - 1] - psum[i];
        a2 = Math.min(a2, Math.max(t, left - t));
    }
    if ((get = psum[N] - Math.max(psum[i], a2)) > max) {
        Long.valueOf(get);
    }
    return hi;
}


****** Cluster 15 ******
public static Integer func_2cbced0b8e4e4088a5502a624f459335(Integer[] p, Integer i, Integer j, Integer x2, Integer[] len) {
    p[j.intValue()] = x2;
    x2 = len[i];
    return x2;
}
public static Integer func_e8011877de1c427da286bad026856038(Integer[] p, Integer i, Integer j, Integer x2, Integer[] len) {
    p[i.intValue()] = p[j];
    p[j.intValue()] = x2;
    x2 = len[i];
    return x2;
}
public static Integer func_7d54fe57f4524bf1b807891a284c4f58(Integer[] p, Integer i, Integer j, Integer x2, Integer[] len) {
    p[j.intValue()] = x2;
    x2 = len[i];
    len[i.intValue()] = len[j];
    return x2;
}
public static Integer func_bb532c7d1bf04367b7636e83d6e1eaf3(Integer[] p, Integer i, Integer j, Integer x2, Integer[] len) {
    p[i.intValue()] = p[j];
    p[j.intValue()] = x2;
    x2 = len[i];
    len[i.intValue()] = len[j];
    return x2;
}
public static Integer func_02986a9fe43248e8bfdbbbf6c51e65a3(Integer[] p, Integer i, Integer j, Integer x2, Integer[] len) {
    p[j.intValue()] = x2;
    x2 = len[i];
    len[i.intValue()] = len[j];
    len[j.intValue()] = x2;
    return x2;
}
public static Integer func_f5a435861050413390b33f81bfaaabd0(Integer[] p, Integer i, Integer j, Integer x2, Integer[] len) {
    p[i.intValue()] = p[j];
    p[j.intValue()] = x2;
    x2 = len[i];
    len[i.intValue()] = len[j];
    len[j.intValue()] = x2;
    return x2;
}


****** Cluster 16 ******
public static Double func_13f87247495a40ceab8763659e7cdc8d(Double l, Double r) {
    double mid = (l + r) / 2.0;
    return mid;
}
public static Double func_f5c15f2aae364caa866e0fab31222cd2(Double L, Double R) {
    double m = (L + R) / 2.0;
    return m;
}
public static Double func_b82d349b073b48ec94ddd0bfbbfbf08b(Double r, Double l) {
    double mid = (l + r) / 2.0;
    return mid;
}
public static Double func_f46fe82e8c5c4bda990763647b2a835c$71ab6c5c(Double right, Double left) {
    Double x2 = (left + right) / 2.0;
    new Point(x2, 0.0).line(new Point(x2, 1.0));
    return x2;
}
public static Double func_ce5f09021a98473fb3c9e6bb47f82669$71ab6c5c(Double right, Double left) {
    Double x2 = (left + right) / 2.0;
    new Point(x2, 0.0).line(new Point(x2, 1.0));
    return x2;
}
public static Double func_60c148a674434640bcff438a249d8fda(Double max, Double min) {
    double mid = (min + max) / 2.0;
    return mid;
}
public static Double func_8c385be30f234e1393f8ec8acb164861(Double max, Double min) {
    double mid = (min + max) / 2.0;
    double[] poly = new double[8];
    poly[0] = mid;
    return mid;
}
public static Double func_01df8041528c4b69ab2fc87aff3b0ec1(Double max, Double min) {
    double mid = (min + max) / 2.0;
    double[] poly = new double[8];
    poly[0] = mid;
    poly[1] = 1001.0;
    return mid;
}
public static Double func_d47c889e30b24688b0c53a4a03a36f4d(Double max, Double min) {
    double mid = (min + max) / 2.0;
    double[] poly = new double[8];
    poly[0] = mid;
    poly[1] = 1001.0;
    poly[2] = mid;
    return mid;
}
public static Double func_2803b8cf5e8747bcbf42baeeb0bf9c9c(Double max, Double min) {
    double mid = (min + max) / 2.0;
    double[] poly = new double[8];
    poly[0] = mid;
    poly[1] = 1001.0;
    poly[2] = mid;
    poly[3] = -1001.0;
    return mid;
}


****** Cluster 17 ******
public static Double func_39877f8f2533497daaf364d1e4383172(Integer i, Integer[] xl, Integer[] yl) {
    xl[i].intValue();
    double yp = yl[i].intValue();
    return yp;
}
public static Double func_36f6dac5ef424bcb85ebb315f7356a6c(Integer i, Integer[] xu, Integer[] yu) {
    xu[i].intValue();
    double yp = yu[i].intValue();
    return yp;
}


****** Cluster 18 ******
public static Double func_29a5b2b4a58747c48866fbc18d62781c(Double m, Integer i, Integer[] xl, Integer[] yl) {
    xl[i].intValue();
    double yp = yl[i].intValue();
    if ((double) xl[i].intValue() >= m) {
        double xp = m;
        yp = (double) yl[i - 1].intValue() + (double) (yl[i] - yl[i - 1]) * (xp - (double) xl[i - 1].intValue()) / (0.0 + (double) xl[i].intValue() - (double) xl[i - 1].intValue());
    }
    return yp;
}
public static Double func_9cf4905581c74d62beb100743436e0b6$2690073a(Double m, Integer i, Integer[] xl, Integer[] yl) {
    double yp = yl[i].intValue();
    if ((double) xl[i].intValue() >= m) {
        Double xp = m;
        yp = (double) yl[i - 1].intValue() + (double) (yl[i] - yl[i - 1]) * (xp - (double) xl[i - 1].intValue()) / (0.0 + (double) xl[i].intValue() - (double) xl[i - 1].intValue());
    }
    return yp;
}


****** Cluster 19 ******
public static Long func_4cef831bb794496e94c44e632504f46a(Long lowestBet, Integer winningThings, Long ourWin, Long[] x2) {
    for (int i = 0; i < winningThings; ++i) {
        ourWin = ourWin + (lowestBet - x2[i]);
    }
    return ourWin;
}
public static Double func_2a0b641f5e504bf185aef1e69c0b2a28(Long l, Integer win, Long cur, Long[] a2) {
    for (int i = 0; i < win; ++i) {
        cur = cur + (l - a2[i]);
    }
    double sum = cur.longValue();
    return sum;
}
public static Long func_1ebb4851c30d4a408a29e7fbfb59e5ba(Long l, Integer win, Long cur, Long[] a2) {
    for (int i = 0; i < win; ++i) {
        cur = cur + (l - a2[i]);
    }
    cur.longValue();
    return cur;
}


****** Cluster 20 ******
public static Double func_7ee70affd1a946afb23a9f028ce63b49(Integer i, Integer[] xl, Integer[] yl) {
    double xp = xl[i].intValue();
    yl[i].intValue();
    return xp;
}
public static Double func_794f1ff5a9344f418c030a4472aa93b3(Integer i, Integer[] xu, Integer[] yu) {
    double xp = xu[i].intValue();
    yu[i].intValue();
    return xp;
}


****** Cluster 21 ******
public static Integer func_99869688a5dc488aa46d002a46bab29c(Long first, Long remaining, Integer count, Integer at, Long answer, Long[] suffixes) {
    int at1 = -at.intValue() - 1;
    int at2 = -at.intValue() - 2;
    if (at1 >= 0 && at1 <= count) {
        Long.valueOf(Math.min(answer, Math.max(first, Math.max(suffixes[at1], remaining - suffixes[at1]))));
    }
    return at2;
}
public static Integer func_df4580f116ad4b7c8f47d8e1f0eddeaa(Long first, Long remaining, Integer count, Integer at, Long answer, Long[] suffixes) {
    int at1 = -at.intValue() - 1;
    int at2 = -at.intValue() - 2;
    if (at1 >= 0 && at1 <= count) {
        answer = Math.min(answer, Math.max(first, Math.max(suffixes[at1], remaining - suffixes[at1])));
    }
    if (at2 >= 0 && at2 <= count) {
        Long.valueOf(Math.min(answer, Math.max(first, Math.max(suffixes[at2], remaining - suffixes[at2]))));
    }
    return at2;
}


****** Cluster 22 ******
public static Integer func_ea60ff4cbfeb45f9aadc0641a28faacc(Long first, Long remaining, Integer count, Integer at, Long answer, Long[] suffixes) {
    int at1 = -at.intValue() - 1;
    at.intValue();
    if (at1 >= 0 && at1 <= count) {
        Long.valueOf(Math.min(answer, Math.max(first, Math.max(suffixes[at1], remaining - suffixes[at1]))));
    }
    return at1;
}
public static Integer func_103bad4927e14884bce324931bba956b(Long first, Long remaining, Integer count, Integer at, Long answer, Long[] suffixes) {
    int at1 = -at.intValue() - 1;
    int at2 = -at.intValue() - 2;
    if (at1 >= 0 && at1 <= count) {
        answer = Math.min(answer, Math.max(first, Math.max(suffixes[at1], remaining - suffixes[at1])));
    }
    if (at2 >= 0 && at2 <= count) {
        Long.valueOf(Math.min(answer, Math.max(first, Math.max(suffixes[at2], remaining - suffixes[at2]))));
    }
    return at1;
}


****** Cluster 23 ******
public static Long func_3079268f39ce4f879b7a6912d177b800(Long first, Long remaining, Integer count, Integer at, Long answer, Long[] suffixes) {
    int at1 = -at.intValue() - 1;
    at.intValue();
    if (at1 >= 0 && at1 <= count) {
        answer = Math.min(answer, Math.max(first, Math.max(suffixes[at1], remaining - suffixes[at1])));
    }
    return answer;
}
public static Long func_f4bff435e2764c7db88755d75bee5e36(Long first, Long remaining, Integer count, Integer at, Long answer, Long[] suffixes) {
    int at1 = -at.intValue() - 1;
    int at2 = -at.intValue() - 2;
    if (at1 >= 0 && at1 <= count) {
        answer = Math.min(answer, Math.max(first, Math.max(suffixes[at1], remaining - suffixes[at1])));
    }
    if (at2 >= 0 && at2 <= count) {
        answer = Math.min(answer, Math.max(first, Math.max(suffixes[at2], remaining - suffixes[at2])));
    }
    return answer;
}


****** Cluster 24 ******
public static Long func_2fc58552e0b34ab0b120fe5ed0c626d3(Integer winningThings, Long low, Long[] x2) {
    long payMoney = 0L;
    for (int i = 0; i < winningThings; ++i) {
        payMoney += low - x2[i];
    }
    return payMoney;
}
public static Long func_a0b0fced9bbd469eba80da684fb189f3(Integer count, Long bet, Long[] a2) {
    long result = 0L;
    for (int i = 0; i < count; ++i) {
        result += bet - a2[i];
    }
    return result;
}


****** Cluster 25 ******
public static Integer func_5f075ac2f7fc4106a83223f229d9e401$5dc4c42d(Integer i, Integer j, Integer[] len, Integer[] ind) {
    Integer x2 = len[i];
    len[i.intValue()] = len[j];
    len[j.intValue()] = x2;
    x2 = ind[i];
    return x2;
}
public static Integer func_4487f236daa5433d98665f7cd6f0f2a2$5dc4c42d(Integer i, Integer j, Integer[] len, Integer[] ind) {
    Integer x2 = len[i];
    len[i.intValue()] = len[j];
    len[j.intValue()] = x2;
    x2 = ind[i];
    ind[i.intValue()] = ind[j];
    return x2;
}
public static Integer func_bca1a362c49b4807ae01dc398500178b$5dc4c42d(Integer i, Integer j, Integer[] len, Integer[] ind) {
    Integer x2 = len[i];
    len[i.intValue()] = len[j];
    len[j.intValue()] = x2;
    x2 = ind[i];
    ind[i.intValue()] = ind[j];
    ind[j.intValue()] = x2;
    return x2;
}


****** Cluster 26 ******
public static long func_61054987398e453db3c7dc33ce74c482(Long res, Integer to, Long[] a2, Long value) {
    for (int i = to.intValue(); i < 37; ++i) {
        if (a2[i] > value)
            continue;
        res = res + (value + 1L - a2[i]);
    }
    return res;
}
public static Long func_c5578c4fb5d44b0dbe3c821b3108b831(Long res, Integer to, Long[] a2, Long value) {
    for (int i = to.intValue(); i < 37; ++i) {
        if (a2[i] > value)
            continue;
        res = res + (value + 1L - a2[i]);
    }
    return res;
}


****** Cluster 27 ******
public static Long func_7f1db82af2bf4980ab4dbbe0904e0d48(Integer count, Long[] partial, Long[] suffixes) {
    for (int i = 0; i <= count; ++i) {
        suffixes[i] = partial[count] - partial[count - i];
    }
    long answer = partial[count];
    return answer;
}
public static Long func_f6468e16c0414018b31c636053b079f9(Integer count, Long[] partial, Long[] suffixes) {
    for (int i = 0; i <= count; ++i) {
        suffixes[i] = partial[count] - partial[count - i];
    }
    long answer = partial[count];
    for (int i = 0; i < count; ++i) {
        long first = partial[i] - partial[0];
        if (first > answer)
            continue;
        long remaining = partial[count] - first;
        int at = Arrays.binarySearch((Object[]) suffixes, (Object) (remaining >> 1));
        if (at >= 0) {
            answer = Math.min(answer, Math.max(first, Math.max(suffixes[at], remaining - suffixes[at])));
            continue;
        }
        int at1 = -at - 1;
        int at2 = -at - 2;
        if (at1 >= 0 && at1 <= count) {
            answer = Math.min(answer, Math.max(first, Math.max(suffixes[at1], remaining - suffixes[at1])));
        }
        if (at2 < 0 || at2 > count)
            continue;
        answer = Math.min(answer, Math.max(first, Math.max(suffixes[at2], remaining - suffixes[at2])));
    }
    return answer;
}


****** Cluster 28 ******
public static Long func_291256a3245f4580a8f5847b1926d583(Integer count, Long[] partial) {
    long[] suffixes = new long[count + 1];
    for (int i = 0; i <= count; ++i) {
        suffixes[i] = partial[count] - partial[count - i];
    }
    long answer = partial[count];
    return answer;
}
public static Long func_ca21435672c24cdfbcbacce2ec499914(Integer count, Long[] partial) {
    long[] suffixes = new long[count + 1];
    for (int i = 0; i <= count; ++i) {
        suffixes[i] = partial[count] - partial[count - i];
    }
    long answer = partial[count];
    for (int i = 0; i < count; ++i) {
        long first = partial[i] - partial[0];
        if (first > answer)
            continue;
        long remaining = partial[count] - first;
        int at = Arrays.binarySearch(suffixes, remaining >> 1);
        if (at >= 0) {
            answer = Math.min(answer, Math.max(first, Math.max(suffixes[at], remaining - suffixes[at])));
            continue;
        }
        int at1 = -at - 1;
        int at2 = -at - 2;
        if (at1 >= 0 && at1 <= count) {
            answer = Math.min(answer, Math.max(first, Math.max(suffixes[at1], remaining - suffixes[at1])));
        }
        if (at2 < 0 || at2 > count)
            continue;
        answer = Math.min(answer, Math.max(first, Math.max(suffixes[at2], remaining - suffixes[at2])));
    }
    return answer;
}


****** Cluster 29 ******
public static Long func_d03dad5e1fb34aa3a7bc6ef4b7e23e92(Long value, Long[] a2, Integer to) {
    long res = 0L;
    for (int i = 0; i < to; ++i) {
        res += value - a2[i];
    }
    return res;
}
public static Long func_730555d980b64e6aaa5629cd95e12304(Long value, Long[] a2, Integer to) {
    long res = 0L;
    for (int i = 0; i < to; ++i) {
        res += value - a2[i];
    }
    to.intValue();
    return res;
}


****** Cluster 30 ******
public static Double func_57f36a99de7d43188b94bd43059476b5$2690073a(Integer i, Double m, Integer[] xu, Integer[] yu) {
    double yp = yu[i].intValue();
    if ((double) xu[i].intValue() >= m) {
        Double xp = m;
        yp = (double) yu[i - 1].intValue() + (double) (yu[i] - yu[i - 1]) * (xp - (double) xu[i - 1].intValue()) / (0.0 + (double) xu[i].intValue() - (double) xu[i - 1].intValue());
    }
    return yp;
}
public static Double func_bf4ba96482554ddca28a200f485ff99e(Integer i, Double m, Integer[] xu, Integer[] yu) {
    xu[i].intValue();
    double yp = yu[i].intValue();
    if ((double) xu[i].intValue() >= m) {
        double xp = m;
        yp = (double) yu[i - 1].intValue() + (double) (yu[i] - yu[i - 1]) * (xp - (double) xu[i - 1].intValue()) / (0.0 + (double) xu[i].intValue() - (double) xu[i - 1].intValue());
    }
    return yp;
}


****** Cluster 31 ******
public static Long func_55eeebd340e04ce1b2541d73af8536a5(Long value, Long[] a2, Long res, Integer to) {
    for (int i = 0; i < to; ++i) {
        res = res + (value - a2[i]);
    }
    res.longValue();
    to.intValue();
    return res;
}
public static Long func_686f68ad33254559bcf2380fd2dccf0c(Long value, Long[] a2, Long res, Integer to) {
    for (int i = 0; i < to; ++i) {
        res = res + (value - a2[i]);
    }
    return res;
}


****** Cluster 32 ******
public static String func_8dce90f139c04b8ab723b8bef5b37b0c(Integer[] sol) {
    String ret = "";
    for (int i = 0; i < sol.length; ++i) {
        if (i > 0) {
            ret = ret + " ";
        }
        ret = ret + sol[i];
    }
    return ret;
}
public static String func_51145b7e1daf46c3bc50f5dc715be04b(Integer[] sol) {
    String ret = "";
    for (int i = 0; i < sol.length; ++i) {
        if (i > 0) {
            ret = ret + " ";
        }
        ret = ret + sol[i];
    }
    return ret;
}


****** Cluster 33 ******
public static String func_42f063d7ce34476abf15a3d6dd3069dc(String ret, Integer[] sol) {
    for (int i = 0; i < sol.length; ++i) {
        if (i > 0) {
            ret = ret + " ";
        }
        ret = ret + sol[i];
    }
    return ret;
}
public static String func_b36d40a9ccc0444e830e55d423bbe25b(String ret, Integer[] sol) {
    for (int i = 0; i < sol.length; ++i) {
        if (i > 0) {
            ret = ret + " ";
        }
        ret = ret + sol[i];
    }
    return ret;
}


****** Cluster 34 ******
public static Integer func_152102a3f7884909860ce73eca138eff(Integer res, Integer c) {
    if (c < 48 || c > 57) {
        throw new InputMismatchException();
    }
    res = res * 10;
    return res;
}
public static Integer func_7747795ccd634964a0998ac5158519f7(Integer res, Integer c) {
    if (c < 48 || c > 57) {
        throw new InputMismatchException();
    }
    res = res * 10;
    return res;
}
public static Long func_847e38dd9f064ba8a0f986ffa6a20a84(Long res, Integer c) {
    if (c < 48 || c > 57) {
        throw new InputMismatchException();
    }
    res = res * 10L;
    return res;
}
public static Integer func_147b62a51c5f4bc1ad2af294a999c6ba(Integer res, Integer c) {
    if (c < 48 || c > 57) {
        throw new InputMismatchException();
    }
    res = res * 10;
    return res;
}


****** Cluster 35 ******
public static Integer func_fd8cfc1ac3b4437da4938a82488aa77d(Integer res, Integer c) {
    res = res * 10;
    res = res + (c - 48);
    return res;
}
public static Integer func_b8c821f0d5a047f08fa5ae0b325dc364(Integer res, Integer c) {
    res = res * 10;
    res = res + (c - 48);
    return res;
}
public static Long func_1f6887824cfc41c49b64e9fe20dd2a98(Long res, Integer c) {
    res = res * 10L;
    res = res + (long) (c - 48);
    return res;
}
public static Long func_e553cb1c3d174ff1b1991a21374bee9c(Long res, Integer c) {
    res = res * 10L;
    res = res + (long) (c - 48);
    return res;
}
public static Integer func_dffdd223383446f1a191e0e402b43d78(Integer res, Integer c) {
    res = res * 10;
    res = res + (c - 48);
    return res;
}


****** Cluster 36 ******
public static Integer func_818e78c6fb2a43b993799ed935e3bfaf(Integer res, Integer c) {
    if (c < 48 || c > 57) {
        throw new InputMismatchException();
    }
    res = res * 10;
    res = res + (c - 48);
    return res;
}
public static Integer func_887e2518f2414970a08900a66378d181(Integer res, Integer c) {
    if (c < 48 || c > 57) {
        throw new InputMismatchException();
    }
    res = res * 10;
    res = res + (c - 48);
    return res;
}
public static Long func_3e8a25f746dd46e8aed5daba05a363fd(Long res, Integer c) {
    if (c < 48 || c > 57) {
        throw new InputMismatchException();
    }
    res = res * 10L;
    res = res + (long) (c - 48);
    return res;
}
public static Integer func_9926bb9597404b0eaeb2e0be5b94bf6b(Integer res, Integer c) {
    if (c < 48 || c > 57) {
        throw new InputMismatchException();
    }
    res = res * 10;
    res = res + (c - 48);
    return res;
}


****** Cluster 37 ******
public static String[] func_8ea6b3aae3854971bdf187e82dab9fce(String line2) {
    System.out.println(line2);
    String[] ss = line2.trim().split(" ");
    return ss;
}
public static String[] func_3fb566b6f8fc4f358e701f1c841b706f$407225a3(String line2) {
    System.out.println(line2);
    String[] ss = line2.trim().split(" ");
    return ss;
}


****** Cluster 38 ******
public static String[] func_bfcd67390dbd4c8583a1debacec82a8a(Integer n, String line2) {
    String[] ss = line2.trim().split(" ");
    n.intValue();
    return ss;
}
public static String[] func_ff98d7674f33495baf65579b0c5a2c52$60acba(Integer n, String line2) {
    String[] ss = line2.trim().split(" ");
    n.intValue();
    return ss;
}
public static String[] func_684aa801e6314017aa4526ecedf99ce3(Integer n, String line2) {
    System.out.println(line2);
    String[] ss = line2.trim().split(" ");
    n.intValue();
    return ss;
}
public static String[] func_3736babf5ed74e2b9a34ffdbd9b42779$60acba(Integer n, String line2) {
    System.out.println(line2);
    String[] ss = line2.trim().split(" ");
    n.intValue();
    return ss;
}


****** Cluster 39 ******
public static Long func_9dfbe1708e1c4d2db879eafe45c0a3f8(Long ans, Integer i, Long third, Long[] A3, Integer j) {
    long first = A3[j + 2];
    long second = A3[i + 1] - A3[j + 2];
    ans = Math.min(ans, Math.max(first, Math.max(second, third)));
    return ans;
}
public static Long func_90f6d4557dc54d5f90edc2d7a8d1ad9f(Long ans, Integer i, Long third, Long[] A3, Integer j) {
    long first = A3[j + 2];
    long second = A3[i + 1] - A3[j + 2];
    Long.valueOf(Math.min(ans, Math.max(first, Math.max(second, third))));
    return second;
}
public static Long func_55570d3d404d4ea581f0d869b5c61309(Long ans, Integer i, Long third, Long[] A3, Integer j) {
    long first = A3[j + 2];
    long second = A3[i + 1] - A3[j + 2];
    Long.valueOf(Math.min(ans, Math.max(first, Math.max(second, third))));
    return first;
}


****** Cluster 40 ******
public static String[] func_3eba2a44985e4a13be84e1a982afb5aa(Integer n, String line2) {
    String[] ss = line2.trim().split(" ");
    double[] l = new double[n.intValue()];
    for (int j = 0; j < n; ++j) {
        l[j] = Integer.valueOf(ss[j]).intValue();
    }
    return ss;
}
public static String[] func_633ae140a12a412c8e4a75210f774722$60acba(Integer n, String line2) {
    String[] ss = line2.trim().split(" ");
    double[] d = new double[n.intValue()];
    for (int j = 0; j < n; ++j) {
        d[j] = Integer.valueOf(ss[j]).intValue();
    }
    return ss;
}
public static String[] func_83b2d5854ccb481eada047e1a0dab5bc(Integer n, String line2) {
    System.out.println(line2);
    String[] ss = line2.trim().split(" ");
    double[] l = new double[n.intValue()];
    for (int j = 0; j < n; ++j) {
        l[j] = Integer.valueOf(ss[j]).intValue();
    }
    return ss;
}
public static String[] func_7e4557c61de7416c9533ddac2fe360f3$60acba(Integer n, String line2) {
    System.out.println(line2);
    String[] ss = line2.trim().split(" ");
    double[] d = new double[n.intValue()];
    for (int j = 0; j < n; ++j) {
        d[j] = Integer.valueOf(ss[j]).intValue();
    }
    return ss;
}
public static String[] func_0ccd8b2a28694439b8f7f8b6343b7779$60acba(Integer n, String line2) {
    String[] ss = line2.trim().split(" ");
    double[] d = new double[n.intValue()];
    for (int j = 0; j < n; ++j) {
        d[j] = Integer.valueOf(ss[j]).intValue();
    }
    n.intValue();
    return ss;
}
public static String[] func_9bd6f8bce4394fc3b1ed9e2340d080bb$60acba(Integer n, String line2) {
    System.out.println(line2);
    String[] ss = line2.trim().split(" ");
    double[] d = new double[n.intValue()];
    for (int j = 0; j < n; ++j) {
        d[j] = Integer.valueOf(ss[j]).intValue();
    }
    n.intValue();
    return ss;
}


****** Cluster 41 ******
public static Long func_0d9ff47fe4144f80b626c39895abf9eb(Long ans, Integer i, Long third, Long[] A3, Integer j) {
    while (j < i && A3[i + 1] - A3[j + 2] > A3[j + 2]) {
        j = j + 1;
    }
    long first = A3[j + 1];
    long second = A3[i + 1] - A3[j + 1];
    ans = Math.min(ans, Math.max(first, Math.max(second, third)));
    return ans;
}
public static Long func_b2ed3fff66354dd8acc27acfebf756e7(Long ans, Integer i, Long third, Long[] A3, Integer j) {
    while (j < i && A3[i + 1] - A3[j + 2] > A3[j + 2]) {
        j = j + 1;
    }
    long first = A3[j + 1];
    long second = A3[i + 1] - A3[j + 1];
    ans = Math.min(ans, Math.max(first, Math.max(second, third)));
    if (j < i) {
        first = A3[j + 2];
        second = A3[i + 1] - A3[j + 2];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
    }
    return ans;
}


****** Cluster 42 ******
public static Long func_a9a3c1f004324285be08f4e07524b0a9(Integer i, Long[] a2) {
    long l = 0L;
    for (int j = 0; j < i; ++j) {
        l = Math.max(l, a2[j]);
    }
    return l;
}
public static Long func_2e8ab177cc6642b6897b827af8ff4b15(Integer i, Long[] a2) {
    long l = 0L;
    for (int j = 0; j < i; ++j) {
        l = Math.max(l, a2[j]);
    }
    return l;
}


****** Cluster 43 ******
public static Long func_0008cb9d3b654d1fa6484bbc343e860f(Long ans, Integer i, Long third, Long[] A3, Integer j) {
    long first = A3[j + 1];
    long second = A3[i + 1] - A3[j + 1];
    ans = Math.min(ans, Math.max(first, Math.max(second, third)));
    if (j < i) {
        first = A3[j + 2];
        second = A3[i + 1] - A3[j + 2];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
    }
    return ans;
}
public static Long func_706615dd803f48f383d348e49597a5ea(Long ans, Integer i, Long third, Long[] A3, Integer j) {
    long first = A3[j + 1];
    long second = A3[i + 1] - A3[j + 1];
    ans = Math.min(ans, Math.max(first, Math.max(second, third)));
    return ans;
}


****** Cluster 44 ******
public static String[] func_1be20055d5b849f780441ddc0a42a435$5ee41725(Double[] l, Integer n, String line2) {
    String[] ss = line2.trim().split(" ");
    double[] d = new double[n.intValue()];
    for (int j = 0; j < n; ++j) {
        d[j] = Integer.valueOf(ss[j]).intValue();
    }
    double[] exp = new double[n.intValue()];
    for (int j = 0; j < n; ++j) {
        exp[j] = d[j] == 0.0 ? 0.0 : l[j] * d[j] / (100.0 - d[j]);
    }
    return ss;
}
public static String[] func_e4cd5a471b4540359539524b815bd3c0$5ee41725(Double[] l, Integer n, String line2) {
    System.out.println(line2);
    String[] ss = line2.trim().split(" ");
    double[] d = new double[n.intValue()];
    for (int j = 0; j < n; ++j) {
        d[j] = Integer.valueOf(ss[j]).intValue();
    }
    double[] exp = new double[n.intValue()];
    for (int j = 0; j < n; ++j) {
        exp[j] = d[j] == 0.0 ? 0.0 : l[j] * d[j] / (100.0 - d[j]);
    }
    return ss;
}


****** Cluster 45 ******
public static Integer func_f8835239ef3a47009cbcb30f31cb9a71(Integer i) {
    i.intValue();
    Integer n = i;
    Integer.valueOf(i - 1);
    int j = n;
    return j;
}
public static Integer func_b725597e2c514315815d95de6c90ddfc$4114b050$20ecc96d(Integer k) {
    Integer j = k;
    return j;
}
public static Double func_b902ac26063a40b18f947a5eef0f1a24(Integer w) {
    double R = w.intValue();
    return R;
}
public static Double func_0d29ec681a3e48da8b7d43940f996486(Integer G) {
    double g = G.intValue();
    G.intValue();
    return g;
}
public static Double func_e001b7d709944975a7f6bbcbe73dd9a6(Integer W) {
    double ub = W.intValue();
    return ub;
}
public static Double func_dfe202846ce34d4cadfc4cf31aff9759(Integer w) {
    double r = w.intValue();
    return r;
}
public static Double func_f05b6fa9da64496a9950ebb08b9d4f2d(Integer w) {
    double r = w.intValue();
    return r;
}
public static Double func_36d257166207464c97c0b8b2b4273060(Integer W) {
    double high = W.intValue();
    return high;
}
public static Double func_3c323396bb3a4d9c937624eec453917d(Integer X) {
    double r = X.intValue();
    return r;
}
public static Double func_bc4257a6fdce4f8fa4da45e2d856db90(Integer w) {
    double testr = w.intValue();
    return testr;
}
public static Double func_5dd9546fec5b4f16bb15e0beebe93866(Integer w) {
    double dg = w.intValue();
    return dg;
}
public static Double func_05aa0d73ceb947219f6cab5d2f9f2b7a(Integer w) {
    double dg = w.intValue();
    return dg;
}
public static Double func_ba02dacc3c714d2d9346e7150ffab81c(Integer w) {
    double dg = w.intValue();
    return dg;
}
public static Integer func_21de37d78e69468784c6bbb5dbaf4127(Integer c) {
    int cntX = c;
    return cntX;
}
public static Integer func_46f31df6a3394282bb27ba42f6305586$3022a9c4(Integer index) {
    Integer first = index;
    Integer.valueOf(index + 1);
    return first;
}
public static Integer func_3b10b6d8bfe44a9ebd24368699e92a8c$3022a9c4(Integer index) {
    Integer second = index;
    Integer.valueOf(index + 1);
    return second;
}
public static Long func_72788eba24844634b58a3aab09f31522(Long ss) {
    long r = ss;
    return r;
}
public static Long func_1da530323b6c485f8a29c2c038c1c582(Long sum) {
    long HI = sum;
    return HI;
}
public static Long func_3435a3ef2585469ca4770b4ea85bfe83(Long sum) {
    long HI = sum;
    return HI;
}
public static Long func_0679814f707c427b82c7abf0f1ec7a08(Long sum) {
    long HI = sum;
    return HI;
}
public static Integer func_6b26495510c64613aca0ea4bd1de3162$7585757(Integer mid) {
    Integer ans = mid;
    Integer.valueOf(mid + 1);
    return ans;
}
public static Integer func_9aa7dfd2f9054ea1a0b6a4e315e76a51(Integer i) {
    int hi = i;
    return hi;
}
public static Integer func_af58bb97a18b428ab891af2ba67aca8f(Integer i) {
    int hi = i;
    return hi;
}
public static Integer func_ad460922e4984047a11d900a8cb41f35(Integer i) {
    int hi = i;
    return hi;
}
public static Long func_ffac217a995a43df95ea720f9f65b9f6(Long sum) {
    long min = sum;
    return min;
}
public static Long func_50b133722cae425fa0d8f8c55a14d7da(Long sum) {
    long rest = sum;
    return rest;
}
public static Long func_b0639595816d41faa022fb8783101d53(Long sum) {
    long rest = sum;
    return rest;
}
public static Long func_a3fc8b8801b541b39fd95b88825d1e28(Long sum) {
    long rest = sum;
    return rest;
}
public static Long func_55a9d492c0ea4df5871d39aeaa8a4282(Long sum) {
    long rest = sum;
    return rest;
}
public static Long func_9d5d47141cf44aca99fb2cfe1f65d66b(Long sum) {
    long rest = sum;
    return rest;
}
public static Long func_4455746e3f6e4a5098e68f19089628d2(Long sum) {
    long rest = sum;
    return rest;
}
public static Long func_3d2b7952dab94554929e013ab887342b(Long sum) {
    long rest = sum;
    return rest;
}
public static Long func_ad69943399ed48e482b30fe8146b47a5(Long sum) {
    long rest = sum;
    return rest;
}
public static Long func_705ec049b9474841bed933339b26bde0(Long sum) {
    long high = sum;
    return high;
}
public static Integer func_ce727f2a40cf4418862ab96224eaf6cf$6e305d1c$3022a9c4(Integer x2) {
    Integer x0 = x2;
    return x0;
}
public static Integer func_d825c8a59bbf4497800b53ba04229986$6e305d1c$3022a9c4(Integer y) {
    Integer y0 = y;
    return y0;
}
public static Integer func_a96476444d914e1daa6109a1da301426$6e305d1c$3022a9c4(Integer x2) {
    Integer x0 = x2;
    return x0;
}
public static Integer func_1df8c6e52fe3459d980eb129974417b2$6e305d1c$3022a9c4(Integer y) {
    Integer y0 = y;
    return y0;
}
public static Integer func_4784090c97d24db3a3a5e04f48236807$4114b050$20ecc96d(Integer curX) {
    Integer lastX = curX;
    return lastX;
}
public static Integer func_45c7f0657ba147c4bd3fbe98da3a55f9$6d22d244$20ecc96d(Integer curX) {
    Integer lastX = curX;
    return lastX;
}
public static Integer func_3041b59cb6d145a8b07d6d72779ed8a6$6d22d244$20ecc96d(Integer curX) {
    Integer lastX = curX;
    return lastX;
}
public static Double func_fcec0431dc6b4fb49ac33b8181aac50c(Integer lastX) {
    double max = lastX.intValue();
    return max;
}
public static Double func_6c567909be1e487e8c8d25d16c92a80f(Integer lastX) {
    double max = lastX.intValue();
    return max;
}
public static Integer func_3865edbcb73e496eba0c67e6c8df5bfe$6e305d1c$3022a9c4(Integer nx) {
    Integer px = nx;
    return px;
}
public static Integer func_fc4e7aa7ca1a4119b6d61cd85bf5fc4c$6e305d1c$3022a9c4(Integer ny) {
    Integer py = ny;
    return py;
}
public static Integer func_b09c318eb42145ec827e1c9f71c5deb9$6e305d1c$3022a9c4(Integer ny) {
    Integer py = ny;
    return py;
}
public static Integer func_5b60d2d4171149abaac268b327912671$6e305d1c$3022a9c4(Integer nx) {
    Integer px = nx;
    return px;
}
def func_23287435a172415890a002e4dcace837(r):
    ans = r
    used = 0
    return ans

def func_128198aad8ab40c39c5442f6980834d1(N):
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    return last

def func_2e99ae7edaa54b97b2df84cb67e2a77e(N):
    first = 0
    last = N
    firstsum = 0
    return last

def func_2b2984b9946f499d85534f0813d365cf(minvyska):
    vyska = minvyska
    treba = 0
    vyhra = 0
    return vyska

def func_3cc09223ecff4cd3a093bdf59e4341d2(minvyska):
    vyska = minvyska
    treba = 0
    return vyska

def func_7daca5ad88fc499ca0c9d96874767d76(transistorsum):
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    return minimax

def func_bea012f625864e7a9786e048b59afd75(N):
    last = N
    firstsum = 0
    lastsum = 0
    return last

def func_cf637f5c33a544d19e1019d0abbb41eb(transistorsum):
    lastsum = 0
    minimax = transistorsum
    return minimax

def func_daef88a4ef2c4f149242b921435b5112(N):
    first = 0
    last = N
    return last

def func_e7d89f62d7584c488262f8e17119f7ff(N):
    last = N
    firstsum = 0
    return last

def func_0790d9e81a734e8d9aa03f63607f8e2b(psum):
    mingain = psum
    minpgain = psum
    return mingain

def func_1cea03d2442c41798726dd74d8d9a32f(psum):
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    return mingain

def func_30abd218827d43d7ae7a1ba1f3b77afa(psum):
    mingain = psum
    minpgain = psum
    hpi = 0
    return minpgain

def func_57491aff8a7840fea20c04eb0465b1f4(psum):
    mingain = psum
    minpgain = psum
    hpi = 0
    return mingain

def func_7960889ab9c74e799253a4e83fed7fbb(psum):
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    return mingain

def func_8024920ec57044969cc1e0f764d7dd39(psum):
    minpgain = psum
    hpi = 0
    return minpgain

def func_b9cdaf3512f0487aa615150415b3eca9(psum):
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    return mingain

def func_c73315b5aa644f0eb7454e6a004a25b7(psum):
    mingain = psum
    minpgain = psum
    return minpgain

def func_dc400d407d514c66a0f00e41e8c416cc(psum):
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    return minpgain

def func_dd24e6726a204177870c5e212346dfc4(psum):
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    return minpgain

def func_f3a042db45ca47a0880954620f7b5783(total):
    best = total
    b = 0
    return best

def func_cde943ba0c684ce1bc6984978f123e62(i):
    L = 0
    R = i
    return R

def func_1e87eeeab94944bf878dc9117b091172(S):
    ans = S
    A, B, C = 0, 0, S
    a = 0
    return ans

def func_2396a2baecd84eea8232d5140016d6bf(S):
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    return ans

def func_2eb6863211384db6badad2ae757fa715(S):
    ans = S
    A, B, C = 0, 0, S
    return ans

def func_57223073dc1d4346b65dce4284846f29(S):
    A, B, C = 0, 0, S
    a = 0
    return C

def func_5a6b0a82f228401ba61deca4f3f15ab6(S):
    ans = S
    A, B, C = 0, 0, S
    return C

def func_6862c5f0173d414a8e88b3ab0fd0bed4(S):
    A, B, C = 0, 0, S
    a = 0
    b = -1
    return C

def func_8de30364d1d748998bad9c5638546b12(S):
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    return C

def func_8ec5675e55ed44588fa254f0acc351b3(S):
    ans = S
    A, B, C = 0, 0, S
    a = 0
    return C

def func_414765bad9154294a1d4a942c2340d97(allv):
    bestAnswer = allv
    j = 0
    return bestAnswer

def func_47501cdae7d34d3a9bfa47a8ce22e9ee(b):
    al = 0
    ar = b
    return ar

def func_c7d870c4a8964ae8a493f76c929ea930(part1):
    ans = 0.0
    _part1 = part1
    return _part1

def func_05cb7726bfb9450da2c621af1b9884d3(tot):
    mtot = tot
    rtot = 0
    return mtot

def func_16a16e1141944913a7f621866bd637d3(tot):
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    return mtot

def func_2375fc92bea44c78b160bb029e018b8c(tot):
    mtot = tot
    rtot = 0
    best = 0
    return mtot

def func_bef8e0f5378b4fdb9163cb423ef189c1(tot):
    ltot = 0
    mtot = tot
    rtot = 0
    return mtot

def func_db02d60c0ff648779f08f411414afb5f(tot):
    ltot = 0
    mtot = tot
    return mtot

def func_b7012de1e8f54a8996b1f046af848c08(x0):
    l = 0.0
    r = x0
    return r

def func_39ac34cace454fabb2c33b771ad7f926(start):
    area = 0
    height = float(start)
    return height

def func_4fa397e26e3c45548bae21bfbff516ab(start):
    i = 0
    height = float(start)
    lowi = 1
    uppi = 1
    return height

def func_5337451925524b7a9cdd0543bc2e7d88(start):
    height = float(start)
    lowi = 1
    return height

def func_55e67cf0ef104b15a0f6854094e64ce4(start):
    area = 0
    height = float(start)
    i = 0
    return height

def func_7192655f04224dadb491ba08efea0a4c(start):
    i = 0
    height = float(start)
    return height

def func_ce144bdc679f4cb0a21f0565921056e9(start):
    i = 0
    height = float(start)
    lowi = 1
    return height

def func_e0056bdedf1445e19599dbdaaeef9f49(start):
    height = float(start)
    lowi = 1
    uppi = 1
    return height

def func_f37db5a0c2354e4d9a594ac90a30dc22(start):
    height = float(start)
    i = 0
    return height



****** Cluster 46 ******
public static Double func_d08276af71e74018bba9b8bc92649ed9$7f7cf697$3a431bf4(Double ans) {
    Double best = ans;
    return best;
}
public static Double func_d0c2b420b17647158e3a4f9531ef7adc(Double w) {
    double r = w;
    return r;
}
public static Double func_ffe0b8d5193045c18fa94400b8bf7f05(Double fromX) {
    double cx = fromX;
    return cx;
}
public static Double func_75dfb35bc7a942f9b4adc63fdb6d300d$66086e89(Double lower) {
    System.out.println(lower);
    Double prevX = lower;
    return prevX;
}
public static Double func_33b8899c1b1c421b98ae69c56c9ec1af$66086e89(Double mid) {
    System.out.println(mid);
    Double lastx = mid;
    return lastx;
}
public static Double func_ccf6e88f014c4a5db03785e4455e04b5$204541cd(Double x2) {
    double right = x2;
    return right;
}
public static Double func_79d0e55488574127b76d32fa508a174d(Double piece) {
    double curLeft = piece;
    return curLeft;
}
public static Double func_e472cc15eb244a01923cad0c6637f04c(Double piece) {
    double curLeft = piece;
    return curLeft;
}
public static Double func_85a61c456207435f9e79e953643ec502$18c9911d$66086e89(Double left) {
    Double curX = left;
    return curX;
}
public static Double func_55f01331fbae44ceb10baded34403cc3$18c9911d$66086e89(Double piece) {
    Double curLeft = piece;
    return curLeft;
}
public static Double func_42ce974594814f329ce213a6be541af5$18c9911d$66086e89(Double xnew) {
    Double xcur = xnew;
    return xcur;
}
public static Double func_226df3ea16034351a378f80edb436372$18c9911d$66086e89(Double ynewl) {
    Double ycurl = ynewl;
    return ycurl;
}
public static Double func_e2ab425a116b47ffb49f1ea7b6f3ebb9$18c9911d$66086e89(Double ynewl) {
    Double ycurl = ynewl;
    return ycurl;
}
public static Double func_a3bb10cf3b8242579c5900b9fa2572d9$18c9911d$66086e89(Double ynewu) {
    Double ycuru = ynewu;
    return ycuru;
}
public static Double func_f8966f9fd5544e06814855b88db3e455$18c9911d$66086e89(Double yy) {
    Double y0 = yy;
    return y0;
}
public static Double func_41fc13a77f33467a97322a678ce9ea1c$18c9911d$66086e89(Double xx) {
    Double x0 = xx;
    return x0;
}
public static Double func_97b97c0046c6490b89f5a639f4a4d887(Double xf) {
    double down = xf;
    return down;
}
public static Double func_05c1619f04f14b9da354cd702bf5f283$18c9911d$66086e89(Double thisX) {
    Double currentX = thisX;
    return currentX;
}
public static Double func_0ee4bc8a39ec4b198aded723dcfea811$18c9911d$66086e89(Double thisHigh) {
    Double currentHigh = thisHigh;
    return currentHigh;
}
public static Double func_8237ba67a54a476a917994033f01e58d$18c9911d$66086e89(Double thisHigh) {
    Double currentHigh = thisHigh;
    return currentHigh;
}
public static Double func_871c4181f1dd42c0861cc7694dedd619$18c9911d$66086e89(Double thisLow) {
    Double currentLow = thisLow;
    return currentLow;
}
public static Double func_f727763694454f6bb10913a66ea87136$19d8064f$1f2ba713(Double thisX) {
    Double currentX = thisX;
    return currentX;
}
public static Double func_24e86e521f184d8484e5bd556a93d4f0$19d8064f$1f2ba713(Double thisHigh) {
    Double currentHigh = thisHigh;
    return currentHigh;
}
public static Double func_9f0b40c4eac54edc91bb654ce28e06fd$19d8064f$1f2ba713(Double thisLow) {
    Double currentLow = thisLow;
    return currentLow;
}
public static Double func_c004074219684c7aaa45e564f1b9809d$7f7cf697$3a431bf4(Double thisHeight) {
    Double curHeight = thisHeight;
    return curHeight;
}
public static Double func_5cb138cfb7544d99aac0a97d8999321c$1ac6e455$3a431bf4(Double upHeight) {
    Double curHeight = upHeight;
    return curHeight;
}
public static Double func_a26549fc0ca54497914304df013faa04$1ac6e455$3a431bf4(Double lowHeight) {
    Double curHeight = lowHeight;
    return curHeight;
}
public static Double func_89fd170c67264be2948b64b6b9367680$1f2ba713(Double hi) {
    Double.valueOf(0.0);
    Double used = hi;
    return used;
}
public static Double func_1d1947519df64d019b4348c54ecc4195(Double used) {
    double lo = used;
    return lo;
}
public static Double func_173f3d3a8f054a779c8005fcd3bcc20b(Double w) {
    double right = w;
    return right;
}
public static Double func_935e0d2d1346426780e3be5226a23876$18c9911d$66086e89(Double nuy) {
    Double uy = nuy;
    return uy;
}
public static Double func_4f129463c748474e9f4366b65514ed00$18c9911d$66086e89(Double nly) {
    Double ly = nly;
    return ly;
}
public static Double func_f39e595082974ccc9ad68c3329d16519$19d8064f$1f2ba713(Double xnew) {
    Double xcur = xnew;
    return xcur;
}
public static Double func_79c4ab15a9b94952b3fe3d2671c2e442$19d8064f$1f2ba713(Double ynewl) {
    Double ycurl = ynewl;
    return ycurl;
}
public static Double func_e71530e4f5364e60b35d4b3ba6bf25a0$19d8064f$1f2ba713(Double ynewu) {
    Double ycuru = ynewu;
    return ycuru;
}
def func_1f66b0c3efb94d2ca3b573f631d97413(pr):
    re = 1
    running = pr
    multiplier = 2
    return running

def func_7fe6e233b0bb48f881d84b04ea618511(pr):
    re = 1
    running = pr
    return running

def func_f9a66213f5944e38982acebe98cd461e(pr):
    running = pr
    multiplier = 2
    return running

def func_1b98bb55c2174a14afcb7b4ee4df708b(size):
    cuts = []
    needed = size
    return needed

def func_a6db9a9ac1e3496cabc9d9a46a328352(segment_area):
    segment_remaining = segment_area
    area_from_left = 0
    return segment_remaining

def func_767fb1fcf51245feb3ec184d1159d196(area):
    totalarea = area
    solnstr = ''
    return totalarea

def func_e59610dbfa9341c2a3b7ec6422ed9fbd(area):
    totalarea = area
    solnstr = ''
    cut = 1
    return totalarea



****** Cluster 47 ******
public static Long func_de8df9de9dd4417a9a78609dee100ebe(Integer N, Long[] A3) {
    long ans = A3[N];
    return ans;
}
public static Long func_f604a425d90d469b8347995bb8471efe(Integer N, Long[] A3) {
    int j = 0;
    long ans = A3[N];
    for (int i = 0; i < N; ++i) {
        long third = A3[N] - A3[i + 1];
        while (j < i && A3[i + 1] - A3[j + 2] > A3[j + 2]) {
            ++j;
        }
        long first = A3[j + 1];
        long second = A3[i + 1] - A3[j + 1];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
        if (j >= i)
            continue;
        first = A3[j + 2];
        second = A3[i + 1] - A3[j + 2];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
    }
    return ans;
}
public static Long func_3dcaeff6b1a148f4b12f299b56617cde(Integer N, Long[] A3) {
    int j = 0;
    long ans = A3[N];
    for (int i = 0; i < N; ++i) {
        long third = A3[N] - A3[i + 1];
        while (j < i && A3[i + 1] - A3[j + 2] > A3[j + 2]) {
            ++j;
        }
        long first = A3[j + 1];
        long second = A3[i + 1] - A3[j + 1];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
        if (j >= i)
            continue;
        first = A3[j + 2];
        second = A3[i + 1] - A3[j + 2];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
    }
    A3[N].longValue();
    A3[N].longValue();
    return ans;
}
public static Long func_da21a69d40b544f582a3110eb39a3f74(Integer rght, Long[] pref) {
    long sum = pref[rght];
    rght.intValue();
    return sum;
}
public static Long func_c0d2d091305c49d7a76754125b6cc631(Integer rght, Long[] pref) {
    long sum = pref[rght];
    int left = -1;
    int right = rght;
    while (left < right - 1) {
        int mid = left + right >> 1;
        if (pref[mid] * 2L >= sum) {
            right = mid;
            continue;
        }
        left = mid;
    }
    return sum;
}
public static Long func_1cade09ade594c1187fb7470738879d0(Integer second, Long[] sum) {
    long total = 0L;
    if (second != -1) {
        total += sum[second].longValue();
    }
    return total;
}
public static Long func_07473f92b06146789623e903d7eb730d(Integer i, Long[] a2) {
    long meSum = a2[i];
    int l = i + 1;
    int h = a2.length - 2;
    while (h > l) {
        int mid = l + h >> 1;
        if (a2[mid] - meSum <= meSum) {
            l = mid + 1;
            continue;
        }
        h = mid;
    }
    return meSum;
}
public static Long func_5e8f0d7bfa9b4e23abee2bb8a7ac0b89(Integer i, Long[] a2) {
    long meSum = a2[i];
    int l = i + 1;
    int h = a2.length - 2;
    while (h > l) {
        int mid = l + h >> 1;
        if (a2[mid] - meSum <= meSum) {
            l = mid + 1;
            continue;
        }
        h = mid;
    }
    a2[h].longValue();
    return meSum;
}
public static Long func_e232adc8794d451d84b6f136d87d71e2(Integer i, Long[] a2) {
    long meSum = a2[i];
    i.intValue();
    return meSum;
}
public static Long func_644760620c2445799dcfb17c72a8b155(Integer i, Long[] a2) {
    long meSum = a2[i];
    i.intValue();
    return meSum;
}
public static Long func_c96f8509940e44a99ebcd5779b955820(Integer N, Long[] sums) {
    long total = sums[N];
    return total;
}
public static Long func_a654bdbe54dd47f4b0819082a2e92a07(Integer n, Long[] sum) {
    long ans = sum[n];
    return ans;
}
public static Long func_a680118bb74e479f9815489a0bdce0c0(Integer n, Long[] sum) {
    long ans = sum[n];
    int l = 1;
    for (int i = 2; i <= n; ++i) {
        while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
            ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
            ++l;
        }
        ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
    }
    return ans;
}
public static Long func_478ce39f123b4cfd82c00336b12a6f11(Integer n, Long[] sum) {
    long ans = sum[n];
    int l = 1;
    for (int i = 2; i <= n; ++i) {
        while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
            ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
            ++l;
        }
        ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
    }
    sum[n].longValue();
    return ans;
}


****** Cluster 48 ******
public static Long func_f5f9689a15a94ae787442b2d09e8e64f(Long value, Long[] a2, Long res, Integer to) {
    res.longValue();
    to.intValue();
    for (int i = to.intValue(); i < 37; ++i) {
        if (a2[i] > value)
            continue;
        res = res + (value + 1L - a2[i]);
    }
    return res;
}
public static Long func_07be20ab36604a4398344c54816e15fd(Long value, Long[] a2, Long res, Integer to) {
    res.longValue();
    to.intValue();
    for (int i = to.intValue(); i < 37; ++i) {
        if (a2[i] > value)
            continue;
        res = res + (value + 1L - a2[i]);
    }
    res.longValue();
    return res;
}
public static Long func_35a34154807843f9bebd20c4ddd017c5(Long value, Long[] a2, Long res, Integer to) {
    for (int i = to.intValue(); i < 37; ++i) {
        if (a2[i] > value)
            continue;
        res = res + (value + 1L - a2[i]);
    }
    return res;
}


****** Cluster 49 ******
public static Double func_88a8f66b69ff4613a1a322da409e80e0(Long value, Double ss, Long[] a2, Long res, Integer to) {
    for (int i = to.intValue(); i < 37; ++i) {
        if (a2[i] > value)
            continue;
        res = res + (value + 1L - a2[i]);
    }
    ss = ss - (double) res.longValue();
    return ss;
}
public static double func_a826f63361934fb3bafa1860679b4ec6(Long value, Double ss, Long[] a2, Long res, Integer to) {
    for (int i = to.intValue(); i < 37; ++i) {
        if (a2[i] > value)
            continue;
        res = res + (value + 1L - a2[i]);
    }
    ss = ss - (double) res.longValue();
    return ss;
}


****** Cluster 50 ******
public static double func_c19068f9c0204dfda83953a028c70627(Double ss, Long res) {
    ss = ss - (double) res.longValue();
    return ss;
}
public static Double func_5366086d2e394a5194377801d6686d38(Double val, Long waste) {
    val = val - (double) waste.longValue();
    System.out.println(val);
    return val;
}


****** Cluster 51 ******
public static Integer func_76910b01054748698b3e6436c4f4e0d3(Integer N, Long[] A3) {
    int j = 0;
    long ans = A3[N];
    for (int i = 0; i < N; ++i) {
        long third = A3[N] - A3[i + 1];
        while (j < i && A3[i + 1] - A3[j + 2] > A3[j + 2]) {
            ++j;
        }
        long first = A3[j + 1];
        long second = A3[i + 1] - A3[j + 1];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
        if (j >= i)
            continue;
        first = A3[j + 2];
        second = A3[i + 1] - A3[j + 2];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
    }
    return j;
}
public static Integer func_023ded568a764b14b2488e24950632e5(Integer N, Long[] A3) {
    int j = 0;
    long ans = A3[N];
    for (int i = 0; i < N; ++i) {
        long third = A3[N] - A3[i + 1];
        while (j < i && A3[i + 1] - A3[j + 2] > A3[j + 2]) {
            ++j;
        }
        long first = A3[j + 1];
        long second = A3[i + 1] - A3[j + 1];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
        if (j >= i)
            continue;
        first = A3[j + 2];
        second = A3[i + 1] - A3[j + 2];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
    }
    A3[N].longValue();
    A3[N].longValue();
    return j;
}


****** Cluster 52 ******
public static Long func_6c01672d3606415eb975869d84307167(Integer N, Long[] a2) {
    long[] A3 = new long[N + 1];
    for (int i = 0; i < N; ++i) {
        A3[i + 1] = A3[i] + a2[i];
    }
    long ans = A3[N];
    return ans;
}
public static Long func_f281e66cddc9452897fce6b37c9ec7d5(Integer N, Long[] counts) {
    long[] sums = new long[N + 1];
    for (int i = 0; i < N; ++i) {
        sums[i + 1] = sums[i] + counts[i];
    }
    long total = sums[N];
    return total;
}
public static Long func_e372258907c64441aee260269e472197(Integer N, Long[] counts) {
    long[] sums = new long[N + 1];
    for (int i = 0; i < N; ++i) {
        sums[i + 1] = sums[i] + counts[i];
    }
    long total = sums[N];
    return total;
}


****** Cluster 53 ******
public static Long func_65576beda48b4e88affacee61b3defb0(Integer N, Long[] a2, Long[] A3) {
    for (int i = 0; i < N; ++i) {
        A3[i + 1] = A3[i] + a2[i];
    }
    int j = 0;
    long ans = A3[N];
    for (int i = 0; i < N; ++i) {
        long third = A3[N] - A3[i + 1];
        while (j < i && A3[i + 1] - A3[j + 2] > A3[j + 2]) {
            ++j;
        }
        long first = A3[j + 1];
        long second = A3[i + 1] - A3[j + 1];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
        if (j >= i)
            continue;
        first = A3[j + 2];
        second = A3[i + 1] - A3[j + 2];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
    }
    return ans;
}
public static Long func_0ae38075868444c6a8ce8a01e79d6c32(Integer N, Long[] a2, Long[] A3) {
    for (int i = 0; i < N; ++i) {
        A3[i + 1] = A3[i] + a2[i];
    }
    int j = 0;
    long ans = A3[N];
    for (int i = 0; i < N; ++i) {
        long third = A3[N] - A3[i + 1];
        while (j < i && A3[i + 1] - A3[j + 2] > A3[j + 2]) {
            ++j;
        }
        long first = A3[j + 1];
        long second = A3[i + 1] - A3[j + 1];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
        if (j >= i)
            continue;
        first = A3[j + 2];
        second = A3[i + 1] - A3[j + 2];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
    }
    A3[N].longValue();
    A3[N].longValue();
    return ans;
}


****** Cluster 54 ******
public static Integer func_b57d42af94924d449c3974c0b24828e6(Integer N, Long[] a2, Long[] A3) {
    for (int i = 0; i < N; ++i) {
        A3[i + 1] = A3[i] + a2[i];
    }
    int j = 0;
    long ans = A3[N];
    for (int i = 0; i < N; ++i) {
        long third = A3[N] - A3[i + 1];
        while (j < i && A3[i + 1] - A3[j + 2] > A3[j + 2]) {
            ++j;
        }
        long first = A3[j + 1];
        long second = A3[i + 1] - A3[j + 1];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
        if (j >= i)
            continue;
        first = A3[j + 2];
        second = A3[i + 1] - A3[j + 2];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
    }
    return j;
}
public static Integer func_91df992e94b649528da61ae2c59f1b85(Integer N, Long[] a2, Long[] A3) {
    for (int i = 0; i < N; ++i) {
        A3[i + 1] = A3[i] + a2[i];
    }
    int j = 0;
    long ans = A3[N];
    for (int i = 0; i < N; ++i) {
        long third = A3[N] - A3[i + 1];
        while (j < i && A3[i + 1] - A3[j + 2] > A3[j + 2]) {
            ++j;
        }
        long first = A3[j + 1];
        long second = A3[i + 1] - A3[j + 1];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
        if (j >= i)
            continue;
        first = A3[j + 2];
        second = A3[i + 1] - A3[j + 2];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
    }
    A3[N].longValue();
    A3[N].longValue();
    return j;
}


****** Cluster 55 ******
public static Long func_6d605097b75d4512ac82d213e51e0afa(Integer N, Long[] a2) {
    long[] A3 = new long[N + 1];
    for (int i = 0; i < N; ++i) {
        A3[i + 1] = A3[i] + a2[i];
    }
    int j = 0;
    long ans = A3[N];
    for (int i = 0; i < N; ++i) {
        long third = A3[N] - A3[i + 1];
        while (j < i && A3[i + 1] - A3[j + 2] > A3[j + 2]) {
            ++j;
        }
        long first = A3[j + 1];
        long second = A3[i + 1] - A3[j + 1];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
        if (j >= i)
            continue;
        first = A3[j + 2];
        second = A3[i + 1] - A3[j + 2];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
    }
    return ans;
}
public static Long func_c6f892247bb347b89e031418ae1b1167(Integer N, Long[] a2) {
    long[] A3 = new long[N + 1];
    for (int i = 0; i < N; ++i) {
        A3[i + 1] = A3[i] + a2[i];
    }
    int j = 0;
    long ans = A3[N];
    for (int i = 0; i < N; ++i) {
        long third = A3[N] - A3[i + 1];
        while (j < i && A3[i + 1] - A3[j + 2] > A3[j + 2]) {
            ++j;
        }
        long first = A3[j + 1];
        long second = A3[i + 1] - A3[j + 1];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
        if (j >= i)
            continue;
        first = A3[j + 2];
        second = A3[i + 1] - A3[j + 2];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
    }
    N.intValue();
    N.intValue();
    return ans;
}


****** Cluster 56 ******
public static Integer func_c5eae63dc2474981a822f7661993a197(Integer N, Long[] a2) {
    long[] A3 = new long[N + 1];
    for (int i = 0; i < N; ++i) {
        A3[i + 1] = A3[i] + a2[i];
    }
    int j = 0;
    long ans = A3[N];
    for (int i = 0; i < N; ++i) {
        long third = A3[N] - A3[i + 1];
        while (j < i && A3[i + 1] - A3[j + 2] > A3[j + 2]) {
            ++j;
        }
        long first = A3[j + 1];
        long second = A3[i + 1] - A3[j + 1];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
        if (j >= i)
            continue;
        first = A3[j + 2];
        second = A3[i + 1] - A3[j + 2];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
    }
    return j;
}
public static Integer func_81b9ad3d2d934c3b89d3353b46552f60(Integer N, Long[] a2) {
    long[] A3 = new long[N + 1];
    for (int i = 0; i < N; ++i) {
        A3[i + 1] = A3[i] + a2[i];
    }
    int j = 0;
    long ans = A3[N];
    for (int i = 0; i < N; ++i) {
        long third = A3[N] - A3[i + 1];
        while (j < i && A3[i + 1] - A3[j + 2] > A3[j + 2]) {
            ++j;
        }
        long first = A3[j + 1];
        long second = A3[i + 1] - A3[j + 1];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
        if (j >= i)
            continue;
        first = A3[j + 2];
        second = A3[i + 1] - A3[j + 2];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
    }
    N.intValue();
    N.intValue();
    return j;
}


****** Cluster 57 ******
public static Double func_eea39fe86cd34e06b895c863e0353dda(Long value, Long[] a2, Long res, Integer to) {
    double ss = (double) res.longValue() * 1.0 / (double) to.intValue() * 36.0;
    for (int i = to.intValue(); i < 37; ++i) {
        if (a2[i] > value)
            continue;
        res = res + (value + 1L - a2[i]);
    }
    return ss -= (double) res.longValue();
}
public static double func_21cab9da27f94a76a1adf42b52f9e326(Long value, Long[] a2, Long res, Integer to) {
    double ss = (double) res.longValue() * 1.0 / (double) to.intValue() * 36.0;
    for (int i = to.intValue(); i < 37; ++i) {
        if (a2[i] > value)
            continue;
        res = res + (value + 1L - a2[i]);
    }
    return ss -= (double) res.longValue();
}


****** Cluster 58 ******
public static Long func_31d3780e850041dc93e4b1c558222482(Integer N, Long[] a2, Long r, Long p, Long s, Long q) {
    for (int i = 0; i < N; ++i) {
        a2[i] = ((long) i * p + q) % r + s;
    }
    long[] A3 = new long[N + 1];
    for (int i = 0; i < N; ++i) {
        A3[i + 1] = A3[i] + a2[i];
    }
    int j = 0;
    long ans = A3[N];
    for (int i = 0; i < N; ++i) {
        long third = A3[N] - A3[i + 1];
        while (j < i && A3[i + 1] - A3[j + 2] > A3[j + 2]) {
            ++j;
        }
        long first = A3[j + 1];
        long second = A3[i + 1] - A3[j + 1];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
        if (j >= i)
            continue;
        first = A3[j + 2];
        second = A3[i + 1] - A3[j + 2];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
    }
    return ans;
}
public static Long func_0e7fd6e6c61d4bd7b485a54a519532c9(Integer N, Long[] a2, Long r, Long p, Long s, Long q) {
    for (int i = 0; i < N; ++i) {
        a2[i] = ((long) i * p + q) % r + s;
    }
    long[] A3 = new long[N + 1];
    for (int i = 0; i < N; ++i) {
        A3[i + 1] = A3[i] + a2[i];
    }
    int j = 0;
    long ans = A3[N];
    for (int i = 0; i < N; ++i) {
        long third = A3[N] - A3[i + 1];
        while (j < i && A3[i + 1] - A3[j + 2] > A3[j + 2]) {
            ++j;
        }
        long first = A3[j + 1];
        long second = A3[i + 1] - A3[j + 1];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
        if (j >= i)
            continue;
        first = A3[j + 2];
        second = A3[i + 1] - A3[j + 2];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
    }
    N.intValue();
    N.intValue();
    return ans;
}


****** Cluster 59 ******
public static Integer func_0887997ae95b4ff6aecafa7b5cfb6930(Integer N, Long[] a2, Long r, Long p, Long s, Long q) {
    for (int i = 0; i < N; ++i) {
        a2[i] = ((long) i * p + q) % r + s;
    }
    long[] A3 = new long[N + 1];
    for (int i = 0; i < N; ++i) {
        A3[i + 1] = A3[i] + a2[i];
    }
    int j = 0;
    long ans = A3[N];
    for (int i = 0; i < N; ++i) {
        long third = A3[N] - A3[i + 1];
        while (j < i && A3[i + 1] - A3[j + 2] > A3[j + 2]) {
            ++j;
        }
        long first = A3[j + 1];
        long second = A3[i + 1] - A3[j + 1];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
        if (j >= i)
            continue;
        first = A3[j + 2];
        second = A3[i + 1] - A3[j + 2];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
    }
    return j;
}
public static Integer func_dfac53d2bc724863a9f84dfa5d99fdbc(Integer N, Long[] a2, Long r, Long p, Long s, Long q) {
    for (int i = 0; i < N; ++i) {
        a2[i] = ((long) i * p + q) % r + s;
    }
    long[] A3 = new long[N + 1];
    for (int i = 0; i < N; ++i) {
        A3[i + 1] = A3[i] + a2[i];
    }
    int j = 0;
    long ans = A3[N];
    for (int i = 0; i < N; ++i) {
        long third = A3[N] - A3[i + 1];
        while (j < i && A3[i + 1] - A3[j + 2] > A3[j + 2]) {
            ++j;
        }
        long first = A3[j + 1];
        long second = A3[i + 1] - A3[j + 1];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
        if (j >= i)
            continue;
        first = A3[j + 2];
        second = A3[i + 1] - A3[j + 2];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
    }
    N.intValue();
    N.intValue();
    return j;
}


****** Cluster 60 ******
public static Long func_c55e46e33172416687ef872e406dd755(Integer N, Long r, Long p, Long s, Long q) {
    long[] a2 = new long[N.intValue()];
    for (int i = 0; i < N; ++i) {
        a2[i] = ((long) i * p + q) % r + s;
    }
    long[] A3 = new long[N + 1];
    for (int i = 0; i < N; ++i) {
        A3[i + 1] = A3[i] + a2[i];
    }
    int j = 0;
    long ans = A3[N];
    for (int i = 0; i < N; ++i) {
        long third = A3[N] - A3[i + 1];
        while (j < i && A3[i + 1] - A3[j + 2] > A3[j + 2]) {
            ++j;
        }
        long first = A3[j + 1];
        long second = A3[i + 1] - A3[j + 1];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
        if (j >= i)
            continue;
        first = A3[j + 2];
        second = A3[i + 1] - A3[j + 2];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
    }
    return ans;
}
public static Long func_308a8162bea34ddf8e56f20ef1c46204(Integer N, Long r, Long p, Long s, Long q) {
    long[] a2 = new long[N.intValue()];
    for (int i = 0; i < N; ++i) {
        a2[i] = ((long) i * p + q) % r + s;
    }
    long[] A3 = new long[N + 1];
    for (int i = 0; i < N; ++i) {
        A3[i + 1] = A3[i] + a2[i];
    }
    int j = 0;
    long ans = A3[N];
    for (int i = 0; i < N; ++i) {
        long third = A3[N] - A3[i + 1];
        while (j < i && A3[i + 1] - A3[j + 2] > A3[j + 2]) {
            ++j;
        }
        long first = A3[j + 1];
        long second = A3[i + 1] - A3[j + 1];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
        if (j >= i)
            continue;
        first = A3[j + 2];
        second = A3[i + 1] - A3[j + 2];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
    }
    N.intValue();
    N.intValue();
    return ans;
}


****** Cluster 61 ******
public static Integer func_b3dac7dffa904bb884048bcf9fe93eb7(Integer N, Long r, Long p, Long s, Long q) {
    long[] a2 = new long[N.intValue()];
    for (int i = 0; i < N; ++i) {
        a2[i] = ((long) i * p + q) % r + s;
    }
    long[] A3 = new long[N + 1];
    for (int i = 0; i < N; ++i) {
        A3[i + 1] = A3[i] + a2[i];
    }
    int j = 0;
    long ans = A3[N];
    for (int i = 0; i < N; ++i) {
        long third = A3[N] - A3[i + 1];
        while (j < i && A3[i + 1] - A3[j + 2] > A3[j + 2]) {
            ++j;
        }
        long first = A3[j + 1];
        long second = A3[i + 1] - A3[j + 1];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
        if (j >= i)
            continue;
        first = A3[j + 2];
        second = A3[i + 1] - A3[j + 2];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
    }
    return j;
}
public static Integer func_d7aa99519396481a9cf9d041311e69c7(Integer N, Long r, Long p, Long s, Long q) {
    long[] a2 = new long[N.intValue()];
    for (int i = 0; i < N; ++i) {
        a2[i] = ((long) i * p + q) % r + s;
    }
    long[] A3 = new long[N + 1];
    for (int i = 0; i < N; ++i) {
        A3[i + 1] = A3[i] + a2[i];
    }
    int j = 0;
    long ans = A3[N];
    for (int i = 0; i < N; ++i) {
        long third = A3[N] - A3[i + 1];
        while (j < i && A3[i + 1] - A3[j + 2] > A3[j + 2]) {
            ++j;
        }
        long first = A3[j + 1];
        long second = A3[i + 1] - A3[j + 1];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
        if (j >= i)
            continue;
        first = A3[j + 2];
        second = A3[i + 1] - A3[j + 2];
        ans = Math.min(ans, Math.max(first, Math.max(second, third)));
    }
    N.intValue();
    N.intValue();
    return j;
}


****** Cluster 62 ******
public static Long func_29944384add54e2d8cfa5b3e0d8f79be(Long sumMid, Long ans, Long sumLeft, Long sumRight) {
    long max = Math.max(sumLeft, Math.max(sumMid, sumRight));
    Long.valueOf(Math.min(ans, max));
    return max;
}
public static Long func_45219ff41ca44497bb493a03670f3dfd(Long sum1, Long sum, Long sum2, Long sum3) {
    long maxSum = Math.max(sum1, Math.max(sum2, sum3));
    sum.longValue();
    sum.longValue();
    return maxSum;
}


****** Cluster 63 ******
public static Long func_4afb1a18d83b4345b28dabb60cdd606f(Integer rght, Integer n, Long[] pref) {
    pref[n - 1].longValue();
    pref[rght].longValue();
    long sum = pref[rght];
    return sum;
}
public static Long func_e39af35fad1b4673acf0fa2bb8d990e6(Integer rght, Integer n, Long[] pref) {
    pref[n - 1].longValue();
    pref[rght].longValue();
    long sum = pref[rght];
    rght.intValue();
    return sum;
}
public static Long func_327b987607a34a7f9df136d349317671(Integer rght, Integer n, Long[] pref) {
    pref[n - 1].longValue();
    pref[rght].longValue();
    long sum = pref[rght];
    int left = -1;
    int right = rght;
    while (left < right - 1) {
        int mid = left + right >> 1;
        if (pref[mid] * 2L >= sum) {
            right = mid;
            continue;
        }
        left = mid;
    }
    return sum;
}


****** Cluster 64 ******
public static Long func_9a74c337e4274eba840727748b6f93fd(Integer rght, Integer n, Long[] pref) {
    long rs = pref[n - 1] - pref[rght];
    pref[rght].longValue();
    return rs;
}
public static Long func_9bd2abbb8dd14b77935bb7852b4d3a45(Integer rght, Integer n, Long[] pref) {
    long rs = pref[n - 1] - pref[rght];
    pref[rght].longValue();
    rght.intValue();
    return rs;
}
public static Long func_9a5a511e5c25430686e8657206526416(Integer rght, Integer n, Long[] pref) {
    long rs = pref[n - 1] - pref[rght];
    long sum = pref[rght];
    int left = -1;
    int right = rght;
    while (left < right - 1) {
        int mid = left + right >> 1;
        if (pref[mid] * 2L >= sum) {
            right = mid;
            continue;
        }
        left = mid;
    }
    return rs;
}


****** Cluster 65 ******
public static Integer func_b7b14145133c43948a7520fb2c3d0c71(Integer right, Long sum, Long[] pref, Integer left) {
    int mid = left + right >> 1;
    if (pref[mid] * 2L >= sum) {
        Integer.valueOf(mid);
    } else {
        Integer.valueOf(mid);
    }
    return mid;
}
public static Integer func_3681d15ee9f1427693201a4aee309309(Integer l, Long meSum, Long[] a2, Integer h) {
    int mid = l + h >> 1;
    if (a2[mid] - meSum <= meSum) {
        Integer.valueOf(mid + 1);
    } else {
        Integer.valueOf(mid);
    }
    return mid;
}


****** Cluster 66 ******
public static Long func_eb3a9a3f5f444eb18c8f245eff2f736f(Long max, Integer rght, Integer n, Long[] pref) {
    long rs = pref[n - 1] - pref[rght];
    long sum = pref[rght];
    int left = -1;
    int right = rght;
    while (left < right - 1) {
        int mid = left + right >> 1;
        if (pref[mid] * 2L >= sum) {
            right = mid;
            continue;
        }
        left = mid;
    }
    for (int t = right - 2; t <= right + 2; ++t) {
        if (0 > t || t > rght)
            continue;
        long ans = rs;
        ans = Math.max(ans, Math.max(sum - pref[t], pref[t]));
        max = Math.min(max, ans);
    }
    return rs;
}
public static Integer func_ea8dc7bf2f7747088dd33dc9dcc5ccff(Long max, Integer rght, Integer n, Long[] pref) {
    long rs = pref[n - 1] - pref[rght];
    long sum = pref[rght];
    int left = -1;
    int right = rght;
    while (left < right - 1) {
        int mid = left + right >> 1;
        if (pref[mid] * 2L >= sum) {
            right = mid;
            continue;
        }
        left = mid;
    }
    for (int t = right - 2; t <= right + 2; ++t) {
        if (0 > t || t > rght)
            continue;
        long ans = rs;
        ans = Math.max(ans, Math.max(sum - pref[t], pref[t]));
        max = Math.min(max, ans);
    }
    return left;
}


****** Cluster 67 ******
public static Long func_287fca80cf714842b65f447c102c0c1b(Long required, Integer i, Long[] bets, Integer j) {
    long win = 0L;
    for (int k = 0; k < j; ++k) {
        required = required + (bets[j - 1] - bets[k]);
        if (k >= i)
            continue;
        win += bets[j - 1] - bets[k];
    }
    return win;
}
public static Long func_011bd26857ae429a9b75f669a89b1a7d(Long required, Integer i, Long[] bets, Integer j) {
    long win = 0L;
    for (int k = 0; k < j; ++k) {
        required = required + (bets[j - 1] - bets[k]);
        if (k >= i)
            continue;
        win += bets[j - 1] - bets[k];
    }
    Long.valueOf(required + (long) (j - i));
    return win;
}


****** Cluster 68 ******
public static Long func_f1872085917140529e17d825dec7fe7a(Integer[] data, Integer n) {
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        sum += (long) data[i].intValue();
    }
    return sum;
}
public static Long func_dcf5bd78056c457b97ccbcc90f730c5d(Long[] v, Integer i) {
    long min = 0L;
    for (int j = 0; j < i; ++j) {
        min += v[j].longValue();
    }
    return min;
}


****** Cluster 69 ******
public static Long func_9d52c35e818145e89157950d48e6e380(Integer[] data, Long sum, Integer n, Long lo) {
    for (int i = 0; i < n; ++i) {
        sum = sum + (long) data[i].intValue();
    }
    lo.longValue();
    sum.longValue();
    return sum;
}
public static Long func_1d01f874896846a39dbe44baa77624a6(Integer[] data, Long sum, Integer n, Long lo) {
    for (int i = 0; i < n; ++i) {
        sum = sum + (long) data[i].intValue();
    }
    double res = 1.0 * (double) lo.longValue() / (double) sum.longValue();
    System.out.printf("%.9f\n", 1.0 - res);
    return sum;
}


****** Cluster 70 ******
public static Long func_24534c2ae7a3482e87a4133811769a8d(Integer[] data, Integer n, Long lo) {
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        sum += (long) data[i].intValue();
    }
    lo.longValue();
    return sum;
}
public static Long func_9a8fae6b4467437795c5231a6aa48bf5(Integer[] data, Integer n, Long lo) {
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        sum += (long) data[i].intValue();
    }
    double res = 1.0 * (double) lo.longValue() / (double) sum;
    System.out.printf("%.9f\n", 1.0 - res);
    return sum;
}
public static Long func_962f2ef9319f4260b8a3a9855d2f4b88(Long[] a2, Integer n, Long sum) {
    TreeSet<Long> all = new TreeSet<Long>();
    all.add(0L);
    long x2 = 0L;
    long best = Long.MAX_VALUE;
    for (int i = 0; i < n; ++i) {
        Long down;
        Long up = all.ceiling((x2 += a2[i].longValue()) / 2L + 1L);
        if (up != null) {
            long now = Math.max(up, Math.max(x2 - up, sum - x2));
            best = Math.min(best, now);
        }
        if ((down = all.floor(x2 / 2L)) != null) {
            long now = Math.max(down, Math.max(x2 - down, sum - x2));
            best = Math.min(best, now);
        }
        all.add(x2);
    }
    return x2;
}


****** Cluster 71 ******
public static Long func_1bc3d81b9039472cb658625565d3eb1e(Integer i, Long[] bets, Integer j) {
    long win = 0L;
    for (int k = 0; k < j; ++k) {
        bets[j - 1].longValue();
        bets[k].longValue();
        if (k >= i)
            continue;
        win += bets[j - 1] - bets[k];
    }
    return win;
}
public static Long func_dc6bb6c27a434e7781210e9e4d2d7851(Integer i, Long[] bets, Integer j) {
    long win = 0L;
    for (int k = 0; k < j; ++k) {
        bets[j - 1].longValue();
        bets[k].longValue();
        if (k >= i)
            continue;
        win += bets[j - 1] - bets[k];
    }
    j.intValue();
    i.intValue();
    return win;
}


****** Cluster 72 ******
public static Integer func_f06b94288bd446408874ad7bdab2cc41(Integer[] data) {
    int n = data.length;
    return n;
}
public static Integer func_b954810ed0644533a866659e3d85d037(Long[] d) {
    int n = d.length;
    return n;
}
public static Integer func_00e291c5d89d4f9e8b64635e1355227a(Long[] d) {
    int n = d.length;
    long[] imos = new long[n + 1];
    for (int i = 0; i < n; ++i) {
        imos[i + 1] = imos[i] + d[i];
    }
    return n;
}
public static Integer func_34bd0650ba93475aa3b510ca01001c04(Long[] d) {
    int n = d.length;
    long[] imos = new long[n + 1];
    for (int i = 0; i < n; ++i) {
        imos[i + 1] = imos[i] + d[i];
    }
    return n;
}
public static Integer func_2ef0b38eb7fc432284173adf21ce1b9a(Integer[] xxx) {
    int n = xxx.length;
    return n;
}
public static Integer func_27e3170c022a451692603ffed47fbcf0(Integer[] xxx) {
    int n = xxx.length;
    return n;
}
def func_40f170b11c494c5ca05133eda4cee7de(seq):
    rsum = 0
    rbegin = len(seq)
    return rbegin



****** Cluster 73 ******
public static Double func_070ff3113c0c4840812abe7058a4fede(Integer p, Double s) {
    double needs = s * (double) p.intValue();
    return needs;
}
public static Double func_7b51710f618a41a29bca27a4a61beb18(Integer i, Double s0) {
    double st = (double) i.intValue() * s0;
    return st;
}


****** Cluster 74 ******
public static Double func_c5c8bd09274a41bf9b128d5f69b1af35(Integer g, Integer w, Double sum, Integer i) {
    sum.doubleValue();
    g.intValue();
    i.intValue();
    double right = w.intValue();
    return right;
}
public static Double func_909c267ad51d412cbb85de4fc143172b(Integer G, Integer W, Double total, Integer g) {
    g.intValue();
    total.doubleValue();
    G.intValue();
    double ub = W.intValue();
    return ub;
}


****** Cluster 75 ******
public static Double func_436d3a180c4c48e0bacb20436109b501(Integer w, Double cx) {
    double _l = cx;
    w.intValue();
    return _l;
}
public static Double func_c0bc9ad71ed0499782984fe355ca5cc8(Integer newx, Double last) {
    double l = last;
    newx.intValue();
    return l;
}
public static Double func_8ae0d09618ae4cc1883d674eda19f425(Integer W, Double min) {
    W.intValue();
    return min;
}
public static Double func_60f8bb10e8284b8698797757461e44b9(Integer W, Double start) {
    double low = start;
    W.intValue();
    return low;
}
public static Double func_c3efbd6c56ca4806b6e0751c994eed23$6e939af6$546925a1(Integer curL, Double thisHeight) {
    Double curHeight = thisHeight;
    Integer.valueOf(curL + 1);
    return curHeight;
}
public static Double func_8db8b9ce8be54193b8952e6eaf4d08f3$8d775e2$546925a1(Integer curU, Double lowHeight) {
    Double curHeight = lowHeight;
    Integer.valueOf(curU + 1);
    return curHeight;
}
public static Double func_d79d316052ff431e873bc6794502c2df(Integer w, Double prevX) {
    double minX = prevX;
    w.intValue();
    return minX;
}
public static Double func_704fd113927240b3be9410e77e4db436$7108c120(Integer p, Double hi) {
    System.out.println((double) p.intValue() + hi);
    Double.valueOf(0.0);
    Double used = hi;
    return used;
}


****** Cluster 76 ******
public static Double func_b99d1aa39126479aa2cfc99b5929dd6d(Integer w, Double cx) {
    cx.doubleValue();
    double _r = w.intValue();
    return _r;
}
public static Double func_8de8ee9a4f8f4a5ca568541a5c06cc6e(Integer newx, Double last) {
    last.doubleValue();
    double r = newx.intValue();
    return r;
}
public static Double func_d79447c39caa492baf61bb675119529f(Integer W, Double start) {
    start.doubleValue();
    double high = W.intValue();
    return high;
}
public static Double func_ae50603beb7740eb9596933c29792541(Integer w, Double prevX) {
    prevX.doubleValue();
    double maxX = 1.0 * (double) w.intValue();
    return maxX;
}


****** Cluster 77 ******
public static Long func_ff7133410243420899d62faf7cb28d03(Long endTime, Long startTime) {
    long ms = endTime - startTime;
    long sec = ms / 1000L;
    return sec;
}
public static Long func_b74e2d7d524645c997d7d18684d4e7e4(Long endTime, Long startTime) {
    long ms = endTime - startTime;
    long sec = ms / 1000L;
    return sec;
}
public static Long func_d4f8005bdf0f48049eefc1b03e612c04(Long endTime, Long startTime) {
    long ms = endTime - startTime;
    long sec = ms / 1000L;
    return sec;
}
public static Long func_80693354366046fc828451737534ebdf(Long endTime, Long startTime) {
    long ms = endTime - startTime;
    long sec = ms / 1000L;
    return sec %= 60L;
}
public static Long func_c15f6d6361c549c9bf789b561553879d(Long endTime, Long startTime) {
    long ms = endTime - startTime;
    long sec = ms / 1000L;
    long min = sec / 60L;
    System.err.println("Time Spent: " + min + " minute(s) " + (sec %= 60L) + " second(s) " + (ms %= 1000L) + " (ms)");
    return sec;
}


****** Cluster 78 ******
public static Long func_2b0738d6098043f8be4a1f057a292b9d(Long ms) {
    long sec = ms / 1000L;
    Long.valueOf(ms % 1000L);
    return sec;
}
public static Long func_63dadfb6ce824f29a0e6ebf230d9193a(Long ms) {
    long sec = ms / 1000L;
    Long.valueOf(ms % 1000L);
    return sec;
}
public static Long func_18531423807f40938f9934a8efdeb4cb(Long ms) {
    long sec = ms / 1000L;
    Long.valueOf(ms % 1000L);
    return sec %= 60L;
}
public static Long func_f2c2513fa5b441b28336bd0ab95f7f36(Long ms) {
    long sec = ms / 1000L;
    ms = ms % 1000L;
    long min = sec / 60L;
    System.err.println("Time Spent: " + min + " minute(s) " + (sec %= 60L) + " second(s) " + ms + " (ms)");
    return sec;
}


****** Cluster 79 ******
public static Long func_26af66910e1f49f7a25890c867bc7379(Long sec, Long ms) {
    Long.valueOf(ms % 1000L);
    long min = sec / 60L;
    return min;
}
public static Long func_f76c08d7e62d42aa8165f8a8562dead2(Long sec, Long ms) {
    Long.valueOf(ms % 1000L);
    long min = sec / 60L;
    Long.valueOf(sec % 60L);
    return min;
}
public static Long func_6e0fd92a948e4df38d622369436e7f6e(Long sec, Long ms) {
    long min = sec / 60L;
    sec = sec % 60L;
    System.err.println("Time Spent: " + min + " minute(s) " + sec + " second(s) " + ms + " (ms)");
    return min;
}
public static Long func_dcce3829a3874656bb7d04777455ac03(Long sec, Long ms) {
    ms = ms % 1000L;
    long min = sec / 60L;
    sec = sec % 60L;
    System.err.println("Time Spent: " + min + " minute(s) " + sec + " second(s) " + ms + " (ms)");
    return min;
}


****** Cluster 80 ******
public static Long func_cc654c0ce76e42a2946f12e9ced4d62c(Long ms) {
    ms.longValue();
    ms = ms % 1000L;
    return ms;
}
public static Long func_4983b9bd63df46528804beb8230fac00(Long ms) {
    ms.longValue();
    ms = ms % 1000L;
    return ms;
}
public static Long func_07f2865e931041fabb07a3f01be4002f(Long ms) {
    ms.longValue();
    ms = ms % 1000L;
    return ms;
}
public static Long func_3d0fe8de81204ba9aa4b50edf580cbee(Long ms) {
    long sec = ms / 1000L;
    ms = ms % 1000L;
    long min = sec / 60L;
    System.err.println("Time Spent: " + min + " minute(s) " + (sec %= 60L) + " second(s) " + ms + " (ms)");
    return ms;
}


****** Cluster 81 ******
public static Long func_d1530bf71cd64db49aedd5f20b3b1a21(Long sec, Long ms) {
    ms = ms % 1000L;
    sec.longValue();
    return ms;
}
public static Long func_f800377ede3547ff99fe3b24a0966cf0(Long sec, Long ms) {
    ms = ms % 1000L;
    sec.longValue();
    Long.valueOf(sec % 60L);
    return ms;
}
public static Long func_93f35017323c4792b7cefb31f440c4d5(Long sec, Long ms) {
    ms = ms % 1000L;
    long min = sec / 60L;
    sec = sec % 60L;
    System.err.println("Time Spent: " + min + " minute(s) " + sec + " second(s) " + ms + " (ms)");
    return ms;
}


****** Cluster 82 ******
public static Long func_5f90daa47f444a5fbd12f82896779a8d(Long sec, Long ms) {
    Long.valueOf(ms % 1000L);
    sec.longValue();
    return sec;
}
public static Integer func_369d1fe195a748c293dc7ae627a1060b(Integer N, Integer start) {
    start.intValue();
    int right = N;
    return right;
}
public static Integer func_fe9f7eae099a414687f60794f6bfc53c(Integer i, Integer n) {
    int low = i;
    n.intValue();
    return low;
}
public static Integer func_be7e26322ca043c49d521e3ea3d3d145(Integer i, Integer n) {
    int min = i;
    n.intValue();
    return min;
}
public static Integer func_b5bbf729ff88483fafb832626357fc42(Integer h, Integer n) {
    int min = h;
    n.intValue();
    return min;
}
public static Integer func_1adc224858f64830bf73b3d1e850f44f$7585757(Integer curX, Integer curL) {
    Integer lastX = curX;
    Integer.valueOf(curL + 1);
    return lastX;
}
public static Integer func_3699afeca62f44b184a4d3a612389800$6d13103d$9ae6286(Integer curX, Integer curL) {
    Integer lastX = curX;
    Integer.valueOf(curL + 1);
    return lastX;
}
public static Integer func_8130ecda75c440c0a7e4fec2db531960$7585757(Integer curX, Integer curL) {
    Integer lastX = curX;
    Integer.valueOf(curL + 1);
    return lastX;
}
public static Integer func_81aa73d735b54520a8c03270e928e5e9$60660bd$3ee5a2f2(Integer curX, Integer curL) {
    Integer lastX = curX;
    Integer.valueOf(curL + 1);
    return lastX;
}
public static Integer func_154ea2d012a44af4b9ca1e5bb47978d0$7585757(Integer curX, Integer curU) {
    Integer lastX = curX;
    Integer.valueOf(curU + 1);
    return lastX;
}
public static Integer func_4e43e23a602749189f9b991ace83d7ad$41247257$9ae6286(Integer curX, Integer curU) {
    Integer lastX = curX;
    Integer.valueOf(curU + 1);
    return lastX;
}
public static Double func_06ac36194daf4e159c59911ae7020113(Integer x0, Integer x1) {
    double xmin = x0.intValue();
    x1.intValue();
    return xmin;
}
def func_6dee6d898270436d93f7606160507e24(transistorsum, N):
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    return minimax

def func_d48b95e22ec943db8e84779d197c93b8(transistorsum, N):
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    return minimax

def func_5efff94f187f4f36bf4d5315ce9a6ea7(a_try, N):
    b_lo = a_try
    b_hi = N - 1
    return b_lo

def func_8e049bbb8e46430ca5ad5944cfc4695f(part1, part3):
    _part1 = part1
    _part3 = part3
    return _part1

def func_911b72bf908248c4a9b2bee6b8a94ac6(i, part3):
    _part3 = part3
    _i = i
    return _i

def func_b98931e2383d4ef4a7d0756fdbc9d072(part1, part3):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    return _part1

def func_ee4bee801f754c3d86285f9df875ec60(j, i):
    _i = i
    _j = j
    return _j

def func_53f2d023c8244dc18d216348b917782c(tot, n):
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    return mtot

def func_6d1c348d601b4835b3c87775a5ca5502(tot, n):
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    return mtot

def func_72e2d1e48b8548ba86ccb0ed5add516b(tot, n):
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    return mtot

def func_a6e12eade4d04ccd8e95a2c660576015(tot, n):
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    return mtot

def func_c9f94246cb5044809b23061365245a1f(tot, n):
    j = n - 1
    ltot = 0
    mtot = tot
    return mtot

def func_cb99b0f7646d41b8ab080352512d86ee(tot, n):
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    return mtot



****** Cluster 83 ******
public static Long func_d4832700ed2d4c43a1b5012e7f3abd26(Long min, Long sec, Long ms) {
    sec = sec % 60L;
    System.err.println("Time Spent: " + min + " minute(s) " + sec + " second(s) " + ms + " (ms)");
    return min;
}
public static Long func_77a17c85a50d42eeac0e3318f70b002c(Long left, Long eq, Integer i) {
    long up = left;
    eq.longValue();
    i.intValue();
    return up;
}
public static Integer func_a933336ff02a40aba7560cccdf15f9fa$6e305d1c(Integer curX, Integer curU, Integer curL) {
    Integer lastX = curX;
    Integer.valueOf(curL + 1);
    Integer.valueOf(curU + 1);
    return lastX;
}
public static Integer func_2dadd2f85e834b6fb93b53d5bb97166e$6c4a38d0$78d3d3b3(Integer curX, Integer curU, Integer curL) {
    Integer lastX = curX;
    Integer.valueOf(curL + 1);
    Integer.valueOf(curU + 1);
    return lastX;
}
def func_03adec3ae68a4a4f95208c236efcb077(i, _part3, part3):
    _part3 = part3
    _i = i
    return _i

def func_0ab2af9c16194ad589e90aedac5acb3f(part1, _sum, part3):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return _part1

def func_26a7b505baec4590a6835ef97c809cb8(part1, _sum, part3):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return _part1

def func_6277681aee8a4b7191645067068379ca(j, i, part3):
    _part3 = part3
    _i = i
    _j = j
    return _j

def func_f34b9cd0edfd47e398cd1c3bd8e965a4(part1, _sum, part3):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part1



****** Cluster 84 ******
public static Long func_58551fa3784747f8a2c97a2a97000aa8(Long endTime, Long startTime) {
    long ms = endTime - startTime;
    return ms %= 1000L;
}
public static Long func_7b3a5ee598df44218abe2feea5605891(Long endTime, Long startTime) {
    long ms = endTime - startTime;
    return ms %= 1000L;
}
public static Long func_4260455e9b3d47f0bdc9b5fdf278ce4b(Long endTime, Long startTime) {
    long ms = endTime - startTime;
    return ms %= 1000L;
}
public static Long func_55c4ee2f15ba4d12973e69769e2c2320(Long endTime, Long startTime) {
    long ms = endTime - startTime;
    long sec = ms / 1000L;
    long min = sec / 60L;
    System.err.println("Time Spent: " + min + " minute(s) " + (sec %= 60L) + " second(s) " + (ms %= 1000L) + " (ms)");
    return ms;
}


****** Cluster 85 ******
public static Long func_d4b07cbaac0c44a59fca4fa8d3d36cfc(Long sec, Long ms) {
    Long.valueOf(ms % 1000L);
    sec.longValue();
    sec = sec % 60L;
    return sec;
}
public static Long func_6c479a42792745d0908909af1dff0b54(Long sec, Long ms) {
    long min = sec / 60L;
    sec = sec % 60L;
    System.err.println("Time Spent: " + min + " minute(s) " + sec + " second(s) " + ms + " (ms)");
    return sec;
}
public static Long func_454096f3af064d50913c7c28280ce902(Long sec, Long ms) {
    ms = ms % 1000L;
    long min = sec / 60L;
    sec = sec % 60L;
    System.err.println("Time Spent: " + min + " minute(s) " + sec + " second(s) " + ms + " (ms)");
    return sec;
}


****** Cluster 86 ******
public static Double func_5b3b1536e9744cdaa5c75558cf34ef0a$7108c120(Integer cnt, Double r, Double l) {
    Integer.valueOf(cnt + 1);
    Double last = (l + r) / 2.0;
    return last;
}
public static Double func_ce2e5f6ac9a94d54b05de70549358c1c(Integer counter, Double lg, Double dg) {
    Integer.valueOf(counter + 1);
    double s = (lg + dg) / 2.0;
    return s;
}


****** Cluster 87 ******
public static Double func_54301f1628b843e9b05bbb64e724498c(Long s, Integer g) {
    double gs = 1.0 * (double) s.longValue() / (double) g.intValue();
    return gs;
}
public static Double func_f56966e843634f05bc69f1b1db4a9a95(Long s, Integer g) {
    double gs = 1.0 * (double) s.longValue() / (double) g.intValue();
    return gs;
}
public static Double func_b17633149a304b388cf941c2b8f98fe3(Long s, Integer g) {
    double gs = 1.0 * (double) s.longValue() / (double) g.intValue();
    return gs;
}
public static Double func_ea798ffd0a0b4de58a0215cc805412b4(Long s, Integer g) {
    double gs = 1.0 * (double) s.longValue() / (double) g.intValue();
    return gs;
}
public static Double func_56a4af83dadc4270b11914b2c73ce8c6(Long s, Integer g) {
    double gs = 1.0 * (double) s.longValue() / (double) g.intValue();
    return gs;
}
def func_7aa108c55a064628afbb367e9e7a206e(area, G):
    part = area * 1.0 / G
    cuts = []
    iL = 0
    iU = 0
    return part

def func_c4aed95ffa324ecbb25b7c724f507630(area, G):
    part = area * 1.0 / G
    cuts = []
    return part

def func_d2efe7edc7b24ab8853a8fc8e95e72c3(area, G):
    part = area * 1.0 / G
    cuts = []
    iL = 0
    return part



****** Cluster 88 ******
public static Double func_5fe1896a055545cdb3663267a91bdab4(Integer W) {
    double max = (double) W.intValue() + 1.337E-8;
    return max;
}
public static Double func_e259aa50a7df4bdd8e3ecdec1b6049cb$3a431bf4(Integer W) {
    double max = (double) W.intValue() + 1.337E-8;
    return max;
}
public static Double func_2c87e2ff9c96491193f4d71c74545edb(Integer W) {
    double max = (double) W.intValue() + 1.337E-8;
    return max;
}


****** Cluster 89 ******
public static Double func_974bdaab89234b0ebba57f82da5fe68c(Integer W, Double g, Double firstArea, Integer i) {
    i.intValue();
    g.doubleValue();
    firstArea.doubleValue();
    double max = (double) W.intValue() + 1.337E-8;
    return max;
}
public static Double func_5cab226e3dfb48838ac5cc1b3bb97ad3(Integer W, Double g, Double firstArea, Integer i) {
    i.intValue();
    g.doubleValue();
    firstArea.doubleValue();
    double max = (double) W.intValue() + 1.337E-8;
    return max;
}


****** Cluster 90 ******
public static Double func_62079aef94f349ce8ee4e173eb64431d(Integer W, Double g, Double firstArea, Integer i) {
    double cutArea = (double) (i + 1) / g * firstArea;
    W.intValue();
    return cutArea;
}
public static Double func_08c4fb6e3dcd47c0b7a763f537224931(Integer W, Double g, Double firstArea, Integer i) {
    double cutArea = (double) (i + 1) / g * firstArea;
    W.intValue();
    return cutArea;
}


****** Cluster 91 ******
public static Double func_54da753ca061495e8ac8b8fb02ad2d1c(Double totalArea) {
    totalArea = Math.abs(totalArea) / 2.0;
    return totalArea;
}
public static Double func_c0bb9a35ad914ce9b3fdf26c4bfd6769(Double totalArea) {
    totalArea = Math.abs(totalArea) / 2.0;
    return totalArea;
}


****** Cluster 92 ******
public static Double func_bc28eed7106048869c9ec61d61af1ee5(Double totalArea, Integer guestCount) {
    double partArea = totalArea / (double) guestCount.intValue();
    return partArea;
}
public static Double func_dd9ffa862700416e9eaf2fc93ae57bdd(Double totalArea, Integer guestCount) {
    double partArea = totalArea / (double) guestCount.intValue();
    guestCount.intValue();
    return partArea;
}
public static Double func_187da0106a13468788231890888ee7fc(Double totalArea, Integer guestCount) {
    double partArea = totalArea / (double) guestCount.intValue();
    return partArea;
}
public static Double func_34fb82f5d21640f4910bab7ab426a458(Double totalArea, Integer guestCount) {
    double partArea = totalArea / (double) guestCount.intValue();
    guestCount.intValue();
    return partArea;
}
public static Double func_4c79463ad109458486b7657158cc2443(Double totalArea, Integer guestCount) {
    double partArea = totalArea / (double) guestCount.intValue();
    guestCount.intValue();
    return partArea;
}
public static Double func_9c44658a41ae4239b10585bd7e7bfad7(Double area, Integer guests) {
    double slice = area / (double) guests.intValue();
    return slice;
}
public static Double func_0e3ba0dd55a94bbe86fcbd388c27735d(Double area, Integer guests) {
    double slice = area / (double) guests.intValue();
    new java.util.ArrayList();
    return slice;
}
public static Double func_90e3a71549394a7cbcc842f1a52c635a$6e1aa521(Double area, Integer guests) {
    double slice = area / (double) guests.intValue();
    new java.util.ArrayList();
    Integer.valueOf(0);
    return slice;
}
public static Double func_f8f027b242e54fcdae756e10e12eca37$6646ad68(Double area, Integer guests) {
    double slice = area / (double) guests.intValue();
    new java.util.ArrayList();
    Integer.valueOf(0);
    Integer.valueOf(0);
    return slice;
}
public static Double func_1fcc5564a1d44325a332dc4db61270b7(Double area, Integer g) {
    double chunkSize = area / (double) g.intValue();
    return chunkSize;
}


****** Cluster 93 ******
public static Double func_6d141e8517e14843b12fba5da1e685ee(Double totalArea, Integer guestCount) {
    totalArea = Math.abs(totalArea) / 2.0;
    double partArea = totalArea / (double) guestCount.intValue();
    return partArea;
}
public static Double func_fef5cd830c484cf48d56aecd8724a98f(Double totalArea, Integer guestCount) {
    totalArea = Math.abs(totalArea) / 2.0;
    double partArea = totalArea / (double) guestCount.intValue();
    guestCount.intValue();
    return partArea;
}


****** Cluster 94 ******
public static Double func_bf92e38cc066448b8254219122098353(Double totalArea, Integer guestCount) {
    totalArea = Math.abs(totalArea) / 2.0;
    totalArea.doubleValue();
    guestCount.intValue();
    return totalArea;
}
public static Double func_ca5a94de23a54775afe206e65efe9a52(Double totalArea, Integer guestCount) {
    totalArea = Math.abs(totalArea) / 2.0;
    totalArea.doubleValue();
    guestCount.intValue();
    guestCount.intValue();
    return totalArea;
}


****** Cluster 95 ******
public static Double func_81c7259574844d9aab132feb073076f3(Integer[] x2, Integer i) {
    double x1 = x2[i].intValue();
    x2[i + 1].intValue();
    return x1;
}
public static Integer func_0928766575b94299ae55517a07a76d26(Integer[] events, Integer i) {
    int x1 = events[i];
    events[i + 1].intValue();
    return x1;
}
public static Integer func_bf9662d4da064200b71d819f92eb7dbf(Integer[] events, Integer i) {
    int x1 = events[i];
    events[i + 1].intValue();
    return x1;
}
public static Long func_26c7ae0843c54e0fba24c88d5421514e(Long[] s, Integer n) {
    long best = s[n];
    return best;
}
public static Long func_c9494c57fd6c438b9acaf43646dad563(Long[] sums, Integer start) {
    long leftCount = sums[start];
    start.intValue();
    return leftCount;
}
public static Long func_fdfe2e853abf4a2dbf49ecb98396eaca(Long[] sum, Integer n) {
    long x2 = sum[n];
    return x2;
}
public static Long func_60b99598b6f4421884ade8cdac0b940b(Long[] pref, Integer n) {
    long high = pref[n];
    return high;
}


****** Cluster 96 ******
public static Double func_d1db69d2a7fc4fd9bc3981f561efe18a(Integer[] x2, Integer i) {
    x2[i].intValue();
    double x22 = x2[i + 1].intValue();
    return x22;
}
public static Integer func_26cd8223b9854baaa60eefc75ca04711(Integer[] events, Integer i) {
    events[i].intValue();
    int x2 = events[i + 1];
    return x2;
}
public static Integer func_b8ccd57cafe24a59a9c51a9821ab6006(Integer[] events, Integer i) {
    events[i].intValue();
    int x2 = events[i + 1];
    return x2;
}


****** Cluster 97 ******
public static Double func_024a53ff621748bc95c3465b7804ac02(Integer[] x2, Integer i, Integer[] y) {
    x2[i + 1].intValue();
    double y1 = y[i].intValue();
    return y1;
}
public static Double func_44db373585c949ca9ec5506a560d3201(Integer[] x2, Integer i, Integer[] y) {
    x2[i + 1].intValue();
    double y1 = y[i].intValue();
    y[i + 1].intValue();
    return y1;
}


****** Cluster 98 ******
public static Double func_e285e0b39f474c45b3dde788877b8571(Integer[] x2, Integer i, Integer[] y) {
    double x22 = x2[i + 1].intValue();
    y[i].intValue();
    return x22;
}
public static Double func_5e694183b89441889c92d565bfb5618a(Integer[] x2, Integer i, Integer[] y) {
    double x22 = x2[i + 1].intValue();
    y[i].intValue();
    y[i + 1].intValue();
    return x22;
}


****** Cluster 99 ******
public static Double func_4d032efa26804d729ac78d8996c6ce77(Integer i, Integer[] y) {
    y[i].intValue();
    double y2 = y[i + 1].intValue();
    return y2;
}
public static Double func_ce69e7c390114201b36262424f730832(Integer ind, Integer[] x2) {
    x2[ind].intValue();
    double R = x2[ind + 1].intValue();
    return R;
}


****** Cluster 100 ******
public static Double func_c4d34a9f7488479bbfc8ac19ec4ab243(Integer i, Integer[] y) {
    double y1 = y[i].intValue();
    y[i + 1].intValue();
    return y1;
}
public static Double func_64991b32ee0c49a88808a7c450d1f1e4(Integer ind, Integer[] x2) {
    double L = x2[ind].intValue();
    x2[ind + 1].intValue();
    return L;
}


****** Cluster 101 ******
public static Double func_c2bcc705777a4a5a8b58ed1e7f06bc95(Integer[] x2, Integer i, Integer[] y) {
    double x1 = x2[i].intValue();
    x2[i + 1].intValue();
    y[i].intValue();
    return x1;
}
public static Double func_370020ef709d4c249fe75026ae94cd29(Integer[] x2, Integer i, Integer[] y) {
    double x1 = x2[i].intValue();
    x2[i + 1].intValue();
    y[i].intValue();
    y[i + 1].intValue();
    return x1;
}


****** Cluster 102 ******
public static Double func_9f15c982105e4848956f29d790dbc1a7(Integer[] x2, Integer i, Integer[] y) {
    x2[i].intValue();
    x2[i + 1].intValue();
    double y1 = y[i].intValue();
    return y1;
}
public static Double func_98d7aca822b54048893e205370b63462(Integer[] x2, Integer i, Integer[] y) {
    x2[i].intValue();
    x2[i + 1].intValue();
    double y1 = y[i].intValue();
    y[i + 1].intValue();
    return y1;
}


****** Cluster 103 ******
public static Double func_040b6d8dbd0447e08bb7629c4f39921f(Integer[] x2, Integer i, Integer[] y) {
    x2[i].intValue();
    double x22 = x2[i + 1].intValue();
    y[i].intValue();
    return x22;
}
public static Double func_08b6cfc725a14168ad9b421ddfd7c1a4(Integer[] x2, Integer i, Integer[] y) {
    x2[i].intValue();
    double x22 = x2[i + 1].intValue();
    y[i].intValue();
    y[i + 1].intValue();
    return x22;
}


****** Cluster 104 ******
public static Double func_50fa15a9b67d4d2f9895d598e1d9c68b(Double[] xs, Double[] ys, Integer n, Double right) {
    double res = 0.0;
    for (int i = 0; i < n - 1; ++i) {
        if (right < xs[i])
            continue;
        if (right < xs[i + 1]) {
            double a2 = (ys[i + 1] - ys[i]) / (xs[i + 1] - xs[i]);
            double b = ys[i] - a2 * xs[i];
            double y = a2 * right + b;
            res += (ys[i] + y) * (right - xs[i]) / 2.0;
            continue;
        }
        res += (ys[i] + ys[i + 1]) * (xs[i + 1] - xs[i]) / 2.0;
    }
    return res;
}
public static double func_7a422e8ab0ea417584c79d2c06c7ca77(Double[] xs, Double[] ys, Integer n, Double right) {
    double res = 0.0;
    for (int i = 0; i < n - 1; ++i) {
        if (right < xs[i])
            continue;
        if (right < xs[i + 1]) {
            double a2 = (ys[i + 1] - ys[i]) / (xs[i + 1] - xs[i]);
            double b = ys[i] - a2 * xs[i];
            double y = a2 * right + b;
            res += (ys[i] + y) * (right - xs[i]) / 2.0;
            continue;
        }
        res += (ys[i] + ys[i + 1]) * (xs[i + 1] - xs[i]) / 2.0;
    }
    return res;
}


****** Cluster 105 ******
public static double func_e94c38142a7b4f61bb928c5eebb983a9(Double[] xs, Double res, Double[] ys, Integer n, Double right) {
    for (int i = 0; i < n - 1; ++i) {
        if (right < xs[i])
            continue;
        if (right < xs[i + 1]) {
            double a2 = (ys[i + 1] - ys[i]) / (xs[i + 1] - xs[i]);
            double b = ys[i] - a2 * xs[i];
            double y = a2 * right + b;
            res = res + (ys[i] + y) * (right - xs[i]) / 2.0;
            continue;
        }
        res = res + (ys[i] + ys[i + 1]) * (xs[i + 1] - xs[i]) / 2.0;
    }
    return res;
}
public static Double func_7352e7c747ab4ce1840bef0ba934cb6e(Double[] xs, Double res, Double[] ys, Integer n, Double right) {
    for (int i = 0; i < n - 1; ++i) {
        if (right < xs[i])
            continue;
        if (right < xs[i + 1]) {
            double a2 = (ys[i + 1] - ys[i]) / (xs[i + 1] - xs[i]);
            double b = ys[i] - a2 * xs[i];
            double y = a2 * right + b;
            res = res + (ys[i] + y) * (right - xs[i]) / 2.0;
            continue;
        }
        res = res + (ys[i] + ys[i + 1]) * (xs[i + 1] - xs[i]) / 2.0;
    }
    return res;
}


****** Cluster 106 ******
public static Double func_486650e7439941a295acd02b5ce8630d(Double[] xs, Double[] ys, Double right) {
    int n = xs.length;
    double res = 0.0;
    for (int i = 0; i < n - 1; ++i) {
        if (right < xs[i])
            continue;
        if (right < xs[i + 1]) {
            double a2 = (ys[i + 1] - ys[i]) / (xs[i + 1] - xs[i]);
            double b = ys[i] - a2 * xs[i];
            double y = a2 * right + b;
            res += (ys[i] + y) * (right - xs[i]) / 2.0;
            continue;
        }
        res += (ys[i] + ys[i + 1]) * (xs[i + 1] - xs[i]) / 2.0;
    }
    return res;
}
public static double func_ad75f0eea15d413c8fc85237abeade2d(Double[] xs, Double[] ys, Double right) {
    int n = xs.length;
    double res = 0.0;
    for (int i = 0; i < n - 1; ++i) {
        if (right < xs[i])
            continue;
        if (right < xs[i + 1]) {
            double a2 = (ys[i + 1] - ys[i]) / (xs[i + 1] - xs[i]);
            double b = ys[i] - a2 * xs[i];
            double y = a2 * right + b;
            res += (ys[i] + y) * (right - xs[i]) / 2.0;
            continue;
        }
        res += (ys[i] + ys[i + 1]) * (xs[i + 1] - xs[i]) / 2.0;
    }
    return res;
}


****** Cluster 107 ******
public static Double func_7bbbe50d260b45e8bc8fca0915e20573(Integer G, Double total, Integer g) {
    double part = (double) g.intValue() * total / (double) G.intValue();
    return part;
}
public static Double func_e6a9ba309a324672b84e377e79850aff(Integer g, Double area, Integer i) {
    double na = area * (double) i.intValue() / (double) g.intValue();
    return na;
}


****** Cluster 108 ******
public static Double func_370d13c9cb1e4e3f91affb12002284df(Double area, Integer g, Double curArea, Integer w) {
    Double.valueOf(curArea + area / (double) g.intValue());
    double r = w.intValue();
    return r;
}
public static Double func_0ede832e7d5f4ddabf657cd300c88b34(Double area, Integer g, Double curArea, Integer w) {
    Double.valueOf(curArea + area / (double) g.intValue());
    double r = w.intValue();
    return r;
}


****** Cluster 109 ******
public static Double func_f49d512aaf2b468f988621cdb8ff6b2c(Double area, Integer g, Double curArea, Integer w) {
    curArea = curArea + area / (double) g.intValue();
    w.intValue();
    return curArea;
}
public static Double func_31ed6b8831c341c0ad690a8b3128a993(Double area, Integer g, Double curArea, Integer w) {
    curArea = curArea + area / (double) g.intValue();
    w.intValue();
    return curArea;
}


****** Cluster 110 ******
public static Double func_13de15c9687e42b88d5eba0ec4f3e033(Double[] h, Integer G, Double[] S, Double tS, Integer w) {
    for (int i = 0; i < w; ++i) {
        S[i] = (h[i] + h[i + 1]) / 2.0;
        tS = tS + S[i];
    }
    G.intValue();
    return tS;
}
public static Double func_c9709e8ff1254edfa805c38bed4d9a5c(Double[] h, Integer G, Double[] S, Double tS, Integer w) {
    for (int i = 0; i < w; ++i) {
        S[i] = (h[i] + h[i + 1]) / 2.0;
        tS = tS + S[i];
    }
    G.intValue();
    return tS;
}


****** Cluster 111 ******
public static Double func_6f901bf3c09d4ff39dc0a2fc5d6a1fd0(Double[] h, Integer G, Double[] S, Integer w) {
    double tS = 0.0;
    for (int i = 0; i < w; ++i) {
        S[i] = (h[i] + h[i + 1]) / 2.0;
        tS += S[i].doubleValue();
    }
    G.intValue();
    return tS;
}
public static Double func_dae80a3bc1b7447bbf5a3f1c35bf8978(Double[] h, Integer G, Double[] S, Integer w) {
    double tS = 0.0;
    for (int i = 0; i < w; ++i) {
        S[i] = (h[i] + h[i + 1]) / 2.0;
        tS += S[i].doubleValue();
    }
    G.intValue();
    return tS;
}


****** Cluster 112 ******
public static Double func_1e97ba9f58264f0487bbd482512c3bd1(Double[] h, Integer G, Integer w) {
    double[] S = new double[w.intValue()];
    double tS = 0.0;
    for (int i = 0; i < w; ++i) {
        S[i] = (h[i] + h[i + 1]) / 2.0;
        tS += S[i];
    }
    G.intValue();
    return tS;
}
public static Double func_65276615f766466bb4d0cb27b7fd0ca8(Double[] h, Integer G, Integer w) {
    double[] S = new double[w.intValue()];
    double tS = 0.0;
    for (int i = 0; i < w; ++i) {
        S[i] = (h[i] + h[i + 1]) / 2.0;
        tS += S[i];
    }
    G.intValue();
    return tS;
}


****** Cluster 113 ******
public static Double func_6dadd1a9744a43768c33b6cf9f79997e(Integer[] lx, Integer[] ly, Integer[] uy, Double[] h, Integer G, Integer[] ux, Integer w) {
    int pu = 0;
    int pl = 0;
    for (int i = 0; i <= w; ++i) {
        double x2 = i;
        if (i > ux[pu + 1]) {
            ++pu;
        }
        if (i > lx[pl + 1]) {
            ++pl;
        }
        double lH = ((double) ly[pl].intValue() * ((double) lx[pl + 1].intValue() - x2) + (double) ly[pl + 1].intValue() * (x2 - (double) lx[pl].intValue())) / (double) (lx[pl + 1] - lx[pl]);
        double uH = ((double) uy[pu].intValue() * ((double) ux[pu + 1].intValue() - x2) + (double) uy[pu + 1].intValue() * (x2 - (double) ux[pu].intValue())) / (double) (ux[pu + 1] - ux[pu]);
        h[i] = uH - lH;
    }
    double[] S = new double[w.intValue()];
    double tS = 0.0;
    for (int i = 0; i < w; ++i) {
        S[i] = (h[i] + h[i + 1]) / 2.0;
        tS += S[i];
    }
    G.intValue();
    return tS;
}
public static Double func_334f9d1e2ccc45c2abd2763d7da441d4(Integer[] lx, Integer[] ly, Integer[] uy, Double[] h, Integer G, Integer[] ux, Integer w) {
    int pu = 0;
    int pl = 0;
    for (int i = 0; i <= w; ++i) {
        double x2 = i;
        if (i > ux[pu + 1]) {
            ++pu;
        }
        if (i > lx[pl + 1]) {
            ++pl;
        }
        double lH = ((double) ly[pl].intValue() * ((double) lx[pl + 1].intValue() - x2) + (double) ly[pl + 1].intValue() * (x2 - (double) lx[pl].intValue())) / (double) (lx[pl + 1] - lx[pl]);
        double uH = ((double) uy[pu].intValue() * ((double) ux[pu + 1].intValue() - x2) + (double) uy[pu + 1].intValue() * (x2 - (double) ux[pu].intValue())) / (double) (ux[pu + 1] - ux[pu]);
        h[i] = uH - lH;
    }
    double[] S = new double[w.intValue()];
    double tS = 0.0;
    for (int i = 0; i < w; ++i) {
        S[i] = (h[i] + h[i + 1]) / 2.0;
        tS += S[i];
    }
    G.intValue();
    return tS;
}


****** Cluster 114 ******
public static Double func_5ccae904a33c4ca69e752a2d2807ed54(Integer[] lx, Integer[] ly, Integer[] uy, Integer G, Integer[] ux, Integer w) {
    double[] h = new double[w + 1];
    int pu = 0;
    int pl = 0;
    for (int i = 0; i <= w; ++i) {
        double x2 = i;
        if (i > ux[pu + 1]) {
            ++pu;
        }
        if (i > lx[pl + 1]) {
            ++pl;
        }
        double lH = ((double) ly[pl].intValue() * ((double) lx[pl + 1].intValue() - x2) + (double) ly[pl + 1].intValue() * (x2 - (double) lx[pl].intValue())) / (double) (lx[pl + 1] - lx[pl]);
        double uH = ((double) uy[pu].intValue() * ((double) ux[pu + 1].intValue() - x2) + (double) uy[pu + 1].intValue() * (x2 - (double) ux[pu].intValue())) / (double) (ux[pu + 1] - ux[pu]);
        h[i] = uH - lH;
    }
    double[] S = new double[w.intValue()];
    double tS = 0.0;
    for (int i = 0; i < w; ++i) {
        S[i] = (h[i] + h[i + 1]) / 2.0;
        tS += S[i];
    }
    G.intValue();
    return tS;
}
public static Double func_afa7d676705f4cff936b4b0d686d2769(Integer[] lx, Integer[] ly, Integer[] uy, Integer G, Integer[] ux, Integer w) {
    double[] h = new double[w + 1];
    int pu = 0;
    int pl = 0;
    for (int i = 0; i <= w; ++i) {
        double x2 = i;
        if (i > ux[pu + 1]) {
            ++pu;
        }
        if (i > lx[pl + 1]) {
            ++pl;
        }
        double lH = ((double) ly[pl].intValue() * ((double) lx[pl + 1].intValue() - x2) + (double) ly[pl + 1].intValue() * (x2 - (double) lx[pl].intValue())) / (double) (lx[pl + 1] - lx[pl]);
        double uH = ((double) uy[pu].intValue() * ((double) ux[pu + 1].intValue() - x2) + (double) uy[pu + 1].intValue() * (x2 - (double) ux[pu].intValue())) / (double) (ux[pu + 1] - ux[pu]);
        h[i] = uH - lH;
    }
    double[] S = new double[w.intValue()];
    double tS = 0.0;
    for (int i = 0; i < w; ++i) {
        S[i] = (h[i] + h[i + 1]) / 2.0;
        tS += S[i];
    }
    G.intValue();
    return tS;
}


****** Cluster 115 ******
public static Double func_f70d11daef874f34b24a56c2dfd2236b(Double Y, Double z, Double[] down, Integer j) {
    down[j.intValue()] = z;
    z = z + Y;
    return z;
}
public static Double func_120d2efa76e04ab2a998281f0537a6d6(Double Y, Double z, Double[] angleDown, Integer j) {
    z = z + Y;
    angleDown[j.intValue()] = Y;
    return z;
}


****** Cluster 116 ******
public static Double func_7898e55305014399bb1aec047e128704(Double Y, Double z, Integer j, Double[] up) {
    up[j.intValue()] = z;
    z = z + Y;
    return z;
}
public static Double func_d53b5701da14495eb5c8ba15764c2cd5(Double Y, Double z, Integer j, Double[] angleUp) {
    z = z + Y;
    angleUp[j.intValue()] = Y;
    return z;
}


****** Cluster 117 ******
public static Double func_2be93b10244b4b23ad02c2c5940dfda1(Integer G, Integer W, Double[] down, Double[] up, Double S) {
    for (int i = 0; i < W; ++i) {
        S = S + (up[i] + up[i + 1] - down[i] - down[i + 1]) / 2.0;
    }
    S = S / (double) G.intValue();
    return S;
}
public static Double func_f60875028e784ee7a4fcbf756dd533d5(Integer G, Integer W, Double[] down, Double[] up, Double S) {
    for (int i = 0; i < W; ++i) {
        S = S + (up[i] + up[i + 1] - down[i] - down[i + 1]) / 2.0;
    }
    S = S / (double) G.intValue();
    return S;
}


****** Cluster 118 ******
public static Double func_f76e9b46a18f4ba1b4dbf3d6a98bc05c(Integer G, Double S) {
    S = S / (double) G.intValue();
    return S;
}
public static Double func_b86631e291a147f991999dde9c82ad2e(Integer g, Double piece) {
    piece = piece / (double) g.intValue();
    double curLeft = piece;
    return curLeft;
}
public static Double func_e3037dd265c34fd2a7a48df07ef2eac3(Integer g, Double piece) {
    piece = piece / (double) g.intValue();
    piece.doubleValue();
    return piece;
}
public static Double func_998b5bd42d7d418d9a5200873341174c(Integer g, Double piece) {
    piece = piece / (double) g.intValue();
    return piece;
}
public static Double func_a68812aae14e486e948794488545701a(Integer g, Double piece) {
    piece = piece / (double) g.intValue();
    return piece;
}
public static Double func_49837746abc04cf292f61fcedc8d65a7(Integer G, Double S) {
    S = S / (double) G.intValue();
    return S;
}
public static Double func_d627241cb3014318a91519d438ab87c4(Integer G, Double S) {
    S = S / (double) G.intValue();
    return S;
}
public static Double func_27edd7c00f874841a3f04feb2c8c7b46(Integer G, Double S) {
    S = S / (double) G.intValue();
    return S;
}
public static Double func_67237a72289e4b0198696d60658340c1(Integer g, Double totalArea) {
    double goal = totalArea / (double) g.intValue();
    return goal;
}
public static Double func_060cc2dd1d8e4a15a7f5c193daa3e5b4(Integer g, Double totalArea) {
    double goal = totalArea / (double) g.intValue();
    return goal;
}
public static Double func_2ccf0696ce3a461480cf74c8a0811cae(Integer g, Double totalArea) {
    double goal = totalArea / (double) g.intValue();
    return goal;
}
public static Double func_21920bdef897453a949bea5c8cdd6ae4(Integer g, Double totalArea) {
    double goal = totalArea / (double) g.intValue();
    return goal;
}
public static Double func_4c9479a05be042f581b19a5628782a48(Integer g, Double totalArea) {
    double goal = totalArea / (double) g.intValue();
    return goal;
}
public static Double func_651973422d8d4fbdb3031e30a8f63a90(Integer g, Double totalArea) {
    double goal = totalArea / (double) g.intValue();
    new java.util.LinkedList();
    return goal;
}
public static Double func_e0a6aea738d2487fa213d7ac65767d6e(Integer g, Double totalArea) {
    double goal = totalArea / (double) g.intValue();
    new java.util.LinkedList();
    return goal;
}
public static Double func_5adc4d99ee954c4b899d6ab86de578da(Integer g, Double sum) {
    double req = sum / (double) g.intValue();
    return req;
}
public static Double func_42506b1a8d564bbe91d51a144fa467a3(Integer g, Double sum) {
    double req = sum / (double) g.intValue();
    return req;
}
public static Double func_88137a67cd90430ab263a5efedddcb64(Integer g, Double sum) {
    double req = sum / (double) g.intValue();
    return req;
}
def func_56eeaae28dbd4fe3aaa51e292782a7ca(G, total):
    area = total / G
    res = []
    return area

def func_0510ad09f0bd479f82a5c272256b1460(npieces, total_area):
    size = total_area / npieces
    cuts = []
    needed = size
    return size

def func_8170912d640642e2834a0c0777dbfd2e(npieces, total_area):
    size = total_area / npieces
    cuts = []
    needed = size
    return needed

def func_eae09f945198426fbc5ab388e4a1467d(npieces, total_area):
    size = total_area / npieces
    cuts = []
    return size

def func_0602812e9e2440ea888fbdd453a3317e(G, area):
    nextarea = area / G
    curarea = 0.0
    return nextarea

def func_8c161db15e5846dea4ea0cc0dcbadaff(g, a):
    d = a / g
    r = []
    i = 0
    return d

def func_c89504b3ee324d7d901adbf0aa7af66d(g, a):
    d = a / g
    r = []
    return d

def func_eb6eede4695145dbb5bae9e3d868d85c(g, a):
    d = a / g
    r = []
    i = 0
    c = 0
    return d

def func_012b96af74164c0985a7cbd261353c50(G, area):
    need = area * 1.0 / G
    out = []
    return need



****** Cluster 119 ******
public static Double func_884710f699e34e0eaed8475e4eb56a31(Integer W, Integer i, Integer G, Double all) {
    double high = W.intValue();
    all.doubleValue();
    G.intValue();
    i.intValue();
    return high;
}
public static Double func_2231b4d916ab4116803caac06a85a267(Integer W, Integer i, Integer G, Double all) {
    double high = W.intValue();
    all.doubleValue();
    G.intValue();
    i.intValue();
    return high;
}


****** Cluster 120 ******
public static Integer func_69d9719e921d487ba21b354b94b3466f(Integer[] yu, Integer[] yl, Integer l, Integer[] xl, Integer[] xu, Integer n, Integer u) {
    int i;
    int[] x2 = new int[n.intValue()];
    for (i = 0; i < u; ++i) {
        x2[i] = xu[i];
    }
    for (i = 1; i < l - 1; ++i) {
        x2[i - 1 + u.intValue()] = xl[i];
    }
    Arrays.sort(x2);
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i2 = 0; i2 < n; ++i2) {
        while (x2[i2] > xl[ind + 1]) {
            ++ind;
        }
        y1[i2] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i2] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i3 = 0; i3 < n; ++i3) {
        while (x2[i3] > xu[ind + 1]) {
            ++ind;
        }
        y2[i3] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i3] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i4 = 0; i4 < n; ++i4) {
        yy[i4] = y2[i4] - y1[i4];
    }
    return ind;
}
public static Integer func_a20232b896f54799858097c7a19b3426(Integer[] yu, Integer[] yl, Integer l, Integer[] xl, Integer[] xu, Integer n, Integer u) {
    int i;
    int[] x2 = new int[n.intValue()];
    for (i = 0; i < u; ++i) {
        x2[i] = xu[i];
    }
    for (i = 1; i < l - 1; ++i) {
        x2[i - 1 + u.intValue()] = xl[i];
    }
    Arrays.sort(x2);
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i2 = 0; i2 < n; ++i2) {
        while (x2[i2] > xl[ind + 1]) {
            ++ind;
        }
        y1[i2] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i2] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i3 = 0; i3 < n; ++i3) {
        while (x2[i3] > xu[ind + 1]) {
            ++ind;
        }
        y2[i3] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i3] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i4 = 0; i4 < n; ++i4) {
        yy[i4] = y2[i4] - y1[i4];
    }
    return ind;
}
public static Integer func_6322d28e1de0450a8c5a1c5b1bb24827(Integer[] yu, Integer[] yl, Integer l, Integer[] xl, Integer[] xu, Integer n, Integer u) {
    int i;
    int[] x2 = new int[n.intValue()];
    for (i = 0; i < u; ++i) {
        x2[i] = xu[i];
    }
    for (i = 1; i < l - 1; ++i) {
        x2[i - 1 + u.intValue()] = xl[i];
    }
    Arrays.sort(x2);
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i2 = 0; i2 < n; ++i2) {
        while (x2[i2] > xl[ind + 1]) {
            ++ind;
        }
        y1[i2] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i2] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i3 = 0; i3 < n; ++i3) {
        while (x2[i3] > xu[ind + 1]) {
            ++ind;
        }
        y2[i3] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i3] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i4 = 0; i4 < n; ++i4) {
        yy[i4] = y2[i4] - y1[i4];
    }
    for (int i5 = 0; i5 < n - 1; ++i5) {
    }
    return ind;
}
public static Integer func_dd2bfe473f7b4201a461f180a7f4af70(Integer[] yu, Integer[] yl, Integer l, Integer[] xl, Integer[] xu, Integer n, Integer u) {
    int i;
    int[] x2 = new int[n.intValue()];
    for (i = 0; i < u; ++i) {
        x2[i] = xu[i];
    }
    for (i = 1; i < l - 1; ++i) {
        x2[i - 1 + u.intValue()] = xl[i];
    }
    Arrays.sort(x2);
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i2 = 0; i2 < n; ++i2) {
        while (x2[i2] > xl[ind + 1]) {
            ++ind;
        }
        y1[i2] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i2] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i3 = 0; i3 < n; ++i3) {
        while (x2[i3] > xu[ind + 1]) {
            ++ind;
        }
        y2[i3] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i3] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    return ind;
}
public static Integer func_abd051b04e15499781aae6e6108f0333(Integer[] yu, Integer[] yl, Integer l, Integer[] xl, Integer[] xu, Integer n, Integer u) {
    int i;
    int[] x2 = new int[n.intValue()];
    for (i = 0; i < u; ++i) {
        x2[i] = xu[i];
    }
    for (i = 1; i < l - 1; ++i) {
        x2[i - 1 + u.intValue()] = xl[i];
    }
    Arrays.sort(x2);
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i2 = 0; i2 < n; ++i2) {
        while (x2[i2] > xl[ind + 1]) {
            ++ind;
        }
        y1[i2] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i2] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i3 = 0; i3 < n; ++i3) {
        while (x2[i3] > xu[ind + 1]) {
            ++ind;
        }
        y2[i3] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i3] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    n.intValue();
    return ind;
}


****** Cluster 121 ******
public static Integer func_0f6f2d839c8e4460b05d38b6df628c74(Integer[] yu, Integer[] yl, Integer l, Integer[] xl, Integer[] x2, Integer[] xu, Integer n, Integer u) {
    int i;
    for (i = 0; i < u; ++i) {
        x2[i] = xu[i];
    }
    for (i = 1; i < l - 1; ++i) {
        x2[i - 1 + u.intValue()] = xl[i];
    }
    Arrays.sort((Object[]) x2);
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i2 = 0; i2 < n; ++i2) {
        while (x2[i2] > xl[ind + 1]) {
            ++ind;
        }
        y1[i2] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i2] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i3 = 0; i3 < n; ++i3) {
        while (x2[i3] > xu[ind + 1]) {
            ++ind;
        }
        y2[i3] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i3] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i4 = 0; i4 < n; ++i4) {
        yy[i4] = y2[i4] - y1[i4];
    }
    return ind;
}
public static Integer func_dc2146cc8c95446793e153c3c479ec33(Integer[] yu, Integer[] yl, Integer l, Integer[] xl, Integer[] x2, Integer[] xu, Integer n, Integer u) {
    int i;
    for (i = 0; i < u; ++i) {
        x2[i] = xu[i];
    }
    for (i = 1; i < l - 1; ++i) {
        x2[i - 1 + u.intValue()] = xl[i];
    }
    Arrays.sort((Object[]) x2);
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i2 = 0; i2 < n; ++i2) {
        while (x2[i2] > xl[ind + 1]) {
            ++ind;
        }
        y1[i2] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i2] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i3 = 0; i3 < n; ++i3) {
        while (x2[i3] > xu[ind + 1]) {
            ++ind;
        }
        y2[i3] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i3] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i4 = 0; i4 < n; ++i4) {
        yy[i4] = y2[i4] - y1[i4];
    }
    for (int i5 = 0; i5 < n - 1; ++i5) {
        x2[i5 + 1].intValue();
        x2[i5].intValue();
    }
    return ind;
}
public static Integer func_1f5d8f3593714ebfb9326514db1c45dd(Integer[] yu, Integer[] yl, Integer l, Integer[] xl, Integer[] x2, Integer[] xu, Integer n, Integer u) {
    int i;
    for (i = 0; i < u; ++i) {
        x2[i] = xu[i];
    }
    for (i = 1; i < l - 1; ++i) {
        x2[i - 1 + u.intValue()] = xl[i];
    }
    Arrays.sort((Object[]) x2);
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i2 = 0; i2 < n; ++i2) {
        while (x2[i2] > xl[ind + 1]) {
            ++ind;
        }
        y1[i2] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i2] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i3 = 0; i3 < n; ++i3) {
        while (x2[i3] > xu[ind + 1]) {
            ++ind;
        }
        y2[i3] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i3] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    return ind;
}
public static Integer func_cd63276e37f24165a85f3ea13fe863a8(Integer[] yu, Integer[] yl, Integer l, Integer[] xl, Integer[] x2, Integer[] xu, Integer n, Integer u) {
    int i;
    for (i = 0; i < u; ++i) {
        x2[i] = xu[i];
    }
    for (i = 1; i < l - 1; ++i) {
        x2[i - 1 + u.intValue()] = xl[i];
    }
    Arrays.sort((Object[]) x2);
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i2 = 0; i2 < n; ++i2) {
        while (x2[i2] > xl[ind + 1]) {
            ++ind;
        }
        y1[i2] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i2] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i3 = 0; i3 < n; ++i3) {
        while (x2[i3] > xu[ind + 1]) {
            ++ind;
        }
        y2[i3] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i3] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    n.intValue();
    return ind;
}
public static Integer func_04ee565097cc47c49ceb846eaeeb660e(Integer[] yu, Integer[] yl, Integer l, Integer[] xl, Integer[] x2, Integer[] xu, Integer n, Integer u) {
    int i;
    for (i = 0; i < u; ++i) {
        x2[i] = xu[i];
    }
    for (i = 1; i < l - 1; ++i) {
        x2[i - 1 + u.intValue()] = xl[i];
    }
    Arrays.sort((Object[]) x2);
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i2 = 0; i2 < n; ++i2) {
        while (x2[i2] > xl[ind + 1]) {
            ++ind;
        }
        y1[i2] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i2] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i3 = 0; i3 < n; ++i3) {
        while (x2[i3] > xu[ind + 1]) {
            ++ind;
        }
        y2[i3] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i3] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i4 = 0; i4 < n; ++i4) {
        yy[i4] = y2[i4] - y1[i4];
    }
    return ind;
}


****** Cluster 122 ******
public static Integer func_4e502f8018ec44c6bad06954eda625da(Integer[] yu, Integer[] yl, Integer l, Integer[] xl, Integer[] x2, Integer[] xu, Integer n, Integer u) {
    for (int i = 1; i < l - 1; ++i) {
        x2[i - 1 + u.intValue()] = xl[i];
    }
    Arrays.sort((Object[]) x2);
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xl[ind + 1]) {
            ++ind;
        }
        y1[i] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ++ind;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    for (int i = 0; i < n - 1; ++i) {
        x2[i + 1].intValue();
        x2[i].intValue();
    }
    return ind;
}
public static Integer func_c5632f398f13429cab7d48458985afe9(Integer[] yu, Integer[] yl, Integer l, Integer[] xl, Integer[] x2, Integer[] xu, Integer n, Integer u) {
    for (int i = 1; i < l - 1; ++i) {
        x2[i - 1 + u.intValue()] = xl[i];
    }
    Arrays.sort((Object[]) x2);
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xl[ind + 1]) {
            ++ind;
        }
        y1[i] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ++ind;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    return ind;
}
public static Integer func_f2bf0a5f38d8418bad1db44faa8d717e(Integer[] yu, Integer[] yl, Integer l, Integer[] xl, Integer[] x2, Integer[] xu, Integer n, Integer u) {
    for (int i = 1; i < l - 1; ++i) {
        x2[i - 1 + u.intValue()] = xl[i];
    }
    Arrays.sort((Object[]) x2);
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xl[ind + 1]) {
            ++ind;
        }
        y1[i] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ++ind;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    n.intValue();
    return ind;
}
public static Integer func_d38153fa05d749a8ad7e55d60d8d2cba(Integer[] yu, Integer[] yl, Integer l, Integer[] xl, Integer[] x2, Integer[] xu, Integer n, Integer u) {
    for (int i = 1; i < l - 1; ++i) {
        x2[i - 1 + u.intValue()] = xl[i];
    }
    Arrays.sort((Object[]) x2);
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xl[ind + 1]) {
            ++ind;
        }
        y1[i] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ++ind;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    return ind;
}
public static Integer func_171dcf7df5ae46b0923de284bf4bf2cc(Integer[] yu, Integer[] yl, Integer l, Integer[] xl, Integer[] x2, Integer[] xu, Integer n, Integer u) {
    for (int i = 1; i < l - 1; ++i) {
        x2[i - 1 + u.intValue()] = xl[i];
    }
    Arrays.sort((Object[]) x2);
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xl[ind + 1]) {
            ++ind;
        }
        y1[i] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ++ind;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    return ind;
}


****** Cluster 123 ******
public static Double func_fc335f947c23434697352912871f7e24(Integer[] yu, Integer[] yl, Integer l, Integer[] xl, Integer[] x2, Integer[] xu, Integer n, Integer u) {
    for (int i = 1; i < l - 1; ++i) {
        x2[i - 1 + u.intValue()] = xl[i];
    }
    Arrays.sort((Object[]) x2);
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xl[ind + 1]) {
            ++ind;
        }
        y1[i] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ++ind;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    double ss = 0.0;
    for (int i = 0; i < n - 1; ++i) {
        ss += (double) (x2[i + 1] - x2[i]) * (yy[i] + yy[i + 1]) / 2.0;
    }
    return ss;
}
public static Double func_fd3a30e281c84520a2708c6845534765(Integer[] yu, Integer[] yl, Integer l, Integer[] xl, Integer[] x2, Integer[] xu, Integer n, Integer u) {
    for (int i = 1; i < l - 1; ++i) {
        x2[i - 1 + u.intValue()] = xl[i];
    }
    Arrays.sort((Object[]) x2);
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xl[ind + 1]) {
            ++ind;
        }
        y1[i] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ++ind;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    double ss = 0.0;
    for (int i = 0; i < n - 1; ++i) {
        ss += (double) (x2[i + 1] - x2[i]) * (yy[i] + yy[i + 1]) / 2.0;
    }
    return ss;
}
public static Double func_a27cb014e1e74cd79bd01ab674441f6d(Integer[] yu, Integer[] yl, Integer l, Integer[] xl, Integer[] x2, Integer[] xu, Integer n, Integer u) {
    for (int i = 1; i < l - 1; ++i) {
        x2[i - 1 + u.intValue()] = xl[i];
    }
    Arrays.sort((Object[]) x2);
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xl[ind + 1]) {
            ++ind;
        }
        y1[i] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ++ind;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    double ss = 0.0;
    for (int i = 0; i < n - 1; ++i) {
        ss += (double) (x2[i + 1] - x2[i]) * (yy[i] + yy[i + 1]) / 2.0;
    }
    return ss;
}


****** Cluster 124 ******
public static Double func_56b15403eaca485b890853399fcbb648(Integer[] yu, Integer[] yl, Integer[] xl, Integer[] x2, Integer[] xu, Integer n) {
    Arrays.sort((Object[]) x2);
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xl[ind + 1]) {
            ++ind;
        }
        y1[i] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ++ind;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    double ss = 0.0;
    for (int i = 0; i < n - 1; ++i) {
        ss += (double) (x2[i + 1] - x2[i]) * (yy[i] + yy[i + 1]) / 2.0;
    }
    return ss;
}
public static Double func_6c62eec0cf4a4bd9b330e508c4a2d509(Integer[] yu, Integer[] yl, Integer[] xl, Integer[] x2, Integer[] xu, Integer n) {
    Arrays.sort((Object[]) x2);
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xl[ind + 1]) {
            ++ind;
        }
        y1[i] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ++ind;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    double ss = 0.0;
    for (int i = 0; i < n - 1; ++i) {
        ss += (double) (x2[i + 1] - x2[i]) * (yy[i] + yy[i + 1]) / 2.0;
    }
    return ss;
}
public static Double func_9f211d04716c48858a66ec2f2b3d771e(Integer[] yu, Integer[] yl, Integer[] xl, Integer[] x2, Integer[] xu, Integer n) {
    Arrays.sort((Object[]) x2);
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xl[ind + 1]) {
            ++ind;
        }
        y1[i] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ++ind;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    double ss = 0.0;
    for (int i = 0; i < n - 1; ++i) {
        ss += (double) (x2[i + 1] - x2[i]) * (yy[i] + yy[i + 1]) / 2.0;
    }
    return ss;
}


****** Cluster 125 ******
public static Double func_f9ed9d7477204cebab39d9e9ede844e6(Integer[] yu, Integer[] yl, Integer[] xl, Integer[] x2, Integer[] xu, Integer n) {
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xl[ind + 1]) {
            ++ind;
        }
        y1[i] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ++ind;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    double ss = 0.0;
    for (int i = 0; i < n - 1; ++i) {
        ss += (double) (x2[i + 1] - x2[i]) * (yy[i] + yy[i + 1]) / 2.0;
    }
    return ss;
}
public static Double func_d702b85a355043e89ac15b7169860adc(Integer[] yu, Integer[] yl, Integer[] xl, Integer[] x2, Integer[] xu, Integer n) {
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xl[ind + 1]) {
            ++ind;
        }
        y1[i] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ++ind;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    double ss = 0.0;
    for (int i = 0; i < n - 1; ++i) {
        ss += (double) (x2[i + 1] - x2[i]) * (yy[i] + yy[i + 1]) / 2.0;
    }
    return ss;
}
public static Double func_7951f9e8578a47a984290d077f1aca62(Integer[] yu, Integer[] yl, Integer[] xl, Integer[] x2, Integer[] xu, Integer n) {
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xl[ind + 1]) {
            ++ind;
        }
        y1[i] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ++ind;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    double ss = 0.0;
    for (int i = 0; i < n - 1; ++i) {
        ss += (double) (x2[i + 1] - x2[i]) * (yy[i] + yy[i + 1]) / 2.0;
    }
    return ss;
}


****** Cluster 126 ******
public static Double func_c8465c0a02834b51b16dd1c4924f4762(Integer[] yu, Integer[] yl, Integer l, Integer[] xl, Integer[] x2, Integer[] xu, Integer n, Integer u) {
    int i;
    for (i = 0; i < u; ++i) {
        x2[i] = xu[i];
    }
    for (i = 1; i < l - 1; ++i) {
        x2[i - 1 + u.intValue()] = xl[i];
    }
    Arrays.sort((Object[]) x2);
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i2 = 0; i2 < n; ++i2) {
        while (x2[i2] > xl[ind + 1]) {
            ++ind;
        }
        y1[i2] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i2] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i3 = 0; i3 < n; ++i3) {
        while (x2[i3] > xu[ind + 1]) {
            ++ind;
        }
        y2[i3] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i3] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i4 = 0; i4 < n; ++i4) {
        yy[i4] = y2[i4] - y1[i4];
    }
    double ss = 0.0;
    for (int i5 = 0; i5 < n - 1; ++i5) {
        ss += (double) (x2[i5 + 1] - x2[i5]) * (yy[i5] + yy[i5 + 1]) / 2.0;
    }
    return ss;
}
public static Double func_1cd8dd2d2c754682ab8a1410b5d98cc2(Integer[] yu, Integer[] yl, Integer l, Integer[] xl, Integer[] x2, Integer[] xu, Integer n, Integer u) {
    int i;
    for (i = 0; i < u; ++i) {
        x2[i] = xu[i];
    }
    for (i = 1; i < l - 1; ++i) {
        x2[i - 1 + u.intValue()] = xl[i];
    }
    Arrays.sort((Object[]) x2);
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i2 = 0; i2 < n; ++i2) {
        while (x2[i2] > xl[ind + 1]) {
            ++ind;
        }
        y1[i2] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i2] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i3 = 0; i3 < n; ++i3) {
        while (x2[i3] > xu[ind + 1]) {
            ++ind;
        }
        y2[i3] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i3] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i4 = 0; i4 < n; ++i4) {
        yy[i4] = y2[i4] - y1[i4];
    }
    double ss = 0.0;
    for (int i5 = 0; i5 < n - 1; ++i5) {
        ss += (double) (x2[i5 + 1] - x2[i5]) * (yy[i5] + yy[i5 + 1]) / 2.0;
    }
    return ss;
}
public static Double func_774be88e16454af198d4e5a2728e69fe(Integer[] yu, Integer[] yl, Integer l, Integer[] xl, Integer[] x2, Integer[] xu, Integer n, Integer u) {
    int i;
    for (i = 0; i < u; ++i) {
        x2[i] = xu[i];
    }
    for (i = 1; i < l - 1; ++i) {
        x2[i - 1 + u.intValue()] = xl[i];
    }
    Arrays.sort((Object[]) x2);
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i2 = 0; i2 < n; ++i2) {
        while (x2[i2] > xl[ind + 1]) {
            ++ind;
        }
        y1[i2] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i2] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i3 = 0; i3 < n; ++i3) {
        while (x2[i3] > xu[ind + 1]) {
            ++ind;
        }
        y2[i3] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i3] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i4 = 0; i4 < n; ++i4) {
        yy[i4] = y2[i4] - y1[i4];
    }
    double ss = 0.0;
    for (int i5 = 0; i5 < n - 1; ++i5) {
        ss += (double) (x2[i5 + 1] - x2[i5]) * (yy[i5] + yy[i5 + 1]) / 2.0;
    }
    return ss;
}


****** Cluster 127 ******
public static Double func_84858746c86c49afa1ee356876137057(Integer[] yu, Integer[] yl, Integer l, Integer[] xl, Integer[] xu, Integer n, Integer u) {
    int i;
    int[] x2 = new int[n.intValue()];
    for (i = 0; i < u; ++i) {
        x2[i] = xu[i];
    }
    for (i = 1; i < l - 1; ++i) {
        x2[i - 1 + u.intValue()] = xl[i];
    }
    Arrays.sort(x2);
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i2 = 0; i2 < n; ++i2) {
        while (x2[i2] > xl[ind + 1]) {
            ++ind;
        }
        y1[i2] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i2] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i3 = 0; i3 < n; ++i3) {
        while (x2[i3] > xu[ind + 1]) {
            ++ind;
        }
        y2[i3] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i3] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i4 = 0; i4 < n; ++i4) {
        yy[i4] = y2[i4] - y1[i4];
    }
    double ss = 0.0;
    for (int i5 = 0; i5 < n - 1; ++i5) {
        ss += (double) (x2[i5 + 1] - x2[i5]) * (yy[i5] + yy[i5 + 1]) / 2.0;
    }
    return ss;
}
public static Double func_078bccc4623c4f82b2b28c4c7e0d8934(Integer[] yu, Integer[] yl, Integer l, Integer[] xl, Integer[] xu, Integer n, Integer u) {
    int i;
    int[] x2 = new int[n.intValue()];
    for (i = 0; i < u; ++i) {
        x2[i] = xu[i];
    }
    for (i = 1; i < l - 1; ++i) {
        x2[i - 1 + u.intValue()] = xl[i];
    }
    Arrays.sort(x2);
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i2 = 0; i2 < n; ++i2) {
        while (x2[i2] > xl[ind + 1]) {
            ++ind;
        }
        y1[i2] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i2] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i3 = 0; i3 < n; ++i3) {
        while (x2[i3] > xu[ind + 1]) {
            ++ind;
        }
        y2[i3] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i3] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i4 = 0; i4 < n; ++i4) {
        yy[i4] = y2[i4] - y1[i4];
    }
    double ss = 0.0;
    for (int i5 = 0; i5 < n - 1; ++i5) {
        ss += (double) (x2[i5 + 1] - x2[i5]) * (yy[i5] + yy[i5 + 1]) / 2.0;
    }
    return ss;
}


****** Cluster 128 ******
public static Integer func_615191bf91764f19aa2e122018a55c3e(Integer[] yu, Integer[] yl, Integer[] xl, Integer[] x2, Integer[] xu, Integer n) {
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xl[ind + 1]) {
            ++ind;
        }
        y1[i] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ++ind;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    return ind;
}
public static Integer func_38fa5b66bb954ea99f2a6f76d1df6b09(Integer[] yu, Integer[] yl, Integer[] xl, Integer[] x2, Integer[] xu, Integer n) {
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xl[ind + 1]) {
            ++ind;
        }
        y1[i] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ++ind;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    n.intValue();
    return ind;
}
public static Integer func_fcc9fb2027a742e69deec24dd9c9a154(Integer[] yu, Integer[] yl, Integer[] xl, Integer[] x2, Integer[] xu, Integer n) {
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xl[ind + 1]) {
            ++ind;
        }
        y1[i] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ++ind;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    return ind;
}
public static Integer func_cb665c7ace204084aeb5e698aedbc065(Integer[] yu, Integer[] yl, Integer[] xl, Integer[] x2, Integer[] xu, Integer n) {
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xl[ind + 1]) {
            ++ind;
        }
        y1[i] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ++ind;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    return ind;
}
public static Integer func_44de066e17e2412dbbec21b9b81b80b8(Integer[] yu, Integer[] yl, Integer[] xl, Integer[] x2, Integer[] xu, Integer n) {
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xl[ind + 1]) {
            ++ind;
        }
        y1[i] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ++ind;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    for (int i = 0; i < n - 1; ++i) {
        x2[i + 1].intValue();
        x2[i].intValue();
    }
    return ind;
}


****** Cluster 129 ******
public static Integer func_a3623bb530a74e568dced5ea5a13322b(Integer[] yu, Double[] y1, Integer[] yl, Integer[] xl, Integer[] x2, Integer[] xu, Integer n) {
    int ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xl[ind + 1]) {
            ++ind;
        }
        y1[i] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ++ind;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    n.intValue();
    return ind;
}
public static Integer func_539149b3264c45228379f681900def8f(Integer[] yu, Double[] y1, Integer[] yl, Integer[] xl, Integer[] x2, Integer[] xu, Integer n) {
    int ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xl[ind + 1]) {
            ++ind;
        }
        y1[i] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ++ind;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    return ind;
}
public static Integer func_b5fecbfd3bbe4c9ab067e9c9152762cd(Integer[] yu, Double[] y1, Integer[] yl, Integer[] xl, Integer[] x2, Integer[] xu, Integer n) {
    int ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xl[ind + 1]) {
            ++ind;
        }
        y1[i] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ++ind;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    return ind;
}
public static Integer func_97bb983da507462ea23c8fe4c66a445e(Integer[] yu, Double[] y1, Integer[] yl, Integer[] xl, Integer[] x2, Integer[] xu, Integer n) {
    int ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xl[ind + 1]) {
            ++ind;
        }
        y1[i] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ++ind;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    for (int i = 0; i < n - 1; ++i) {
        x2[i + 1].intValue();
        x2[i].intValue();
    }
    return ind;
}
public static Integer func_93e0f7e67d8c42a99ce00ddfdfabcc61(Integer[] yu, Double[] y1, Integer[] yl, Integer[] xl, Integer[] x2, Integer[] xu, Integer n) {
    int ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xl[ind + 1]) {
            ++ind;
        }
        y1[i] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ++ind;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    return ind;
}


****** Cluster 130 ******
public static Integer func_4fa2a06cdcf744a58c9bd2812c123669$4403b47f(Integer[] yu, Double[] y1, Integer[] x2, Integer[] xu, Integer n) {
    double[] y2 = new double[n.intValue()];
    Integer ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ind = ind + 1;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    return ind;
}
public static Integer func_a24d3488da71493297fe751bfa07724c$4403b47f(Integer[] yu, Double[] y1, Integer[] x2, Integer[] xu, Integer n) {
    double[] y2 = new double[n.intValue()];
    Integer ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ind = ind + 1;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    for (int i = 0; i < n - 1; ++i) {
        x2[i + 1].intValue();
        x2[i].intValue();
    }
    return ind;
}
public static Integer func_c32f802f9d8741c4b004acda3bee0d19$4403b47f(Integer[] yu, Double[] y1, Integer[] x2, Integer[] xu, Integer n) {
    double[] y2 = new double[n.intValue()];
    Integer ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ind = ind + 1;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    return ind;
}


****** Cluster 131 ******
public static Integer func_e134bf168d28435684ec9be99a7629e1$291ba062(Integer[] yu, Double[] y1, Integer[] x2, Integer[] xu, Double[] y2, Integer n) {
    Integer ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ind = ind + 1;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    for (int i = 0; i < n - 1; ++i) {
        x2[i + 1].intValue();
        x2[i].intValue();
    }
    return ind;
}
public static Integer func_8f47693777a84b8aaaaad904c8ac9f35$291ba062(Integer[] yu, Double[] y1, Integer[] x2, Integer[] xu, Double[] y2, Integer n) {
    Integer ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ind = ind + 1;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    return ind;
}
public static Integer func_be4649ef144c4e78af6fedbfffe1fefc$291ba062(Integer[] yu, Double[] y1, Integer[] x2, Integer[] xu, Double[] y2, Integer n) {
    Integer ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ind = ind + 1;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    return ind;
}


****** Cluster 132 ******
public static Double func_95374576b1ec408f862dc83770a96cbc$8732589(Integer[] yu, Double[] y1, Integer[] x2, Integer[] xu, Double[] y2, Integer n) {
    Integer ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ind = ind + 1;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    double ss = 0.0;
    for (int i = 0; i < n - 1; ++i) {
        ss += (double) (x2[i + 1] - x2[i]) * (yy[i] + yy[i + 1]) / 2.0;
    }
    return ss;
}
public static Double func_02caa78521ca49b2a7c301f5932bdbbb$8732589(Integer[] yu, Double[] y1, Integer[] x2, Integer[] xu, Double[] y2, Integer n) {
    Integer ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ind = ind + 1;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    double ss = 0.0;
    for (int i = 0; i < n - 1; ++i) {
        ss += (double) (x2[i + 1] - x2[i]) * (yy[i] + yy[i + 1]) / 2.0;
    }
    Integer.valueOf(0);
    return ss;
}
public static Double func_1a95715de85341fcbe6104cb6acb3aa2$8732589(Integer[] yu, Double[] y1, Integer[] x2, Integer[] xu, Double[] y2, Integer n) {
    Integer ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ind = ind + 1;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    double ss = 0.0;
    for (int i = 0; i < n - 1; ++i) {
        ss += (double) (x2[i + 1] - x2[i]) * (yy[i] + yy[i + 1]) / 2.0;
    }
    Integer.valueOf(0);
    return ss;
}


****** Cluster 133 ******
public static Integer func_d2f8a12cf04644e08f162f13de389fe0(Integer[] yl, Integer l, Integer[] xl, Integer[] x2, Integer[] xu, Integer n, Integer u) {
    int i;
    for (i = 0; i < u; ++i) {
        x2[i] = xu[i];
    }
    for (i = 1; i < l - 1; ++i) {
        x2[i - 1 + u.intValue()] = xl[i];
    }
    Arrays.sort((Object[]) x2);
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i2 = 0; i2 < n; ++i2) {
        while (x2[i2] > xl[ind + 1]) {
            ++ind;
        }
        y1[i2] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i2] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    return ind;
}
public static Integer func_eee594f624074bd4bb090c848d7d4442(Integer[] yl, Integer l, Integer[] xl, Integer[] x2, Integer[] xu, Integer n, Integer u) {
    int i;
    for (i = 0; i < u; ++i) {
        x2[i] = xu[i];
    }
    for (i = 1; i < l - 1; ++i) {
        x2[i - 1 + u.intValue()] = xl[i];
    }
    Arrays.sort((Object[]) x2);
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i2 = 0; i2 < n; ++i2) {
        while (x2[i2] > xl[ind + 1]) {
            ++ind;
        }
        y1[i2] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i2] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    n.intValue();
    return ind;
}


****** Cluster 134 ******
public static Integer func_490ad690673a4f70949b91b229440741(Integer[] yl, Integer l, Integer[] xl, Integer[] x2, Integer n, Integer u) {
    for (int i = 1; i < l - 1; ++i) {
        x2[i - 1 + u.intValue()] = xl[i];
    }
    Arrays.sort((Object[]) x2);
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xl[ind + 1]) {
            ++ind;
        }
        y1[i] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    n.intValue();
    return ind;
}
public static Integer func_2b07e708facf4241a032449558e776ad(Integer[] yl, Integer l, Integer[] xl, Integer[] x2, Integer n, Integer u) {
    for (int i = 1; i < l - 1; ++i) {
        x2[i - 1 + u.intValue()] = xl[i];
    }
    Arrays.sort((Object[]) x2);
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xl[ind + 1]) {
            ++ind;
        }
        y1[i] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    return ind;
}


****** Cluster 135 ******
public static Double func_f0cee34cc80f42a18fb5b1063f7e45d5$4ee3dbc9(Double[] y1, Integer[] x2, Double[] y2, Integer n) {
    double[] yy = new double[n.intValue()];
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    double ss = 0.0;
    for (int i = 0; i < n - 1; ++i) {
        ss += (double) (x2[i + 1] - x2[i]) * (yy[i] + yy[i + 1]) / 2.0;
    }
    Integer.valueOf(0);
    return ss;
}
public static Double func_575b8a9c08b0432cabf8de8b3771ce61(Double[] y1, Integer[] x2, Double[] y2, Integer n) {
    double[] yy = new double[n.intValue()];
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    double ss = 0.0;
    for (int i = 0; i < n - 1; ++i) {
        ss += (double) (x2[i + 1] - x2[i]) * (yy[i] + yy[i + 1]) / 2.0;
    }
    return ss;
}
public static Double func_3caccc9782e04575a1fa952f06ae1974$4ee3dbc9(Double[] y1, Integer[] x2, Double[] y2, Integer n) {
    double[] yy = new double[n.intValue()];
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    double ss = 0.0;
    for (int i = 0; i < n - 1; ++i) {
        ss += (double) (x2[i + 1] - x2[i]) * (yy[i] + yy[i + 1]) / 2.0;
    }
    Integer.valueOf(0);
    return ss;
}


****** Cluster 136 ******
public static Integer func_492a212c541c4a76a986080a9a8ec761(Integer[] yl, Integer l, Integer[] xl, Integer[] xu, Integer n, Integer u) {
    int i;
    int[] x2 = new int[n.intValue()];
    for (i = 0; i < u; ++i) {
        x2[i] = xu[i];
    }
    for (i = 1; i < l - 1; ++i) {
        x2[i - 1 + u.intValue()] = xl[i];
    }
    Arrays.sort(x2);
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i2 = 0; i2 < n; ++i2) {
        while (x2[i2] > xl[ind + 1]) {
            ++ind;
        }
        y1[i2] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i2] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    return ind;
}
public static Integer func_3b18867f5ce7438682ea742afad73e96(Integer[] yl, Integer l, Integer[] xl, Integer[] xu, Integer n, Integer u) {
    int i;
    int[] x2 = new int[n.intValue()];
    for (i = 0; i < u; ++i) {
        x2[i] = xu[i];
    }
    for (i = 1; i < l - 1; ++i) {
        x2[i - 1 + u.intValue()] = xl[i];
    }
    Arrays.sort(x2);
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i2 = 0; i2 < n; ++i2) {
        while (x2[i2] > xl[ind + 1]) {
            ++ind;
        }
        y1[i2] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i2] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    n.intValue();
    return ind;
}


****** Cluster 137 ******
public static Integer func_25d02879097c41cb955fede0a92ac4dc(Integer[] yu, Integer[] yl, Integer[] xl, Integer[] x2, Integer[] xu, Integer n) {
    Arrays.sort((Object[]) x2);
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xl[ind + 1]) {
            ++ind;
        }
        y1[i] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ++ind;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    return ind;
}
public static Integer func_47de82200ed54730898b330e3713eb74(Integer[] yu, Integer[] yl, Integer[] xl, Integer[] x2, Integer[] xu, Integer n) {
    Arrays.sort((Object[]) x2);
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xl[ind + 1]) {
            ++ind;
        }
        y1[i] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ++ind;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    n.intValue();
    return ind;
}
public static Integer func_89a0e48a76744a0097b521379a4020b8(Integer[] yu, Integer[] yl, Integer[] xl, Integer[] x2, Integer[] xu, Integer n) {
    Arrays.sort((Object[]) x2);
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xl[ind + 1]) {
            ++ind;
        }
        y1[i] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ++ind;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    return ind;
}
public static Integer func_f05d79fb015a46a999d3a2479dc4d53d(Integer[] yu, Integer[] yl, Integer[] xl, Integer[] x2, Integer[] xu, Integer n) {
    Arrays.sort((Object[]) x2);
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xl[ind + 1]) {
            ++ind;
        }
        y1[i] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ++ind;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    return ind;
}
public static Integer func_db2f88e42ad54ddb98b1967d486d0626(Integer[] yu, Integer[] yl, Integer[] xl, Integer[] x2, Integer[] xu, Integer n) {
    Arrays.sort((Object[]) x2);
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xl[ind + 1]) {
            ++ind;
        }
        y1[i] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ++ind;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    for (int i = 0; i < n - 1; ++i) {
        x2[i + 1].intValue();
        x2[i].intValue();
    }
    return ind;
}


****** Cluster 138 ******
public static Double func_62537d14180b46f1ac7896dbbf9d16b0$7f953088(Integer[] yu, Double[] y1, Integer[] x2, Integer[] xu, Integer n) {
    double[] y2 = new double[n.intValue()];
    Integer ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ind = ind + 1;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    double ss = 0.0;
    for (int i = 0; i < n - 1; ++i) {
        ss += (double) (x2[i + 1] - x2[i]) * (yy[i] + yy[i + 1]) / 2.0;
    }
    return ss;
}
public static Double func_5ab7738256f94112ab4b6365138a5b57$7f953088(Integer[] yu, Double[] y1, Integer[] x2, Integer[] xu, Integer n) {
    double[] y2 = new double[n.intValue()];
    Integer ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ind = ind + 1;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    double ss = 0.0;
    for (int i = 0; i < n - 1; ++i) {
        ss += (double) (x2[i + 1] - x2[i]) * (yy[i] + yy[i + 1]) / 2.0;
    }
    Integer.valueOf(0);
    return ss;
}
public static Double func_5a3075926cc64fd0a1030d6b1843f180$7f953088(Integer[] yu, Double[] y1, Integer[] x2, Integer[] xu, Integer n) {
    double[] y2 = new double[n.intValue()];
    Integer ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ind = ind + 1;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    double ss = 0.0;
    for (int i = 0; i < n - 1; ++i) {
        ss += (double) (x2[i + 1] - x2[i]) * (yy[i] + yy[i + 1]) / 2.0;
    }
    Integer.valueOf(0);
    return ss;
}


****** Cluster 139 ******
public static Double func_58af6347a3e4471fbfe736e7956f1cd7(Integer[] yu, Double[] y1, Integer[] yl, Integer[] xl, Integer[] x2, Integer[] xu, Integer n) {
    int ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xl[ind + 1]) {
            ++ind;
        }
        y1[i] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ++ind;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    double ss = 0.0;
    for (int i = 0; i < n - 1; ++i) {
        ss += (double) (x2[i + 1] - x2[i]) * (yy[i] + yy[i + 1]) / 2.0;
    }
    return ss;
}
public static Double func_27a61dea171c4117b300e0034340b25b(Integer[] yu, Double[] y1, Integer[] yl, Integer[] xl, Integer[] x2, Integer[] xu, Integer n) {
    int ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xl[ind + 1]) {
            ++ind;
        }
        y1[i] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ++ind;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    double ss = 0.0;
    for (int i = 0; i < n - 1; ++i) {
        ss += (double) (x2[i + 1] - x2[i]) * (yy[i] + yy[i + 1]) / 2.0;
    }
    return ss;
}
public static Double func_144c8e9d7eb4400a8652e1b6643ef88b(Integer[] yu, Double[] y1, Integer[] yl, Integer[] xl, Integer[] x2, Integer[] xu, Integer n) {
    int ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xl[ind + 1]) {
            ++ind;
        }
        y1[i] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    double[] y2 = new double[n.intValue()];
    ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ++ind;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    double[] yy = new double[n.intValue()];
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    double ss = 0.0;
    for (int i = 0; i < n - 1; ++i) {
        ss += (double) (x2[i + 1] - x2[i]) * (yy[i] + yy[i + 1]) / 2.0;
    }
    return ss;
}


****** Cluster 140 ******
public static Double func_75fa13ca067747a0bf8ac115b19dc6fa(Integer i, Integer ind, Double[] yy, Double s, Integer[] x2, Double ss, Integer g) {
    while (s + (double) (x2[ind + 1] - x2[ind]) * (yy[ind] + yy[ind + 1]) / 2.0 < (double) i.intValue() * ss / (double) g.intValue()) {
        s = s + (double) (x2[ind + 1] - x2[ind]) * (yy[ind] + yy[ind + 1]) / 2.0;
        ind = ind + 1;
    }
    double L = x2[ind].intValue();
    return L;
}
public static Double func_f41a16f52a084875a694ddadd3a79f05(Integer i, Integer ind, Double[] yy, Double s, Integer[] x2, Double ss, Integer g) {
    while (s + (double) (x2[ind + 1] - x2[ind]) * (yy[ind] + yy[ind + 1]) / 2.0 < (double) i.intValue() * ss / (double) g.intValue()) {
        s = s + (double) (x2[ind + 1] - x2[ind]) * (yy[ind] + yy[ind + 1]) / 2.0;
        ind = ind + 1;
    }
    double L = x2[ind].intValue();
    x2[ind + 1].intValue();
    return L;
}


****** Cluster 141 ******
public static Double func_5aae75fd699c46168607b34ae4f55ed4(Integer i, Integer ind, Double[] yy, Double s, Integer[] x2, Double ss, Integer g) {
    while (s + (double) (x2[ind + 1] - x2[ind]) * (yy[ind] + yy[ind + 1]) / 2.0 < (double) i.intValue() * ss / (double) g.intValue()) {
        s = s + (double) (x2[ind + 1] - x2[ind]) * (yy[ind] + yy[ind + 1]) / 2.0;
        ind = ind + 1;
    }
    x2[ind].intValue();
    return s;
}
public static Double func_bc9857304a6c49a980f688733cee079a(Integer i, Integer ind, Double[] yy, Double s, Integer[] x2, Double ss, Integer g) {
    while (s + (double) (x2[ind + 1] - x2[ind]) * (yy[ind] + yy[ind + 1]) / 2.0 < (double) i.intValue() * ss / (double) g.intValue()) {
        s = s + (double) (x2[ind + 1] - x2[ind]) * (yy[ind] + yy[ind + 1]) / 2.0;
        ind = ind + 1;
    }
    x2[ind].intValue();
    x2[ind + 1].intValue();
    return s;
}
public static Double func_73354dc0cf084ebf92b9b747c671111a(Integer i, Integer ind, Double[] yy, Double s, Integer[] x2, Double ss, Integer g) {
    while (s + (double) (x2[ind + 1] - x2[ind]) * (yy[ind] + yy[ind + 1]) / 2.0 < (double) i.intValue() * ss / (double) g.intValue()) {
        s = s + (double) (x2[ind + 1] - x2[ind]) * (yy[ind] + yy[ind + 1]) / 2.0;
        ind = ind + 1;
    }
    x2[ind].intValue();
    x2[ind + 1].intValue();
    for (int j = 0; j < 100; ++j) {
        i.intValue();
        ss.doubleValue();
        g.intValue();
        s.doubleValue();
        x2[ind].intValue();
        yy[ind].doubleValue();
        x2[ind].intValue();
        x2[ind + 1].intValue();
        x2[ind].intValue();
        yy[ind + 1].doubleValue();
        yy[ind].doubleValue();
    }
    return s;
}


****** Cluster 142 ******
public static Double func_4180996ebfc14b6198a218c22d73fd37(Integer i, Integer ind, Double[] yy, Double s, Integer[] x2, Double ss, Integer g) {
    double L = x2[ind].intValue();
    double R = x2[ind + 1].intValue();
    for (int j = 0; j < 100; ++j) {
        double tos = (double) i.intValue() * ss / (double) g.intValue() - s;
        double M = (R + L) / 2.0;
        if ((M - (double) x2[ind].intValue()) * (yy[ind] + (M - (double) x2[ind].intValue()) / (double) (x2[ind + 1] - x2[ind]) * (yy[ind + 1] - yy[ind]) / 2.0) > tos) {
            R = M;
            continue;
        }
        L = M;
    }
    return L;
}
public static Double func_1fecb0f0e18e4bf8b78569d3f14ee4c5(Integer i, Integer ind, Double[] yy, Double s, Integer[] x2, Double ss, Integer g) {
    double L = x2[ind].intValue();
    double R = x2[ind + 1].intValue();
    for (int j = 0; j < 100; ++j) {
        double tos = (double) i.intValue() * ss / (double) g.intValue() - s;
        double M = (R + L) / 2.0;
        if ((M - (double) x2[ind].intValue()) * (yy[ind] + (M - (double) x2[ind].intValue()) / (double) (x2[ind + 1] - x2[ind]) * (yy[ind + 1] - yy[ind]) / 2.0) > tos) {
            R = M;
            continue;
        }
        L = M;
    }
    return R;
}


****** Cluster 143 ******
public static Integer func_0c1160e6a91c48faa5c2e28ff8f3511a(Double[] y1, Integer[] yl, Integer[] xl, Integer[] x2, Integer n) {
    int ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xl[ind + 1]) {
            ++ind;
        }
        y1[i] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    return ind;
}
public static Integer func_38631a069e094e32a30fc5917f0b0b8f(Double[] y1, Integer[] yl, Integer[] xl, Integer[] x2, Integer n) {
    int ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xl[ind + 1]) {
            ++ind;
        }
        y1[i] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    n.intValue();
    return ind;
}


****** Cluster 144 ******
public static Integer func_c7427177e75e4fdf8afddb0cab5b577e$789b6807(Integer[] yu, Integer[] x2, Integer[] xu, Double[] y2, Integer n) {
    Integer ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ind = ind + 1;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    return ind;
}
public static Integer func_64598adc0e2c4bc5a335800ad6f596e2$789b6807(Integer[] yu, Integer[] x2, Integer[] xu, Double[] y2, Integer n) {
    Integer ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ind = ind + 1;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    n.intValue();
    return ind;
}


****** Cluster 145 ******
public static Double func_ae52acc88b444e348fb77ab70eb1f08d(Double[] yy, Integer[] x2, Integer n) {
    double ss = 0.0;
    for (int i = 0; i < n - 1; ++i) {
        ss += (double) (x2[i + 1] - x2[i]) * (yy[i] + yy[i + 1]) / 2.0;
    }
    return ss;
}
public static Double func_806c22a3600d44168bb78b5d83905765$7da5db8(Double[] yy, Integer[] x2, Integer n) {
    double ss = 0.0;
    for (int i = 0; i < n - 1; ++i) {
        ss += (double) (x2[i + 1] - x2[i]) * (yy[i] + yy[i + 1]) / 2.0;
    }
    Integer.valueOf(0);
    return ss;
}
public static Double func_3be4beecf1ce49408b765cec54d53274$7da5db8(Double[] yy, Integer[] x2, Integer n) {
    double ss = 0.0;
    for (int i = 0; i < n - 1; ++i) {
        ss += (double) (x2[i + 1] - x2[i]) * (yy[i] + yy[i + 1]) / 2.0;
    }
    Integer.valueOf(0);
    return ss;
}


****** Cluster 146 ******
public static Double func_70d7b0614c7c40e5af4866fe53114c6e$5a5ec66e(Double[] yy, Integer[] x2, Double ss, Integer n) {
    for (int i = 0; i < n - 1; ++i) {
        ss = ss + (double) (x2[i + 1] - x2[i]) * (yy[i] + yy[i + 1]) / 2.0;
    }
    Integer.valueOf(0);
    return ss;
}
public static Double func_d1139ee9aa7b49cdad297ad8d07fc731$5a5ec66e(Double[] yy, Integer[] x2, Double ss, Integer n) {
    for (int i = 0; i < n - 1; ++i) {
        ss = ss + (double) (x2[i + 1] - x2[i]) * (yy[i] + yy[i + 1]) / 2.0;
    }
    Integer.valueOf(0);
    return ss;
}


****** Cluster 147 ******
public static Integer func_6214101af5764a038f2d4670fa4b12de(Integer[] yl, Integer[] xl, Integer[] x2, Integer n) {
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xl[ind + 1]) {
            ++ind;
        }
        y1[i] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    return ind;
}
public static Integer func_d890107418594782845fdfb5e3a5c3b2(Integer[] yl, Integer[] xl, Integer[] x2, Integer n) {
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xl[ind + 1]) {
            ++ind;
        }
        y1[i] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    n.intValue();
    return ind;
}


****** Cluster 148 ******
public static Integer func_292f4fb0b313448bbf703637450d0dbc$60d0054a(Integer[] yu, Integer[] x2, Integer[] xu, Integer n) {
    double[] y2 = new double[n.intValue()];
    Integer ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ind = ind + 1;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    return ind;
}
public static Integer func_6eaba8c675b7412aaef67d124fb69836$60d0054a(Integer[] yu, Integer[] x2, Integer[] xu, Integer n) {
    double[] y2 = new double[n.intValue()];
    Integer ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xu[ind + 1]) {
            ind = ind + 1;
        }
        y2[i] = (double) yu[ind].intValue() + (double) (yu[ind + 1] - yu[ind]) * (double) (x2[i] - xu[ind]) / (double) (xu[ind + 1] - xu[ind]);
    }
    n.intValue();
    return ind;
}


****** Cluster 149 ******
public static Double func_d3a73880980042c48fb4facb53666af2(Double[] yy, Double[] y1, Integer[] x2, Double[] y2, Integer n) {
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    double ss = 0.0;
    for (int i = 0; i < n - 1; ++i) {
        ss += (double) (x2[i + 1] - x2[i]) * (yy[i] + yy[i + 1]) / 2.0;
    }
    return ss;
}
public static Double func_8e1d60aebe9f45538cd4649263cb0795$3154ad1c(Double[] yy, Double[] y1, Integer[] x2, Double[] y2, Integer n) {
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    double ss = 0.0;
    for (int i = 0; i < n - 1; ++i) {
        ss += (double) (x2[i + 1] - x2[i]) * (yy[i] + yy[i + 1]) / 2.0;
    }
    Integer.valueOf(0);
    return ss;
}
public static Double func_2f7db2ecf5f94825ac94c190d9cdc576$3154ad1c(Double[] yy, Double[] y1, Integer[] x2, Double[] y2, Integer n) {
    for (int i = 0; i < n; ++i) {
        yy[i] = y2[i] - y1[i];
    }
    double ss = 0.0;
    for (int i = 0; i < n - 1; ++i) {
        ss += (double) (x2[i + 1] - x2[i]) * (yy[i] + yy[i + 1]) / 2.0;
    }
    Integer.valueOf(0);
    return ss;
}


****** Cluster 150 ******
public static Integer func_19779161b28e48a98a7e073df5666be5(Integer[] yl, Integer[] xl, Integer[] x2, Integer n) {
    Arrays.sort((Object[]) x2);
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xl[ind + 1]) {
            ++ind;
        }
        y1[i] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    return ind;
}
public static Integer func_537426845adc4c13a0a1429d01a7d770(Integer[] yl, Integer[] xl, Integer[] x2, Integer n) {
    Arrays.sort((Object[]) x2);
    double[] y1 = new double[n.intValue()];
    int ind = 0;
    for (int i = 0; i < n; ++i) {
        while (x2[i] > xl[ind + 1]) {
            ++ind;
        }
        y1[i] = (double) yl[ind].intValue() + (double) (yl[ind + 1] - yl[ind]) * (double) (x2[i] - xl[ind]) / (double) (xl[ind + 1] - xl[ind]);
    }
    n.intValue();
    return ind;
}


****** Cluster 151 ******
public static Double func_988db5a1dca443408a1c404abb7be790(Double kl, Double ku, Double bl, Double bu, Double xcur, Double ycurl, Double ycuru) {
    double a2 = ku - kl;
    bu.doubleValue();
    bl.doubleValue();
    ycuru.doubleValue();
    ycurl.doubleValue();
    ku.doubleValue();
    kl.doubleValue();
    xcur.doubleValue();
    return a2;
}
public static Double func_95bf73b401e44a3cacfa376a2bafddac(Double kl, Double ku, Double bl, Double xcur, Double bu, Double ycurl, Double ycuru) {
    double a2 = ku - kl;
    bu.doubleValue();
    bl.doubleValue();
    ycuru.doubleValue();
    ycurl.doubleValue();
    ku.doubleValue();
    kl.doubleValue();
    xcur.doubleValue();
    xcur.doubleValue();
    bu.doubleValue();
    bl.doubleValue();
    ycuru.doubleValue();
    ycurl.doubleValue();
    return a2;
}


****** Cluster 152 ******
public static Double func_5475f7750491438081843f20688c7465(Double kl, Double ku, Double bl, Double xcur, Double bu, Double ycurl, Double ycuru) {
    bu.doubleValue();
    bl.doubleValue();
    ycuru.doubleValue();
    ycurl.doubleValue();
    ku.doubleValue();
    kl.doubleValue();
    xcur.doubleValue();
    double c = (-xcur.doubleValue()) * (bu - bl + ycuru - ycurl);
    return c;
}
public static Double func_45c072796f5c417ca878a483e3e6d027(Double kl, Double ku, Double bl, Double xcur, Double bu, Double ycurl, Double ycuru) {
    ku.doubleValue();
    kl.doubleValue();
    bu.doubleValue();
    bl.doubleValue();
    ycuru.doubleValue();
    ycurl.doubleValue();
    ku.doubleValue();
    kl.doubleValue();
    xcur.doubleValue();
    double c = (-xcur.doubleValue()) * (bu - bl + ycuru - ycurl);
    return c;
}


****** Cluster 153 ******
public static Double func_87a4d8d2da644fe596fccd3f3c320e84(Double kl, Double ku, Double bl, Double xcur, Double bu, Double ycurl, Double ycuru) {
    double b = bu - bl + ycuru - ycurl - (ku - kl) * xcur;
    xcur.doubleValue();
    bu.doubleValue();
    bl.doubleValue();
    ycuru.doubleValue();
    ycurl.doubleValue();
    return b;
}
public static Double func_a0916b666bcb46539eca66264c070e50(Double kl, Double ku, Double bl, Double xcur, Double bu, Double ycurl, Double ycuru) {
    ku.doubleValue();
    kl.doubleValue();
    double b = bu - bl + ycuru - ycurl - (ku - kl) * xcur;
    xcur.doubleValue();
    bu.doubleValue();
    bl.doubleValue();
    ycuru.doubleValue();
    ycurl.doubleValue();
    return b;
}


****** Cluster 154 ******
public static Double func_154d484c2f4c4797aeaa00dfca0f2d94(Double sss, Double bl, Double xcur, Double bu, Double ycurl, Double ycuru) {
    double c = (-xcur.doubleValue()) * (bu - bl + ycuru - ycurl);
    return c -= 2.0 * sss;
}
public static Double func_869ddf2aa5234a08af6a411d25e0095c(Double sss, Double bl, Double xcur, Double bu, Double ycurl, Double ycuru) {
    double c = (-xcur.doubleValue()) * (bu - bl + ycuru - ycurl);
    return c -= 2.0 * sss;
}


****** Cluster 155 ******
public static Double func_005a4ff053dc44d58cf6e496463a492e(Double kl, Double ku, Double bl, Double bu, Double xcur, Double st, Double ycurl, Double ycuru, Double scur) {
    st.doubleValue();
    scur.doubleValue();
    double a2 = ku - kl;
    bu.doubleValue();
    bl.doubleValue();
    ycuru.doubleValue();
    ycurl.doubleValue();
    ku.doubleValue();
    kl.doubleValue();
    xcur.doubleValue();
    return a2;
}
public static Double func_2cdb53660da4416ea6193660a6445723(Double kl, Double ku, Double bl, Double xcur, Double bu, Double st, Double ycurl, Double ycuru, Double scur) {
    st.doubleValue();
    scur.doubleValue();
    double a2 = ku - kl;
    bu.doubleValue();
    bl.doubleValue();
    ycuru.doubleValue();
    ycurl.doubleValue();
    ku.doubleValue();
    kl.doubleValue();
    xcur.doubleValue();
    xcur.doubleValue();
    bu.doubleValue();
    bl.doubleValue();
    ycuru.doubleValue();
    ycurl.doubleValue();
    return a2;
}
public static Double func_fafdbfc7462640888528e7124629e174(Double kl, Double ku, Double bl, Double xcur, Double bu, Double st, Double ycurl, Double ycuru, Double scur) {
    st.doubleValue();
    scur.doubleValue();
    double a2 = ku - kl;
    bu.doubleValue();
    bl.doubleValue();
    ycuru.doubleValue();
    ycurl.doubleValue();
    ku.doubleValue();
    kl.doubleValue();
    xcur.doubleValue();
    xcur.doubleValue();
    bu.doubleValue();
    bl.doubleValue();
    ycuru.doubleValue();
    ycurl.doubleValue();
    return a2;
}
public static Double func_65ec3d6d32ba497983307d6ae4a7f8f1(Double kl, Double ku, Double bl, Double xcur, Double bu, Double st, Double ycurl, Double ycuru, Double scur) {
    st.doubleValue();
    scur.doubleValue();
    double a2 = ku - kl;
    bu.doubleValue();
    bl.doubleValue();
    ycuru.doubleValue();
    ycurl.doubleValue();
    ku.doubleValue();
    kl.doubleValue();
    xcur.doubleValue();
    xcur.doubleValue();
    bu.doubleValue();
    bl.doubleValue();
    ycuru.doubleValue();
    ycurl.doubleValue();
    return a2;
}
public static Double func_028dae3afe4b43e9acd12e140eb809e0(Double kl, Double ku, Double bl, Double xcur, Double bu, Double st, Double ycurl, Double ycuru, Double scur) {
    double sss = st - scur;
    double a2 = ku - kl;
    double b = bu - bl + ycuru - ycurl - (ku - kl) * xcur;
    double c = (-xcur.doubleValue()) * (bu - bl + ycuru - ycurl);
    c -= 2.0 * sss;
    if (Math.abs(a2) >= 1.0E-11) {
        double discr = b * b - 4.0 * a2 * c;
        Math.sqrt(discr);
    }
    return a2;
}


****** Cluster 156 ******
public static Double func_d59874ee0972439f94c8ebe69a03f21f(Double kl, Double ku, Double bl, Double bu, Double xcur, Double st, Double ycurl, Double ycuru, Double scur) {
    double sss = st - scur;
    ku.doubleValue();
    kl.doubleValue();
    bu.doubleValue();
    bl.doubleValue();
    ycuru.doubleValue();
    ycurl.doubleValue();
    ku.doubleValue();
    kl.doubleValue();
    xcur.doubleValue();
    return sss;
}
public static Double func_9878af005b134be78e456525bb82d0ff(Double kl, Double ku, Double bl, Double xcur, Double bu, Double st, Double ycurl, Double ycuru, Double scur) {
    double sss = st - scur;
    ku.doubleValue();
    kl.doubleValue();
    bu.doubleValue();
    bl.doubleValue();
    ycuru.doubleValue();
    ycurl.doubleValue();
    ku.doubleValue();
    kl.doubleValue();
    xcur.doubleValue();
    xcur.doubleValue();
    bu.doubleValue();
    bl.doubleValue();
    ycuru.doubleValue();
    ycurl.doubleValue();
    return sss;
}
public static Double func_6cf84bab251547eab72b4d9cedc61eb3(Double kl, Double ku, Double bl, Double xcur, Double bu, Double st, Double ycurl, Double ycuru, Double scur) {
    double sss = st - scur;
    ku.doubleValue();
    kl.doubleValue();
    bu.doubleValue();
    bl.doubleValue();
    ycuru.doubleValue();
    ycurl.doubleValue();
    ku.doubleValue();
    kl.doubleValue();
    xcur.doubleValue();
    xcur.doubleValue();
    bu.doubleValue();
    bl.doubleValue();
    ycuru.doubleValue();
    ycurl.doubleValue();
    return sss;
}
public static Double func_1ef731d934b847319b8fd920856c9804(Double kl, Double ku, Double bl, Double xcur, Double bu, Double st, Double ycurl, Double ycuru, Double scur) {
    double sss = st - scur;
    ku.doubleValue();
    kl.doubleValue();
    bu.doubleValue();
    bl.doubleValue();
    ycuru.doubleValue();
    ycurl.doubleValue();
    ku.doubleValue();
    kl.doubleValue();
    xcur.doubleValue();
    xcur.doubleValue();
    bu.doubleValue();
    bl.doubleValue();
    ycuru.doubleValue();
    ycurl.doubleValue();
    return sss;
}
public static Double func_a838bf9a8e78432a8f47f1c9860cd5ca(Double kl, Double ku, Double bl, Double xcur, Double bu, Double st, Double ycurl, Double ycuru, Double scur) {
    double sss = st - scur;
    double a2 = ku - kl;
    double b = bu - bl + ycuru - ycurl - (ku - kl) * xcur;
    double c = (-xcur.doubleValue()) * (bu - bl + ycuru - ycurl);
    c -= 2.0 * sss;
    if (Math.abs(a2) >= 1.0E-11) {
        double discr = b * b - 4.0 * a2 * c;
        Math.sqrt(discr);
    }
    return sss;
}


****** Cluster 157 ******
public static Double func_cbb369abdba64251ab9addfb526e5ee0(Double sss, Double kl, Double ku, Double bl, Double xcur, Double bu, Double ycurl, Double ycuru) {
    bu.doubleValue();
    bl.doubleValue();
    ycuru.doubleValue();
    ycurl.doubleValue();
    ku.doubleValue();
    kl.doubleValue();
    xcur.doubleValue();
    double c = (-xcur.doubleValue()) * (bu - bl + ycuru - ycurl);
    return c -= 2.0 * sss;
}
public static Double func_8d87eb86e44347b1a79fadbf213208e8(Double sss, Double kl, Double ku, Double bl, Double xcur, Double bu, Double ycurl, Double ycuru) {
    ku.doubleValue();
    kl.doubleValue();
    bu.doubleValue();
    bl.doubleValue();
    ycuru.doubleValue();
    ycurl.doubleValue();
    ku.doubleValue();
    kl.doubleValue();
    xcur.doubleValue();
    double c = (-xcur.doubleValue()) * (bu - bl + ycuru - ycurl);
    return c -= 2.0 * sss;
}
public static Double func_f83f361947b14e5091c90f0ae4e7e41a(Double sss, Double kl, Double ku, Double bl, Double xcur, Double bu, Double ycurl, Double ycuru) {
    bu.doubleValue();
    bl.doubleValue();
    ycuru.doubleValue();
    ycurl.doubleValue();
    ku.doubleValue();
    kl.doubleValue();
    xcur.doubleValue();
    double c = (-xcur.doubleValue()) * (bu - bl + ycuru - ycurl);
    return c -= 2.0 * sss;
}
public static Double func_b32d624dcb02461889a0a0e9e8adc953(Double sss, Double a2, Double b, Double bl, Double xcur, Double bu, Double ycurl, Double ycuru) {
    double c = (-xcur.doubleValue()) * (bu - bl + ycuru - ycurl);
    c -= 2.0 * sss;
    if (Math.abs(a2) >= 1.0E-11) {
        double discr = b * b - 4.0 * a2 * c;
        b.doubleValue();
        Math.sqrt(discr);
        a2.doubleValue();
    } else {
        b.doubleValue();
    }
    return c;
}
public static Double func_48b870732cb44bc68ded5eae301a4acd(Double sss, Double kl, Double ku, Double bl, Double xcur, Double bu, Double ycurl, Double ycuru) {
    ku.doubleValue();
    kl.doubleValue();
    bu.doubleValue();
    bl.doubleValue();
    ycuru.doubleValue();
    ycurl.doubleValue();
    ku.doubleValue();
    kl.doubleValue();
    xcur.doubleValue();
    double c = (-xcur.doubleValue()) * (bu - bl + ycuru - ycurl);
    return c -= 2.0 * sss;
}
public static Double func_9d926608fb0444cd95d8b4a026938e59(Double sss, Double kl, Double ku, Double bl, Double xcur, Double bu, Double ycurl, Double ycuru) {
    double a2 = ku - kl;
    double b = bu - bl + ycuru - ycurl - (ku - kl) * xcur;
    double c = (-xcur.doubleValue()) * (bu - bl + ycuru - ycurl);
    c -= 2.0 * sss;
    if (Math.abs(a2) >= 1.0E-11) {
        double discr = b * b - 4.0 * a2 * c;
        Math.sqrt(discr);
    }
    return c;
}


****** Cluster 158 ******
public static Double func_d32f9ed1f26547d3a46b36c90e064432(Double sss, Double kl, Double ku, Double bl, Double xcur, Double bu, Double ycurl, Double ycuru) {
    double b = bu - bl + ycuru - ycurl - (ku - kl) * xcur;
    xcur.doubleValue();
    bu.doubleValue();
    bl.doubleValue();
    ycuru.doubleValue();
    ycurl.doubleValue();
    sss.doubleValue();
    return b;
}
public static Double func_62cc198e6c0a4c57b905303276684d7f(Double sss, Double kl, Double ku, Double bl, Double xcur, Double bu, Double ycurl, Double ycuru) {
    ku.doubleValue();
    kl.doubleValue();
    double b = bu - bl + ycuru - ycurl - (ku - kl) * xcur;
    xcur.doubleValue();
    bu.doubleValue();
    bl.doubleValue();
    ycuru.doubleValue();
    ycurl.doubleValue();
    sss.doubleValue();
    return b;
}
public static Double func_9529927f45bd49719f33b1cb69ea11ad(Double sss, Double kl, Double ku, Double bl, Double xcur, Double bu, Double ycurl, Double ycuru) {
    double b = bu - bl + ycuru - ycurl - (ku - kl) * xcur;
    xcur.doubleValue();
    bu.doubleValue();
    bl.doubleValue();
    ycuru.doubleValue();
    ycurl.doubleValue();
    sss.doubleValue();
    return b;
}
public static Double func_9a307c97e8c344f9b184b8a932ae276e(Double sss, Double kl, Double ku, Double bl, Double xcur, Double bu, Double ycurl, Double ycuru) {
    ku.doubleValue();
    kl.doubleValue();
    double b = bu - bl + ycuru - ycurl - (ku - kl) * xcur;
    xcur.doubleValue();
    bu.doubleValue();
    bl.doubleValue();
    ycuru.doubleValue();
    ycurl.doubleValue();
    sss.doubleValue();
    return b;
}
public static Double func_850c546ceee64fb98015199d82e08607(Double sss, Double kl, Double ku, Double bl, Double xcur, Double bu, Double ycurl, Double ycuru) {
    double a2 = ku - kl;
    double b = bu - bl + ycuru - ycurl - (ku - kl) * xcur;
    double c = (-xcur.doubleValue()) * (bu - bl + ycuru - ycurl);
    c -= 2.0 * sss;
    if (Math.abs(a2) >= 1.0E-11) {
        double discr = b * b - 4.0 * a2 * c;
        Math.sqrt(discr);
    }
    return b;
}


****** Cluster 159 ******
public static Double func_f5b641fd756448adba37e6328e3fe564(Double kl, Double ku, Double bl, Double xcur, Double bu, Double st, Double ycurl, Double ycuru, Double scur) {
    st.doubleValue();
    scur.doubleValue();
    ku.doubleValue();
    kl.doubleValue();
    double b = bu - bl + ycuru - ycurl - (ku - kl) * xcur;
    xcur.doubleValue();
    bu.doubleValue();
    bl.doubleValue();
    ycuru.doubleValue();
    ycurl.doubleValue();
    return b;
}
public static Double func_baa0fe3f13224df698ac32847dddb14c(Double kl, Double ku, Double bl, Double xcur, Double bu, Double st, Double ycurl, Double ycuru, Double scur) {
    st.doubleValue();
    scur.doubleValue();
    ku.doubleValue();
    kl.doubleValue();
    double b = bu - bl + ycuru - ycurl - (ku - kl) * xcur;
    xcur.doubleValue();
    bu.doubleValue();
    bl.doubleValue();
    ycuru.doubleValue();
    ycurl.doubleValue();
    return b;
}
public static Double func_f75c4fc7ae3644a9817c1ba882609b2b(Double kl, Double ku, Double bl, Double xcur, Double bu, Double st, Double ycurl, Double ycuru, Double scur) {
    st.doubleValue();
    scur.doubleValue();
    ku.doubleValue();
    kl.doubleValue();
    double b = bu - bl + ycuru - ycurl - (ku - kl) * xcur;
    xcur.doubleValue();
    bu.doubleValue();
    bl.doubleValue();
    ycuru.doubleValue();
    ycurl.doubleValue();
    return b;
}
public static Double func_53b2afdd314643bdb00beb533f8a821f(Double kl, Double ku, Double bl, Double xcur, Double bu, Double st, Double ycurl, Double ycuru, Double scur) {
    double sss = st - scur;
    double a2 = ku - kl;
    double b = bu - bl + ycuru - ycurl - (ku - kl) * xcur;
    double c = (-xcur.doubleValue()) * (bu - bl + ycuru - ycurl);
    c -= 2.0 * sss;
    if (Math.abs(a2) >= 1.0E-11) {
        double discr = b * b - 4.0 * a2 * c;
        Math.sqrt(discr);
    }
    return b;
}


****** Cluster 160 ******
public static Double func_36f1d7aa55724e9596efff32d469ee66(Double sss, Double kl, Double ku, Double bl, Double xcur, Double bu, Double ycurl, Double ycuru) {
    double a2 = ku - kl;
    bu.doubleValue();
    bl.doubleValue();
    ycuru.doubleValue();
    ycurl.doubleValue();
    ku.doubleValue();
    kl.doubleValue();
    xcur.doubleValue();
    xcur.doubleValue();
    bu.doubleValue();
    bl.doubleValue();
    ycuru.doubleValue();
    ycurl.doubleValue();
    sss.doubleValue();
    return a2;
}
public static Double func_a16cbf879baf40f087ced40162a7c7a8(Double sss, Double kl, Double ku, Double bl, Double xcur, Double bu, Double ycurl, Double ycuru) {
    double a2 = ku - kl;
    bu.doubleValue();
    bl.doubleValue();
    ycuru.doubleValue();
    ycurl.doubleValue();
    ku.doubleValue();
    kl.doubleValue();
    xcur.doubleValue();
    xcur.doubleValue();
    bu.doubleValue();
    bl.doubleValue();
    ycuru.doubleValue();
    ycurl.doubleValue();
    sss.doubleValue();
    return a2;
}
public static Double func_d0a160056c774cd49d7f53854ee5cb1e(Double sss, Double kl, Double ku, Double bl, Double xcur, Double bu, Double ycurl, Double ycuru) {
    double a2 = ku - kl;
    double b = bu - bl + ycuru - ycurl - (ku - kl) * xcur;
    double c = (-xcur.doubleValue()) * (bu - bl + ycuru - ycurl);
    c -= 2.0 * sss;
    if (Math.abs(a2) >= 1.0E-11) {
        double discr = b * b - 4.0 * a2 * c;
        Math.sqrt(discr);
    }
    return a2;
}


****** Cluster 161 ******
public static Double func_ec8af67fd266469cb4f1e9b3da4cf298(Double kl, Double ku, Double bl, Double xcur, Double bu, Double st, Double ycurl, Double ycuru, Double scur) {
    double sss = st - scur;
    ku.doubleValue();
    kl.doubleValue();
    bu.doubleValue();
    bl.doubleValue();
    ycuru.doubleValue();
    ycurl.doubleValue();
    ku.doubleValue();
    kl.doubleValue();
    xcur.doubleValue();
    double c = (-xcur.doubleValue()) * (bu - bl + ycuru - ycurl);
    return c -= 2.0 * sss;
}
public static Double func_ed893cbccec844f59bb6db1b8b43130f(Double kl, Double ku, Double bl, Double xcur, Double bu, Double st, Double ycurl, Double ycuru, Double scur) {
    double sss = st - scur;
    ku.doubleValue();
    kl.doubleValue();
    bu.doubleValue();
    bl.doubleValue();
    ycuru.doubleValue();
    ycurl.doubleValue();
    ku.doubleValue();
    kl.doubleValue();
    xcur.doubleValue();
    double c = (-xcur.doubleValue()) * (bu - bl + ycuru - ycurl);
    return c -= 2.0 * sss;
}
public static Double func_a7896b11bf6945529c3563de61436c16(Double kl, Double ku, Double bl, Double xcur, Double bu, Double st, Double ycurl, Double ycuru, Double scur) {
    double sss = st - scur;
    double a2 = ku - kl;
    double b = bu - bl + ycuru - ycurl - (ku - kl) * xcur;
    double c = (-xcur.doubleValue()) * (bu - bl + ycuru - ycurl);
    c -= 2.0 * sss;
    if (Math.abs(a2) >= 1.0E-11) {
        double discr = b * b - 4.0 * a2 * c;
        Math.sqrt(discr);
    }
    return c;
}


****** Cluster 162 ******
public static Double func_7af11e271eee4964ae20a7be3f4701bf$18c9911d(Double ss, Double xnew, Double scur) {
    Double.valueOf(scur + ss);
    Double xcur = xnew;
    return xcur;
}
public static Double func_e481a0b91e024ba18a1377cc39f7bd8c(Double target, Double prevX, Double goal) {
    Double.valueOf(target + goal);
    double minX = prevX;
    return minX;
}
public static Double func_74c35d032819453a94e555d75d2352aa$19d8064f$18c9911d(Double ss, Double xnew, Double scur) {
    Double.valueOf(scur + ss);
    Double xcur = xnew;
    return xcur;
}
public static Double func_554859831e7c49318b51d6efcf571a93$19d8064f$18c9911d(Double ss, Double ynewl, Double scur) {
    Double.valueOf(scur + ss);
    Double ycurl = ynewl;
    return ycurl;
}
public static Double func_f50e6b035e5c4adba7b16b81ff1a13a5$6778a845$74d73359(Double ss, Double xnew, Double scur) {
    Double.valueOf(scur + ss);
    Double xcur = xnew;
    return xcur;
}
public static Double func_eb9fb290adc94677b93061b70ff519e4$6778a845$74d73359(Double ss, Double ynewl, Double scur) {
    Double.valueOf(scur + ss);
    Double ycurl = ynewl;
    return ycurl;
}
public static Double func_c7744806a1174253a41053f175d1dd61$6778a845$74d73359(Double ss, Double ynewu, Double scur) {
    Double.valueOf(scur + ss);
    Double ycuru = ynewu;
    return ycuru;
}


****** Cluster 163 ******
public static Double func_ab7a0e469cc44cbc8cc7981c370e1d00$18c9911d$1f2ba713(Double ss, Double scur) {
    scur = scur + ss;
    return scur;
}
public static Double func_54f702a466884f368b9f31bf2514c617$19d8064f$18c9911d(Double ss, Double scur) {
    scur = scur + ss;
    return scur;
}
public static Double func_5a197193377044d2b68e5aa3b2983851$6778a845$74d73359(Double ss, Double scur) {
    scur = scur + ss;
    return scur;
}


****** Cluster 164 ******
public static Double func_08bce9c0ca944473ac34235ca84f043c(Integer[] data, Long sum, Integer n, Long lo) {
    for (int i = 0; i < n; ++i) {
        sum = sum + (long) data[i].intValue();
    }
    double res = 1.0 * (double) lo.longValue() / (double) sum.longValue();
    return res;
}
public static Double func_dce42c4899694d408bdc08659935e46a(Integer[] data, Long sum, Integer n, Long lo) {
    for (int i = 0; i < n; ++i) {
        sum = sum + (long) data[i].intValue();
    }
    double res = 1.0 * (double) lo.longValue() / (double) sum.longValue();
    System.out.printf("%.9f\n", 1.0 - res);
    return res;
}


****** Cluster 165 ******
public static long func_16f2857c646842b886a6680980778310(Long min, Long money_counted, Integer nuse, Long[] A3) {
    for (int i = 0; i < nuse; ++i) {
        money_counted = money_counted + (min - A3[i]);
    }
    return money_counted;
}
public static Long func_7d7e69b9bc6b481ab0ca96b89fe699a2(Long min, Long money_counted, Integer nuse, Long[] A3) {
    for (int i = 0; i < nuse; ++i) {
        money_counted = money_counted + (min - A3[i]);
    }
    return money_counted;
}


****** Cluster 166 ******
public static Long func_2e85780446ef442189231a4317ce931e(Long[] A3, Long min, Integer nuse) {
    long money_used = 0L;
    for (int i = 0; i < nuse; ++i) {
        money_used += min - A3[i];
    }
    return money_used;
}
public static Long func_a73a7c0d10d94b1da4f4f0aa37710877(Long[] a2, Long now, Integer i) {
    long eq = 0L;
    for (int j = 0; j < i; ++j) {
        eq += now - a2[j];
    }
    return eq;
}
public static Long func_451ed08cd33c49e0b1b2c6cb0f9cc86f(Long[] a2, Long now, Integer i) {
    long eq = 0L;
    for (int j = 0; j < i; ++j) {
        eq += now - a2[j];
    }
    return eq;
}


****** Cluster 167 ******
public static Long func_1b77c9d3b52d4c3198cac7e8ed66111f(Long left, Long right) {
    long mid = (left + right) / 2L;
    return mid;
}
public static Long func_a55bffbe4d5742e9984345813f0f6979(Long left, Long right) {
    long mid = (left + right) / 2L;
    return mid;
}
public static Long func_0896ab9797a947c9a593665c2208ef2c(Long r, Long l) {
    long m = (l + r) / 2L;
    return m;
}
public static Long func_26624e299802400bb18e0fe2bc591228(Long left, Long right) {
    long mid = (left + right) / 2L;
    return mid;
}
public static Long func_8e7504a28e5248a98645b9c3cb9e574a(Long left, Long right) {
    long mid = (left + right) / 2L;
    return mid;
}
public static Long func_2b76bb5b83754e3195df7ca1951faec3(Long l, Long r) {
    long to = (l + r) / 2L;
    return to;
}
public static Long func_4159691ea0b744dd8789c2eee2826f36(Long min, Long max) {
    long mid = (min + max) / 2L;
    return mid;
}
public static Long func_1a8fc05e116b41d09245bab9e61daecf(Long r, Long l) {
    long m = (l + r) / 2L;
    return m;
}
public static Long func_e011145962fa420b8970a52cbe6a940b(Long low, Long high) {
    long m = (low + high) / 2L;
    return m;
}
public static Long func_010aec2b7de04d0da7e94ba8855e9408(Long low, Long high) {
    long m = (low + high) / 2L;
    return m;
}
public static Long func_57e5b6ed845b4bffaac61c8398b01ac2(Long low, Long high) {
    long mid = (low + high) / 2L;
    return mid;
}


****** Cluster 168 ******
public static long func_3284d3169cdf426ab11b0ee866ff97b1(Long[] A3, Long min, Long money_used, Integer nuse) {
    for (int i = nuse.intValue(); i < 37; ++i) {
        if (A3[i] > min + 1L)
            continue;
        money_used = money_used + (min + 1L - A3[i]);
    }
    return money_used;
}
public static Long func_5ff8c6c3e82f4e40a14db9c1976512b3(Long[] A3, Long min, Long money_used, Integer nuse) {
    for (int i = nuse.intValue(); i < 37; ++i) {
        if (A3[i] > min + 1L)
            continue;
        money_used = money_used + (min + 1L - A3[i]);
    }
    return money_used;
}


****** Cluster 169 ******
public static Long func_cfd7dcafd03445c7804793fadb68848f(Long[] a2, Integer n, Long sum1, Long mid) {
    for (int first = 0; first != n && sum1 < mid; ++first) {
        sum1 = sum1 + a2[first];
    }
    return sum1;
}
public static Long func_a27c862e07904ae7858feb80f16f1000(Long[] a2, Integer n, Long sum1, Long mid) {
    for (int first = 0; first != n && sum1 < mid; ++first) {
        sum1 = sum1 + a2[first];
    }
    n.intValue();
    return sum1;
}
public static Long func_bdc6e7e165e04c44b38e38167020a249(Long[] a2, Integer n, Long sum1, Long mid) {
    for (int first = 0; first != n && sum1 < mid; ++first) {
        sum1 = sum1 + a2[first];
    }
    n.intValue();
    return sum1;
}


****** Cluster 170 ******
public static Integer func_738041ecb62d40f5b452ecf5e9c716f1(Long[] a2, Integer n, Long sum1, Long mid) {
    int first;
    for (first = 0; first != n && sum1 < mid; ++first) {
        sum1 = sum1 + a2[first];
    }
    return first;
}
public static Integer func_f5e35f7020464359b54a92127fde5804(Long[] a2, Integer n, Long sum1, Long mid) {
    int first;
    for (first = 0; first != n && sum1 < mid; ++first) {
        sum1 = sum1 + a2[first];
    }
    n.intValue();
    return first;
}
public static Integer func_1b66007deb82475686451276e0afeb15(Long[] a2, Integer n, Long sum1, Long mid) {
    int first;
    for (first = 0; first != n && sum1 < mid; ++first) {
        sum1 = sum1 + a2[first];
    }
    n.intValue();
    return first;
}


****** Cluster 171 ******
public static Long func_6dd9937a97b042b6b45d5bb5d47ca7a2(Long[] a2, Integer n, Long sum1, Long mid, Integer first) {
    while (first != n && sum1 < mid) {
        sum1 = sum1 + a2[first];
        first = first + 1;
    }
    n.intValue();
    return sum1;
}
public static Long func_e40c1e6aa1c1463b855f3847f748608d(Long[] a2, Integer n, Long sum1, Long mid, Integer first) {
    while (first != n && sum1 < mid) {
        sum1 = sum1 + a2[first];
        first = first + 1;
    }
    n.intValue();
    return sum1;
}


****** Cluster 172 ******
public static Integer func_947e320280d8487ca2865e5db3ffee01(Long[] a2, Integer n, Long sum1, Long mid, Integer first) {
    while (first != n && sum1 < mid) {
        sum1 = sum1 + a2[first];
        first = first + 1;
    }
    int second = n - 1;
    return second;
}
public static Integer func_eaea342049d64c8dbc46790168689bf6(Long[] a2, Integer n, Long sum1, Long mid, Integer first) {
    while (first != n && sum1 < mid) {
        sum1 = sum1 + a2[first];
        first = first + 1;
    }
    int second = n - 1;
    return second;
}


****** Cluster 173 ******
public static Integer func_4c52f50b963e457caacf976068268022(Integer n) {
    int second = n - 1;
    return second;
}
public static Integer func_891b60d75fdd4a7891165e17a4e8d84f(Integer N) {
    int second = N - 1;
    return second;
}
public static Integer func_5ad593aaf0a4474e8432480b1cb46708(Integer N) {
    int second = N - 1;
    return second;
}
public static Integer func_55e4451a4c244b8a8cf68cb4bb00dbd8(Integer N) {
    int second = N - 1;
    return second;
}
public static Integer func_edb196e36ac74c8da8a185348c144531(Integer N) {
    int second = N - 1;
    return second;
}
public static Integer func_be0e8f84cb3340bdafd8fd1d16b08494(Integer N) {
    int second = N - 1;
    return second;
}
public static Integer func_231ab8904358494c8a37df8b7e9eaac9(Integer t) {
    int h = t - 1;
    return h;
}
def func_f63cca139311488eb5f4bbdc9c087b9d(N):
    a_lo = 0
    a_hi = N - 1
    return a_hi

def func_00385f74f4444042a383f8c082f6f1a8(N):
    i = 0
    j = N - 1
    return j

def func_3ddb816ad01f46ab8fa68503399d1c75(N):
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return j

def func_711d26b303844f559819e8246d810afb(N):
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return j

def func_b0ba75a9d90747ca9e796d7e18a694ef(N):
    part3 = 0
    i = 0
    j = N - 1
    return j

def func_6dbdcddbbf0640a38154ad0eb195fcbe(n):
    i = 0
    j = n - 1
    return j

def func_c0276670d2f84727be199711b51bd9e7(n):
    j = n - 1
    ltot = 0
    return j

def func_efa5c3f0b0fe43e3bf5a6244ee76bcc5(n):
    i = 0
    j = n - 1
    ltot = 0
    return j



****** Cluster 174 ******
public static Double func_9d4b67ec0eea415fb3aec302de92ae29(Long l, Integer win, Long cur, Long[] a2) {
    double sum = cur.longValue();
    for (int i = win.intValue(); i < 35; ++i) {
        if (a2[i] > l)
            continue;
        cur = cur + (l - a2[i] + 1L);
    }
    return sum;
}
public static Long func_736a1a1080c84194b50cad86aa8a6130(Long l, Integer win, Long cur, Long[] a2) {
    cur.longValue();
    for (int i = win.intValue(); i < 35; ++i) {
        if (a2[i] > l)
            continue;
        cur = cur + (l - a2[i] + 1L);
    }
    return cur;
}


****** Cluster 175 ******
public static Double func_e9a5c07afced47a389ab1afadd87053e(Integer w, Integer i, Double trazenaPovrsina) {
    i.intValue();
    trazenaPovrsina.doubleValue();
    double dg = w.intValue();
    return dg;
}
public static Double func_6128625f01e14d8a8328915dee9a3436(Integer w, Integer i, Double trazenaPovrsina) {
    i.intValue();
    trazenaPovrsina.doubleValue();
    double dg = w.intValue();
    return dg;
}


****** Cluster 176 ******
public static Boolean func_7b2fcfa8f371409c936babeca38796cf(Long[] a2, Integer n, Boolean ok, Long sum1, Long sum2, Integer second, Long[] sum, Long mid, Integer first) {
    while (second != -1 && sum2 < mid) {
        sum2 = sum2 + a2[second];
        second = second - 1;
    }
    if (sum1 >= mid && sum2 >= mid) {
        if (second >= first) {
            ok = true;
        } else {
            long total = 0L;
            if (second != -1) {
                total += sum[second].longValue();
            }
            if (first != n) {
                total += sum[n - 1] - sum[first - 1];
            }
            if (total >= mid) {
                ok = true;
            }
        }
    }
    return ok;
}
public static Boolean func_9a8a8a2ba2a44f4ba715322ba7af158e$57e2df59(Long[] a2, Integer n, Boolean ok, Long sum1, Long sum2, Integer second, Long[] sum, Long mid, Integer first) {
    while (second != -1 && sum2 < mid) {
        sum2 = sum2 + a2[second];
        second = second - 1;
    }
    if (sum1 >= mid && sum2 >= mid) {
        if (second >= first) {
            ok = true;
        } else {
            long total = 0L;
            if (second != -1) {
                total += sum[second].longValue();
            }
            if (first != n) {
                total += sum[n - 1] - sum[first - 1];
            }
            if (total >= mid) {
                ok = true;
            }
        }
    }
    ok.booleanValue();
    return ok;
}


****** Cluster 177 ******
public static Double func_3694dee425d541d4823f96e4c99801fe(Integer w, Integer i, Double trazenaPovrsina) {
    double p = (double) (i + 1) * trazenaPovrsina;
    w.intValue();
    return p;
}
public static Double func_1a04d971a2394370994880594696f0f2(Integer w, Integer i, Double trazenaPovrsina) {
    double p = (double) (i + 1) * trazenaPovrsina;
    w.intValue();
    return p;
}


****** Cluster 178 ******
public static Long func_f81543e0384b42bfb51cdec884507ead(Long[] a2, Long sum2, Integer second) {
    sum2 = sum2 + a2[second];
    Integer.valueOf(second - 1);
    return sum2;
}
public static Long func_80810ade5d4a436387da4b371571e638(Long[] a2, Long sum1, Integer first) {
    sum1 = sum1 + a2[first];
    Integer.valueOf(first + 1);
    return sum1;
}
public static Long func_da41299d9b88437baa79df62fb43da73(Long[] A3, Long beforeHalfSum, Integer beforeHalf) {
    beforeHalfSum = beforeHalfSum + A3[beforeHalf];
    Integer.valueOf(beforeHalf + 1);
    return beforeHalfSum;
}


****** Cluster 179 ******
public static Double func_debe529c06474fafa709c542327a6f61(Long l, Integer win, Long cur, Double ans, Long[] a2) {
    double sum = cur.longValue();
    for (int i = win.intValue(); i < 35; ++i) {
        if (a2[i] > l)
            continue;
        cur = cur + (l - a2[i] + 1L);
    }
    Double.valueOf(Math.max(ans, 36.0 * sum / (double) win.intValue() - (double) cur.longValue()));
    return sum;
}
public static Long func_d0db24056fba4c9ca69825b851fc2c5c(Long l, Integer win, Long cur, Double ans, Long[] a2) {
    double sum = cur.longValue();
    for (int i = win.intValue(); i < 35; ++i) {
        if (a2[i] > l)
            continue;
        cur = cur + (l - a2[i] + 1L);
    }
    Double.valueOf(Math.max(ans, 36.0 * sum / (double) win.intValue() - (double) cur.longValue()));
    return cur;
}


****** Cluster 180 ******
public static Integer func_640c2bddc7104623aac35049c9665fef(Long[] a2, Integer n, Long mid) {
    int first;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    return first;
}
public static Integer func_f66f2731e0de44ae820d89d5663dd866(Long[] a2, Integer n, Long mid) {
    int first;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    return first;
}
public static Integer func_224d5c9dbeac4e5180fc74d402fcfdbf(Long[] a2, Integer n, Long mid) {
    int first;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    n.intValue();
    return first;
}
public static Integer func_e82d25e2f10a405d8e2782f9eb0e3ee0(Long[] a2, Integer n, Long mid) {
    int first;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    return first;
}
public static Integer func_7895f0d9632949c990f8ffcadc71e47d(Long[] a2, Integer n, Long mid) {
    int first;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    n.intValue();
    return first;
}
public static Integer func_8672fb10810646e8be50a3506a9ecf52(Long[] a2, Integer n, Long mid) {
    int first;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    n.intValue();
    return first;
}
public static Integer func_b39dc0d95be34657bba9a17e4f87b42a(Long[] a2, Integer n, Long mid) {
    int first;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    n.intValue();
    return first;
}
public static Integer func_d46a830bcf394610b5cdc9a4f1faf1a9(Long[] a2, Integer n, Long mid) {
    int first;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    n.intValue();
    return first;
}
public static Integer func_dcf26d6dcb4546559ed59291405c826d(Long[] a2, Integer n, Long mid) {
    int first;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    n.intValue();
    return first;
}


****** Cluster 181 ******
public static Long func_61310880df564399b5ecc836b8bcde57(Long[] a2, Integer n, Long mid) {
    long sum1 = 0L;
    for (int first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    return sum1;
}
public static Long func_b8c67217d07845b7bb8bfcfd20bdc4b8(Long[] a2, Integer n, Long mid) {
    long sum1 = 0L;
    for (int first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    return sum1;
}
public static Long func_0db6be71ccca464a91b00a2c35c7743e(Long[] a2, Integer n, Long mid) {
    long sum1 = 0L;
    for (int first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    n.intValue();
    return sum1;
}
public static Long func_bbae053d98f448deb3a8abc8486dcd61(Long[] a2, Integer n, Long mid) {
    long sum1 = 0L;
    for (int first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    return sum1;
}
public static Long func_4393caea997045dc9e00798a13e88a8a(Long[] a2, Integer n, Long mid) {
    long sum1 = 0L;
    for (int first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    n.intValue();
    return sum1;
}
public static Long func_258e7cd6a6e449ee8510e9db1a6aaeaf(Long[] a2, Integer n, Long mid) {
    long sum1 = 0L;
    for (int first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    n.intValue();
    return sum1;
}
public static Long func_f58c91085fe8482094325452bf09d937(Long[] a2, Integer n, Long mid) {
    long sum1 = 0L;
    for (int first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    n.intValue();
    return sum1;
}
public static Long func_50d0b395a0d24ff88e2c26c5954a61b9(Long[] a2, Integer n, Long mid) {
    long sum1 = 0L;
    for (int first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    n.intValue();
    return sum1;
}
public static Long func_acb282ea52234a4c8a0ba353ee9681fd(Long[] a2, Integer n, Long mid) {
    long sum1 = 0L;
    for (int first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    n.intValue();
    return sum1;
}


****** Cluster 182 ******
public static Double func_50c1675ad14b45b8bbcf48cf2bc51e18(Double d2, Double want, Double d1, Double dx) {
    double k = (d2 - d1) / dx;
    if (Math.abs(k) < 1.0E-9) {
        return want / d1;
    }
    return k;
}
public static Double func_39bdec4eb8124fbda8626eb863b8da76(Double d2, Double want, Double d1, Double dx) {
    double k = (d2 - d1) / dx;
    if (Math.abs(k) < 1.0E-9) {
        return want / d1;
    }
    Math.sqrt(Math.max(d1 * d1 + 2.0 * k * want, 0.0));
    return k;
}
public static Double func_419ecb58ca784722861727f808176dd4(Double d2, Double want, Double d1, Double dx) {
    double k = (d2 - d1) / dx;
    if (Math.abs(k) < 1.0E-9) {
        return want / d1;
    }
    Math.sqrt(Math.max(d1 * d1 + 2.0 * k * want, 0.0));
    d1.doubleValue();
    return k;
}


****** Cluster 183 ******
public static Double func_68abf923c8a84e0c92f8f87bafb1c279(Double want, Double d1, Double k) {
    if (Math.abs(k) < 1.0E-9) {
        return want / d1;
    }
    double t = Math.sqrt(Math.max(d1 * d1 + 2.0 * k * want, 0.0));
    return t;
}
public static Double func_d95d3c371a2a4447a8210c18da31a3cf(Double want, Double d1, Double k) {
    double t = Math.sqrt(Math.max(d1 * d1 + 2.0 * k * want, 0.0));
    d1.doubleValue();
    k.doubleValue();
    return t;
}
public static Double func_faf814247d40471bb34bccb5dd81021d(Double want, Double d1, Double k) {
    if (Math.abs(k) < 1.0E-9) {
        return want / d1;
    }
    double t = Math.sqrt(Math.max(d1 * d1 + 2.0 * k * want, 0.0));
    d1.doubleValue();
    k.doubleValue();
    return t;
}


****** Cluster 184 ******
public static Double func_57c60480455b479285c1ecd4b085cef5(Double want, Double d1, Double k) {
    double t = Math.sqrt(Math.max(d1 * d1 + 2.0 * k * want, 0.0));
    double res = (t - d1) / k;
    return res;
}
public static Double func_7d5ac140b8c6454e87ac18970c89ef1f(Double want, Double d1, Double k) {
    if (Math.abs(k) < 1.0E-9) {
        return want / d1;
    }
    double t = Math.sqrt(Math.max(d1 * d1 + 2.0 * k * want, 0.0));
    double res = (t - d1) / k;
    return res;
}


****** Cluster 185 ******
public static Integer func_ea1039513fad48caaf2c54d55f4655fc(Long[] a2, Integer n, Long sum1, Long mid) {
    for (int first = 0; first != n && sum1 < mid; ++first) {
        sum1 = sum1 + a2[first];
    }
    int second = n - 1;
    return second;
}
public static Integer func_b11490d8ef8a4bd7ba2bb6021af14760(Long[] a2, Integer n, Long sum1, Long mid) {
    for (int first = 0; first != n && sum1 < mid; ++first) {
        sum1 = sum1 + a2[first];
    }
    int second = n - 1;
    return second;
}


****** Cluster 186 ******
public static Long func_b86dbd3b1a414e568197604656bff9e2(Long[] a2, Long l, Long money) {
    ArrayList<Long> profit = new ArrayList<Long>();
    Long[] arr$ = a2;
    int len$ = arr$.length;
    for (int i$ = 0; i$ < len$; ++i$) {
        long x2 = arr$[i$];
        if (x2 < l) {
            money = money - (l - x2);
            profit.add(l - x2);
            continue;
        }
        if (x2 != l)
            continue;
        profit.add(0L);
    }
    return money;
}
public static Long func_67c10fcdc9834e63b9f3e3424609bab6(Long[] a2, Long l, Long money) {
    money.longValue();
    ArrayList<Long> profit = new ArrayList<Long>();
    Long[] arr$ = a2;
    int len$ = arr$.length;
    for (int i$ = 0; i$ < len$; ++i$) {
        long x2 = arr$[i$];
        if (x2 < l) {
            money = money - (l - x2);
            profit.add(l - x2);
            continue;
        }
        if (x2 != l)
            continue;
        profit.add(0L);
    }
    return money;
}
public static Long func_16158c03e696453785e670bd88433eb6(Long[] a2, Long l, Long money) {
    ArrayList<Long> profit = new ArrayList<Long>();
    Long[] arr$ = a2;
    int len$ = arr$.length;
    for (int i$ = 0; i$ < len$; ++i$) {
        long x2 = arr$[i$];
        if (x2 < l) {
            money = money - (l - x2);
            profit.add(l - x2);
            continue;
        }
        if (x2 != l)
            continue;
        profit.add(0L);
    }
    Collections.sort(profit);
    return money;
}
public static Long func_37e5bf0621b548a99ed112109968405c(Long[] a2, Long l, Long money) {
    money.longValue();
    ArrayList<Long> profit = new ArrayList<Long>();
    Long[] arr$ = a2;
    int len$ = arr$.length;
    for (int i$ = 0; i$ < len$; ++i$) {
        long x2 = arr$[i$];
        if (x2 < l) {
            money = money - (l - x2);
            profit.add(l - x2);
            continue;
        }
        if (x2 != l)
            continue;
        profit.add(0L);
    }
    Collections.sort(profit);
    return money;
}
public static Long func_3acc65cb101e4a36a0a92ed4f955e97c(Long[] a2, Long l, Long money) {
    ArrayList<Long> profit = new ArrayList<Long>();
    Long[] arr$ = a2;
    int len$ = arr$.length;
    for (int i$ = 0; i$ < len$; ++i$) {
        long x2 = arr$[i$];
        if (x2 < l) {
            money = money - (l - x2);
            profit.add(l - x2);
            continue;
        }
        if (x2 != l)
            continue;
        profit.add(0L);
    }
    Collections.sort(profit);
    return money;
}
public static Long func_03bd5500ee5842b88137a8f1d3d96eb0(Long[] a2, Long l, Long money) {
    money.longValue();
    ArrayList<Long> profit = new ArrayList<Long>();
    Long[] arr$ = a2;
    int len$ = arr$.length;
    for (int i$ = 0; i$ < len$; ++i$) {
        long x2 = arr$[i$];
        if (x2 < l) {
            money = money - (l - x2);
            profit.add(l - x2);
            continue;
        }
        if (x2 != l)
            continue;
        profit.add(0L);
    }
    Collections.sort(profit);
    return money;
}


****** Cluster 187 ******
public static Double func_88b5300639ee474aa0b0a5af091c91c8(Long[] a2, Long l, Long money) {
    double startResult = -money.longValue();
    ArrayList<Long> profit = new ArrayList<Long>();
    Long[] arr$ = a2;
    int len$ = arr$.length;
    for (int i$ = 0; i$ < len$; ++i$) {
        long x2 = arr$[i$];
        if (x2 < l) {
            money = money - (l - x2);
            profit.add(l - x2);
            continue;
        }
        if (x2 != l)
            continue;
        profit.add(0L);
    }
    return startResult;
}
public static Double func_132632fc668d4ee3805728ec4630acb7(Long[] a2, Long l, Long money) {
    double startResult = -money.longValue();
    ArrayList<Long> profit = new ArrayList<Long>();
    Long[] arr$ = a2;
    int len$ = arr$.length;
    for (int i$ = 0; i$ < len$; ++i$) {
        long x2 = arr$[i$];
        if (x2 < l) {
            money = money - (l - x2);
            profit.add(l - x2);
            continue;
        }
        if (x2 != l)
            continue;
        profit.add(0L);
    }
    Collections.sort(profit);
    return startResult;
}
public static Double func_3f9002b8155840d8854f7db88cbf3a28(Long[] a2, Long l, Long money) {
    double startResult = -money.longValue();
    ArrayList<Long> profit = new ArrayList<Long>();
    Long[] arr$ = a2;
    int len$ = arr$.length;
    for (int i$ = 0; i$ < len$; ++i$) {
        long x2 = arr$[i$];
        if (x2 < l) {
            money = money - (l - x2);
            profit.add(l - x2);
            continue;
        }
        if (x2 != l)
            continue;
        profit.add(0L);
    }
    Collections.sort(profit);
    return startResult;
}
public static Double func_84ffa7007eaa4ac59096387ad2f47d57(Long[] a2, Long l, Long money) {
    double startResult = -money.longValue();
    ArrayList<Long> profit = new ArrayList<Long>();
    Long[] arr$ = a2;
    int len$ = arr$.length;
    for (int i$ = 0; i$ < len$; ++i$) {
        long x2 = arr$[i$];
        if (x2 < l) {
            money = money - (l - x2);
            profit.add(l - x2);
            continue;
        }
        if (x2 != l)
            continue;
        profit.add(0L);
    }
    Collections.sort(profit);
    double bestResult = 0.0;
    while (profit.size() > 0 && money >= 0L) {
        double result = startResult + (double) money.longValue();
        for (int i = 0; i < profit.size(); ++i) {
            result += 36.0 * (double) ((Long) profit.get(i)).longValue() * (1.0 / (double) profit.size());
        }
        profit.remove(0);
        money = money - 1L;
        bestResult = Math.max(bestResult, result);
    }
    return startResult;
}


****** Cluster 188 ******
public static Double func_101f30f8d50b4b318caa57e3d206eba3(Long[] a2, Double startResult, Long l, Long money) {
    ArrayList<Long> profit = new ArrayList<Long>();
    Long[] arr$ = a2;
    int len$ = arr$.length;
    for (int i$ = 0; i$ < len$; ++i$) {
        long x2 = arr$[i$];
        if (x2 < l) {
            money = money - (l - x2);
            profit.add(l - x2);
            continue;
        }
        if (x2 != l)
            continue;
        profit.add(0L);
    }
    Collections.sort(profit);
    double bestResult = 0.0;
    while (profit.size() > 0 && money >= 0L) {
        double result = startResult + (double) money.longValue();
        for (int i = 0; i < profit.size(); ++i) {
            result += 36.0 * (double) ((Long) profit.get(i)).longValue() * (1.0 / (double) profit.size());
        }
        profit.remove(0);
        money = money - 1L;
        bestResult = Math.max(bestResult, result);
    }
    return bestResult;
}
public static double func_189dc4c00fcf4afeb17f166fbdb9a3c3(Long[] a2, Double startResult, Long l, Long money) {
    ArrayList<Long> profit = new ArrayList<Long>();
    Long[] arr$ = a2;
    int len$ = arr$.length;
    for (int i$ = 0; i$ < len$; ++i$) {
        long x2 = arr$[i$];
        if (x2 < l) {
            money = money - (l - x2);
            profit.add(l - x2);
            continue;
        }
        if (x2 != l)
            continue;
        profit.add(0L);
    }
    Collections.sort(profit);
    double bestResult = 0.0;
    while (profit.size() > 0 && money >= 0L) {
        double result = startResult + (double) money.longValue();
        for (int i = 0; i < profit.size(); ++i) {
            result += 36.0 * (double) ((Long) profit.get(i)).longValue() * (1.0 / (double) profit.size());
        }
        profit.remove(0);
        money = money - 1L;
        bestResult = Math.max(bestResult, result);
    }
    return bestResult;
}


****** Cluster 189 ******
public static Double func_36a392b01a214a58bfa501331931fcad(Double d2, Double want, Double d1, Double dx) {
    double k = (d2 - d1) / dx;
    if (Math.abs(k) < 1.0E-9) {
        return want / d1;
    }
    double t = Math.sqrt(Math.max(d1 * d1 + 2.0 * k * want, 0.0));
    return t;
}
public static Double func_319db7b5418d437989dfa50454fa43a3(Double d2, Double want, Double d1, Double dx) {
    double k = (d2 - d1) / dx;
    if (Math.abs(k) < 1.0E-9) {
        return want / d1;
    }
    double t = Math.sqrt(Math.max(d1 * d1 + 2.0 * k * want, 0.0));
    d1.doubleValue();
    return t;
}


****** Cluster 190 ******
public static Boolean func_ddc512ecaa4641eb92712a5274d85d86(Long[] a2, Integer n, Boolean ok, Long sum1, Integer second, Long[] sum, Long mid, Integer first) {
    long sum2;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second.intValue()].longValue()) {
        second = second - 1;
    }
    if (sum1 >= mid && sum2 >= mid) {
        if (second >= first) {
            ok = true;
        } else {
            long total = 0L;
            if (second != -1) {
                total += sum[second].longValue();
            }
            if (first != n) {
                total += sum[n - 1] - sum[first - 1];
            }
            if (total >= mid) {
                ok = true;
            }
        }
    }
    return ok;
}
public static Boolean func_42ba0dbe99e74567a06f44a549b7e230$14237fa(Long[] a2, Integer n, Boolean ok, Long sum1, Integer second, Long[] sum, Long mid, Integer first) {
    long sum2;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second.intValue()].longValue()) {
        second = second - 1;
    }
    if (sum1 >= mid && sum2 >= mid) {
        if (second >= first) {
            ok = true;
        } else {
            long total = 0L;
            if (second != -1) {
                total += sum[second].longValue();
            }
            if (first != n) {
                total += sum[n - 1] - sum[first - 1];
            }
            if (total >= mid) {
                ok = true;
            }
        }
    }
    ok.booleanValue();
    return ok;
}


****** Cluster 191 ******
public static Double func_0e4d3fe35f4a457dbd3c4a37ed90d4b4(Long[] a2, Long l, Long money) {
    double startResult = -money.longValue();
    ArrayList<Long> profit = new ArrayList<Long>();
    Long[] arr$ = a2;
    int len$ = arr$.length;
    for (int i$ = 0; i$ < len$; ++i$) {
        long x2 = arr$[i$];
        if (x2 < l) {
            money = money - (l - x2);
            profit.add(l - x2);
            continue;
        }
        if (x2 != l)
            continue;
        profit.add(0L);
    }
    Collections.sort(profit);
    double bestResult = 0.0;
    while (profit.size() > 0 && money >= 0L) {
        double result = startResult + (double) money.longValue();
        for (int i = 0; i < profit.size(); ++i) {
            result += 36.0 * (double) ((Long) profit.get(i)).longValue() * (1.0 / (double) profit.size());
        }
        profit.remove(0);
        money = money - 1L;
        bestResult = Math.max(bestResult, result);
    }
    return bestResult;
}
public static double func_154d1028a18b43c1aedbede3850ea040(Long[] a2, Long l, Long money) {
    double startResult = -money.longValue();
    ArrayList<Long> profit = new ArrayList<Long>();
    Long[] arr$ = a2;
    int len$ = arr$.length;
    for (int i$ = 0; i$ < len$; ++i$) {
        long x2 = arr$[i$];
        if (x2 < l) {
            money = money - (l - x2);
            profit.add(l - x2);
            continue;
        }
        if (x2 != l)
            continue;
        profit.add(0L);
    }
    Collections.sort(profit);
    double bestResult = 0.0;
    while (profit.size() > 0 && money >= 0L) {
        double result = startResult + (double) money.longValue();
        for (int i = 0; i < profit.size(); ++i) {
            result += 36.0 * (double) ((Long) profit.get(i)).longValue() * (1.0 / (double) profit.size());
        }
        profit.remove(0);
        money = money - 1L;
        bestResult = Math.max(bestResult, result);
    }
    return bestResult;
}


****** Cluster 192 ******
public static Long func_f448aafdb9514b98899788cde9034eed(Long[] a2, Long s, Long l, Integer n, Integer i) {
    for (int j = 0; j < n; ++j) {
        if (j <= i) {
            s = s + (l - a2[j]);
            l.longValue();
            a2[j].longValue();
            continue;
        }
        if (a2[j] >= l + 1L)
            continue;
        s = s + (l + 1L - a2[j]);
    }
    return s;
}
public static Long func_fcd903a6ff5143acb7a786aca0583d2d(Long[] a2, Long s, Long l, Integer n, Integer i) {
    for (int j = 0; j < n; ++j) {
        if (j <= i) {
            s = s + (l - a2[j]);
            l.longValue();
            a2[j].longValue();
            continue;
        }
        if (a2[j] >= l + 1L)
            continue;
        s = s + (l + 1L - a2[j]);
    }
    i.intValue();
    s.longValue();
    return s;
}


****** Cluster 193 ******
public static Long func_34de23b5c6114fd3b8b658928dded115(Long[] a2, Long s, Long l, Integer n, Integer i) {
    long s2 = 0L;
    for (int j = 0; j < n; ++j) {
        if (j <= i) {
            s = s + (l - a2[j]);
            s2 += l - a2[j];
            continue;
        }
        if (a2[j] >= l + 1L)
            continue;
        s = s + (l + 1L - a2[j]);
    }
    return s2;
}
public static Long func_4de80a1c906c4985bdebb35f63d849f7(Long[] a2, Long s, Long l, Integer n, Integer i) {
    long s2 = 0L;
    for (int j = 0; j < n; ++j) {
        if (j <= i) {
            s = s + (l - a2[j]);
            s2 += l - a2[j];
            continue;
        }
        if (a2[j] >= l + 1L)
            continue;
        s = s + (l + 1L - a2[j]);
    }
    i.intValue();
    s.longValue();
    return s2;
}


****** Cluster 194 ******
public static Integer func_7daadf34a66c4f979b5754ccaffbf768(Long[] a2, Integer n, Long mid) {
    long sum1 = 0L;
    for (int first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    return second;
}
public static Integer func_9e5913d5599c45abb163bd8e69c73762(Long[] a2, Integer n, Long mid) {
    long sum1 = 0L;
    for (int first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    return second;
}
public static Integer func_bacc97ab29384b6eb44d9ff62ea30019(Long[] a2, Integer n, Long mid) {
    long sum1 = 0L;
    for (int first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    return second;
}
public static Integer func_8ea6f176da46417ba7c492346f289db0(Long[] a2, Integer n, Long mid) {
    long sum1 = 0L;
    for (int first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    return second;
}
public static Integer func_fbe69fd2d3e44fb38150ab9582f85de2(Long[] a2, Integer n, Long mid) {
    long sum1 = 0L;
    for (int first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    return second;
}
public static Integer func_2edc14b6ab3148a79d83a89355b44377(Long[] a2, Integer n, Long mid) {
    long sum1 = 0L;
    for (int first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    return second;
}


****** Cluster 195 ******
public static Long func_23b50a62b541464bb89bc29b88feafae(Long[] a2, Long l, Integer n, Integer i) {
    long s = 0L;
    for (int j = 0; j < n; ++j) {
        if (j <= i) {
            s += l - a2[j];
            l.longValue();
            a2[j].longValue();
            continue;
        }
        if (a2[j] >= l + 1L)
            continue;
        s += l + 1L - a2[j];
    }
    return s;
}
public static Long func_913f41b155ef474f9bcf835b0d5668b2(Long[] a2, Long l, Integer n, Integer i) {
    long s = 0L;
    for (int j = 0; j < n; ++j) {
        if (j <= i) {
            s += l - a2[j];
            l.longValue();
            a2[j].longValue();
            continue;
        }
        if (a2[j] >= l + 1L)
            continue;
        s += l + 1L - a2[j];
    }
    i.intValue();
    return s;
}
public static Long func_df425e7d43e845328ea533910825122a(Long[] a2, Long m, Integer n, Integer i) {
    long s = 0L;
    for (int j = 0; j < n; ++j) {
        if (j <= i) {
            s += m - a2[j];
            continue;
        }
        if (a2[j] >= m + 1L)
            continue;
        s += m + 1L - a2[j];
    }
    return s;
}


****** Cluster 196 ******
public static Long func_a28e814cce70476f90f084fbfeba38e3(Long[] a2, Long l, Integer n, Integer i) {
    long s2 = 0L;
    for (int j = 0; j < n; ++j) {
        if (j <= i) {
            l.longValue();
            a2[j].longValue();
            s2 += l - a2[j];
            continue;
        }
        if (a2[j] >= l + 1L)
            continue;
        l.longValue();
        a2[j].longValue();
    }
    return s2;
}
public static Long func_42953b3c33a3435e88ff456448033dd6(Long[] a2, Long l, Integer n, Integer i) {
    long s2 = 0L;
    for (int j = 0; j < n; ++j) {
        if (j <= i) {
            l.longValue();
            a2[j].longValue();
            s2 += l - a2[j];
            continue;
        }
        if (a2[j] >= l + 1L)
            continue;
        l.longValue();
        a2[j].longValue();
    }
    i.intValue();
    return s2;
}


****** Cluster 197 ******
public static Boolean func_61715f2914634d158f8139d53745e388(Long[] a2, Boolean ok, Long sum1, Integer n, Long[] sum, Long mid, Integer first) {
    long sum2;
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid) {
        if (second >= first) {
            ok = true;
        } else {
            long total = 0L;
            if (second != -1) {
                total += sum[second].longValue();
            }
            if (first != n) {
                total += sum[n - 1] - sum[first - 1];
            }
            if (total >= mid) {
                ok = true;
            }
        }
    }
    return ok;
}
public static Boolean func_f1896bd51346476e84a5b783312eeec6$566fcb29(Long[] a2, Boolean ok, Long sum1, Integer n, Long[] sum, Long mid, Integer first) {
    long sum2;
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid) {
        if (second >= first) {
            ok = true;
        } else {
            long total = 0L;
            if (second != -1) {
                total += sum[second].longValue();
            }
            if (first != n) {
                total += sum[n - 1] - sum[first - 1];
            }
            if (total >= mid) {
                ok = true;
            }
        }
    }
    ok.booleanValue();
    return ok;
}


****** Cluster 198 ******
public static Long func_7564e6a8ec7742e5a7943d1fc5cef2db(Long[] a2, Long b, Integer n, Integer i) {
    long l = a2[i] - 1L;
    long r = a2[n - 1] - 1L;
    while (r > l + 1L) {
        long m = (l + r) / 2L;
        long s = 0L;
        for (int j = 0; j < n; ++j) {
            if (j <= i) {
                s += m - a2[j];
                continue;
            }
            if (a2[j] >= m + 1L)
                continue;
            s += m + 1L - a2[j];
        }
        if (s > b) {
            r = m;
            continue;
        }
        l = m;
    }
    return r;
}
public static Long func_938c25a903d54cd18bc16642b6c53b6f(Long[] a2, Long b, Integer n, Integer i) {
    long l = a2[i] - 1L;
    long r = a2[n - 1] - 1L;
    while (r > l + 1L) {
        long m = (l + r) / 2L;
        long s = 0L;
        for (int j = 0; j < n; ++j) {
            if (j <= i) {
                s += m - a2[j];
                continue;
            }
            if (a2[j] >= m + 1L)
                continue;
            s += m + 1L - a2[j];
        }
        if (s > b) {
            r = m;
            continue;
        }
        l = m;
    }
    return l;
}


****** Cluster 199 ******
public static Double func_afeee51b68d348aeb3fb25b459af6300(Long[] a2, Double max, Long l, Long b, Integer n, Integer i) {
    int j;
    long r = a2[n - 1] - 1L;
    while (r > l + 1L) {
        long m = (l + r) / 2L;
        long s = 0L;
        for (j = 0; j < n; ++j) {
            if (j <= i) {
                s += m - a2[j];
                continue;
            }
            if (a2[j] >= m + 1L)
                continue;
            s += m + 1L - a2[j];
        }
        if (s > b) {
            r = m;
            continue;
        }
        l = m;
    }
    if (l >= a2[i]) {
        long s = 0L;
        long s2 = 0L;
        for (j = 0; j < n; ++j) {
            if (j <= i) {
                s += l - a2[j];
                s2 += l - a2[j];
                continue;
            }
            if (a2[j] >= l + 1L)
                continue;
            s += l + 1L - a2[j];
        }
        double w = (double) s2 * (36.0 / (double) (i + 1)) - (double) s;
        max = Math.max(max, w);
    }
    return max;
}
public static Long func_7673000a14f74e36b924177b9adb0f15(Long[] a2, Double max, Long l, Long b, Integer n, Integer i) {
    int j;
    long r = a2[n - 1] - 1L;
    while (r > l + 1L) {
        long m = (l + r) / 2L;
        long s = 0L;
        for (j = 0; j < n; ++j) {
            if (j <= i) {
                s += m - a2[j];
                continue;
            }
            if (a2[j] >= m + 1L)
                continue;
            s += m + 1L - a2[j];
        }
        if (s > b) {
            r = m;
            continue;
        }
        l = m;
    }
    if (l >= a2[i]) {
        long s = 0L;
        long s2 = 0L;
        for (j = 0; j < n; ++j) {
            if (j <= i) {
                s += l - a2[j];
                s2 += l - a2[j];
                continue;
            }
            if (a2[j] >= l + 1L)
                continue;
            s += l + 1L - a2[j];
        }
        double w = (double) s2 * (36.0 / (double) (i + 1)) - (double) s;
        Double.valueOf(Math.max(max, w));
    }
    return r;
}
public static Long func_53c0bb18ca064ae38e3232569a187314(Long[] a2, Double max, Long l, Long b, Integer n, Integer i) {
    int j;
    long r = a2[n - 1] - 1L;
    while (r > l + 1L) {
        long m = (l + r) / 2L;
        long s = 0L;
        for (j = 0; j < n; ++j) {
            if (j <= i) {
                s += m - a2[j];
                continue;
            }
            if (a2[j] >= m + 1L)
                continue;
            s += m + 1L - a2[j];
        }
        if (s > b) {
            r = m;
            continue;
        }
        l = m;
    }
    if (l >= a2[i]) {
        long s = 0L;
        long s2 = 0L;
        for (j = 0; j < n; ++j) {
            if (j <= i) {
                s += l - a2[j];
                s2 += l - a2[j];
                continue;
            }
            if (a2[j] >= l + 1L)
                continue;
            s += l + 1L - a2[j];
        }
        double w = (double) s2 * (36.0 / (double) (i + 1)) - (double) s;
        Double.valueOf(Math.max(max, w));
    }
    return l;
}


****** Cluster 200 ******
public static Double func_cc7189945c814cdbb8a4df6da7719427(Long[] a2, Double max, Long b, Integer n, Integer i) {
    int j;
    long l = a2[i] - 1L;
    long r = a2[n - 1] - 1L;
    while (r > l + 1L) {
        long m = (l + r) / 2L;
        long s = 0L;
        for (j = 0; j < n; ++j) {
            if (j <= i) {
                s += m - a2[j];
                continue;
            }
            if (a2[j] >= m + 1L)
                continue;
            s += m + 1L - a2[j];
        }
        if (s > b) {
            r = m;
            continue;
        }
        l = m;
    }
    if (l >= a2[i]) {
        long s = 0L;
        long s2 = 0L;
        for (j = 0; j < n; ++j) {
            if (j <= i) {
                s += l - a2[j];
                s2 += l - a2[j];
                continue;
            }
            if (a2[j] >= l + 1L)
                continue;
            s += l + 1L - a2[j];
        }
        double w = (double) s2 * (36.0 / (double) (i + 1)) - (double) s;
        max = Math.max(max, w);
    }
    return max;
}
public static Long func_d7e4602046284ea2a05228fa0b142e70(Long[] a2, Double max, Long b, Integer n, Integer i) {
    int j;
    long l = a2[i] - 1L;
    long r = a2[n - 1] - 1L;
    while (r > l + 1L) {
        long m = (l + r) / 2L;
        long s = 0L;
        for (j = 0; j < n; ++j) {
            if (j <= i) {
                s += m - a2[j];
                continue;
            }
            if (a2[j] >= m + 1L)
                continue;
            s += m + 1L - a2[j];
        }
        if (s > b) {
            r = m;
            continue;
        }
        l = m;
    }
    if (l >= a2[i]) {
        long s = 0L;
        long s2 = 0L;
        for (j = 0; j < n; ++j) {
            if (j <= i) {
                s += l - a2[j];
                s2 += l - a2[j];
                continue;
            }
            if (a2[j] >= l + 1L)
                continue;
            s += l + 1L - a2[j];
        }
        double w = (double) s2 * (36.0 / (double) (i + 1)) - (double) s;
        Double.valueOf(Math.max(max, w));
    }
    return r;
}
public static Long func_7c77b122bdce4d98be58e9accd2d7ef8(Long[] a2, Double max, Long b, Integer n, Integer i) {
    int j;
    long l = a2[i] - 1L;
    long r = a2[n - 1] - 1L;
    while (r > l + 1L) {
        long m = (l + r) / 2L;
        long s = 0L;
        for (j = 0; j < n; ++j) {
            if (j <= i) {
                s += m - a2[j];
                continue;
            }
            if (a2[j] >= m + 1L)
                continue;
            s += m + 1L - a2[j];
        }
        if (s > b) {
            r = m;
            continue;
        }
        l = m;
    }
    if (l >= a2[i]) {
        long s = 0L;
        long s2 = 0L;
        for (j = 0; j < n; ++j) {
            if (j <= i) {
                s += l - a2[j];
                s2 += l - a2[j];
                continue;
            }
            if (a2[j] >= l + 1L)
                continue;
            s += l + 1L - a2[j];
        }
        double w = (double) s2 * (36.0 / (double) (i + 1)) - (double) s;
        Double.valueOf(Math.max(max, w));
    }
    return l;
}


****** Cluster 201 ******
public static Boolean func_7c3e7650491a4f2892ebf09f15abbd73(Long[] a2, Boolean ok, Integer n, Long sum1, Long[] sum, Long mid, Integer first) {
    long sum2;
    while (first != n && sum1 < mid) {
        sum1 = sum1 + a2[first];
        first = first + 1;
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid) {
        if (second >= first) {
            ok = true;
        } else {
            long total = 0L;
            if (second != -1) {
                total += sum[second].longValue();
            }
            if (first != n) {
                total += sum[n - 1] - sum[first - 1];
            }
            if (total >= mid) {
                ok = true;
            }
        }
    }
    return ok;
}
public static Boolean func_e3723cefbe6341f69c1da06961219019$2148e279(Long[] a2, Boolean ok, Integer n, Long sum1, Long[] sum, Long mid, Integer first) {
    long sum2;
    while (first != n && sum1 < mid) {
        sum1 = sum1 + a2[first];
        first = first + 1;
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid) {
        if (second >= first) {
            ok = true;
        } else {
            long total = 0L;
            if (second != -1) {
                total += sum[second].longValue();
            }
            if (first != n) {
                total += sum[n - 1] - sum[first - 1];
            }
            if (total >= mid) {
                ok = true;
            }
        }
    }
    ok.booleanValue();
    return ok;
}


****** Cluster 202 ******
public static Long func_68f9f033a16444e6aa5827ce263aad59(Long f, Long t) {
    long l = f - 1L;
    t.longValue();
    return l;
}
public static Integer func_84e0c4b834b84d898fb9958900c80df1(Integer N, Long sum) {
    sum.longValue();
    int second = N - 1;
    return second;
}
public static Integer func_480979716c464452b9e34d9280dc8261(Integer N, Long sum) {
    sum.longValue();
    int second = N - 1;
    return second;
}
public static Integer func_78dd5b00c8284750b48d457a85fd3db7(Integer N, Long sum) {
    sum.longValue();
    int second = N - 1;
    return second;
}
def func_ec1ec8726fa04507bb8edf18fbcb4413(N, _sum):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return j



****** Cluster 203 ******
public static Long func_c4b7dc93f61143a6b626c874dfb75570(Long f, Long t) {
    f.longValue();
    long r = t;
    return r;
}
public static Integer func_2bce38f6e69f4ea5a6a15899f1f39629(Integer N, Integer start) {
    int left = start;
    N.intValue();
    return left;
}
public static Long func_a1a8a3573edd432884f6d03c87200ddf(Integer N, Long sum) {
    long HI = sum;
    int pow2 = 1;
    while (pow2 * 2 <= N) {
        pow2 *= 2;
    }
    return HI;
}
public static Long func_560d87992ba94425810889e82bed1c9d(Integer N, Long sum) {
    long HI = sum;
    int pow2 = 1;
    while (pow2 * 2 <= N) {
        pow2 *= 2;
    }
    return HI;
}
public static Double func_830e176392974eaba7bc289ca0eb4c92(Integer x0, Integer x1) {
    x0.intValue();
    double xmax = x1.intValue();
    return xmax;
}
def func_08959f6251844855b1c88511848c6417(transistorsum, N):
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    return last

def func_85efa7de3bd74e488ed9ae36b08e51ff(transistorsum, N):
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    return last

def func_98478f36b4a347488fe761b66a705cd6(part1, part3):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    return _part3

def func_b15b0fa330d546f38e50dd22ebfa0c4f(part1, part3):
    _part1 = part1
    _part3 = part3
    return _part3

def func_d1f220def28d402e8dbb1ab82b507f10(i, part3):
    _part3 = part3
    _i = i
    return _part3

def func_f802652b701a4eb2ba77e3016114611d(j, i):
    _i = i
    _j = j
    return _i



****** Cluster 204 ******
public static Long func_7ee146dc75724c3592a925ffc7fe37c5(Long left, Long right) {
    long m1 = (left * 2L + right) / 3L;
    left.longValue();
    right.longValue();
    return m1;
}
public static Integer func_29f9c793eefe447aa0f82208cf0b06a5(Integer max, Integer min) {
    min.intValue();
    max.intValue();
    int right = (2 * max + min) / 3;
    return right;
}
public static Integer func_7c63f5cbef094d3f8a6778b072c8c26d(Integer max, Integer min) {
    min.intValue();
    max.intValue();
    int med2 = (min + max * 2) / 3;
    return med2;
}


****** Cluster 205 ******
public static Long func_49de0a0b3c5540a8b7bb58bc5a1c080e(Long[] a2, Long left, Integer n, Long right) {
    long mid = (left + right) / 2L;
    long sum1 = 0L;
    for (int first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    return sum1;
}
public static Long func_881a1c5b71904a3cbcd19233b572ff34(Long[] a2, Long left, Integer n, Long right) {
    long mid = (left + right) / 2L;
    long sum1 = 0L;
    for (int first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    n.intValue();
    return sum1;
}
public static Long func_0ec55c6002be4c18ad2031e04bbdc196(Long[] a2, Long left, Integer n, Long right) {
    long mid = (left + right) / 2L;
    long sum1 = 0L;
    for (int first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    n.intValue();
    return sum1;
}


****** Cluster 206 ******
public static Long func_5838cd8aa6034390a7981c5741c803cc(Long left, Long right) {
    left.longValue();
    right.longValue();
    long m2 = (left + right * 2L) / 3L;
    return m2;
}
public static Integer func_7002992e8ed841b09e21a9f606c880d3(Integer max, Integer min) {
    int left = (2 * min + max) / 3;
    max.intValue();
    min.intValue();
    return left;
}
public static Integer func_3c71f2242dfe4f1e97b0b24b9b3e42a0(Integer max, Integer min) {
    int med1 = (min * 2 + max) / 3;
    min.intValue();
    max.intValue();
    return med1;
}


****** Cluster 207 ******
public static Long func_8ac4160903b5424bbe355e88649ede29(Long[] a2, Long left, Integer n, Long right) {
    long mid = (left + right) / 2L;
    long sum1 = 0L;
    for (int first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    return mid;
}
public static Long func_96986e94baf6476a87336347b7548e06(Long[] a2, Long left, Integer n, Long right) {
    long mid = (left + right) / 2L;
    long sum1 = 0L;
    for (int first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    n.intValue();
    return mid;
}
public static Long func_97d82621580a44e1a6f5620db4917aac(Long[] a2, Long left, Integer n, Long right) {
    long mid = (left + right) / 2L;
    long sum1 = 0L;
    for (int first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    n.intValue();
    return mid;
}


****** Cluster 208 ******
public static Long func_8fc1c8d8a9d24ac2a4846214183e0bba(Long[] is, Integer n, Long A3, Long K) {
    if (n > 0) {
        Long.valueOf(A3 + is[n - 1]);
        K = is[n - 1];
    }
    K.longValue();
    return K;
}
public static Long func_1aa5cc28f6c24f1587b1df2eb2414d2c(Long[] is, Integer n, Long A3, Long K) {
    if (n > 0) {
        Long.valueOf(A3 + is[n - 1]);
        K = is[n - 1];
    }
    long left = K;
    return left;
}


****** Cluster 209 ******
public static Integer func_37a1e02729234dfe94b9d26b41e4daf2(Long[] a2, Long left, Integer n, Long right) {
    int first;
    long mid = (left + right) / 2L;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    return first;
}
public static Integer func_8f5f9ad2944547b781df19e1e368fc6d(Long[] a2, Long left, Integer n, Long right) {
    int first;
    long mid = (left + right) / 2L;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    n.intValue();
    return first;
}
public static Integer func_7cd846ab0c6842ac912248a83f736491(Long[] a2, Long left, Integer n, Long right) {
    int first;
    long mid = (left + right) / 2L;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    n.intValue();
    return first;
}


****** Cluster 210 ******
public static Long func_84a3a88732224e5187294fe58896c1a0(Long[] a2, Integer n, Long mid) {
    long sum1 = 0L;
    for (int first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (long sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    return sum1;
}
public static Long func_d72d7928ec5641bb895ebbfde80f0d0d(Long[] a2, Integer n, Long mid) {
    long sum1 = 0L;
    for (int first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (long sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    return sum1;
}
public static Long func_26431ebdc09945689bb5fc7f9cf1cb84(Long[] a2, Integer n, Long mid) {
    long sum1 = 0L;
    for (int first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (long sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    return sum1;
}


****** Cluster 211 ******
public static Long func_3b7e45243dca42fc9aa893f580943e29(Long[] a2, Integer n, Long mid) {
    long sum2;
    long sum1 = 0L;
    for (int first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    return sum2;
}
public static Long func_79a05ac1a2de48faaa4c3a05655f8daa(Long[] a2, Integer n, Long mid) {
    long sum2;
    long sum1 = 0L;
    for (int first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    return sum2;
}
public static Long func_c5f34700df2c45659c156e511624c316(Long[] a2, Integer n, Long mid) {
    long sum2;
    long sum1 = 0L;
    for (int first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    return sum2;
}


****** Cluster 212 ******
public static Integer func_a4c4c5b293824fca884539167a167531(Long[] a2, Integer n, Long mid) {
    long sum1 = 0L;
    for (int first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (long sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    return second;
}
public static Integer func_8c790830f33e4ecc8687da091ea8b8d6(Long[] a2, Integer n, Long mid) {
    long sum1 = 0L;
    for (int first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (long sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    return second;
}
public static Integer func_fd3987e1378149d095917b44179265da(Long[] a2, Integer n, Long mid) {
    long sum1 = 0L;
    for (int first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (long sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    return second;
}


****** Cluster 213 ******
public static Integer func_e8941e952ccd451e8d65d609454338d1(Long[] a2, Integer n, Long mid) {
    int first;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (long sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    return first;
}
public static Integer func_d693d64ad7f54e188086af3639241609(Long[] a2, Integer n, Long mid) {
    int first;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (long sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    return first;
}
public static Integer func_0134d2b705e34f1aa92e6a12a67ded7b(Long[] a2, Integer n, Long mid) {
    int first;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (long sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    return first;
}


****** Cluster 214 ******
public static Boolean func_92b7c17c2bf24596a0aa3cefcbb4ea18(Long[] a2, Boolean ok, Integer n, Long sum1, Long[] sum, Long mid) {
    int first;
    long sum2;
    for (first = 0; first != n && sum1 < mid; ++first) {
        sum1 = sum1 + a2[first];
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid) {
        if (second >= first) {
            ok = true;
        } else {
            long total = 0L;
            if (second != -1) {
                total += sum[second].longValue();
            }
            if (first != n) {
                total += sum[n - 1] - sum[first - 1];
            }
            if (total >= mid) {
                ok = true;
            }
        }
    }
    return ok;
}
public static Boolean func_b4a06898dfe547bdb0ddbe059c7d1698$4bab030a(Long[] a2, Boolean ok, Integer n, Long sum1, Long[] sum, Long mid) {
    int first;
    long sum2;
    for (first = 0; first != n && sum1 < mid; ++first) {
        sum1 = sum1 + a2[first];
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid) {
        if (second >= first) {
            ok = true;
        } else {
            long total = 0L;
            if (second != -1) {
                total += sum[second].longValue();
            }
            if (first != n) {
                total += sum[n - 1] - sum[first - 1];
            }
            if (total >= mid) {
                ok = true;
            }
        }
    }
    ok.booleanValue();
    return ok;
}


****** Cluster 215 ******
public static Integer func_08a21591bf2f4007850fcd2a0a647c90(Long[] a2, Long left, Integer n, Long right) {
    long mid = (left + right) / 2L;
    long sum1 = 0L;
    for (int first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    return second;
}
public static Integer func_07df985cdb8248a18b52ce6ef2578180(Long[] a2, Long left, Integer n, Long right) {
    long mid = (left + right) / 2L;
    long sum1 = 0L;
    for (int first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    return second;
}


****** Cluster 216 ******
public static Long func_5a45805546cb4dbb870693763b5311ee(Long[] a2, Long money, Long eq, Long now, Integer i, Integer m, Long up) {
    long need = eq + (long) i.intValue() * up;
    for (int j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
    }
    return need;
}
public static Long func_338acba1fd5d400796b45e5fde4715e9$6fe81b3a(Long[] a2, Long money, Long eq, Long now, Integer i, Integer m, Long up) {
    long need = eq + (long) i.intValue() * up;
    for (int j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
    }
    money.longValue();
    return need;
}


****** Cluster 217 ******
public static Long func_dfa29ed98cb64682924b45ba8fde6045(Long left, Long[] a2, Long money, Long eq, Long now, Long right, Integer i, Integer m) {
    long up = (left + right) / 2L;
    long need = eq + (long) i.intValue() * up;
    for (int j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
    }
    return need;
}
public static Long func_64ff649cf80847aba5e23d51f56666f4(Long left, Long[] a2, Long money, Long eq, Long now, Long right, Integer i, Integer m) {
    long up = (left + right) / 2L;
    long need = eq + (long) i.intValue() * up;
    for (int j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
    }
    if (need > money) {
        Long.valueOf(up);
    } else {
        Long.valueOf(up);
    }
    return need;
}


****** Cluster 218 ******
public static Long func_f3810045d1814ed19b5d7541bc58b0d0(Long left, Long[] a2, Long money, Long eq, Long now, Long right, Integer i, Integer m) {
    long up = (left + right) / 2L;
    long need = eq + (long) i.intValue() * up;
    for (int j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
    }
    return up;
}
public static Long func_8f102d4ef4fe4d6dbc4b66a3d7538f22(Long left, Long[] a2, Long money, Long eq, Long now, Long right, Integer i, Integer m) {
    long up = (left + right) / 2L;
    long need = eq + (long) i.intValue() * up;
    for (int j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
    }
    if (need > money) {
        Long.valueOf(up);
    } else {
        Long.valueOf(up);
    }
    return up;
}


****** Cluster 219 ******
public static Long func_0626c70db7e948aaa527c3e9c677a942(Long[] a2, Integer i) {
    long now = a2[i - 1];
    return now;
}
public static Long func_e61c5b119393408b8032ef2fba74b81b(Long[] a2, Integer i) {
    long now = a2[i - 1];
    for (int j = 0; j < i; ++j) {
        a2[j].longValue();
    }
    return now;
}
public static Long func_14cac129b9884c74b6c2d0c7bad865b8(Long[] a2, Integer i) {
    long now = a2[i - 1];
    for (int j = 0; j < i; ++j) {
        a2[j].longValue();
    }
    return now;
}
public static Long func_877bb1e5ae6e483289ff024eaf3d937b(Long[] best, Integer N) {
    long min = best[N - 1];
    return min;
}


****** Cluster 220 ******
public static Long func_238c1b8f87aa45eaa0ac7076074844df$209dc995(Long[] a2, Integer n, Long[] sum, Long mid) {
    int first;
    long sum2;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid) {
        if (second >= first) {
            Boolean.valueOf(true);
        } else {
            long total = 0L;
            if (second != -1) {
                total += sum[second].longValue();
            }
            if (first != n) {
                total += sum[n - 1] - sum[first - 1];
            }
            if (total >= mid) {
                Boolean.valueOf(true);
            }
        }
    }
    return sum1;
}
public static Long func_f8ba3db4aa4c406b9640fa409d460224(Long[] a2, Integer n, Long[] sum, Long mid) {
    int first;
    long sum2;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid && second < first) {
        if (second != -1) {
            sum[second].longValue();
        }
        if (first != n) {
            sum[n - 1].longValue();
            sum[first - 1].longValue();
        }
        mid.longValue();
    }
    return sum1;
}
public static Long func_2ef664110abf4b989f446439df193a81(Long[] a2, Integer n, Long[] sum, Long mid) {
    int first;
    long sum2;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid && second < first) {
        if (second != -1) {
            sum[second].longValue();
        }
        if (first != n) {
            sum[n - 1].longValue();
            sum[first - 1].longValue();
        }
        mid.longValue();
    }
    return sum1;
}
public static Long func_8f0f3511f4c5462ab5c4c7fb8a23521c$31f19184(Long[] a2, Integer n, Long[] sum, Long mid) {
    long sum2;
    int first;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid && second < first) {
        if (second != -1) {
            sum[second].longValue();
        }
        if (first != n) {
            sum[n - 1].longValue();
            sum[first - 1].longValue();
        }
        mid.longValue();
    }
    return sum1;
}
public static Long func_3771488d0f4947a196583acdabb29895$31f19184(Long[] a2, Integer n, Long[] sum, Long mid) {
    long sum2;
    int first;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid && second < first) {
        if (second != -1) {
            sum[second].longValue();
        }
        if (first != n) {
            sum[n - 1].longValue();
            sum[first - 1].longValue();
        }
        mid.longValue();
    }
    return sum1;
}


****** Cluster 221 ******
public static Long func_afa718b1e5894ca7bb3c949b21cec087$209dc995(Long[] a2, Integer n, Long[] sum, Long mid) {
    int first;
    long sum2;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid) {
        if (second >= first) {
            Boolean.valueOf(true);
        } else {
            long total = 0L;
            if (second != -1) {
                total += sum[second].longValue();
            }
            if (first != n) {
                total += sum[n - 1] - sum[first - 1];
            }
            if (total >= mid) {
                Boolean.valueOf(true);
            }
        }
    }
    return sum2;
}
public static Long func_3b4cfa53c6b04bb993faa5f2da539441(Long[] a2, Integer n, Long[] sum, Long mid) {
    int first;
    long sum2;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid && second < first) {
        if (second != -1) {
            sum[second].longValue();
        }
        if (first != n) {
            sum[n - 1].longValue();
            sum[first - 1].longValue();
        }
        mid.longValue();
    }
    return sum2;
}
public static Long func_ece7c2677f8841b58bc2129ba31047cf(Long[] a2, Integer n, Long[] sum, Long mid) {
    int first;
    long sum2;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid && second < first) {
        if (second != -1) {
            sum[second].longValue();
        }
        if (first != n) {
            sum[n - 1].longValue();
            sum[first - 1].longValue();
        }
        mid.longValue();
    }
    return sum2;
}
public static Long func_5fec0e52e6664ed0bee0647f979aa543$31f19184(Long[] a2, Integer n, Long[] sum, Long mid) {
    long sum2;
    int first;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid && second < first) {
        if (second != -1) {
            sum[second].longValue();
        }
        if (first != n) {
            sum[n - 1].longValue();
            sum[first - 1].longValue();
        }
        mid.longValue();
    }
    return sum2;
}
public static Long func_cd09b8ee57d8486187b4c0f4517f473b$31f19184(Long[] a2, Integer n, Long[] sum, Long mid) {
    long sum2;
    int first;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid && second < first) {
        if (second != -1) {
            sum[second].longValue();
        }
        if (first != n) {
            sum[n - 1].longValue();
            sum[first - 1].longValue();
        }
        mid.longValue();
    }
    return sum2;
}


****** Cluster 222 ******
public static Boolean func_d085a34f639f4cdfa08cc3a7e4d7e12e(Long[] a2, Boolean ok, Integer n, Long[] sum, Long mid) {
    int first;
    long sum2;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid) {
        if (second >= first) {
            ok = true;
        } else {
            long total = 0L;
            if (second != -1) {
                total += sum[second].longValue();
            }
            if (first != n) {
                total += sum[n - 1] - sum[first - 1];
            }
            if (total >= mid) {
                ok = true;
            }
        }
    }
    return ok;
}
public static Boolean func_58772e8b58964b4cbf2c16f08dd6280e$6336f057(Long[] a2, Boolean ok, Integer n, Long[] sum, Long mid) {
    int first;
    long sum2;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid) {
        if (second >= first) {
            ok = true;
        } else {
            long total = 0L;
            if (second != -1) {
                total += sum[second].longValue();
            }
            if (first != n) {
                total += sum[n - 1] - sum[first - 1];
            }
            if (total >= mid) {
                ok = true;
            }
        }
    }
    ok.booleanValue();
    return ok;
}


****** Cluster 223 ******
public static Integer func_c1e8066aa3e54e73a5af96b954e2f037$3c75a11(Long[] a2, Integer n, Long[] sum, Long mid) {
    int first;
    long sum2;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid) {
        if (second >= first) {
            Boolean.valueOf(true);
        } else {
            long total = 0L;
            if (second != -1) {
                total += sum[second].longValue();
            }
            if (first != n) {
                total += sum[n - 1] - sum[first - 1];
            }
            if (total >= mid) {
                Boolean.valueOf(true);
            }
        }
    }
    return second;
}
public static Integer func_cd9203aaed93482b9b1285615e29b755(Long[] a2, Integer n, Long[] sum, Long mid) {
    int first;
    long sum2;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid && second < first) {
        if (second != -1) {
            sum[second].longValue();
        }
        if (first != n) {
            sum[n - 1].longValue();
            sum[first - 1].longValue();
        }
        mid.longValue();
    }
    return second;
}
public static Integer func_3eead6bd24304e29b4a9dcded6582461(Long[] a2, Integer n, Long[] sum, Long mid) {
    int first;
    long sum2;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid && second < first) {
        if (second != -1) {
            sum[second].longValue();
        }
        if (first != n) {
            sum[n - 1].longValue();
            sum[first - 1].longValue();
        }
        mid.longValue();
    }
    return second;
}
public static Integer func_e1bbe23a44b645de8a933038eff2b7e8$60e823a0(Long[] a2, Integer n, Long[] sum, Long mid) {
    long sum2;
    int first;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid && second < first) {
        if (second != -1) {
            sum[second].longValue();
        }
        if (first != n) {
            sum[n - 1].longValue();
            sum[first - 1].longValue();
        }
        mid.longValue();
    }
    return second;
}
public static Integer func_6e6d40068c3e4106a44f9be6a932a162$60e823a0(Long[] a2, Integer n, Long[] sum, Long mid) {
    long sum2;
    int first;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid && second < first) {
        if (second != -1) {
            sum[second].longValue();
        }
        if (first != n) {
            sum[n - 1].longValue();
            sum[first - 1].longValue();
        }
        mid.longValue();
    }
    return second;
}


****** Cluster 224 ******
public static Long func_9e71ef7a322c4075a6fe97f10e0f609e(Long money) {
    long right = money + 1L;
    return right;
}
public static Long func_e3834730b6bd46d6b961a709092a7de2(Long budget) {
    long max = budget + 1L;
    return max;
}
public static Integer func_56c473ba923c453182130f4705fed272$438762d9(Integer i) {
    int l = i + 1;
    return l;
}
public static Integer func_73208cd96bf547ee8f441d003572ecd8$7585757(Integer mid) {
    Integer lo = mid + 1;
    return lo;
}
public static Long func_606cedd599a24276b22cddc3004b2eaf(Long tot) {
    long R = tot + 1L;
    return R;
}


****** Cluster 225 ******
public static Integer func_fca8712b5b6542a5a803e3ab76ca30ce$3c75a11(Long[] a2, Integer n, Long[] sum, Long mid) {
    int first;
    long sum2;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid) {
        if (second >= first) {
            Boolean.valueOf(true);
        } else {
            long total = 0L;
            if (second != -1) {
                total += sum[second].longValue();
            }
            if (first != n) {
                total += sum[n - 1] - sum[first - 1];
            }
            if (total >= mid) {
                Boolean.valueOf(true);
            }
        }
    }
    return first;
}
public static Integer func_11b481e68ddb4b74aa761d3ab84c9603(Long[] a2, Integer n, Long[] sum, Long mid) {
    int first;
    long sum2;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid && second < first) {
        if (second != -1) {
            sum[second].longValue();
        }
        if (first != n) {
            sum[n - 1].longValue();
            sum[first - 1].longValue();
        }
        mid.longValue();
    }
    return first;
}
public static Integer func_edd5345a9b584465b7edc0d8a34547bb(Long[] a2, Integer n, Long[] sum, Long mid) {
    int first;
    long sum2;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid && second < first) {
        if (second != -1) {
            sum[second].longValue();
        }
        if (first != n) {
            sum[n - 1].longValue();
            sum[first - 1].longValue();
        }
        mid.longValue();
    }
    return first;
}
public static Integer func_93d4b327f8224517be82abd1956b86f9$60e823a0(Long[] a2, Integer n, Long[] sum, Long mid) {
    long sum2;
    int first;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid && second < first) {
        if (second != -1) {
            sum[second].longValue();
        }
        if (first != n) {
            sum[n - 1].longValue();
            sum[first - 1].longValue();
        }
        mid.longValue();
    }
    return first;
}
public static Integer func_957067b32246401c9e38941ddd6f5d30$60e823a0(Long[] a2, Integer n, Long[] sum, Long mid) {
    long sum2;
    int first;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid && second < first) {
        if (second != -1) {
            sum[second].longValue();
        }
        if (first != n) {
            sum[n - 1].longValue();
            sum[first - 1].longValue();
        }
        mid.longValue();
    }
    return first;
}


****** Cluster 226 ******
public static Long func_29d7179856a84bafb3307f418a9a2182(Long left, Long[] a2, Long money, Long eq, Long now, Integer i, Integer m) {
    long right = money + 1L;
    while (left + 1L < right) {
        long up = (left + right) / 2L;
        long need = eq + (long) i.intValue() * up;
        for (int j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
        }
        if (need > money) {
            right = up;
            continue;
        }
        left = up;
    }
    return left;
}
public static Long func_7b5e88880ace4101b1ad772b0c7d5925(Long left, Long[] a2, Long money, Long eq, Long now, Integer i, Integer m) {
    long right = money + 1L;
    while (left + 1L < right) {
        long up = (left + right) / 2L;
        long need = eq + (long) i.intValue() * up;
        for (int j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
        }
        if (need > money) {
            right = up;
            continue;
        }
        left = up;
    }
    left.longValue();
    return left;
}
public static Long func_4f9ed1ae23854e43af05b57a5848b65a(Long left, Long[] a2, Long money, Long eq, Long now, Integer i, Integer m) {
    long up;
    long right = money + 1L;
    while (left + 1L < right) {
        up = (left + right) / 2L;
        long need = eq + (long) i.intValue() * up;
        for (int j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
        }
        if (need > money) {
            right = up;
            continue;
        }
        left = up;
    }
    up = left;
    return up;
}
public static Long func_9ad40485728e4a5f8918ef2d544b1db7(Long left, Long[] a2, Long money, Long eq, Long now, Integer i, Integer m) {
    long right = money + 1L;
    while (left + 1L < right) {
        long up = (left + right) / 2L;
        long need = eq + (long) i.intValue() * up;
        for (int j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
        }
        if (need > money) {
            right = up;
            continue;
        }
        left = up;
    }
    left.longValue();
    eq.longValue();
    i.intValue();
    return left;
}
public static Long func_43d2f292974346ddb4a058b684140cba(Long left, Long[] a2, Long money, Long eq, Long now, Integer i, Integer m) {
    long up;
    long right = money + 1L;
    while (left + 1L < right) {
        up = (left + right) / 2L;
        long need = eq + (long) i.intValue() * up;
        for (int j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
        }
        if (need > money) {
            right = up;
            continue;
        }
        left = up;
    }
    up = left;
    eq.longValue();
    i.intValue();
    return up;
}


****** Cluster 227 ******
public static Long func_ce8f0f86a9744b87a3d98ca36462f433(Long left, Long[] a2, Long money, Long eq, Long now, Integer i, Integer m) {
    long right = money + 1L;
    while (left + 1L < right) {
        long up = (left + right) / 2L;
        long need = eq + (long) i.intValue() * up;
        for (int j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
        }
        if (need > money) {
            right = up;
            continue;
        }
        left = up;
    }
    return right;
}
public static Long func_0a5ed106dd2a4487863b30248d32de7d(Long left, Long[] a2, Long money, Long eq, Long now, Integer i, Integer m) {
    long right = money + 1L;
    while (left + 1L < right) {
        long up = (left + right) / 2L;
        long need = eq + (long) i.intValue() * up;
        for (int j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
        }
        if (need > money) {
            right = up;
            continue;
        }
        left = up;
    }
    left.longValue();
    return right;
}
public static Long func_8e3f863b6b624bc4bc49eb00a055024b(Long left, Long[] a2, Long money, Long eq, Long now, Integer i, Integer m) {
    long right = money + 1L;
    while (left + 1L < right) {
        long up = (left + right) / 2L;
        long need = eq + (long) i.intValue() * up;
        for (int j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
        }
        if (need > money) {
            right = up;
            continue;
        }
        left = up;
    }
    left.longValue();
    eq.longValue();
    i.intValue();
    return right;
}


****** Cluster 228 ******
public static Long func_3fa8beca64ff4f14865f530b4fe33a83(Long left, Long[] a2, Long money, Long eq, Long now, Long right, Integer i, Integer m) {
    while (left + 1L < right) {
        long up = (left + right) / 2L;
        long need = eq + (long) i.intValue() * up;
        for (int j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
        }
        if (need > money) {
            right = up;
            continue;
        }
        left = up;
    }
    left.longValue();
    return left;
}
public static Long func_1014e1d66cd34b1b8a7d98b4c6bf85ce(Long left, Long[] a2, Long money, Long eq, Long now, Long right, Integer i, Integer m) {
    long up;
    while (left + 1L < right) {
        up = (left + right) / 2L;
        long need = eq + (long) i.intValue() * up;
        for (int j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
        }
        if (need > money) {
            right = up;
            continue;
        }
        left = up;
    }
    up = left;
    return up;
}
public static Long func_cc36a2d905d14f2fb6460a619a4fbb10(Long left, Long[] a2, Long money, Long eq, Long now, Long right, Integer i, Integer m) {
    while (left + 1L < right) {
        long up = (left + right) / 2L;
        long need = eq + (long) i.intValue() * up;
        for (int j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
        }
        if (need > money) {
            right = up;
            continue;
        }
        left = up;
    }
    left.longValue();
    eq.longValue();
    i.intValue();
    return left;
}
public static Long func_6da180514d0b40ad9d09809ac3f43ff4(Long left, Long[] a2, Long money, Long eq, Long now, Long right, Integer i, Integer m) {
    long up;
    while (left + 1L < right) {
        up = (left + right) / 2L;
        long need = eq + (long) i.intValue() * up;
        for (int j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
        }
        if (need > money) {
            right = up;
            continue;
        }
        left = up;
    }
    up = left;
    eq.longValue();
    i.intValue();
    return up;
}


****** Cluster 229 ******
public static Long func_c4d4cf36ebe84276ba68caa561cab621(Long left, Long[] a2, Long money, Long eq, Long now, Long right, Integer i, Integer m) {
    while (left + 1L < right) {
        long up = (left + right) / 2L;
        long need = eq + (long) i.intValue() * up;
        for (int j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
        }
        if (need > money) {
            right = up;
            continue;
        }
        left = up;
    }
    left.longValue();
    return right;
}
public static Long func_7351be4aee774d3cb8aeb2652a6e337f(Long left, Long[] a2, Long money, Long eq, Long now, Long right, Integer i, Integer m) {
    while (left + 1L < right) {
        long up = (left + right) / 2L;
        long need = eq + (long) i.intValue() * up;
        for (int j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
        }
        if (need > money) {
            right = up;
            continue;
        }
        left = up;
    }
    left.longValue();
    eq.longValue();
    i.intValue();
    return right;
}


****** Cluster 230 ******
public static Double func_a5389c519bf346f89787a0426edbbbbe(Long up, Long[] a2, Long eq, Long now, Integer i, Integer m) {
    double prof = -eq.longValue() - up * (long) i.intValue();
    for (int j = i.intValue(); j < m; ++j) {
        prof -= (double) Math.max(now + up + 1L - a2[j], 0L);
    }
    return prof;
}
public static Double func_f97e4dc1ab5147dfb04eb2044c30904c(Long left, Long[] a2, Long eq, Long now, Integer i, Integer m) {
    long up = left;
    double prof = -eq.longValue() - up * (long) i.intValue();
    for (int j = i.intValue(); j < m; ++j) {
        prof -= (double) Math.max(now + up + 1L - a2[j], 0L);
    }
    return prof;
}


****** Cluster 231 ******
public static Long func_8ffe1c6fd2d440d29ac6fae5b5703d82(Long[] a2, Integer i) {
    long now = a2[i - 1];
    long eq = 0L;
    for (int j = 0; j < i; ++j) {
        eq += now - a2[j];
    }
    return eq;
}
public static Long func_4bd72aed73c14c1bba6a3aff9071d08c(Long[] a2, Integer i) {
    long now = a2[i - 1];
    long eq = 0L;
    for (int j = 0; j < i; ++j) {
        eq += now - a2[j];
    }
    return eq;
}


****** Cluster 232 ******
public static Long func_7f68b697055f4a9c992f11bcfe0cc27b(Long[] a2, Long money, Long eq, Long now, Integer i, Integer m) {
    long left = 0L;
    long right = money + 1L;
    while (left + 1L < right) {
        long up = (left + right) / 2L;
        long need = eq + (long) i.intValue() * up;
        for (int j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
        }
        if (need > money) {
            right = up;
            continue;
        }
        left = up;
    }
    return left;
}
public static Long func_282a1a049e8c42918401bcef720e8b0c(Long[] a2, Long money, Long eq, Long now, Integer i, Integer m) {
    long left = 0L;
    long right = money + 1L;
    while (left + 1L < right) {
        long up = (left + right) / 2L;
        long need = eq + (long) i.intValue() * up;
        for (int j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
        }
        if (need > money) {
            right = up;
            continue;
        }
        left = up;
    }
    return left;
}
public static Long func_074a6ecd311f457db91fb9332ea197dc(Long[] a2, Long money, Long eq, Long now, Integer i, Integer m) {
    long up;
    long left = 0L;
    long right = money + 1L;
    while (left + 1L < right) {
        up = (left + right) / 2L;
        long need = eq + (long) i.intValue() * up;
        for (int j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
        }
        if (need > money) {
            right = up;
            continue;
        }
        left = up;
    }
    up = left;
    return up;
}
public static Long func_90802dca9ddc4fcd854b3c7dea15aee2(Long[] a2, Long money, Long eq, Long now, Integer i, Integer m) {
    long left = 0L;
    long right = money + 1L;
    while (left + 1L < right) {
        long up = (left + right) / 2L;
        long need = eq + (long) i.intValue() * up;
        for (int j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
        }
        if (need > money) {
            right = up;
            continue;
        }
        left = up;
    }
    eq.longValue();
    i.intValue();
    return left;
}
public static Long func_2f53354f571a439095dba1aaad10ca2d(Long[] a2, Long money, Long eq, Long now, Integer i, Integer m) {
    long up;
    long left = 0L;
    long right = money + 1L;
    while (left + 1L < right) {
        up = (left + right) / 2L;
        long need = eq + (long) i.intValue() * up;
        for (int j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
        }
        if (need > money) {
            right = up;
            continue;
        }
        left = up;
    }
    up = left;
    eq.longValue();
    i.intValue();
    return up;
}


****** Cluster 233 ******
public static Long func_f0e58ff68c1d4ba2817c796b0bb8c809(Long[] a2, Long money, Long eq, Long now, Integer i, Integer m) {
    long left = 0L;
    long right = money + 1L;
    while (left + 1L < right) {
        long up = (left + right) / 2L;
        long need = eq + (long) i.intValue() * up;
        for (int j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
        }
        if (need > money) {
            right = up;
            continue;
        }
        left = up;
    }
    return right;
}
public static Long func_925842ff4d8b47828d23648ea0565a4c(Long[] a2, Long money, Long eq, Long now, Integer i, Integer m) {
    long left = 0L;
    long right = money + 1L;
    while (left + 1L < right) {
        long up = (left + right) / 2L;
        long need = eq + (long) i.intValue() * up;
        for (int j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
        }
        if (need > money) {
            right = up;
            continue;
        }
        left = up;
    }
    return right;
}
public static Long func_d54155e281c4466fa4760d334f3c3d3b(Long[] a2, Long money, Long eq, Long now, Integer i, Integer m) {
    long left = 0L;
    long right = money + 1L;
    while (left + 1L < right) {
        long up = (left + right) / 2L;
        long need = eq + (long) i.intValue() * up;
        for (int j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
        }
        if (need > money) {
            right = up;
            continue;
        }
        left = up;
    }
    eq.longValue();
    i.intValue();
    return right;
}


****** Cluster 234 ******
public static Double func_13a7cfe3cfa145d68e9a548bea5fd13d(Long up, Long[] a2, Long eq, Long now, Integer i, Integer m) {
    int j;
    double prof = -eq.longValue() - up * (long) i.intValue();
    for (j = i.intValue(); j < m; ++j) {
        prof -= (double) Math.max(now + up + 1L - a2[j], 0L);
    }
    for (j = 0; j < i; ++j) {
        prof += (double) (now + up - a2[j]) * 36.0 / (double) i.intValue();
    }
    return prof;
}
public static Double func_ed5ae726d09041cd8223fb6b0f3c9a6a(Long left, Long[] a2, Long eq, Long now, Integer i, Integer m) {
    int j;
    long up = left;
    double prof = -eq.longValue() - up * (long) i.intValue();
    for (j = i.intValue(); j < m; ++j) {
        prof -= (double) Math.max(now + up + 1L - a2[j], 0L);
    }
    for (j = 0; j < i; ++j) {
        prof += (double) (now + up - a2[j]) * 36.0 / (double) i.intValue();
    }
    return prof;
}


****** Cluster 235 ******
public static Boolean func_610390047d5349d79f540d456ed83037(Long[] a2, Integer n, Long[] sum, Long mid) {
    int first;
    long sum2;
    boolean ok = false;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid) {
        if (second >= first) {
            ok = true;
        } else {
            long total = 0L;
            if (second != -1) {
                total += sum[second].longValue();
            }
            if (first != n) {
                total += sum[n - 1] - sum[first - 1];
            }
            if (total >= mid) {
                ok = true;
            }
        }
    }
    return ok;
}
public static Boolean func_c863590263ce4508a39141ee9f429646(Long[] a2, Integer n, Long[] sum, Long mid) {
    int first;
    long sum2;
    boolean ok = false;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid) {
        if (second >= first) {
            ok = true;
        } else {
            long total = 0L;
            if (second != -1) {
                total += sum[second].longValue();
            }
            if (first != n) {
                total += sum[n - 1] - sum[first - 1];
            }
            if (total >= mid) {
                ok = true;
            }
        }
    }
    return ok;
}
public static Boolean func_88dfa1be2a2c4c6c8a1b2424f2a89a5e$b50b14a(Long[] a2, Integer n, Long[] sum, Long mid) {
    int first;
    long sum2;
    boolean ok = false;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid) {
        if (second >= first) {
            ok = true;
        } else {
            long total = 0L;
            if (second != -1) {
                total += sum[second].longValue();
            }
            if (first != n) {
                total += sum[n - 1] - sum[first - 1];
            }
            if (total >= mid) {
                ok = true;
            }
        }
    }
    return ok;
}
public static Boolean func_981e152fd0694cd498e9ed5a2e103d9d$b50b14a(Long[] a2, Integer n, Long[] sum, Long mid) {
    int first;
    long sum2;
    boolean ok = false;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid) {
        if (second >= first) {
            ok = true;
        } else {
            long total = 0L;
            if (second != -1) {
                total += sum[second].longValue();
            }
            if (first != n) {
                total += sum[n - 1] - sum[first - 1];
            }
            if (total >= mid) {
                ok = true;
            }
        }
    }
    return ok;
}


****** Cluster 236 ******
public static Long func_8026a69bd7e74108a1c3f4ef15246c08(Long left, Long[] a2, Long money, Long eq, Long now, Long right, Integer i, Integer m) {
    long up;
    int j;
    while (left + 1L < right) {
        up = (left + right) / 2L;
        long need = eq + (long) i.intValue() * up;
        for (j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
        }
        if (need > money) {
            right = up;
            continue;
        }
        left = up;
    }
    up = left;
    eq.longValue();
    i.intValue();
    for (j = i.intValue(); j < m; ++j) {
        Math.max(now + up + 1L - a2[j], 0L);
    }
    return left;
}
public static Long func_f4a92ad5000f49e99434ccf34ebda221(Long left, Long[] a2, Long money, Long eq, Long now, Long right, Integer i, Integer m) {
    long up;
    int j;
    while (left + 1L < right) {
        up = (left + right) / 2L;
        long need = eq + (long) i.intValue() * up;
        for (j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
        }
        if (need > money) {
            right = up;
            continue;
        }
        left = up;
    }
    up = left;
    eq.longValue();
    i.intValue();
    for (j = i.intValue(); j < m; ++j) {
        Math.max(now + up + 1L - a2[j], 0L);
    }
    return up;
}


****** Cluster 237 ******
public static Double func_f1ce0ac32f5347b8b54c66d3db299d42(Long up, Long[] a2, Long eq, Double ans, Long now, Integer i, Integer m) {
    int j;
    double prof = -eq.longValue() - up * (long) i.intValue();
    for (j = i.intValue(); j < m; ++j) {
        prof -= (double) Math.max(now + up + 1L - a2[j], 0L);
    }
    for (j = 0; j < i; ++j) {
        prof += (double) (now + up - a2[j]) * 36.0 / (double) i.intValue();
    }
    Double.valueOf(Math.max(ans, prof));
    return prof;
}
public static Double func_5f3c4050a2d640d4a08e13588593b0de(Long left, Long[] a2, Long eq, Double ans, Long now, Integer i, Integer m) {
    int j;
    long up = left;
    double prof = -eq.longValue() - up * (long) i.intValue();
    for (j = i.intValue(); j < m; ++j) {
        prof -= (double) Math.max(now + up + 1L - a2[j], 0L);
    }
    for (j = 0; j < i; ++j) {
        prof += (double) (now + up - a2[j]) * 36.0 / (double) i.intValue();
    }
    Double.valueOf(Math.max(ans, prof));
    return prof;
}


****** Cluster 238 ******
public static Double func_5522597739db44bbbe272fa67e2866be(Long up, Long[] a2, Long eq, Double ans, Long now, Integer i, Integer m) {
    int j;
    double prof = -eq.longValue() - up * (long) i.intValue();
    for (j = i.intValue(); j < m; ++j) {
        prof -= (double) Math.max(now + up + 1L - a2[j], 0L);
    }
    for (j = 0; j < i; ++j) {
        prof += (double) (now + up - a2[j]) * 36.0 / (double) i.intValue();
    }
    ans = Math.max(ans, prof);
    return ans;
}
public static Double func_aee46298c285404caf1649960c751a48(Long left, Long[] a2, Long eq, Double ans, Long now, Integer i, Integer m) {
    int j;
    long up = left;
    double prof = -eq.longValue() - up * (long) i.intValue();
    for (j = i.intValue(); j < m; ++j) {
        prof -= (double) Math.max(now + up + 1L - a2[j], 0L);
    }
    for (j = 0; j < i; ++j) {
        prof += (double) (now + up - a2[j]) * 36.0 / (double) i.intValue();
    }
    ans = Math.max(ans, prof);
    return ans;
}


****** Cluster 239 ******
public static Long func_8d421e9bc6924399a147353b285e6325(Long left, Long[] a2, Long money, Long eq, Long now, Integer i, Integer m) {
    int j;
    long up;
    long right = money + 1L;
    while (left + 1L < right) {
        up = (left + right) / 2L;
        long need = eq + (long) i.intValue() * up;
        for (j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
        }
        if (need > money) {
            right = up;
            continue;
        }
        left = up;
    }
    up = left;
    eq.longValue();
    i.intValue();
    for (j = i.intValue(); j < m; ++j) {
        Math.max(now + up + 1L - a2[j], 0L);
    }
    return left;
}
public static Long func_b3804483f4a64f2fab76afa1706ef7e6(Long left, Long[] a2, Long money, Long eq, Long now, Integer i, Integer m) {
    int j;
    long up;
    long right = money + 1L;
    while (left + 1L < right) {
        up = (left + right) / 2L;
        long need = eq + (long) i.intValue() * up;
        for (j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
        }
        if (need > money) {
            right = up;
            continue;
        }
        left = up;
    }
    up = left;
    eq.longValue();
    i.intValue();
    for (j = i.intValue(); j < m; ++j) {
        Math.max(now + up + 1L - a2[j], 0L);
    }
    return up;
}


****** Cluster 240 ******
public static Long func_8b3f0072443b48738719bcf1044a2f29(Long left, Long[] a2, Long money, Long eq, Long now, Long right, Integer i, Integer m) {
    long up;
    int j;
    while (left + 1L < right) {
        up = (left + right) / 2L;
        long need = eq + (long) i.intValue() * up;
        for (j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
        }
        if (need > money) {
            right = up;
            continue;
        }
        left = up;
    }
    up = left;
    eq.longValue();
    i.intValue();
    for (j = i.intValue(); j < m; ++j) {
        Math.max(now + up + 1L - a2[j], 0L);
    }
    for (j = 0; j < i; ++j) {
        now.longValue();
        a2[j].longValue();
        i.intValue();
    }
    return left;
}
public static Long func_ecff32582c39490ea54d39ad2595a186(Long left, Long[] a2, Long money, Long eq, Long now, Long right, Integer i, Integer m) {
    long up;
    int j;
    while (left + 1L < right) {
        up = (left + right) / 2L;
        long need = eq + (long) i.intValue() * up;
        for (j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
        }
        if (need > money) {
            right = up;
            continue;
        }
        left = up;
    }
    up = left;
    eq.longValue();
    i.intValue();
    for (j = i.intValue(); j < m; ++j) {
        Math.max(now + up + 1L - a2[j], 0L);
    }
    for (j = 0; j < i; ++j) {
        now.longValue();
        a2[j].longValue();
        i.intValue();
    }
    return up;
}


****** Cluster 241 ******
public static Long func_a54e90b338ad4daa801dad02c5f9a435$31f19184(Long[] a2, Long left, Integer n, Long[] sum, Long mid) {
    int first;
    long sum2;
    boolean ok = false;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid) {
        if (second >= first) {
            ok = true;
        } else {
            long total = 0L;
            if (second != -1) {
                total += sum[second].longValue();
            }
            if (first != n) {
                total += sum[n - 1] - sum[first - 1];
            }
            if (total >= mid) {
                ok = true;
            }
        }
    }
    if (ok) {
        left = mid;
    }
    return left;
}
public static Long func_e3810193634d459190babe5da57239c5$31f19184(Long[] a2, Long left, Integer n, Long[] sum, Long mid) {
    int first;
    long sum2;
    boolean ok = false;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid) {
        if (second >= first) {
            ok = true;
        } else {
            long total = 0L;
            if (second != -1) {
                total += sum[second].longValue();
            }
            if (first != n) {
                total += sum[n - 1] - sum[first - 1];
            }
            if (total >= mid) {
                ok = true;
            }
        }
    }
    if (ok) {
        left = mid;
    }
    return left;
}


****** Cluster 242 ******
public static Long func_40613bb2dac34dfda3e211ff985ccd9a(Long[] a2, Long money, Long eq, Long now, Integer i, Integer m) {
    int j;
    long up;
    long left = 0L;
    long right = money + 1L;
    while (left + 1L < right) {
        up = (left + right) / 2L;
        long need = eq + (long) i.intValue() * up;
        for (j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
        }
        if (need > money) {
            right = up;
            continue;
        }
        left = up;
    }
    up = left;
    eq.longValue();
    i.intValue();
    for (j = i.intValue(); j < m; ++j) {
        Math.max(now + up + 1L - a2[j], 0L);
    }
    return left;
}
public static Long func_001aaf8ab15748a3b497e46367c39576(Long[] a2, Long money, Long eq, Long now, Integer i, Integer m) {
    int j;
    long up;
    long left = 0L;
    long right = money + 1L;
    while (left + 1L < right) {
        up = (left + right) / 2L;
        long need = eq + (long) i.intValue() * up;
        for (j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
        }
        if (need > money) {
            right = up;
            continue;
        }
        left = up;
    }
    up = left;
    eq.longValue();
    i.intValue();
    for (j = i.intValue(); j < m; ++j) {
        Math.max(now + up + 1L - a2[j], 0L);
    }
    return up;
}


****** Cluster 243 ******
public static Long func_723b08f0d56b49fd9ba58d94f1566a95$31f19184(Long[] a2, Long right, Integer n, Long[] sum, Long mid) {
    int first;
    long sum2;
    boolean ok = false;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid) {
        if (second >= first) {
            ok = true;
        } else {
            long total = 0L;
            if (second != -1) {
                total += sum[second].longValue();
            }
            if (first != n) {
                total += sum[n - 1] - sum[first - 1];
            }
            if (total >= mid) {
                ok = true;
            }
        }
    }
    if (!ok) {
        right = mid;
    }
    return right;
}
public static Long func_93619674ceb0467d83ec7f6bfa5ae1f8$31f19184(Long[] a2, Long right, Integer n, Long[] sum, Long mid) {
    int first;
    long sum2;
    boolean ok = false;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid) {
        if (second >= first) {
            ok = true;
        } else {
            long total = 0L;
            if (second != -1) {
                total += sum[second].longValue();
            }
            if (first != n) {
                total += sum[n - 1] - sum[first - 1];
            }
            if (total >= mid) {
                ok = true;
            }
        }
    }
    if (!ok) {
        right = mid;
    }
    return right;
}


****** Cluster 244 ******
public static Long func_422df8a9081e4493aa7e7eed385cde59(Long left, Long[] a2, Long money, Long eq, Long now, Integer i, Integer m) {
    int j;
    long up;
    long right = money + 1L;
    while (left + 1L < right) {
        up = (left + right) / 2L;
        long need = eq + (long) i.intValue() * up;
        for (j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
        }
        if (need > money) {
            right = up;
            continue;
        }
        left = up;
    }
    up = left;
    eq.longValue();
    i.intValue();
    for (j = i.intValue(); j < m; ++j) {
        Math.max(now + up + 1L - a2[j], 0L);
    }
    for (j = 0; j < i; ++j) {
        now.longValue();
        a2[j].longValue();
        i.intValue();
    }
    return left;
}
public static Long func_243b9ceebe9948fa9904162324df546b(Long left, Long[] a2, Long money, Long eq, Long now, Integer i, Integer m) {
    int j;
    long up;
    long right = money + 1L;
    while (left + 1L < right) {
        up = (left + right) / 2L;
        long need = eq + (long) i.intValue() * up;
        for (j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
        }
        if (need > money) {
            right = up;
            continue;
        }
        left = up;
    }
    up = left;
    eq.longValue();
    i.intValue();
    for (j = i.intValue(); j < m; ++j) {
        Math.max(now + up + 1L - a2[j], 0L);
    }
    for (j = 0; j < i; ++j) {
        now.longValue();
        a2[j].longValue();
        i.intValue();
    }
    return up;
}


****** Cluster 245 ******
public static Boolean func_2022c28e067f4fb695494db30ec40226(Long[] a2, Long left, Integer n, Long right, Long[] sum) {
    long sum2;
    int first;
    long mid = (left + right) / 2L;
    boolean ok = false;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid) {
        if (second >= first) {
            ok = true;
        } else {
            long total = 0L;
            if (second != -1) {
                total += sum[second].longValue();
            }
            if (first != n) {
                total += sum[n - 1] - sum[first - 1];
            }
            if (total >= mid) {
                ok = true;
            }
        }
    }
    return ok;
}
public static Boolean func_5c840809984f4de898eebfb6b50cb4c7(Long[] a2, Long left, Integer n, Long right, Long[] sum) {
    long sum2;
    int first;
    long mid = (left + right) / 2L;
    boolean ok = false;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid) {
        if (second >= first) {
            ok = true;
        } else {
            long total = 0L;
            if (second != -1) {
                total += sum[second].longValue();
            }
            if (first != n) {
                total += sum[n - 1] - sum[first - 1];
            }
            if (total >= mid) {
                ok = true;
            }
        }
    }
    if (ok) {
        Long.valueOf(mid);
    } else {
        Long.valueOf(mid);
    }
    return ok;
}


****** Cluster 246 ******
public static Long func_b160382412204183b7f45d4f65ec080d(Long[] a2, Long left, Integer n, Long right, Long[] sum) {
    long sum2;
    int first;
    long mid = (left + right) / 2L;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid && second < first) {
        if (second != -1) {
            sum[second].longValue();
        }
        if (first != n) {
            sum[n - 1].longValue();
            sum[first - 1].longValue();
        }
    }
    return sum1;
}
public static Long func_5b85c04e1d074f30afbae0a4295b1a5e(Long[] a2, Long left, Integer n, Long right, Long[] sum) {
    long sum2;
    int first;
    long mid = (left + right) / 2L;
    boolean ok = false;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid) {
        if (second >= first) {
            ok = true;
        } else {
            long total = 0L;
            if (second != -1) {
                total += sum[second].longValue();
            }
            if (first != n) {
                total += sum[n - 1] - sum[first - 1];
            }
            if (total >= mid) {
                ok = true;
            }
        }
    }
    if (ok) {
        Long.valueOf(mid);
    } else {
        Long.valueOf(mid);
    }
    return sum1;
}


****** Cluster 247 ******
public static Long func_6c77094190384043a65fd90c10309554(Long[] a2, Long left, Integer n, Long right, Long[] sum) {
    long sum2;
    int first;
    long mid = (left + right) / 2L;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid && second < first) {
        if (second != -1) {
            sum[second].longValue();
        }
        if (first != n) {
            sum[n - 1].longValue();
            sum[first - 1].longValue();
        }
    }
    return sum2;
}
public static Long func_095873d0e06a4a7a9598fa7d7c6cc6d7(Long[] a2, Long left, Integer n, Long right, Long[] sum) {
    long sum2;
    int first;
    long mid = (left + right) / 2L;
    boolean ok = false;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid) {
        if (second >= first) {
            ok = true;
        } else {
            long total = 0L;
            if (second != -1) {
                total += sum[second].longValue();
            }
            if (first != n) {
                total += sum[n - 1] - sum[first - 1];
            }
            if (total >= mid) {
                ok = true;
            }
        }
    }
    if (ok) {
        Long.valueOf(mid);
    } else {
        Long.valueOf(mid);
    }
    return sum2;
}


****** Cluster 248 ******
public static Long func_886ec52585594a02abb495c794f00ff2(Long left, Long[] a2, Long money, Long eq, Double ans, Long now, Long right, Integer i, Integer m) {
    long up;
    int j;
    while (left + 1L < right) {
        up = (left + right) / 2L;
        long need = eq + (long) i.intValue() * up;
        for (j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
        }
        if (need > money) {
            right = up;
            continue;
        }
        left = up;
    }
    up = left;
    double prof = -eq.longValue() - up * (long) i.intValue();
    for (j = i.intValue(); j < m; ++j) {
        prof -= (double) Math.max(now + up + 1L - a2[j], 0L);
    }
    for (j = 0; j < i; ++j) {
        prof += (double) (now + up - a2[j]) * 36.0 / (double) i.intValue();
    }
    Double.valueOf(Math.max(ans, prof));
    return left;
}
public static Long func_4d776fe2c55a4d36af74b4409bdfb43f(Long left, Long[] a2, Long money, Long eq, Double ans, Long now, Long right, Integer i, Integer m) {
    long up;
    int j;
    while (left + 1L < right) {
        up = (left + right) / 2L;
        long need = eq + (long) i.intValue() * up;
        for (j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
        }
        if (need > money) {
            right = up;
            continue;
        }
        left = up;
    }
    up = left;
    double prof = -eq.longValue() - up * (long) i.intValue();
    for (j = i.intValue(); j < m; ++j) {
        prof -= (double) Math.max(now + up + 1L - a2[j], 0L);
    }
    for (j = 0; j < i; ++j) {
        prof += (double) (now + up - a2[j]) * 36.0 / (double) i.intValue();
    }
    Double.valueOf(Math.max(ans, prof));
    return up;
}


****** Cluster 249 ******
public static Integer func_b944a2363e124a96b4894d811296df56(Long[] a2, Long left, Integer n, Long right, Long[] sum) {
    long sum2;
    int first;
    long mid = (left + right) / 2L;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid && second < first) {
        if (second != -1) {
            sum[second].longValue();
        }
        if (first != n) {
            sum[n - 1].longValue();
            sum[first - 1].longValue();
        }
    }
    return second;
}
public static Integer func_206ec5b3415b4dafabd61d1c296fc64f(Long[] a2, Long left, Integer n, Long right, Long[] sum) {
    long sum2;
    int first;
    long mid = (left + right) / 2L;
    boolean ok = false;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid) {
        if (second >= first) {
            ok = true;
        } else {
            long total = 0L;
            if (second != -1) {
                total += sum[second].longValue();
            }
            if (first != n) {
                total += sum[n - 1] - sum[first - 1];
            }
            if (total >= mid) {
                ok = true;
            }
        }
    }
    if (ok) {
        Long.valueOf(mid);
    } else {
        Long.valueOf(mid);
    }
    return second;
}


****** Cluster 250 ******
public static Long func_7b2b7d28b1b7430aa28ab6f0ced3382d(Long[] a2, Long left, Integer n, Long right, Long[] sum) {
    long sum2;
    int first;
    long mid = (left + right) / 2L;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid && second < first) {
        if (second != -1) {
            sum[second].longValue();
        }
        if (first != n) {
            sum[n - 1].longValue();
            sum[first - 1].longValue();
        }
    }
    return mid;
}
public static Long func_bb831dd815524838aa38d95b70cfe102(Long[] a2, Long left, Integer n, Long right, Long[] sum) {
    long sum2;
    int first;
    long mid = (left + right) / 2L;
    boolean ok = false;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid) {
        if (second >= first) {
            ok = true;
        } else {
            long total = 0L;
            if (second != -1) {
                total += sum[second].longValue();
            }
            if (first != n) {
                total += sum[n - 1] - sum[first - 1];
            }
            if (total >= mid) {
                ok = true;
            }
        }
    }
    if (ok) {
        Long.valueOf(mid);
    } else {
        Long.valueOf(mid);
    }
    return mid;
}


****** Cluster 251 ******
public static Long func_be3e92ad2b684bb28037c3d86c84453e(Long[] a2, Long money, Long eq, Long now, Integer i, Integer m) {
    int j;
    long up;
    long left = 0L;
    long right = money + 1L;
    while (left + 1L < right) {
        up = (left + right) / 2L;
        long need = eq + (long) i.intValue() * up;
        for (j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
        }
        if (need > money) {
            right = up;
            continue;
        }
        left = up;
    }
    up = left;
    eq.longValue();
    i.intValue();
    for (j = i.intValue(); j < m; ++j) {
        Math.max(now + up + 1L - a2[j], 0L);
    }
    for (j = 0; j < i; ++j) {
        now.longValue();
        a2[j].longValue();
        i.intValue();
    }
    return left;
}
public static Long func_0c82ce10bba0478fb87780c936bbda42(Long[] a2, Long money, Long eq, Long now, Integer i, Integer m) {
    int j;
    long up;
    long left = 0L;
    long right = money + 1L;
    while (left + 1L < right) {
        up = (left + right) / 2L;
        long need = eq + (long) i.intValue() * up;
        for (j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
        }
        if (need > money) {
            right = up;
            continue;
        }
        left = up;
    }
    up = left;
    eq.longValue();
    i.intValue();
    for (j = i.intValue(); j < m; ++j) {
        Math.max(now + up + 1L - a2[j], 0L);
    }
    for (j = 0; j < i; ++j) {
        now.longValue();
        a2[j].longValue();
        i.intValue();
    }
    return up;
}


****** Cluster 252 ******
public static Integer func_9bec498180e8429ab1345eb221734ec9(Long[] a2, Long left, Integer n, Long right, Long[] sum) {
    long sum2;
    int first;
    long mid = (left + right) / 2L;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid && second < first) {
        if (second != -1) {
            sum[second].longValue();
        }
        if (first != n) {
            sum[n - 1].longValue();
            sum[first - 1].longValue();
        }
    }
    return first;
}
public static Integer func_3b7c740df3c549179c3286ae7ef840bd(Long[] a2, Long left, Integer n, Long right, Long[] sum) {
    long sum2;
    int first;
    long mid = (left + right) / 2L;
    boolean ok = false;
    long sum1 = 0L;
    for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
    }
    int second = n - 1;
    for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
    }
    if (sum1 >= mid && sum2 >= mid) {
        if (second >= first) {
            ok = true;
        } else {
            long total = 0L;
            if (second != -1) {
                total += sum[second].longValue();
            }
            if (first != n) {
                total += sum[n - 1] - sum[first - 1];
            }
            if (total >= mid) {
                ok = true;
            }
        }
    }
    if (ok) {
        Long.valueOf(mid);
    } else {
        Long.valueOf(mid);
    }
    return first;
}


****** Cluster 253 ******
public static Long func_4652a7479b1142e3b8d49c6f7df67841(Long left, Long[] a2, Long money, Long eq, Double ans, Long now, Integer i, Integer m) {
    long up;
    int j;
    long right = money + 1L;
    while (left + 1L < right) {
        up = (left + right) / 2L;
        long need = eq + (long) i.intValue() * up;
        for (j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
        }
        if (need > money) {
            right = up;
            continue;
        }
        left = up;
    }
    up = left;
    double prof = -eq.longValue() - up * (long) i.intValue();
    for (j = i.intValue(); j < m; ++j) {
        prof -= (double) Math.max(now + up + 1L - a2[j], 0L);
    }
    for (j = 0; j < i; ++j) {
        prof += (double) (now + up - a2[j]) * 36.0 / (double) i.intValue();
    }
    Double.valueOf(Math.max(ans, prof));
    return left;
}
public static Long func_0f16c543737b4a0e87f97222322178ce(Long left, Long[] a2, Long money, Long eq, Double ans, Long now, Integer i, Integer m) {
    long up;
    int j;
    long right = money + 1L;
    while (left + 1L < right) {
        up = (left + right) / 2L;
        long need = eq + (long) i.intValue() * up;
        for (j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
        }
        if (need > money) {
            right = up;
            continue;
        }
        left = up;
    }
    up = left;
    double prof = -eq.longValue() - up * (long) i.intValue();
    for (j = i.intValue(); j < m; ++j) {
        prof -= (double) Math.max(now + up + 1L - a2[j], 0L);
    }
    for (j = 0; j < i; ++j) {
        prof += (double) (now + up - a2[j]) * 36.0 / (double) i.intValue();
    }
    Double.valueOf(Math.max(ans, prof));
    return up;
}


****** Cluster 254 ******
public static Long func_b11f5f93da474fc1a7ea35e608dda902(Long[] a2, Long money, Long eq, Double ans, Long now, Integer i, Integer m) {
    int j;
    long up;
    long left = 0L;
    long right = money + 1L;
    while (left + 1L < right) {
        up = (left + right) / 2L;
        long need = eq + (long) i.intValue() * up;
        for (j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
        }
        if (need > money) {
            right = up;
            continue;
        }
        left = up;
    }
    up = left;
    double prof = -eq.longValue() - up * (long) i.intValue();
    for (j = i.intValue(); j < m; ++j) {
        prof -= (double) Math.max(now + up + 1L - a2[j], 0L);
    }
    for (j = 0; j < i; ++j) {
        prof += (double) (now + up - a2[j]) * 36.0 / (double) i.intValue();
    }
    Double.valueOf(Math.max(ans, prof));
    return left;
}
public static Long func_68fa08e70c584a8ea2b781da8108af5c(Long[] a2, Long money, Long eq, Double ans, Long now, Integer i, Integer m) {
    int j;
    long up;
    long left = 0L;
    long right = money + 1L;
    while (left + 1L < right) {
        up = (left + right) / 2L;
        long need = eq + (long) i.intValue() * up;
        for (j = i.intValue(); j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
        }
        if (need > money) {
            right = up;
            continue;
        }
        left = up;
    }
    up = left;
    double prof = -eq.longValue() - up * (long) i.intValue();
    for (j = i.intValue(); j < m; ++j) {
        prof -= (double) Math.max(now + up + 1L - a2[j], 0L);
    }
    for (j = 0; j < i; ++j) {
        prof += (double) (now + up - a2[j]) * 36.0 / (double) i.intValue();
    }
    Double.valueOf(Math.max(ans, prof));
    return up;
}


****** Cluster 255 ******
public static Double func_49e15a6a4cef4dcea211eb7921fb2768(Long[] a2, Long money, Integer m) {
    double ans = 0.0;
    for (int i = 1; i <= m; ++i) {
        long up;
        int j;
        long now = a2[i - 1];
        long eq = 0L;
        for (int j2 = 0; j2 < i; ++j2) {
            eq += now - a2[j2];
        }
        int same = 0;
        for (int j3 = i; j3 < m; ++j3) {
            if (a2[j3] != now)
                continue;
            ++same;
        }
        if (eq + (long) same > money)
            break;
        long left = 0L;
        long right = money + 1L;
        while (left + 1L < right) {
            up = (left + right) / 2L;
            long need = eq + (long) i * up;
            for (j = i; j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
            }
            if (need > money) {
                right = up;
                continue;
            }
            left = up;
        }
        up = left;
        double prof = -eq - up * (long) i;
        for (j = i; j < m; ++j) {
            prof -= (double) Math.max(now + up + 1L - a2[j], 0L);
        }
        for (j = 0; j < i; ++j) {
            prof += (double) (now + up - a2[j]) * 36.0 / (double) i;
        }
        ans = Math.max(ans, prof);
    }
    return ans;
}
public static Double func_71515b9e7daf4a9284357db39456dc45(Long[] a2, Long money, Integer m) {
    double ans = 0.0;
    for (int i = 1; i <= m; ++i) {
        long up;
        int j;
        long now = a2[i - 1];
        long eq = 0L;
        for (int j2 = 0; j2 < i; ++j2) {
            eq += now - a2[j2];
        }
        int same = 0;
        for (int j3 = i; j3 < m; ++j3) {
            if (a2[j3] != now)
                continue;
            ++same;
        }
        if (eq + (long) same > money)
            break;
        long left = 0L;
        long right = money + 1L;
        while (left + 1L < right) {
            up = (left + right) / 2L;
            long need = eq + (long) i * up;
            for (j = i; j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
            }
            if (need > money) {
                right = up;
                continue;
            }
            left = up;
        }
        up = left;
        double prof = -eq - up * (long) i;
        for (j = i; j < m; ++j) {
            prof -= (double) Math.max(now + up + 1L - a2[j], 0L);
        }
        for (j = 0; j < i; ++j) {
            prof += (double) (now + up - a2[j]) * 36.0 / (double) i;
        }
        ans = Math.max(ans, prof);
    }
    System.out.println(ans);
    return ans;
}


****** Cluster 256 ******
public static Double func_9cf39df99db547ae8a324e7bda18c8f4(Long[] a2, Long money, Double ans, Integer m) {
    for (int i = 1; i <= m; ++i) {
        long up;
        int j;
        long now = a2[i - 1];
        long eq = 0L;
        for (int j2 = 0; j2 < i; ++j2) {
            eq += now - a2[j2];
        }
        int same = 0;
        for (int j3 = i; j3 < m; ++j3) {
            if (a2[j3] != now)
                continue;
            ++same;
        }
        if (eq + (long) same > money)
            break;
        long left = 0L;
        long right = money + 1L;
        while (left + 1L < right) {
            up = (left + right) / 2L;
            long need = eq + (long) i * up;
            for (j = i; j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
            }
            if (need > money) {
                right = up;
                continue;
            }
            left = up;
        }
        up = left;
        double prof = -eq - up * (long) i;
        for (j = i; j < m; ++j) {
            prof -= (double) Math.max(now + up + 1L - a2[j], 0L);
        }
        for (j = 0; j < i; ++j) {
            prof += (double) (now + up - a2[j]) * 36.0 / (double) i;
        }
        ans = Math.max(ans, prof);
    }
    System.out.println(ans);
    return ans;
}
public static Double func_64045e15c6c94c97813fc8724b320999(Long[] a2, Long money, Double ans, Integer m) {
    for (int i = 1; i <= m; ++i) {
        long up;
        int j;
        long now = a2[i - 1];
        long eq = 0L;
        for (int j2 = 0; j2 < i; ++j2) {
            eq += now - a2[j2];
        }
        int same = 0;
        for (int j3 = i; j3 < m; ++j3) {
            if (a2[j3] != now)
                continue;
            ++same;
        }
        if (eq + (long) same > money)
            break;
        long left = 0L;
        long right = money + 1L;
        while (left + 1L < right) {
            up = (left + right) / 2L;
            long need = eq + (long) i * up;
            for (j = i; j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
            }
            if (need > money) {
                right = up;
                continue;
            }
            left = up;
        }
        up = left;
        double prof = -eq - up * (long) i;
        for (j = i; j < m; ++j) {
            prof -= (double) Math.max(now + up + 1L - a2[j], 0L);
        }
        for (j = 0; j < i; ++j) {
            prof += (double) (now + up - a2[j]) * 36.0 / (double) i;
        }
        ans = Math.max(ans, prof);
    }
    return ans;
}


****** Cluster 257 ******
public static Double func_5795fe04698645d58793743e5a4590ae(Long[] a2, Long money, Integer m) {
    Arrays.sort((Object[]) a2);
    double ans = 0.0;
    for (int i = 1; i <= m; ++i) {
        long up;
        int j;
        long now = a2[i - 1];
        long eq = 0L;
        for (int j2 = 0; j2 < i; ++j2) {
            eq += now - a2[j2];
        }
        int same = 0;
        for (int j3 = i; j3 < m; ++j3) {
            if (a2[j3] != now)
                continue;
            ++same;
        }
        if (eq + (long) same > money)
            break;
        long left = 0L;
        long right = money + 1L;
        while (left + 1L < right) {
            up = (left + right) / 2L;
            long need = eq + (long) i * up;
            for (j = i; j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
            }
            if (need > money) {
                right = up;
                continue;
            }
            left = up;
        }
        up = left;
        double prof = -eq - up * (long) i;
        for (j = i; j < m; ++j) {
            prof -= (double) Math.max(now + up + 1L - a2[j], 0L);
        }
        for (j = 0; j < i; ++j) {
            prof += (double) (now + up - a2[j]) * 36.0 / (double) i;
        }
        ans = Math.max(ans, prof);
    }
    return ans;
}
public static Double func_db48358b49ab4fb0863e94cae2a6e89d(Long[] a2, Long money, Integer m) {
    Arrays.sort((Object[]) a2);
    double ans = 0.0;
    for (int i = 1; i <= m; ++i) {
        long up;
        int j;
        long now = a2[i - 1];
        long eq = 0L;
        for (int j2 = 0; j2 < i; ++j2) {
            eq += now - a2[j2];
        }
        int same = 0;
        for (int j3 = i; j3 < m; ++j3) {
            if (a2[j3] != now)
                continue;
            ++same;
        }
        if (eq + (long) same > money)
            break;
        long left = 0L;
        long right = money + 1L;
        while (left + 1L < right) {
            up = (left + right) / 2L;
            long need = eq + (long) i * up;
            for (j = i; j < m && (need += Math.max(now + up + 1L - a2[j], 0L)) <= money; ++j) {
            }
            if (need > money) {
                right = up;
                continue;
            }
            left = up;
        }
        up = left;
        double prof = -eq - up * (long) i;
        for (j = i; j < m; ++j) {
            prof -= (double) Math.max(now + up + 1L - a2[j], 0L);
        }
        for (j = 0; j < i; ++j) {
            prof += (double) (now + up - a2[j]) * 36.0 / (double) i;
        }
        ans = Math.max(ans, prof);
    }
    System.out.println(ans);
    return ans;
}


****** Cluster 258 ******
public static Long func_47d47f52604e475ea2d36b641ef0008e(Integer l, Long s, Long b, Double max, Long[] a2, Integer n, Double s2) {
    long x2 = (b - (long) (n - l) + s) / (long) (n + 1);
    if (!(x2 < a2[l] || l + 1 < a2.length && x2 + 1L < a2[n] || n + 1 < a2.length && x2 >= a2[n + 1] || max >= 36.0 * ((double) x2 - s2 / (double) (l + 1)) - (double) ((long) (n + 1) * x2) + (double) s.longValue() - (double) (n - l))) {
        Double.valueOf(36.0 * ((double) x2 - s2 / (double) (l + 1)) - (double) ((long) (n + 1) * x2) + (double) s.longValue() - (double) (n - l));
    }
    return x2;
}
public static Long func_8e29be4a12ca4bb3afa6cc1be9425ab1(Integer l, Long s, Long b, Double max, Long[] a2, Integer n, Double s2) {
    s2 = s2 + (double) a2[l].longValue();
    long x2 = (b - (long) (n - l) + s) / (long) (n + 1);
    if (!(x2 < a2[l] || l + 1 < a2.length && x2 + 1L < a2[n] || n + 1 < a2.length && x2 >= a2[n + 1] || max >= 36.0 * ((double) x2 - s2 / (double) (l + 1)) - (double) ((long) (n + 1) * x2) + (double) s.longValue() - (double) (n - l))) {
        Double.valueOf(36.0 * ((double) x2 - s2 / (double) (l + 1)) - (double) ((long) (n + 1) * x2) + (double) s.longValue() - (double) (n - l));
    }
    return x2;
}


****** Cluster 259 ******
public static Long func_c1589f7cc0c8481c89ff69189f4d3113(Long[] a2, Integer n, Long[] sum) {
    long left = 0L;
    long right = 1000000000000000L;
    while (right - left > 1L) {
        long sum2;
        int first;
        long mid = (left + right) / 2L;
        boolean ok = false;
        long sum1 = 0L;
        for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
        }
        int second = n - 1;
        for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
        }
        if (sum1 >= mid && sum2 >= mid) {
            if (second >= first) {
                ok = true;
            } else {
                long total = 0L;
                if (second != -1) {
                    total += sum[second].longValue();
                }
                if (first != n) {
                    total += sum[n - 1] - sum[first - 1];
                }
                if (total >= mid) {
                    ok = true;
                }
            }
        }
        if (ok) {
            left = mid;
            continue;
        }
        right = mid;
    }
    return left;
}
public static Long func_e33f7128a895478f986fb973f1e05582(Long[] a2, Integer n, Long[] sum) {
    long left = 0L;
    long right = 1000000000000000L;
    while (right - left > 1L) {
        long sum2;
        int first;
        long mid = (left + right) / 2L;
        boolean ok = false;
        long sum1 = 0L;
        for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
        }
        int second = n - 1;
        for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
        }
        if (sum1 >= mid && sum2 >= mid) {
            if (second >= first) {
                ok = true;
            } else {
                long total = 0L;
                if (second != -1) {
                    total += sum[second].longValue();
                }
                if (first != n) {
                    total += sum[n - 1] - sum[first - 1];
                }
                if (total >= mid) {
                    ok = true;
                }
            }
        }
        if (ok) {
            left = mid;
            continue;
        }
        right = mid;
    }
    Locale.setDefault(Locale.US);
    return left;
}


****** Cluster 260 ******
public static Long func_2a734d921b1849a1b708be8b903558c7(Long s, Long[] a2, Integer n) {
    s = s + a2[n];
    return s;
}
public static Long func_c8888a2749d948f3814d4823a09fe9f9$7dec48d5(Long temp, Long[] arr, Integer index) {
    temp = temp + arr[index];
    return temp;
}
public static Long func_07a9a5e5353b4dd9bef484f408146caa$7dec48d5(Long temp, Long[] arr, Integer index) {
    temp = temp + arr[index];
    Integer.valueOf(index + 1);
    return temp;
}
public static Long func_b9c00243b9824125b7fac11393e6bcd7$7dec48d5(Long temp, Long[] arr, Integer index) {
    temp = temp + arr[index];
    return temp;
}
public static Long func_2297025955394f268afb2b501c8ce857$7dec48d5(Long temp, Long[] arr, Integer index) {
    temp = temp + arr[index];
    Integer.valueOf(index + 1);
    return temp;
}
public static Long func_96750b079d124c59a090019a4a303625(Long mid, Long[] pref, Integer cur) {
    long need = pref[cur] + mid;
    Arrays.binarySearch((Object[]) pref, (Object) need);
    return need;
}
public static Long func_fedcd78976d643089b1f8adf1406564a(Long mid, Long[] pref, Integer cur) {
    long need = pref[cur] + mid;
    Arrays.binarySearch((Object[]) pref, (Object) need);
    return need;
}


****** Cluster 261 ******
public static Long func_1782973bdc034836a546365bbbba77e1(Long[] a2, Long left, Integer n, Long right, Long[] sum) {
    while (right - left > 1L) {
        long sum2;
        int first;
        long mid = (left + right) / 2L;
        boolean ok = false;
        long sum1 = 0L;
        for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
        }
        int second = n - 1;
        for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
        }
        if (sum1 >= mid && sum2 >= mid) {
            if (second >= first) {
                ok = true;
            } else {
                long total = 0L;
                if (second != -1) {
                    total += sum[second].longValue();
                }
                if (first != n) {
                    total += sum[n - 1] - sum[first - 1];
                }
                if (total >= mid) {
                    ok = true;
                }
            }
        }
        if (ok) {
            left = mid;
            continue;
        }
        right = mid;
    }
    Locale.setDefault(Locale.US);
    return right;
}
public static Long func_69ab6ad7ec134844bbb32a7e03ad1815(Long[] a2, Long left, Integer n, Long right, Long[] sum) {
    while (right - left > 1L) {
        long sum2;
        int first;
        long mid = (left + right) / 2L;
        boolean ok = false;
        long sum1 = 0L;
        for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
        }
        int second = n - 1;
        for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
        }
        if (sum1 >= mid && sum2 >= mid) {
            if (second >= first) {
                ok = true;
            } else {
                long total = 0L;
                if (second != -1) {
                    total += sum[second].longValue();
                }
                if (first != n) {
                    total += sum[n - 1] - sum[first - 1];
                }
                if (total >= mid) {
                    ok = true;
                }
            }
        }
        if (ok) {
            left = mid;
            continue;
        }
        right = mid;
    }
    return right;
}


****** Cluster 262 ******
public static Long func_adbab306387047d384666d2e6acb8205(Long[] a2, Long left, Integer n, Long right, Long[] sum) {
    while (right - left > 1L) {
        long sum2;
        int first;
        long mid = (left + right) / 2L;
        boolean ok = false;
        long sum1 = 0L;
        for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
        }
        int second = n - 1;
        for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
        }
        if (sum1 >= mid && sum2 >= mid) {
            if (second >= first) {
                ok = true;
            } else {
                long total = 0L;
                if (second != -1) {
                    total += sum[second].longValue();
                }
                if (first != n) {
                    total += sum[n - 1] - sum[first - 1];
                }
                if (total >= mid) {
                    ok = true;
                }
            }
        }
        if (ok) {
            left = mid;
            continue;
        }
        right = mid;
    }
    Locale.setDefault(Locale.US);
    return left;
}
public static Long func_34065c6a4a0f427d875c4e7aad048238(Long[] a2, Long left, Integer n, Long right, Long[] sum) {
    while (right - left > 1L) {
        long sum2;
        int first;
        long mid = (left + right) / 2L;
        boolean ok = false;
        long sum1 = 0L;
        for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
        }
        int second = n - 1;
        for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
        }
        if (sum1 >= mid && sum2 >= mid) {
            if (second >= first) {
                ok = true;
            } else {
                long total = 0L;
                if (second != -1) {
                    total += sum[second].longValue();
                }
                if (first != n) {
                    total += sum[n - 1] - sum[first - 1];
                }
                if (total >= mid) {
                    ok = true;
                }
            }
        }
        if (ok) {
            left = mid;
            continue;
        }
        right = mid;
    }
    return left;
}


****** Cluster 263 ******
public static Long func_3052bd551026474c958793a83217cda1(Long[] a2, Integer n, Long[] sum) {
    for (int i = 0; i < n; ++i) {
        sum[i] = a2[i] + (i == 0 ? 0L : sum[i - 1]);
    }
    long left = 0L;
    long right = 1000000000000000L;
    while (right - left > 1L) {
        int first;
        long sum2;
        long mid = (left + right) / 2L;
        boolean ok = false;
        long sum1 = 0L;
        for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
        }
        int second = n - 1;
        for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
        }
        if (sum1 >= mid && sum2 >= mid) {
            if (second >= first) {
                ok = true;
            } else {
                long total = 0L;
                if (second != -1) {
                    total += sum[second].longValue();
                }
                if (first != n) {
                    total += sum[n - 1] - sum[first - 1];
                }
                if (total >= mid) {
                    ok = true;
                }
            }
        }
        if (ok) {
            left = mid;
            continue;
        }
        right = mid;
    }
    return right;
}
public static Long func_475211f5dcf34817805c07f9b6801c88(Long[] a2, Integer n, Long[] sum) {
    for (int i = 0; i < n; ++i) {
        sum[i] = a2[i] + (i == 0 ? 0L : sum[i - 1]);
    }
    long left = 0L;
    long right = 1000000000000000L;
    while (right - left > 1L) {
        int first;
        long sum2;
        long mid = (left + right) / 2L;
        boolean ok = false;
        long sum1 = 0L;
        for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
        }
        int second = n - 1;
        for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
        }
        if (sum1 >= mid && sum2 >= mid) {
            if (second >= first) {
                ok = true;
            } else {
                long total = 0L;
                if (second != -1) {
                    total += sum[second].longValue();
                }
                if (first != n) {
                    total += sum[n - 1] - sum[first - 1];
                }
                if (total >= mid) {
                    ok = true;
                }
            }
        }
        if (ok) {
            left = mid;
            continue;
        }
        right = mid;
    }
    Locale.setDefault(Locale.US);
    return right;
}


****** Cluster 264 ******
public static Long func_d4d54140c8134aacb172c6c76fa87715(Long[] a2, Integer n, Long[] sum) {
    for (int i = 0; i < n; ++i) {
        sum[i] = a2[i] + (i == 0 ? 0L : sum[i - 1]);
    }
    long left = 0L;
    long right = 1000000000000000L;
    while (right - left > 1L) {
        int first;
        long sum2;
        long mid = (left + right) / 2L;
        boolean ok = false;
        long sum1 = 0L;
        for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
        }
        int second = n - 1;
        for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
        }
        if (sum1 >= mid && sum2 >= mid) {
            if (second >= first) {
                ok = true;
            } else {
                long total = 0L;
                if (second != -1) {
                    total += sum[second].longValue();
                }
                if (first != n) {
                    total += sum[n - 1] - sum[first - 1];
                }
                if (total >= mid) {
                    ok = true;
                }
            }
        }
        if (ok) {
            left = mid;
            continue;
        }
        right = mid;
    }
    return left;
}
public static Long func_83d7ff5c884e4b28bc7c6a91f3943377(Long[] a2, Integer n, Long[] sum) {
    for (int i = 0; i < n; ++i) {
        sum[i] = a2[i] + (i == 0 ? 0L : sum[i - 1]);
    }
    long left = 0L;
    long right = 1000000000000000L;
    while (right - left > 1L) {
        int first;
        long sum2;
        long mid = (left + right) / 2L;
        boolean ok = false;
        long sum1 = 0L;
        for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
        }
        int second = n - 1;
        for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
        }
        if (sum1 >= mid && sum2 >= mid) {
            if (second >= first) {
                ok = true;
            } else {
                long total = 0L;
                if (second != -1) {
                    total += sum[second].longValue();
                }
                if (first != n) {
                    total += sum[n - 1] - sum[first - 1];
                }
                if (total >= mid) {
                    ok = true;
                }
            }
        }
        if (ok) {
            left = mid;
            continue;
        }
        right = mid;
    }
    Locale.setDefault(Locale.US);
    return left;
}


****** Cluster 265 ******
public static Long func_6a7602fffa8b4326abc246cb4bd54d50(Long b, Long[] a2) {
    long s = 0L;
    for (int n = 0; n < a2.length; ++n) {
        s += a2[n].longValue();
        for (int l = 0; l <= n; ++l) {
            a2[l].longValue();
            long x2 = (b - (long) (n - l) + s) / (long) (n + 1);
            if (x2 < a2[l] || l + 1 < a2.length && x2 + 1L < a2[n] || n + 1 >= a2.length)
                continue;
            a2[n + 1].longValue();
        }
    }
    return s;
}
public static Long func_e43043e969564c49a19911c8a5dc0e7e(Long b, Long[] a2) {
    Arrays.sort((Object[]) a2);
    long s = 0L;
    for (int n = 0; n < a2.length; ++n) {
        s += a2[n].longValue();
        for (int l = 0; l <= n; ++l) {
            a2[l].longValue();
            long x2 = (b - (long) (n - l) + s) / (long) (n + 1);
            if (x2 < a2[l] || l + 1 < a2.length && x2 + 1L < a2[n] || n + 1 >= a2.length)
                continue;
            a2[n + 1].longValue();
        }
    }
    return s;
}
public static Long func_c5ad96721f624071bf9720a66fafbe7b(Long sl, Long[] a2) {
    long sm = a2[0];
    long sr = 0L;
    for (int i = 1; i < a2.length; ++i) {
        sr += a2[i].longValue();
    }
    long sum = sm + sr;
    long ans = Math.max(sm, sr);
    int l = 0;
    for (int r = 1; r < a2.length; ++r) {
        sm += a2[r].longValue();
        sr -= a2[r].longValue();
        while (l < r && Math.max(sl + a2[l], sm - a2[l]) < Math.max(sl, sm)) {
            sl = sl + a2[l];
            sm -= a2[l].longValue();
            ++l;
        }
        ans = Math.min(ans, Math.max(sr, Math.max(sm, sl)));
    }
    return sum;
}
def func_06f8a9ef4fb844ef82161d2847cdb925(n, a):
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    return allv

def func_1ba22366cca74ae7859c4034e196887b(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    return bestAnswer

def func_34833f9e50af42fa9b4f4aeb8ce61e3f(n, a):
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return allv

def func_3be06b2833734523a4f69cad9221f318(n, a):
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    return bestAnswer

def func_46eb2d372a6044fa97dc8fe776c8c485(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return allv

def func_57d5e9dde2aa417b90643d3515b1ae0a(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    return allv

def func_6fb126e903f8455995365c4a6f3c033c(n, a):
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    return allv

def func_79f08c4200e945248dc17aaa714c1cc0(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    return allv

def func_7a1844e05d2c44d190ee678d629a8d01(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return allv

def func_7a8a97acb92d437db681b2cd680cfa38(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    return allv

def func_a6fc11be5695452c88915f15db14b097(n, a):
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return allv

def func_b0804a90e2c2462f89ee31f3e87d8f4f(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    return bestAnswer

def func_db8e74af1a7b41ab989683184ef74b97(n, a):
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    return allv

def func_e659ee444a464641ab92335d95f51603(n, a):
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    return bestAnswer

def func_43df97b566594717926f129003242a00(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return _sum



****** Cluster 266 ******
public static Long func_631367ab348945afa9a792e51bc44195(Long[] a2, Integer n) {
    long[] sum = new long[n.intValue()];
    for (int i = 0; i < n; ++i) {
        sum[i] = a2[i] + (i == 0 ? 0L : sum[i - 1]);
    }
    long left = 0L;
    long right = 1000000000000000L;
    while (right - left > 1L) {
        int first;
        long sum2;
        long mid = (left + right) / 2L;
        boolean ok = false;
        long sum1 = 0L;
        for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
        }
        int second = n - 1;
        for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
        }
        if (sum1 >= mid && sum2 >= mid) {
            if (second >= first) {
                ok = true;
            } else {
                long total = 0L;
                if (second != -1) {
                    total += sum[second];
                }
                if (first != n) {
                    total += sum[n - 1] - sum[first - 1];
                }
                if (total >= mid) {
                    ok = true;
                }
            }
        }
        if (ok) {
            left = mid;
            continue;
        }
        right = mid;
    }
    return left;
}
public static Long func_a367bce9ba3440a7ac86b92cc1658f61(Long[] a2, Integer n) {
    long[] sum = new long[n.intValue()];
    for (int i = 0; i < n; ++i) {
        sum[i] = a2[i] + (i == 0 ? 0L : sum[i - 1]);
    }
    long left = 0L;
    long right = 1000000000000000L;
    while (right - left > 1L) {
        int first;
        long sum2;
        long mid = (left + right) / 2L;
        boolean ok = false;
        long sum1 = 0L;
        for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
        }
        int second = n - 1;
        for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
        }
        if (sum1 >= mid && sum2 >= mid) {
            if (second >= first) {
                ok = true;
            } else {
                long total = 0L;
                if (second != -1) {
                    total += sum[second];
                }
                if (first != n) {
                    total += sum[n - 1] - sum[first - 1];
                }
                if (total >= mid) {
                    ok = true;
                }
            }
        }
        if (ok) {
            left = mid;
            continue;
        }
        right = mid;
    }
    Locale.setDefault(Locale.US);
    return left;
}


****** Cluster 267 ******
public static Long func_9ab7fec3d9c3464b84a9b92a53f71dea(Long[] a2, Integer n) {
    long[] sum = new long[n.intValue()];
    for (int i = 0; i < n; ++i) {
        sum[i] = a2[i] + (i == 0 ? 0L : sum[i - 1]);
    }
    long left = 0L;
    long right = 1000000000000000L;
    while (right - left > 1L) {
        int first;
        long sum2;
        long mid = (left + right) / 2L;
        boolean ok = false;
        long sum1 = 0L;
        for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
        }
        int second = n - 1;
        for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
        }
        if (sum1 >= mid && sum2 >= mid) {
            if (second >= first) {
                ok = true;
            } else {
                long total = 0L;
                if (second != -1) {
                    total += sum[second];
                }
                if (first != n) {
                    total += sum[n - 1] - sum[first - 1];
                }
                if (total >= mid) {
                    ok = true;
                }
            }
        }
        if (ok) {
            left = mid;
            continue;
        }
        right = mid;
    }
    return right;
}
public static Long func_03d520d3cb434847bb2eac54220a7b52(Long[] a2, Integer n) {
    long[] sum = new long[n.intValue()];
    for (int i = 0; i < n; ++i) {
        sum[i] = a2[i] + (i == 0 ? 0L : sum[i - 1]);
    }
    long left = 0L;
    long right = 1000000000000000L;
    while (right - left > 1L) {
        int first;
        long sum2;
        long mid = (left + right) / 2L;
        boolean ok = false;
        long sum1 = 0L;
        for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
        }
        int second = n - 1;
        for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
        }
        if (sum1 >= mid && sum2 >= mid) {
            if (second >= first) {
                ok = true;
            } else {
                long total = 0L;
                if (second != -1) {
                    total += sum[second];
                }
                if (first != n) {
                    total += sum[n - 1] - sum[first - 1];
                }
                if (total >= mid) {
                    ok = true;
                }
            }
        }
        if (ok) {
            left = mid;
            continue;
        }
        right = mid;
    }
    Locale.setDefault(Locale.US);
    return right;
}


****** Cluster 268 ******
public static Long func_006ca1e4b9064c5c8d8c6ba211c80f20(Long[] a2, Integer q, Integer n, Integer r, Integer s, Integer p) {
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * 1L * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
    }
    long[] sum = new long[n.intValue()];
    for (int i = 0; i < n; ++i) {
        sum[i] = a2[i] + (i == 0 ? 0L : sum[i - 1]);
    }
    long left = 0L;
    long right = 1000000000000000L;
    while (right - left > 1L) {
        int first;
        long sum2;
        long mid = (left + right) / 2L;
        boolean ok = false;
        long sum1 = 0L;
        for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
        }
        int second = n - 1;
        for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
        }
        if (sum1 >= mid && sum2 >= mid) {
            if (second >= first) {
                ok = true;
            } else {
                long total = 0L;
                if (second != -1) {
                    total += sum[second];
                }
                if (first != n) {
                    total += sum[n - 1] - sum[first - 1];
                }
                if (total >= mid) {
                    ok = true;
                }
            }
        }
        if (ok) {
            left = mid;
            continue;
        }
        right = mid;
    }
    return left;
}
public static Long func_807465cbbae04e868d4fcf6e42cd51eb(Long[] a2, Integer q, Integer n, Integer r, Integer s, Integer p) {
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * 1L * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
    }
    long[] sum = new long[n.intValue()];
    for (int i = 0; i < n; ++i) {
        sum[i] = a2[i] + (i == 0 ? 0L : sum[i - 1]);
    }
    long left = 0L;
    long right = 1000000000000000L;
    while (right - left > 1L) {
        int first;
        long sum2;
        long mid = (left + right) / 2L;
        boolean ok = false;
        long sum1 = 0L;
        for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
        }
        int second = n - 1;
        for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
        }
        if (sum1 >= mid && sum2 >= mid) {
            if (second >= first) {
                ok = true;
            } else {
                long total = 0L;
                if (second != -1) {
                    total += sum[second];
                }
                if (first != n) {
                    total += sum[n - 1] - sum[first - 1];
                }
                if (total >= mid) {
                    ok = true;
                }
            }
        }
        if (ok) {
            left = mid;
            continue;
        }
        right = mid;
    }
    Locale.setDefault(Locale.US);
    return left;
}


****** Cluster 269 ******
public static Long func_3e4ea9ed36a943eaadddb9b0fe3ead8f(Long[] a2, Integer q, Integer n, Integer r, Integer s, Integer p) {
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * 1L * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
    }
    long[] sum = new long[n.intValue()];
    for (int i = 0; i < n; ++i) {
        sum[i] = a2[i] + (i == 0 ? 0L : sum[i - 1]);
    }
    long left = 0L;
    long right = 1000000000000000L;
    while (right - left > 1L) {
        int first;
        long sum2;
        long mid = (left + right) / 2L;
        boolean ok = false;
        long sum1 = 0L;
        for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
        }
        int second = n - 1;
        for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
        }
        if (sum1 >= mid && sum2 >= mid) {
            if (second >= first) {
                ok = true;
            } else {
                long total = 0L;
                if (second != -1) {
                    total += sum[second];
                }
                if (first != n) {
                    total += sum[n - 1] - sum[first - 1];
                }
                if (total >= mid) {
                    ok = true;
                }
            }
        }
        if (ok) {
            left = mid;
            continue;
        }
        right = mid;
    }
    return right;
}
public static Long func_5dd926c5531244e18de13c2407660de5(Long[] a2, Integer q, Integer n, Integer r, Integer s, Integer p) {
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * 1L * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
    }
    long[] sum = new long[n.intValue()];
    for (int i = 0; i < n; ++i) {
        sum[i] = a2[i] + (i == 0 ? 0L : sum[i - 1]);
    }
    long left = 0L;
    long right = 1000000000000000L;
    while (right - left > 1L) {
        int first;
        long sum2;
        long mid = (left + right) / 2L;
        boolean ok = false;
        long sum1 = 0L;
        for (first = 0; first != n && sum1 < mid; sum1 += a2[first].longValue(), ++first) {
        }
        int second = n - 1;
        for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second].longValue(), --second) {
        }
        if (sum1 >= mid && sum2 >= mid) {
            if (second >= first) {
                ok = true;
            } else {
                long total = 0L;
                if (second != -1) {
                    total += sum[second];
                }
                if (first != n) {
                    total += sum[n - 1] - sum[first - 1];
                }
                if (total >= mid) {
                    ok = true;
                }
            }
        }
        if (ok) {
            left = mid;
            continue;
        }
        right = mid;
    }
    Locale.setDefault(Locale.US);
    return right;
}


****** Cluster 270 ******
public static Long func_28f1e3e19480432daac1aa3d21b9d164(Integer q, Integer n, Integer r, Integer s, Integer p) {
    long[] a2 = new long[n.intValue()];
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * 1L * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
    }
    long[] sum = new long[n.intValue()];
    for (int i = 0; i < n; ++i) {
        sum[i] = a2[i] + (i == 0 ? 0L : sum[i - 1]);
    }
    long left = 0L;
    long right = 1000000000000000L;
    while (right - left > 1L) {
        int first;
        long sum2;
        long mid = (left + right) / 2L;
        boolean ok = false;
        long sum1 = 0L;
        for (first = 0; first != n && sum1 < mid; sum1 += a2[first], ++first) {
        }
        int second = n - 1;
        for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second], --second) {
        }
        if (sum1 >= mid && sum2 >= mid) {
            if (second >= first) {
                ok = true;
            } else {
                long total = 0L;
                if (second != -1) {
                    total += sum[second];
                }
                if (first != n) {
                    total += sum[n - 1] - sum[first - 1];
                }
                if (total >= mid) {
                    ok = true;
                }
            }
        }
        if (ok) {
            left = mid;
            continue;
        }
        right = mid;
    }
    return left;
}
public static Long func_2967eb637e27472f84c45219c78f31de(Integer q, Integer n, Integer r, Integer s, Integer p) {
    long[] a2 = new long[n.intValue()];
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * 1L * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
    }
    long[] sum = new long[n.intValue()];
    for (int i = 0; i < n; ++i) {
        sum[i] = a2[i] + (i == 0 ? 0L : sum[i - 1]);
    }
    long left = 0L;
    long right = 1000000000000000L;
    while (right - left > 1L) {
        int first;
        long sum2;
        long mid = (left + right) / 2L;
        boolean ok = false;
        long sum1 = 0L;
        for (first = 0; first != n && sum1 < mid; sum1 += a2[first], ++first) {
        }
        int second = n - 1;
        for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second], --second) {
        }
        if (sum1 >= mid && sum2 >= mid) {
            if (second >= first) {
                ok = true;
            } else {
                long total = 0L;
                if (second != -1) {
                    total += sum[second];
                }
                if (first != n) {
                    total += sum[n - 1] - sum[first - 1];
                }
                if (total >= mid) {
                    ok = true;
                }
            }
        }
        if (ok) {
            left = mid;
            continue;
        }
        right = mid;
    }
    Locale.setDefault(Locale.US);
    return left;
}


****** Cluster 271 ******
public static Long func_c2f7ac0b25064108a0bffd4a786aebb1(Integer q, Integer n, Integer r, Integer s, Integer p) {
    long[] a2 = new long[n.intValue()];
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * 1L * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
    }
    long[] sum = new long[n.intValue()];
    for (int i = 0; i < n; ++i) {
        sum[i] = a2[i] + (i == 0 ? 0L : sum[i - 1]);
    }
    long left = 0L;
    long right = 1000000000000000L;
    while (right - left > 1L) {
        int first;
        long sum2;
        long mid = (left + right) / 2L;
        boolean ok = false;
        long sum1 = 0L;
        for (first = 0; first != n && sum1 < mid; sum1 += a2[first], ++first) {
        }
        int second = n - 1;
        for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second], --second) {
        }
        if (sum1 >= mid && sum2 >= mid) {
            if (second >= first) {
                ok = true;
            } else {
                long total = 0L;
                if (second != -1) {
                    total += sum[second];
                }
                if (first != n) {
                    total += sum[n - 1] - sum[first - 1];
                }
                if (total >= mid) {
                    ok = true;
                }
            }
        }
        if (ok) {
            left = mid;
            continue;
        }
        right = mid;
    }
    return right;
}
public static Long func_8269b32792a34531b2f0f37ae70b49db(Integer q, Integer n, Integer r, Integer s, Integer p) {
    long[] a2 = new long[n.intValue()];
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * 1L * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
    }
    long[] sum = new long[n.intValue()];
    for (int i = 0; i < n; ++i) {
        sum[i] = a2[i] + (i == 0 ? 0L : sum[i - 1]);
    }
    long left = 0L;
    long right = 1000000000000000L;
    while (right - left > 1L) {
        int first;
        long sum2;
        long mid = (left + right) / 2L;
        boolean ok = false;
        long sum1 = 0L;
        for (first = 0; first != n && sum1 < mid; sum1 += a2[first], ++first) {
        }
        int second = n - 1;
        for (sum2 = 0L; second != -1 && sum2 < mid; sum2 += a2[second], --second) {
        }
        if (sum1 >= mid && sum2 >= mid) {
            if (second >= first) {
                ok = true;
            } else {
                long total = 0L;
                if (second != -1) {
                    total += sum[second];
                }
                if (first != n) {
                    total += sum[n - 1] - sum[first - 1];
                }
                if (total >= mid) {
                    ok = true;
                }
            }
        }
        if (ok) {
            left = mid;
            continue;
        }
        right = mid;
    }
    Locale.setDefault(Locale.US);
    return right;
}


****** Cluster 272 ******
public static Long func_c61160ed00354bb8b1c688a7c83ed550(Long p, Integer N, Long s, Long r, Long q) {
    long temp;
    long[] arr = new long[N.intValue()];
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index]) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index], ++index) {
    }
    return temp;
}
public static Long func_6f09427d6e6d4a99a008a3c49fc6ab86(Long p, Integer N, Long s, Long r, Long q) {
    long temp;
    long[] arr = new long[N.intValue()];
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index]) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index], ++index) {
    }
    return temp;
}


****** Cluster 273 ******
public static Long func_fd8f4777f4344d84b4a3bfb5220f9741(Long p, Integer N, Long s, Long r, Long q) {
    long temp;
    long[] arr = new long[N.intValue()];
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index]) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index], ++index) {
    }
    return sum;
}
public static Long func_eb3feb872bae48d7a94dabe5af4979a4(Long p, Integer N, Long s, Long r, Long q) {
    long[] arr = new long[N.intValue()];
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    return sum;
}
public static Long func_97a1675bef7c4c7ab7688fefa741e955(Long p, Integer N, Long s, Long r, Long q) {
    long[] arr = new long[N.intValue()];
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    return sum;
}
public static Long func_ee8b43ed27b14d32a3a6fb2116998ee8(Long p, Integer N, Long s, Long r, Long q) {
    long[] arr = new long[N.intValue()];
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    return sum;
}
public static Long func_ddd4cbb32a99464dae7c88fbad8ffcfb(Long p, Integer N, Long s, Long r, Long q) {
    long[] arr = new long[N.intValue()];
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    N.intValue();
    return sum;
}
public static Long func_e5cf26a44fb94ba599abaa79503b34b4(Long p, Integer N, Long s, Long r, Long q) {
    long[] arr = new long[N.intValue()];
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    N.intValue();
    return sum;
}
public static Long func_47adace5430b426cb279bf51428a9ea5(Long p, Integer N, Long s, Long r, Long q) {
    long[] arr = new long[N.intValue()];
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    N.intValue();
    return sum;
}
public static Long func_8a4b6a0ce45d4ff0818710d144c71bf5(Long p, Integer N, Long s, Long r, Long q) {
    long[] arr = new long[N.intValue()];
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index], ++index) {
    }
    return sum;
}
public static Long func_d01f3e6bd6f54bf3b3eb75e4fb6cb484(Long p, Integer N, Long s, Long r, Long q) {
    long[] arr = new long[N.intValue()];
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index], ++index) {
    }
    return sum;
}
public static Long func_11ebefff9b0a4ef9bffbed4156c9ef35(Long p, Integer N, Long s, Long r, Long q) {
    long[] arr = new long[N.intValue()];
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index], ++index) {
    }
    return sum;
}
public static Long func_fb5f893600f94ee28636052ccb394a98(Long p, Integer N, Long s, Long r, Long q) {
    long temp;
    long[] arr = new long[N.intValue()];
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index]) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index], ++index) {
    }
    return sum;
}


****** Cluster 274 ******
public static Integer func_88296c3f497c4755a70c8b1c0054fe5b(Long p, Integer N, Long s, Long r, Long q) {
    long temp;
    long[] arr = new long[N.intValue()];
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index]) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index], ++index) {
    }
    return index;
}
public static Integer func_8546fa3b635841139947ae92216c51f1(Long p, Integer N, Long s, Long r, Long q) {
    long temp;
    long[] arr = new long[N.intValue()];
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index]) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index], ++index) {
    }
    return index;
}


****** Cluster 275 ******
public static Integer func_86161356b128417c90fb1ec6ebf2c7aa(Long p, Integer N, Long s, Long r, Long q) {
    long temp;
    long[] arr = new long[N.intValue()];
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    int second = N - 1;
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index]) {
        first = index++;
    }
    index = first + 1;
    for (temp = 0L; temp < avg && index < N; temp += arr[index]) {
        second = index++;
    }
    return second;
}
public static Integer func_46f34ba311b24bb8acb5151c2c2ef843(Long p, Integer N, Long s, Long r, Long q) {
    long temp;
    long[] arr = new long[N.intValue()];
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    int second = N - 1;
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index]) {
        first = index++;
    }
    index = first + 1;
    for (temp = 0L; temp < avg && index < N; temp += arr[index]) {
        second = index++;
    }
    double res = 0.0;
    for (int i = Math.max((int) 0, (int) (first - 100)); i < Math.min(N, first + 100); ++i) {
        for (int j = Math.max((int) 0, (int) (second - 100)); j < Math.min(N, second + 100); ++j) {
            if (j <= i)
                continue;
            long a2 = dp[i + 1];
            long b = dp[j] - dp[i + 1];
            long c = dp[N] - dp[j];
            long left = sum - Math.max(a2, Math.max(b, c));
            res = Math.max(res, 1.0 * (double) left / (double) sum);
        }
    }
    return second;
}
public static Integer func_25cac6d6e96041839905b1560312f257(Long p, Integer N, Long s, Long r, Long q) {
    long temp;
    long[] arr = new long[N.intValue()];
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    int second = N - 1;
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index]) {
        first = index++;
    }
    index = first + 1;
    for (temp = 0L; temp < avg && index < N; temp += arr[index]) {
        second = index++;
    }
    return second;
}


****** Cluster 276 ******
public static Integer func_32d52e269bf04428a630e0759cf3269f(Long p, Integer N, Long s, Long r, Long q) {
    long temp;
    long[] arr = new long[N.intValue()];
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index]) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index], ++index) {
    }
    return first;
}
public static Integer func_6beda96e0b8a445aa0859e398f209e86(Long p, Integer N, Long s, Long r, Long q) {
    long[] arr = new long[N.intValue()];
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (long temp = 0L; temp < avg && index < N; temp += arr[index]) {
        first = index++;
    }
    return first;
}
public static Integer func_77f646746eb44f01ada4788a97616085(Long p, Integer N, Long s, Long r, Long q) {
    long[] arr = new long[N.intValue()];
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (long temp = 0L; temp < avg && index < N; temp += arr[index]) {
        first = index++;
    }
    return first;
}
public static Integer func_bb69e6bf1fc34cec8ba689f369c60fb9(Long p, Integer N, Long s, Long r, Long q) {
    long[] arr = new long[N.intValue()];
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (long temp = 0L; temp < avg && index < N; temp += arr[index]) {
        first = index++;
    }
    return first;
}
public static Integer func_c251c17f2446408bb87ead17b09dbae4(Long p, Integer N, Long s, Long r, Long q) {
    long temp;
    long[] arr = new long[N.intValue()];
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index]) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index], ++index) {
    }
    return first;
}


****** Cluster 277 ******
public static Long func_10cd872f0e95488586d5cf7d9204c923(Long p, Integer N, Long s, Long r, Long q) {
    long temp;
    long[] arr = new long[N.intValue()];
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index]) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index], ++index) {
    }
    return avg;
}
public static Long func_f08438ea95a44e8397245a747d231681(Long p, Integer N, Long s, Long r, Long q) {
    long[] arr = new long[N.intValue()];
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    return avg;
}
public static Long func_9c8341ddf09248ecb0b62551642ffbc7(Long p, Integer N, Long s, Long r, Long q) {
    long[] arr = new long[N.intValue()];
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    return avg;
}
public static Long func_da5c49b514c24ba7afd509d358de4ac6(Long p, Integer N, Long s, Long r, Long q) {
    long[] arr = new long[N.intValue()];
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    return avg;
}
public static Long func_0ef2099e7b9e4023883d20fe1e6400ec(Long p, Integer N, Long s, Long r, Long q) {
    long[] arr = new long[N.intValue()];
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    return avg;
}
public static Long func_6816f03a560d429ca67899ee4e82cf67(Long p, Integer N, Long s, Long r, Long q) {
    long[] arr = new long[N.intValue()];
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    return avg;
}
public static Long func_6549f71476f64046a24a036e2927bdec(Long p, Integer N, Long s, Long r, Long q) {
    long[] arr = new long[N.intValue()];
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index], ++index) {
    }
    return avg;
}
public static Long func_dbc65a52c0b24c82a3e47039c674874a(Long p, Integer N, Long s, Long r, Long q) {
    long[] arr = new long[N.intValue()];
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index], ++index) {
    }
    return avg;
}
public static Long func_92785e366c564d78b4863ee3f6a2a1f9(Long p, Integer N, Long s, Long r, Long q) {
    long[] arr = new long[N.intValue()];
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index], ++index) {
    }
    return avg;
}
public static Long func_998e903debe543dab9ef8e92eeea874b(Long p, Integer N, Long s, Long r, Long q) {
    long temp;
    long[] arr = new long[N.intValue()];
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index]) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index], ++index) {
    }
    return avg;
}


****** Cluster 278 ******
public static Long func_d36f7840c9bd4407918f27e7a1ca3265(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long temp;
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    int second = N - 1;
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    index = first + 1;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        second = index++;
    }
    double res = 0.0;
    for (int i = Math.max((int) 0, (int) (first - 100)); i < Math.min(N, first + 100); ++i) {
        for (int j = Math.max((int) 0, (int) (second - 100)); j < Math.min(N, second + 100); ++j) {
            if (j <= i)
                continue;
            long a2 = dp[i + 1];
            long b = dp[j] - dp[i + 1];
            long c = dp[N] - dp[j];
            long left = sum - Math.max(a2, Math.max(b, c));
            res = Math.max(res, 1.0 * (double) left / (double) sum);
        }
    }
    return sum;
}
public static Long func_132e0843be694029a34271cab69a3cd8(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    return sum;
}
public static Long func_d29716f33a8d4d00bbf919314a6d9873(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    return sum;
}
public static Long func_97c6caaa82304dbd8b8a922d6e8c5b35(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    return sum;
}
public static Long func_b01c56f0e5cc4fcd8a1d7c366fa29ed6(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    N.intValue();
    return sum;
}
public static Long func_49ebae11dc134299aa58afabf84c5511(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    N.intValue();
    return sum;
}
public static Long func_7bcac17d481c4aa08bdf0fa1d1fdb312(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    N.intValue();
    return sum;
}
public static Long func_ce1a2588391d484ea2598a92d462dbfd(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return sum;
}
public static Long func_0cd01a842433478bba8665bbe167acbc(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return sum;
}
public static Long func_3828ae36af444fab9d0ae43514f074c9(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return sum;
}
public static Long func_ea69be6ff63145a497dc8ea05c9638b0(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long temp;
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return sum;
}
public static Long func_a022d179cfd14981a9703c5d22ac9c24(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long temp;
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return sum;
}


****** Cluster 279 ******
public static Integer func_c70f810782b845a7b517686567c10e97(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long temp;
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    int second = N - 1;
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    index = first + 1;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        second = index++;
    }
    double res = 0.0;
    for (int i = Math.max((int) 0, (int) (first - 100)); i < Math.min(N, first + 100); ++i) {
        for (int j = Math.max((int) 0, (int) (second - 100)); j < Math.min(N, second + 100); ++j) {
            if (j <= i)
                continue;
            long a2 = dp[i + 1];
            long b = dp[j] - dp[i + 1];
            long c = dp[N] - dp[j];
            long left = sum - Math.max(a2, Math.max(b, c));
            res = Math.max(res, 1.0 * (double) left / (double) sum);
        }
    }
    return index;
}
public static Integer func_4d16e79c76f540259d3c3d212f5adab8(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long temp;
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return index;
}
public static Integer func_c147a1b013e345a78475655e1b0777b3(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long temp;
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return index;
}


****** Cluster 280 ******
public static Integer func_80a17347f44a45adba77993e55f173ef(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long temp;
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    int second = N - 1;
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    index = first + 1;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        second = index++;
    }
    double res = 0.0;
    for (int i = Math.max((int) 0, (int) (first - 100)); i < Math.min(N, first + 100); ++i) {
        for (int j = Math.max((int) 0, (int) (second - 100)); j < Math.min(N, second + 100); ++j) {
            if (j <= i)
                continue;
            long a2 = dp[i + 1];
            long b = dp[j] - dp[i + 1];
            long c = dp[N] - dp[j];
            long left = sum - Math.max(a2, Math.max(b, c));
            res = Math.max(res, 1.0 * (double) left / (double) sum);
        }
    }
    return first;
}
public static Integer func_0f27501c898a40cebed97c8ea26ff146(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (long temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    return first;
}
public static Integer func_41a7992fbf0940d4a46e9cac4297bdd9(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (long temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    return first;
}
public static Integer func_2cfb828b856546979a6adf532b475d2f(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (long temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    return first;
}
public static Integer func_b08657ca75d04a96881f45e46452da14(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long temp;
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return first;
}
public static Integer func_aa35f329dab343ac95bc3ff8d98d5db0(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long temp;
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return first;
}


****** Cluster 281 ******
public static Long func_04c1b4646243454c8012637b26d45a1d$53cb0cf2(Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long B, Long dif, Long bet) {
    Integer.valueOf(numtie + 1);
    Long[] arrlong = v;
    int n = i;
    arrlong[n] = arrlong[n] + dif;
    initadd = initadd + dif;
    Long.valueOf(B - bet - waste);
    return initadd;
}
public static Long func_48dfb0ee61de4bb489b4216cbf68ce41$53cb0cf2(Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long B, Long dif, Long bet) {
    bet = bet + (long) i.intValue() * dif;
    Integer.valueOf(numtie + 1);
    Long[] arrlong = v;
    int n = i;
    arrlong[n] = arrlong[n] + dif;
    initadd = initadd + dif;
    Long.valueOf(B - bet - waste);
    return initadd;
}
public static Long func_7dd1dcaae1d7427bb6b6f4e1f8a47e8e$53cb0cf2(Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long B, Long dif, Long bet) {
    numtie = numtie + 1;
    Long[] arrlong = v;
    int n = i;
    arrlong[n] = arrlong[n] + dif;
    initadd = initadd + dif;
    Long tp = B - bet - waste;
    Long.valueOf(tp / (long) (i + numtie));
    return initadd;
}
public static Long func_cb461a94a39349389b22b1cf2bbadf40$53cb0cf2(Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long B, Long dif, Long bet) {
    waste = waste + (long) numtie.intValue() * dif;
    bet = bet + (long) i.intValue() * dif;
    Integer.valueOf(numtie + 1);
    Long[] arrlong = v;
    int n = i;
    arrlong[n] = arrlong[n] + dif;
    initadd = initadd + dif;
    Long.valueOf(B - bet - waste);
    return initadd;
}
public static Long func_62b104a9678e437a94543d35a34efb8d$53cb0cf2(Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long B, Long dif, Long bet) {
    bet = bet + (long) i.intValue() * dif;
    numtie = numtie + 1;
    Long[] arrlong = v;
    int n = i;
    arrlong[n] = arrlong[n] + dif;
    initadd = initadd + dif;
    Long tp = B - bet - waste;
    Long.valueOf(tp / (long) (i + numtie));
    return initadd;
}
public static Long func_6bfecdfd3bbc4b2ca82285a86eef87c2$53cb0cf2(Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long B, Long dif, Long bet) {
    waste = waste + (long) numtie.intValue() * dif;
    bet = bet + (long) i.intValue() * dif;
    numtie = numtie + 1;
    Long[] arrlong = v;
    int n = i;
    arrlong[n] = arrlong[n] + dif;
    initadd = initadd + dif;
    Long tp = B - bet - waste;
    Long.valueOf(tp / (long) (i + numtie));
    return initadd;
}


****** Cluster 282 ******
public static Long func_b04629a1441d40bcbb754b6c4e950605(Integer numtie, Long[] v, Integer i, Long waste, Long bet) {
    long dif = v[i + numtie] - v[i];
    waste = waste + (long) numtie.intValue() * dif;
    Long.valueOf(bet + (long) i.intValue() * dif);
    Integer.valueOf(numtie + 1);
    Long[] arrlong = v;
    int n = i;
    arrlong[n] = arrlong[n] + dif;
    return waste;
}
public static Long func_2354dd29a049454cbe5d3d47a657a819(Integer numtie, Long[] v, Integer i, Long waste, Long bet) {
    long dif = v[i + numtie] - v[i];
    waste = waste + (long) numtie.intValue() * dif;
    Long.valueOf(bet + (long) i.intValue() * dif);
    return waste;
}
public static Long func_c6b28cb446a9457dbe5b497e27691194(Integer numtie, Long[] v, Integer i, Long waste, Long bet) {
    long dif = v[i + numtie] - v[i];
    waste = waste + (long) numtie.intValue() * dif;
    Long.valueOf(bet + (long) i.intValue() * dif);
    Integer.valueOf(numtie + 1);
    return waste;
}


****** Cluster 283 ******
public static Long func_4ba2186682b24497b31ec2f59cf687c0(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long temp;
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    int second = N - 1;
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    index = first + 1;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        second = index++;
    }
    double res = 0.0;
    for (int i = Math.max((int) 0, (int) (first - 100)); i < Math.min(N, first + 100); ++i) {
        for (int j = Math.max((int) 0, (int) (second - 100)); j < Math.min(N, second + 100); ++j) {
            if (j <= i)
                continue;
            long a2 = dp[i + 1];
            long b = dp[j] - dp[i + 1];
            long c = dp[N] - dp[j];
            long left = sum - Math.max(a2, Math.max(b, c));
            res = Math.max(res, 1.0 * (double) left / (double) sum);
        }
    }
    return avg;
}
public static Long func_8695c1e17a734faaba737de5118fc577(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    return avg;
}
public static Long func_fadb006f4e48486bb16e505b614981c5(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    return avg;
}
public static Long func_6f03b87a76844ccbb22264267c49ef72(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    return avg;
}
public static Long func_149b857aa2574ae18417eb95b9d0fba5(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    return avg;
}
public static Long func_239a00e6c7d24810b7bf67d42ca5b0c4(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    return avg;
}
public static Long func_ac8034e09b8c4217ae76e9db5932ce37(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return avg;
}
public static Long func_5d47dc8b384b41e2a7340404f2a07686(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return avg;
}
public static Long func_08ee308e64334ed8864dbf6b3124afca(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return avg;
}
public static Long func_f27c147498404c7e897b572e715ee7fe(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long temp;
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return avg;
}
public static Long func_ae5bb0211a9e4623b65ff54594892496(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long temp;
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return avg;
}


****** Cluster 284 ******
public static Integer func_a196205f4182426bbd653b957c3c438c(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long temp;
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    int second = N - 1;
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    index = first + 1;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        second = index++;
    }
    double res = 0.0;
    for (int i = Math.max((int) 0, (int) (first - 100)); i < Math.min(N, first + 100); ++i) {
        for (int j = Math.max((int) 0, (int) (second - 100)); j < Math.min(N, second + 100); ++j) {
            if (j <= i)
                continue;
            long a2 = dp[i + 1];
            long b = dp[j] - dp[i + 1];
            long c = dp[N] - dp[j];
            long left = sum - Math.max(a2, Math.max(b, c));
            res = Math.max(res, 1.0 * (double) left / (double) sum);
        }
    }
    return second;
}
public static Integer func_4c286d0954bc4a69a3bb4ec6e7355ab1(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long temp;
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    int second = N - 1;
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    index = first + 1;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        second = index++;
    }
    return second;
}
public static Integer func_a357d1c072c14da0ae2cc75ab7e17f4e(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long temp;
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    int second = N - 1;
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    index = first + 1;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        second = index++;
    }
    return second;
}


****** Cluster 285 ******
public static Long func_fd9de7273e734f4cb7ebaaa7b1b78a2a(Integer numtie, Long[] v, Integer i, Long waste, Long bet) {
    long dif = v[i + numtie] - v[i];
    Long.valueOf(waste + (long) numtie.intValue() * dif);
    bet = bet + (long) i.intValue() * dif;
    Integer.valueOf(numtie + 1);
    Long[] arrlong = v;
    int n = i;
    arrlong[n] = arrlong[n] + dif;
    return bet;
}
public static Long func_e0a498e958044d42ad00228a513b20d1(Integer numtie, Long[] v, Integer i, Long waste, Long bet) {
    long dif = v[i + numtie] - v[i];
    Long.valueOf(waste + (long) numtie.intValue() * dif);
    bet = bet + (long) i.intValue() * dif;
    return bet;
}
public static Long func_be906380626740beb97cb37df60c1569(Integer numtie, Long[] v, Integer i, Long waste, Long bet) {
    long dif = v[i + numtie] - v[i];
    Long.valueOf(waste + (long) numtie.intValue() * dif);
    bet = bet + (long) i.intValue() * dif;
    Integer.valueOf(numtie + 1);
    return bet;
}


****** Cluster 286 ******
public static Long func_00523dde5d8a410db1bf4fe86126fb5f(Integer numtie, Long[] v, Integer i, Long waste, Long bet) {
    long dif = v[i + numtie] - v[i];
    Long.valueOf(waste + (long) numtie.intValue() * dif);
    Long.valueOf(bet + (long) i.intValue() * dif);
    Integer.valueOf(numtie + 1);
    Long[] arrlong = v;
    int n = i;
    arrlong[n] = arrlong[n] + dif;
    return dif;
}
public static Long func_4787deb2dc7f4d3d99c7140024a99318(Integer numtie, Long[] v, Integer i, Long waste, Long bet) {
    long dif = v[i + numtie] - v[i];
    Long.valueOf(waste + (long) numtie.intValue() * dif);
    Long.valueOf(bet + (long) i.intValue() * dif);
    return dif;
}
public static Long func_aefaebb3c25b4b83894cedcaae448f13(Integer numtie, Long[] v, Integer i, Long waste, Long bet) {
    long dif = v[i + numtie] - v[i];
    Long.valueOf(waste + (long) numtie.intValue() * dif);
    Long.valueOf(bet + (long) i.intValue() * dif);
    Integer.valueOf(numtie + 1);
    return dif;
}


****** Cluster 287 ******
public static Long func_89747020327445e3aa86432db939f2c1$53cb0cf2(Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long B, Long dif, Long bet) {
    bet = bet + (long) i.intValue() * dif;
    Integer.valueOf(numtie + 1);
    Long[] arrlong = v;
    int n = i;
    arrlong[n] = arrlong[n] + dif;
    Long.valueOf(initadd + dif);
    Long.valueOf(B - bet - waste);
    return bet;
}
public static Long func_f7557c17589f40339e0fce3df3e75869$53cb0cf2(Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long B, Long dif, Long bet) {
    waste = waste + (long) numtie.intValue() * dif;
    bet = bet + (long) i.intValue() * dif;
    Integer.valueOf(numtie + 1);
    Long[] arrlong = v;
    int n = i;
    arrlong[n] = arrlong[n] + dif;
    Long.valueOf(initadd + dif);
    Long.valueOf(B - bet - waste);
    return bet;
}
public static Long func_b3f9dcc6fd6f49cf8e75cf633070fbdf$53cb0cf2(Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long B, Long dif, Long bet) {
    bet = bet + (long) i.intValue() * dif;
    numtie = numtie + 1;
    Long[] arrlong = v;
    int n = i;
    arrlong[n] = arrlong[n] + dif;
    Long.valueOf(initadd + dif);
    Long tp = B - bet - waste;
    Long.valueOf(tp / (long) (i + numtie));
    return bet;
}
public static Long func_d5c8026fc4b34044bc1a76a6fa9eebd7$53cb0cf2(Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long B, Long dif, Long bet) {
    waste = waste + (long) numtie.intValue() * dif;
    bet = bet + (long) i.intValue() * dif;
    numtie = numtie + 1;
    Long[] arrlong = v;
    int n = i;
    arrlong[n] = arrlong[n] + dif;
    Long.valueOf(initadd + dif);
    Long tp = B - bet - waste;
    Long.valueOf(tp / (long) (i + numtie));
    return bet;
}


****** Cluster 288 ******
public static Long func_26a8525ee33346929f1daf44d1501845(Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long bet) {
    long dif = v[i + numtie] - v[i];
    Long.valueOf(waste + (long) numtie.intValue() * dif);
    Long.valueOf(bet + (long) i.intValue() * dif);
    Integer.valueOf(numtie + 1);
    Long[] arrlong = v;
    int n = i;
    arrlong[n] = arrlong[n] + dif;
    initadd = initadd + dif;
    return initadd;
}
public static Long func_fe9cd15b891d46aa8b00733178fa9522(Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long bet) {
    long dif = v[i + numtie] - v[i];
    waste = waste + (long) numtie.intValue() * dif;
    Long.valueOf(bet + (long) i.intValue() * dif);
    Integer.valueOf(numtie + 1);
    Long[] arrlong = v;
    int n = i;
    arrlong[n] = arrlong[n] + dif;
    Long.valueOf(initadd + dif);
    return waste;
}
public static Long func_6bbfd9ceae7d4c8c8da6c7614e18073e(Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long bet) {
    long dif = v[i + numtie] - v[i];
    Long.valueOf(waste + (long) numtie.intValue() * dif);
    Long.valueOf(bet + (long) i.intValue() * dif);
    Integer.valueOf(numtie + 1);
    Long[] arrlong = v;
    int n = i;
    arrlong[n] = arrlong[n] + dif;
    Long.valueOf(initadd + dif);
    return dif;
}
public static Long func_03c321dd9c624654a83c4406d9262a1a(Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long bet) {
    long dif = v[i + numtie] - v[i];
    Long.valueOf(waste + (long) numtie.intValue() * dif);
    bet = bet + (long) i.intValue() * dif;
    Integer.valueOf(numtie + 1);
    Long[] arrlong = v;
    int n = i;
    arrlong[n] = arrlong[n] + dif;
    Long.valueOf(initadd + dif);
    return bet;
}


****** Cluster 289 ******
public static Long func_05da9e507d464f5491eddd8664802d8a$53cb0cf2(Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long B, Long dif, Long bet) {
    waste = waste + (long) numtie.intValue() * dif;
    bet = bet + (long) i.intValue() * dif;
    Integer.valueOf(numtie + 1);
    Long[] arrlong = v;
    int n = i;
    arrlong[n] = arrlong[n] + dif;
    Long.valueOf(initadd + dif);
    Long.valueOf(B - bet - waste);
    return waste;
}
public static Long func_275496d93dbb4351a13cc43a3fec89c1$53cb0cf2(Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long B, Long dif, Long bet) {
    waste = waste + (long) numtie.intValue() * dif;
    bet = bet + (long) i.intValue() * dif;
    numtie = numtie + 1;
    Long[] arrlong = v;
    int n = i;
    arrlong[n] = arrlong[n] + dif;
    Long.valueOf(initadd + dif);
    Long tp = B - bet - waste;
    Long.valueOf(tp / (long) (i + numtie));
    return waste;
}


****** Cluster 290 ******
public static Long func_79ad209f1c4749f182fae72b3416c2ed(Integer numtie, Integer i, Long waste, Long B, Long bet) {
    long tp = B - bet - waste;
    return tp /= (long) (i + numtie);
}
public static Long func_4c8b85f088134c05afe9eebb2f00aa7d$23192b1c(Integer numtie, Integer i, Long waste, Long B, Long bet) {
    Long tp = B - bet - waste;
    tp = tp / (long) (i + numtie);
    return tp;
}


****** Cluster 291 ******
public static Long func_1edbf1552a8544cebbb1d47d29ece294(Long tp, Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long B, Long bet) {
    tp = tp / (long) (i + numtie);
    while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
        long dif = v[i + numtie] - v[i];
        waste = waste + (long) numtie.intValue() * dif;
        bet = bet + (long) i.intValue() * dif;
        numtie = numtie + 1;
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + dif;
        initadd = initadd + dif;
        tp = B - bet - waste;
        tp = tp / (long) (i + numtie);
    }
    return tp;
}
public static Long func_36140888a95948f5a60204a5fd308129(Long tp, Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long B, Long bet) {
    tp = tp / (long) (i + numtie);
    while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
        long dif = v[i + numtie] - v[i];
        waste = waste + (long) numtie.intValue() * dif;
        bet = bet + (long) i.intValue() * dif;
        numtie = numtie + 1;
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + dif;
        initadd = initadd + dif;
        tp = B - bet - waste;
        tp = tp / (long) (i + numtie);
    }
    Long.valueOf(waste + (long) numtie.intValue() * tp);
    return tp;
}
public static Long func_1072fa41964b4cc9ba8b19fa90b99ce2(Long tp, Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long B, Long bet) {
    tp = tp / (long) (i + numtie);
    while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
        long dif = v[i + numtie] - v[i];
        waste = waste + (long) numtie.intValue() * dif;
        bet = bet + (long) i.intValue() * dif;
        numtie = numtie + 1;
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + dif;
        initadd = initadd + dif;
        tp = B - bet - waste;
        tp = tp / (long) (i + numtie);
    }
    Long.valueOf(waste + (long) numtie.intValue() * tp);
    Long.valueOf(bet + (long) i.intValue() * tp);
    return tp;
}


****** Cluster 292 ******
public static Long func_dcec1c53dade4ee5abd65203b64ca0c8(Long tp, Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long B, Long bet) {
    tp = tp / (long) (i + numtie);
    while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
        long dif = v[i + numtie] - v[i];
        waste = waste + (long) numtie.intValue() * dif;
        bet = bet + (long) i.intValue() * dif;
        numtie = numtie + 1;
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + dif;
        initadd = initadd + dif;
        tp = B - bet - waste;
        tp = tp / (long) (i + numtie);
    }
    return initadd;
}
public static Long func_801f546b3f304ef59b0e0594313df600(Long tp, Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long B, Long bet) {
    while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
        long dif = v[i + numtie] - v[i];
        waste = waste + (long) numtie.intValue() * dif;
        bet = bet + (long) i.intValue() * dif;
        numtie = numtie + 1;
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + dif;
        initadd = initadd + dif;
        tp = B - bet - waste;
        tp = tp / (long) (i + numtie);
    }
    Long.valueOf(waste + (long) numtie.intValue() * tp);
    return initadd;
}
public static Long func_766255fea9214638b22b570d8ce60dac(Long tp, Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long B, Long bet) {
    tp = tp / (long) (i + numtie);
    while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
        long dif = v[i + numtie] - v[i];
        waste = waste + (long) numtie.intValue() * dif;
        bet = bet + (long) i.intValue() * dif;
        numtie = numtie + 1;
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + dif;
        initadd = initadd + dif;
        tp = B - bet - waste;
        tp = tp / (long) (i + numtie);
    }
    Long.valueOf(waste + (long) numtie.intValue() * tp);
    return initadd;
}
public static Long func_0db9f3f5c9d04adb98221580ccfa7fd5(Long tp, Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long B, Long bet) {
    while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
        long dif = v[i + numtie] - v[i];
        waste = waste + (long) numtie.intValue() * dif;
        bet = bet + (long) i.intValue() * dif;
        numtie = numtie + 1;
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + dif;
        initadd = initadd + dif;
        tp = B - bet - waste;
        tp = tp / (long) (i + numtie);
    }
    Long.valueOf(waste + (long) numtie.intValue() * tp);
    Long.valueOf(bet + (long) i.intValue() * tp);
    return initadd;
}
public static Long func_3514b671fefc40b2bf16d0f36c7d5480(Long tp, Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long B, Long bet) {
    tp = tp / (long) (i + numtie);
    while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
        long dif = v[i + numtie] - v[i];
        waste = waste + (long) numtie.intValue() * dif;
        bet = bet + (long) i.intValue() * dif;
        numtie = numtie + 1;
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + dif;
        initadd = initadd + dif;
        tp = B - bet - waste;
        tp = tp / (long) (i + numtie);
    }
    Long.valueOf(waste + (long) numtie.intValue() * tp);
    Long.valueOf(bet + (long) i.intValue() * tp);
    return initadd;
}


****** Cluster 293 ******
public static Long func_58bbea459d1d45c9a25cf8a4fa8a12ad(Long tp, Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long B, Long bet) {
    tp = tp / (long) (i + numtie);
    while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
        long dif = v[i + numtie] - v[i];
        waste = waste + (long) numtie.intValue() * dif;
        bet = bet + (long) i.intValue() * dif;
        numtie = numtie + 1;
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + dif;
        initadd = initadd + dif;
        tp = B - bet - waste;
        tp = tp / (long) (i + numtie);
    }
    return bet;
}
public static Long func_07b6d94c573d4d57a058a90273cf228c(Long tp, Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long B, Long bet) {
    while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
        long dif = v[i + numtie] - v[i];
        waste = waste + (long) numtie.intValue() * dif;
        bet = bet + (long) i.intValue() * dif;
        numtie = numtie + 1;
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + dif;
        initadd = initadd + dif;
        tp = B - bet - waste;
        tp = tp / (long) (i + numtie);
    }
    Long.valueOf(waste + (long) numtie.intValue() * tp);
    return bet;
}
public static Long func_51b57fe462a445f687ff45b6108e2a06(Long tp, Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long B, Long bet) {
    tp = tp / (long) (i + numtie);
    while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
        long dif = v[i + numtie] - v[i];
        waste = waste + (long) numtie.intValue() * dif;
        bet = bet + (long) i.intValue() * dif;
        numtie = numtie + 1;
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + dif;
        initadd = initadd + dif;
        tp = B - bet - waste;
        tp = tp / (long) (i + numtie);
    }
    Long.valueOf(waste + (long) numtie.intValue() * tp);
    return bet;
}


****** Cluster 294 ******
public static Long func_8d05718b97c14cb8bfda6fdc61fced74(Long tp, Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long B, Long bet) {
    while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
        long dif = v[i + numtie] - v[i];
        waste = waste + (long) numtie.intValue() * dif;
        bet = bet + (long) i.intValue() * dif;
        numtie = numtie + 1;
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + dif;
        initadd = initadd + dif;
        tp = B - bet - waste;
        tp = tp / (long) (i + numtie);
    }
    Long.valueOf(waste + (long) numtie.intValue() * tp);
    return tp;
}
public static Long func_d1e2cf9e209d4f37a6b001e95400a645(Long tp, Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long B, Long bet) {
    while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
        long dif = v[i + numtie] - v[i];
        waste = waste + (long) numtie.intValue() * dif;
        bet = bet + (long) i.intValue() * dif;
        numtie = numtie + 1;
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + dif;
        initadd = initadd + dif;
        tp = B - bet - waste;
        tp = tp / (long) (i + numtie);
    }
    Long.valueOf(waste + (long) numtie.intValue() * tp);
    Long.valueOf(bet + (long) i.intValue() * tp);
    return tp;
}


****** Cluster 295 ******
public static Long func_56460f08649c40b4bc4d9c302f223293(Long tp, Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long B, Long bet) {
    while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
        long dif = v[i + numtie] - v[i];
        waste = waste + (long) numtie.intValue() * dif;
        bet = bet + (long) i.intValue() * dif;
        numtie = numtie + 1;
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + dif;
        initadd = initadd + dif;
        tp = B - bet - waste;
        tp = tp / (long) (i + numtie);
    }
    waste = waste + (long) numtie.intValue() * tp;
    return waste;
}
public static Long func_39957d44187a43d68afdba56bc595f25(Long tp, Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long B, Long bet) {
    while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
        long dif = v[i + numtie] - v[i];
        waste = waste + (long) numtie.intValue() * dif;
        bet = bet + (long) i.intValue() * dif;
        numtie = numtie + 1;
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + dif;
        initadd = initadd + dif;
        tp = B - bet - waste;
        tp = tp / (long) (i + numtie);
    }
    waste = waste + (long) numtie.intValue() * tp;
    Long.valueOf(bet + (long) i.intValue() * tp);
    return waste;
}


****** Cluster 296 ******
public static Long func_7c38c70af1ab460ca3a065824eefb051(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    return sum;
}
public static Long func_ff6f63e4ec0a47b599f97b72828bfe39(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    return sum;
}
public static Long func_508289b27cdf4ed19cdecf8bf071d3a2(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    return sum;
}
public static Long func_b146eae16ce34be8b9abae0c2e064ab5(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    N.intValue();
    return sum;
}
public static Long func_205dc7cf69ce41fe95b39cfb4097d991(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    N.intValue();
    return sum;
}
public static Long func_1ccc7f773fb444fabee5bfef0997b2c6(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    N.intValue();
    return sum;
}
public static Long func_450eacb1d5444774aa7ddeac0c75d6e6(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return sum;
}
public static Long func_8cf2e11b5ac34b33b05181eca302f030(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return sum;
}
public static Long func_a3165120c2614566801492a4f965bd6c(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return sum;
}
public static Long func_c603160708b5469194dafe092cf2faaa(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    long temp;
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return sum;
}
public static Long func_415a2954d5c34aa2a76036a1ecb6a74f(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    long temp;
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return sum;
}
public static Long func_a6951c2743ae446d8b125723daaefac7(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    long temp;
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    int second = N - 1;
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    index = first + 1;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        second = index++;
    }
    double res = 0.0;
    for (int i = Math.max((int) 0, (int) (first - 100)); i < Math.min(N, first + 100); ++i) {
        for (int j = Math.max((int) 0, (int) (second - 100)); j < Math.min(N, second + 100); ++j) {
            if (j <= i)
                continue;
            long a2 = dp[i + 1];
            long b = dp[j] - dp[i + 1];
            long c = dp[N] - dp[j];
            long left = sum - Math.max(a2, Math.max(b, c));
            res = Math.max(res, 1.0 * (double) left / (double) sum);
        }
    }
    return sum;
}


****** Cluster 297 ******
public static Long func_37d7adf97312425a9fd1544bbfd232c5(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    sum.longValue();
    return sum;
}
public static Long func_1388bd0833b742028f8beb6f027dae65(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    sum.longValue();
    return sum;
}
public static Long func_d34245e79f7b469b9bf61017f46da3b5(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    sum.longValue();
    N.intValue();
    return sum;
}
public static Long func_7d639f19e8f24a349dafcfe9c37c8dd3(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    sum.longValue();
    N.intValue();
    return sum;
}
public static Long func_a09230e4ce8842fb87a565c13d24a22f(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    sum.longValue();
    N.intValue();
    return sum;
}
public static Long func_c2e5de3091cf450785b447ec33147701(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return sum;
}
public static Long func_67b423f7b3284ff4a782280e83704fc0(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return sum;
}
public static Long func_b2cdfc52901b432291f8155b977f8c95(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return sum;
}
public static Long func_79c9eb00223e4be4af632e131571eb06(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    long temp;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return sum;
}
public static Long func_b3140b77d7fd4163aaf962fe0ecdce21(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    long temp;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return sum;
}
public static Long func_457ef5dd8f7d430e9160ef4aba84a7de(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    long temp;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    int second = N - 1;
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    index = first + 1;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        second = index++;
    }
    double res = 0.0;
    for (int i = Math.max((int) 0, (int) (first - 100)); i < Math.min(N, first + 100); ++i) {
        for (int j = Math.max((int) 0, (int) (second - 100)); j < Math.min(N, second + 100); ++j) {
            if (j <= i)
                continue;
            long a2 = dp[i + 1];
            long b = dp[j] - dp[i + 1];
            long c = dp[N] - dp[j];
            long left = sum - Math.max(a2, Math.max(b, c));
            res = Math.max(res, 1.0 * (double) left / (double) sum.longValue());
        }
    }
    return sum;
}


****** Cluster 298 ******
public static Long func_203d3ac53c004d1fb613e197df71873e(Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long B, Long bet) {
    long tp = B - bet - waste;
    tp /= (long) (i + numtie);
    while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
        long dif = v[i + numtie] - v[i];
        waste = waste + (long) numtie.intValue() * dif;
        bet = bet + (long) i.intValue() * dif;
        numtie = numtie + 1;
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + dif;
        initadd = initadd + dif;
        tp = B - bet - waste;
        tp /= (long) (i + numtie);
    }
    return initadd;
}
public static Long func_1def3e190c164e5ca4396b7ac54cd144(Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long B, Long bet) {
    long tp = B - bet - waste;
    tp /= (long) (i + numtie);
    while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
        long dif = v[i + numtie] - v[i];
        waste = waste + (long) numtie.intValue() * dif;
        bet = bet + (long) i.intValue() * dif;
        numtie = numtie + 1;
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + dif;
        initadd = initadd + dif;
        tp = B - bet - waste;
        tp /= (long) (i + numtie);
    }
    Long.valueOf(waste + (long) numtie.intValue() * tp);
    return initadd;
}
public static Long func_35c63fd8e9124723991c0007ca953c87(Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long B, Long bet) {
    long tp = B - bet - waste;
    tp /= (long) (i + numtie);
    while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
        long dif = v[i + numtie] - v[i];
        waste = waste + (long) numtie.intValue() * dif;
        bet = bet + (long) i.intValue() * dif;
        numtie = numtie + 1;
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + dif;
        initadd = initadd + dif;
        tp = B - bet - waste;
        tp /= (long) (i + numtie);
    }
    Long.valueOf(waste + (long) numtie.intValue() * tp);
    Long.valueOf(bet + (long) i.intValue() * tp);
    return initadd;
}


****** Cluster 299 ******
public static Long func_705d86ec77f0445080d22c5ccc760bfb(Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long B, Long bet) {
    long tp = B - bet - waste;
    tp /= (long) (i + numtie);
    while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
        long dif = v[i + numtie] - v[i];
        waste = waste + (long) numtie.intValue() * dif;
        bet = bet + (long) i.intValue() * dif;
        numtie = numtie + 1;
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + dif;
        initadd = initadd + dif;
        tp = B - bet - waste;
        tp /= (long) (i + numtie);
    }
    return tp;
}
public static Long func_1b0f4bed4ba34af4bd737ae3edb9db6c(Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long B, Long bet) {
    long tp = B - bet - waste;
    tp /= (long) (i + numtie);
    while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
        long dif = v[i + numtie] - v[i];
        waste = waste + (long) numtie.intValue() * dif;
        bet = bet + (long) i.intValue() * dif;
        numtie = numtie + 1;
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + dif;
        initadd = initadd + dif;
        tp = B - bet - waste;
        tp /= (long) (i + numtie);
    }
    Long.valueOf(waste + (long) numtie.intValue() * tp);
    return tp;
}
public static Long func_1181493f58c4454eb6ca5f87a70bb2a7(Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long B, Long bet) {
    long tp = B - bet - waste;
    tp /= (long) (i + numtie);
    while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
        long dif = v[i + numtie] - v[i];
        waste = waste + (long) numtie.intValue() * dif;
        bet = bet + (long) i.intValue() * dif;
        numtie = numtie + 1;
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + dif;
        initadd = initadd + dif;
        tp = B - bet - waste;
        tp /= (long) (i + numtie);
    }
    Long.valueOf(waste + (long) numtie.intValue() * tp);
    Long.valueOf(bet + (long) i.intValue() * tp);
    return tp;
}


****** Cluster 300 ******
public static Long func_3a01879e621046e5baba9e966af43db1(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    return avg;
}
public static Long func_2827c95d963f4bb98e50e4b9953fa673(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    return avg;
}
public static Long func_76e442e131994d9c9434631d8676a41c(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    return avg;
}
public static Long func_2432ca7b8119401fa9a9535bd62b5037(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    return avg;
}
public static Long func_dca913c0501f46b79fe9e6a4e75c5b6a(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    return avg;
}
public static Long func_6c7ed111586446e6b9240b7be51cbd5e(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return avg;
}
public static Long func_0d2417edbbd14fecb479243a6d1c5ed8(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return avg;
}
public static Long func_29a9a8934fd640d2bcf3af199838c738(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return avg;
}
public static Long func_766c09519f3a415095ce99780328d6bf(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    long temp;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return avg;
}
public static Long func_fbe5d33bb31343ca8d1f494445fcc88b(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    long temp;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return avg;
}
public static Long func_a464620bc0d94f70854ee73cd9f23a9d(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    long temp;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    int second = N - 1;
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    index = first + 1;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        second = index++;
    }
    double res = 0.0;
    for (int i = Math.max((int) 0, (int) (first - 100)); i < Math.min(N, first + 100); ++i) {
        for (int j = Math.max((int) 0, (int) (second - 100)); j < Math.min(N, second + 100); ++j) {
            if (j <= i)
                continue;
            long a2 = dp[i + 1];
            long b = dp[j] - dp[i + 1];
            long c = dp[N] - dp[j];
            long left = sum - Math.max(a2, Math.max(b, c));
            res = Math.max(res, 1.0 * (double) left / (double) sum.longValue());
        }
    }
    return avg;
}


****** Cluster 301 ******
public static Long func_2f4f0d4f2ef047de87a2860c304d7873(Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long B, Long bet) {
    long tp = B - bet - waste;
    tp /= (long) (i + numtie);
    while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
        long dif = v[i + numtie] - v[i];
        waste = waste + (long) numtie.intValue() * dif;
        bet = bet + (long) i.intValue() * dif;
        numtie = numtie + 1;
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + dif;
        initadd = initadd + dif;
        tp = B - bet - waste;
        tp /= (long) (i + numtie);
    }
    return bet;
}
public static Long func_3b0728093aa3421a8d315085fea552d6(Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long B, Long bet) {
    long tp = B - bet - waste;
    tp /= (long) (i + numtie);
    while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
        long dif = v[i + numtie] - v[i];
        waste = waste + (long) numtie.intValue() * dif;
        bet = bet + (long) i.intValue() * dif;
        numtie = numtie + 1;
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + dif;
        initadd = initadd + dif;
        tp = B - bet - waste;
        tp /= (long) (i + numtie);
    }
    Long.valueOf(waste + (long) numtie.intValue() * tp);
    return bet;
}


****** Cluster 302 ******
public static Long func_137605793fd14fb88cdea401f2fc1a9c(Long tp, Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long B, Long bet) {
    tp = tp / (long) (i + numtie);
    while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
        long dif = v[i + numtie] - v[i];
        waste = waste + (long) numtie.intValue() * dif;
        bet = bet + (long) i.intValue() * dif;
        numtie = numtie + 1;
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + dif;
        initadd = initadd + dif;
        tp = B - bet - waste;
        tp = tp / (long) (i + numtie);
    }
    waste = waste + (long) numtie.intValue() * tp;
    return waste;
}
public static Long func_cf83d2fc4cf94b00994a67a440b8335f(Long tp, Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long B, Long bet) {
    tp = tp / (long) (i + numtie);
    while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
        long dif = v[i + numtie] - v[i];
        waste = waste + (long) numtie.intValue() * dif;
        bet = bet + (long) i.intValue() * dif;
        numtie = numtie + 1;
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + dif;
        initadd = initadd + dif;
        tp = B - bet - waste;
        tp = tp / (long) (i + numtie);
    }
    waste = waste + (long) numtie.intValue() * tp;
    Long.valueOf(bet + (long) i.intValue() * tp);
    return waste;
}


****** Cluster 303 ******
public static Long func_8d3f5ef54f984144a699423e13a7e8af$1fbf36b8(Long[] arr, Long temp, Integer N, Integer first, Long avg) {
    Integer index = first + 1;
    while (temp < avg && index < N) {
        temp = temp + arr[index];
        index = index + 1;
    }
    return temp;
}
public static Long func_e036844b856b4e5ca40e1b913de54f48$1fbf36b8(Long[] arr, Long temp, Integer N, Integer first, Long avg) {
    Integer index = first + 1;
    while (temp < avg && index < N) {
        temp = temp + arr[index];
        index = index + 1;
    }
    return temp;
}


****** Cluster 304 ******
public static Integer func_743f44c92b094abd9303889043bc08a5$a6d5aa4(Long[] arr, Long temp, Integer N, Integer first, Long avg) {
    Integer index = first + 1;
    while (temp < avg && index < N) {
        temp = temp + arr[index];
        index = index + 1;
    }
    return index;
}
public static Integer func_809fe9a5769b49219cb98c8a21adc611$a6d5aa4(Long[] arr, Long temp, Integer N, Integer first, Long avg) {
    Integer index = first + 1;
    while (temp < avg && index < N) {
        temp = temp + arr[index];
        index = index + 1;
    }
    return index;
}


****** Cluster 305 ******
public static Integer func_3084a22ff6d74e3c8e75887263f08383$a6d5aa4(Long[] arr, Long temp, Integer N, Integer first, Integer second, Long avg) {
    Integer index = first + 1;
    while (temp < avg && index < N) {
        temp = temp + arr[index];
        second = index;
        index = index + 1;
    }
    return second;
}
public static Integer func_055c6415d87e4e1eababd081b2d7568a$a6d5aa4(Long[] arr, Long temp, Integer N, Integer first, Integer second, Long avg) {
    Integer index = first + 1;
    while (temp < avg && index < N) {
        temp = temp + arr[index];
        second = index;
        index = index + 1;
    }
    return second;
}


****** Cluster 306 ******
public static Long func_e993403b6073467f949f0fa5e903665b(Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long B, Long bet) {
    long tp = B - bet - waste;
    tp /= (long) (i + numtie);
    while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
        long dif = v[i + numtie] - v[i];
        waste = waste + (long) numtie.intValue() * dif;
        bet = bet + (long) i.intValue() * dif;
        numtie = numtie + 1;
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + dif;
        initadd = initadd + dif;
        tp = B - bet - waste;
        tp /= (long) (i + numtie);
    }
    waste = waste + (long) numtie.intValue() * tp;
    return waste;
}
public static Long func_b0793b0132364b1c81bb1992305d7f1e(Long initadd, Integer numtie, Long[] v, Integer i, Long waste, Long B, Long bet) {
    long tp = B - bet - waste;
    tp /= (long) (i + numtie);
    while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
        long dif = v[i + numtie] - v[i];
        waste = waste + (long) numtie.intValue() * dif;
        bet = bet + (long) i.intValue() * dif;
        numtie = numtie + 1;
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + dif;
        initadd = initadd + dif;
        tp = B - bet - waste;
        tp /= (long) (i + numtie);
    }
    waste = waste + (long) numtie.intValue() * tp;
    Long.valueOf(bet + (long) i.intValue() * tp);
    return waste;
}


****** Cluster 307 ******
public static Long func_164b3942650b446993c751bd9b11d204(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    return avg;
}
public static Long func_5216bbc55d7143078a82afbfacdddd8d(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    return avg;
}
public static Long func_7727b548c0874640ad6fbd4b210c29fb(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    return avg;
}
public static Long func_6f90c6b47e6c4e80afeabfacb76a1d13(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    return avg;
}
public static Long func_b836b16738434418b77a924cc3a4f0b0(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    return avg;
}
public static Long func_dc5cc45c0e794a5da8025e7c0aeeade3(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return avg;
}
public static Long func_e4d057ab6ec74c6188145be05a105d77(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return avg;
}
public static Long func_6f023733b0ea4da6897c482cc03c8f73(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return avg;
}
public static Long func_bb5acf0213cf4e91b03598349f781929(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    long temp;
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return avg;
}
public static Long func_3b070b8dae1640beb448a5663e699ef7(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    long temp;
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return avg;
}
public static Long func_4f02fc6cb17b4d668890e10d6d87633e(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    long temp;
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    int second = N - 1;
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    index = first + 1;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        second = index++;
    }
    double res = 0.0;
    for (int i = Math.max((int) 0, (int) (first - 100)); i < Math.min(N, first + 100); ++i) {
        for (int j = Math.max((int) 0, (int) (second - 100)); j < Math.min(N, second + 100); ++j) {
            if (j <= i)
                continue;
            long a2 = dp[i + 1];
            long b = dp[j] - dp[i + 1];
            long c = dp[N] - dp[j];
            long left = sum - Math.max(a2, Math.max(b, c));
            res = Math.max(res, 1.0 * (double) left / (double) sum);
        }
    }
    return avg;
}


****** Cluster 308 ******
public static Long func_f655c4fa0d7644228f9a9c0b8d489410(Integer i, Long bet) {
    long v1 = 36L * bet;
    i.intValue();
    return v1;
}
public static Long func_1b247579b0d24496901d9c052e5b8fd0(Integer i, Long bet) {
    long v1 = 36L * bet;
    i.intValue();
    bet.longValue();
    return v1;
}


****** Cluster 309 ******
public static Long func_0ab5c1fa191c47508a2360110b2e74e0(Integer N, Long sum) {
    long avg = sum / 3L;
    N.intValue();
    return avg;
}
public static Long func_535365c5993b49c8bb6f42f0df4526fd(Integer N, Long sum) {
    long avg = sum / 3L;
    N.intValue();
    return avg;
}
public static Long func_0aeb28e7fea44ad8aca7e651acb579f8(Integer N, Long sum) {
    long avg = sum / 3L;
    N.intValue();
    return avg;
}


****** Cluster 310 ******
public static Double func_16104e516fa64ff8bb483a2dc4dda17d(Double val, Long waste, Long bet) {
    val = val - (double) bet.longValue();
    val = val - (double) waste.longValue();
    return val;
}
public static Double func_e58e5e7a974d4d5b9fa3926d4770f812(Double val, Long waste, Long bet) {
    val = val - (double) bet.longValue();
    val = val - (double) waste.longValue();
    System.out.println(val);
    return val;
}


****** Cluster 311 ******
public static Long func_74b07f33ec7f46b6a7e32498c617367c$4c404249(Long[] arr, Integer N, Long avg) {
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
        Integer.valueOf(index);
    }
    return temp;
}
public static Long func_9a97e9b7534a43f69d17765edf9e67a1$4c404249(Long[] arr, Integer N, Long avg) {
    N.intValue();
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
        Integer.valueOf(index);
    }
    return temp;
}
public static Long func_4fadd01e18454482aa7c565e8715cfd5(Long[] arr, Integer N, Long avg) {
    N.intValue();
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return temp;
}


****** Cluster 312 ******
public static Double func_50deca0034a44e7d91e53ad677a7e3e7(Long v1, Integer i, Long waste, Long bet) {
    double val = (double) v1.longValue() / ((double) i.intValue() + 0.0);
    val -= (double) bet.longValue();
    return val -= (double) waste.longValue();
}
public static Double func_4ddac0e501e1430da286ff8317712327(Long v1, Integer i, Long waste, Long bet) {
    double val = (double) v1.longValue() / ((double) i.intValue() + 0.0);
    val -= (double) bet.longValue();
    System.out.println(val -= (double) waste.longValue());
    return val;
}


****** Cluster 313 ******
public static Integer func_030a6b867de44590b7c3f393671867a3$33caff45(Long[] arr, Integer N, Long avg) {
    int index;
    long temp = 0L;
    for (index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
        Integer.valueOf(index);
    }
    return index;
}
public static Integer func_c2876cb9778a47aa8bf1e1682ccbce4b$33caff45(Long[] arr, Integer N, Long avg) {
    int index;
    N.intValue();
    long temp = 0L;
    for (index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
        Integer.valueOf(index);
    }
    return index;
}
public static Integer func_f971a80a868d4c569b7f58cc4b730198$33caff45(Long[] arr, Integer N, Long avg) {
    int index;
    long temp = 0L;
    for (index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
        Integer.valueOf(index);
    }
    return index;
}
public static Integer func_8a26e9e5d32e4eab85839697308c9b4e(Long[] arr, Integer N, Long avg) {
    int index;
    N.intValue();
    long temp = 0L;
    for (index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return index;
}
public static Integer func_0af509ec9f784b67ab1cd02e561a4144$33caff45(Long[] arr, Integer N, Long avg) {
    int index;
    N.intValue();
    long temp = 0L;
    for (index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
        Integer.valueOf(index);
    }
    return index;
}
public static Integer func_a337972c454349f3ae8a3910e673e03b(Long[] arr, Integer N, Long avg) {
    int index;
    N.intValue();
    long temp = 0L;
    for (index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return index;
}


****** Cluster 314 ******
public static Integer func_ca43886aa4554330af0448b005c30b23(Long[] arr, Integer N, Integer first, Long avg) {
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
        first = index;
    }
    return first;
}
public static Integer func_aef6a3544ed34053a2ff240776560527(Long[] arr, Integer N, Integer first, Long avg) {
    N.intValue();
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
        first = index;
    }
    return first;
}
public static Integer func_8d8f865839834d06a4fbd3511c22ec03(Long[] arr, Integer N, Integer first, Long avg) {
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
        first = index;
    }
    return first;
}
public static Integer func_5225316044e648c7959da0dbe670a762(Long[] arr, Integer N, Integer first, Long avg) {
    N.intValue();
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
        first = index;
    }
    return first;
}
public static Integer func_1a31d29f3903419e93d1759abe9946e8(Long[] arr, Integer N, Integer first, Long avg) {
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
        first = index;
    }
    first.intValue();
    return first;
}
public static Integer func_59878cb1f61342069d770db1b0f3db0e(Long[] arr, Integer N, Integer first, Long avg) {
    N.intValue();
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
        first = index;
    }
    first.intValue();
    return first;
}


****** Cluster 315 ******
public static Long func_cbfed0f487594d099f54cc45856b93ac(Integer i, Long waste, Long bet) {
    long v1 = 36L * bet;
    i.intValue();
    bet.longValue();
    waste.longValue();
    return v1;
}
public static Long func_7a87dfc833ef443ea5e7f8d8699a5abc(Integer i, Long waste, Long bet) {
    long v1 = 36L * bet;
    double val = (double) v1 / ((double) i.intValue() + 0.0);
    val -= (double) bet.longValue();
    System.out.println(val -= (double) waste.longValue());
    return v1;
}


****** Cluster 316 ******
public static Long func_442a487214604af898dc29867f8eacc8(Integer numtie, Long initadd, Long[] v, Integer i, Long waste) {
    if (v[i] == v[i - 1]) {
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + 1L;
        Long.valueOf(initadd + 1L);
        waste = waste + (long) numtie.intValue();
    }
    i.intValue();
    v[i].longValue();
    return waste;
}
public static Long func_1934f271fe6946b9b0dccbd45f8b37b3(Integer numtie, Long initadd, Long[] v, Integer i, Long waste) {
    if (v[i] == v[i - 1]) {
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + 1L;
        Long.valueOf(initadd + 1L);
        waste = waste + (long) numtie.intValue();
    }
    i.intValue();
    v[i].longValue();
    return waste;
}
public static Long func_e9dffe1896304006992342287fff6100(Integer numtie, Long initadd, Long[] v, Integer i, Long waste) {
    if (v[i] == v[i - 1]) {
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + 1L;
        Long.valueOf(initadd + 1L);
        waste = waste + (long) numtie.intValue();
    }
    i.intValue();
    v[i].longValue();
    for (int j = 0; j < i; ++j) {
        v[j].longValue();
    }
    return waste;
}


****** Cluster 317 ******
public static Long func_43fca17798b14610bf5f5082c84106e7(Integer numtie, Long initadd, Long[] v, Integer i, Long waste) {
    if (v[i] == v[i - 1]) {
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + 1L;
        Long.valueOf(initadd + 1L);
        Long.valueOf(waste + (long) numtie.intValue());
    }
    long bet = (long) i.intValue() * (v[i] - 1L);
    return bet;
}
public static Long func_b93f28d368f4490aa165d833a8bf5d77(Integer numtie, Long initadd, Long[] v, Integer i, Long waste) {
    if (v[i] == v[i - 1]) {
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + 1L;
        Long.valueOf(initadd + 1L);
        Long.valueOf(waste + (long) numtie.intValue());
    }
    long bet = (long) i.intValue() * (v[i] - 1L);
    return bet;
}
public static Long func_387067e5aab24877ad6ca2c95f7a2206(Integer numtie, Long initadd, Long[] v, Integer i, Long waste) {
    if (v[i] == v[i - 1]) {
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + 1L;
        Long.valueOf(initadd + 1L);
        Long.valueOf(waste + (long) numtie.intValue());
    }
    long bet = (long) i.intValue() * (v[i] - 1L);
    for (int j = 0; j < i; ++j) {
        v[j].longValue();
    }
    return bet;
}


****** Cluster 318 ******
public static Integer func_482515d8e22943f29a8c3bff77820a6d(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    sum.longValue();
    int second = N - 1;
    return second;
}
public static Integer func_1524625148be4784bea5d3cd2eefba55(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    sum.longValue();
    int second = N - 1;
    return second;
}
public static Integer func_351584c6e8694b98b1a137ce507ef2cc(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    sum.longValue();
    int second = N - 1;
    return second;
}
public static Integer func_10622a88a9484f50b1e29ea45df0c743(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int second = N - 1;
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return second;
}
public static Integer func_e5cafa1880e645598124c3c86872f513(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int second = N - 1;
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return second;
}
public static Integer func_d91cf09a4e9f4673bd8f6321675d4efa(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int second = N - 1;
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return second;
}


****** Cluster 319 ******
public static Integer func_d5859f7daf5a4000a2a13d35ff0fd349$33caff45(Long[] arr, Integer N, Long avg) {
    int second = N - 1;
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
        Integer.valueOf(index);
    }
    return second;
}
public static Integer func_502fb54539524586a0f13c47cdb57a9e(Long[] arr, Integer N, Long avg) {
    int second = N - 1;
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return second;
}
public static Integer func_fe18d18a47954ab6a0d47e664883af14$33caff45(Long[] arr, Integer N, Long avg) {
    int second = N - 1;
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
        Integer.valueOf(index);
    }
    return second;
}
public static Integer func_711337fe5daf4185996554ba60b591e7(Long[] arr, Integer N, Long sum) {
    long avg = sum / 3L;
    int second = N - 1;
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return second;
}
public static Integer func_3cd5cb3a2118437ca5da4061da1fb52c(Long[] arr, Integer N, Long avg) {
    int second = N - 1;
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return second;
}
public static Integer func_fcbadbfb34af41b190cab22a17c36d4d(Long[] arr, Integer N, Long sum) {
    long avg = sum / 3L;
    int second = N - 1;
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return second;
}
public static Integer func_797e9f09c2964bd5b409d503d61bca60(Long[] arr, Integer N, Long avg) {
    int second = N - 1;
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return second;
}
public static Integer func_850d9ce8289a471db42126a8e1b3049e(Long[] arr, Integer N, Long sum) {
    long avg = sum / 3L;
    int second = N - 1;
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return second;
}


****** Cluster 320 ******
public static Integer func_5b5ca6af2dd4454a9e96b7b9afb13999(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    int second = N - 1;
    return second;
}
public static Integer func_e58a6d0ac8d74ee08e8ae9b9eb6a636a(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    int second = N - 1;
    return second;
}
public static Integer func_45c2a67d57cf47b3b1b4d0f15c908cd9(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    int second = N - 1;
    return second;
}
public static Integer func_a7ed99a7521f4c98a4fa3394d95fb754(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int second = N - 1;
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return second;
}
public static Integer func_b4a61cfee5874e8f850af44654ad2ad7(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int second = N - 1;
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return second;
}
public static Integer func_df2872e37b1445f6b0909b72255c6671(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int second = N - 1;
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return second;
}


****** Cluster 321 ******
public static Long func_7bb8417d14304e0aab03760a6add9439(Long initadd, Long[] v, Integer i) {
    for (int j = i.intValue(); j < 37; ++j) {
        i.intValue();
    }
    if (v[i] == v[i - 1]) {
        Long[] j = v;
        int n = i;
        j[n] = j[n] + 1L;
        Long.valueOf(initadd + 1L);
    }
    long bet = (long) i.intValue() * (v[i] - 1L);
    return bet;
}
public static Long func_12df1faae0154a3a95f16f296f6ed983(Long initadd, Long[] v, Integer i) {
    for (int j = i.intValue(); j < 37; ++j) {
        i.intValue();
    }
    if (v[i] == v[i - 1]) {
        Long[] j = v;
        int n = i;
        j[n] = j[n] + 1L;
        Long.valueOf(initadd + 1L);
    }
    long bet = (long) i.intValue() * (v[i] - 1L);
    return bet;
}


****** Cluster 322 ******
public static Integer func_5cf236d5b4414c28b13cb781ef5bd040(Long[] arr, Integer N, Long avg) {
    int first = 0;
    N.intValue();
    int index = 0;
    for (long temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    return first;
}
public static Integer func_d232dff2c3ec4ba7845835d87d9d407e(Long[] arr, Integer N, Long avg) {
    int first = 0;
    N.intValue();
    int index = 0;
    for (long temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    return first;
}
public static Integer func_100ef9bd5be74dc59dfd9a89f8704e33(Long[] arr, Integer N, Long avg) {
    int first = 0;
    N.intValue();
    int index = 0;
    for (long temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    return first;
}
public static Integer func_799bbc33e8a549328b782f4f14ae6501(Long[] arr, Integer N, Long avg) {
    long temp;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return first;
}
public static Integer func_3a47cdf348a146c09128f2634967703e(Long[] arr, Integer N, Long avg) {
    long temp;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return first;
}


****** Cluster 323 ******
public static Long func_6520ee1adaf54e4b8532b8cb32a23d2b(Long initadd, Integer numtie, Double max, Long[] v, Integer i, Long waste, Long B) {
    long bet = (long) i.intValue() * (v[i] - 1L);
    long min = 0L;
    for (int j = 0; j < i; ++j) {
        min += v[j].longValue();
    }
    if ((long) i.intValue() * v[i - 1] - min > B) {
        bet = 0L;
    } else if (bet - min + waste > B) {
        bet = (long) i.intValue() * v[i - 1] - min;
        bet += (long) i.intValue() * ((B - bet - waste) / (long) i.intValue());
    } else {
        bet -= min;
        if (36 > i + numtie) {
            long tp = B - bet - waste;
            tp /= (long) (i + numtie);
            while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
                long dif = v[i + numtie] - v[i];
                waste = waste + (long) numtie.intValue() * dif;
                numtie = numtie + 1;
                Long[] arrlong = v;
                int n = i;
                arrlong[n] = arrlong[n] + dif;
                initadd = initadd + dif;
                tp = B - (bet += (long) i.intValue() * dif) - waste;
                tp /= (long) (i + numtie);
            }
            waste = waste + (long) numtie.intValue() * tp;
            bet += (long) i.intValue() * tp;
        }
    }
    if (bet > 0L) {
        long v1 = 36L * bet;
        double val = (double) v1 / ((double) i.intValue() + 0.0);
        val -= (double) bet;
        System.out.println(val -= (double) waste.longValue());
        if (val > max) {
            Double.valueOf(val);
        }
    }
    return initadd;
}
public static Long func_546db07c44b04ce181669f280fafd8cb(Long initadd, Integer numtie, Double max, Long[] v, Integer i, Long waste, Long B) {
    long bet = (long) i.intValue() * (v[i] - 1L);
    long min = 0L;
    for (int j = 0; j < i; ++j) {
        min += v[j].longValue();
    }
    if ((long) i.intValue() * v[i - 1] - min > B) {
        bet = 0L;
    } else if (bet - min + waste > B) {
        bet = (long) i.intValue() * v[i - 1] - min;
        bet += (long) i.intValue() * ((B - bet - waste) / (long) i.intValue());
    } else {
        bet -= min;
        if (36 > i + numtie) {
            long tp = B - bet - waste;
            tp /= (long) (i + numtie);
            while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
                long dif = v[i + numtie] - v[i];
                waste = waste + (long) numtie.intValue() * dif;
                numtie = numtie + 1;
                Long[] arrlong = v;
                int n = i;
                arrlong[n] = arrlong[n] + dif;
                initadd = initadd + dif;
                tp = B - (bet += (long) i.intValue() * dif) - waste;
                tp /= (long) (i + numtie);
            }
            waste = waste + (long) numtie.intValue() * tp;
            bet += (long) i.intValue() * tp;
        }
    }
    if (bet > 0L) {
        long v1 = 36L * bet;
        double val = (double) v1 / ((double) i.intValue() + 0.0);
        val -= (double) bet;
        System.out.println(val -= (double) waste.longValue());
        if (val > max) {
            Double.valueOf(val);
        }
    }
    Long[] v1 = v;
    int n = i;
    v1[n] = v1[n] - initadd;
    return initadd;
}


****** Cluster 324 ******
public static Double func_f58fe2f35d92455694bcbb56b9d927fd(Long initadd, Integer numtie, Double max, Long[] v, Integer i, Long waste, Long B) {
    long bet = (long) i.intValue() * (v[i] - 1L);
    long min = 0L;
    for (int j = 0; j < i; ++j) {
        min += v[j].longValue();
    }
    if ((long) i.intValue() * v[i - 1] - min > B) {
        bet = 0L;
    } else if (bet - min + waste > B) {
        bet = (long) i.intValue() * v[i - 1] - min;
        bet += (long) i.intValue() * ((B - bet - waste) / (long) i.intValue());
    } else {
        bet -= min;
        if (36 > i + numtie) {
            long tp = B - bet - waste;
            tp /= (long) (i + numtie);
            while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
                long dif = v[i + numtie] - v[i];
                waste = waste + (long) numtie.intValue() * dif;
                numtie = numtie + 1;
                Long[] arrlong = v;
                int n = i;
                arrlong[n] = arrlong[n] + dif;
                initadd = initadd + dif;
                tp = B - (bet += (long) i.intValue() * dif) - waste;
                tp /= (long) (i + numtie);
            }
            waste = waste + (long) numtie.intValue() * tp;
            bet += (long) i.intValue() * tp;
        }
    }
    if (bet > 0L) {
        long v1 = 36L * bet;
        double val = (double) v1 / ((double) i.intValue() + 0.0);
        val -= (double) bet;
        System.out.println(val -= (double) waste.longValue());
        if (val > max) {
            max = val;
        }
    }
    return max;
}
public static Double func_c9f6b39d551943eabaf23d4b7e4c4900(Long initadd, Integer numtie, Double max, Long[] v, Integer i, Long waste, Long B) {
    long bet = (long) i.intValue() * (v[i] - 1L);
    long min = 0L;
    for (int j = 0; j < i; ++j) {
        min += v[j].longValue();
    }
    if ((long) i.intValue() * v[i - 1] - min > B) {
        bet = 0L;
    } else if (bet - min + waste > B) {
        bet = (long) i.intValue() * v[i - 1] - min;
        bet += (long) i.intValue() * ((B - bet - waste) / (long) i.intValue());
    } else {
        bet -= min;
        if (36 > i + numtie) {
            long tp = B - bet - waste;
            tp /= (long) (i + numtie);
            while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
                long dif = v[i + numtie] - v[i];
                waste = waste + (long) numtie.intValue() * dif;
                numtie = numtie + 1;
                Long[] arrlong = v;
                int n = i;
                arrlong[n] = arrlong[n] + dif;
                initadd = initadd + dif;
                tp = B - (bet += (long) i.intValue() * dif) - waste;
                tp /= (long) (i + numtie);
            }
            waste = waste + (long) numtie.intValue() * tp;
            bet += (long) i.intValue() * tp;
        }
    }
    if (bet > 0L) {
        long v1 = 36L * bet;
        double val = (double) v1 / ((double) i.intValue() + 0.0);
        val -= (double) bet;
        System.out.println(val -= (double) waste.longValue());
        if (val > max) {
            max = val;
        }
    }
    Long[] v1 = v;
    int n = i;
    v1[n] = v1[n] - initadd;
    return max;
}


****** Cluster 325 ******
public static Long func_96e2e37b0ac746fea2697fe7b5c12fde(Long initadd, Integer numtie, Double max, Long[] v, Integer i, Long waste, Long B) {
    long bet = (long) i.intValue() * (v[i] - 1L);
    long min = 0L;
    for (int j = 0; j < i; ++j) {
        min += v[j].longValue();
    }
    if ((long) i.intValue() * v[i - 1] - min > B) {
        bet = 0L;
    } else if (bet - min + waste > B) {
        bet = (long) i.intValue() * v[i - 1] - min;
        bet += (long) i.intValue() * ((B - bet - waste) / (long) i.intValue());
    } else {
        bet -= min;
        if (36 > i + numtie) {
            long tp = B - bet - waste;
            tp /= (long) (i + numtie);
            while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
                long dif = v[i + numtie] - v[i];
                waste = waste + (long) numtie.intValue() * dif;
                numtie = numtie + 1;
                Long[] arrlong = v;
                int n = i;
                arrlong[n] = arrlong[n] + dif;
                initadd = initadd + dif;
                tp = B - (bet += (long) i.intValue() * dif) - waste;
                tp /= (long) (i + numtie);
            }
            waste = waste + (long) numtie.intValue() * tp;
            bet += (long) i.intValue() * tp;
        }
    }
    if (bet > 0L) {
        long v1 = 36L * bet;
        double val = (double) v1 / ((double) i.intValue() + 0.0);
        val -= (double) bet;
        System.out.println(val -= (double) waste.longValue());
        if (val > max) {
            Double.valueOf(val);
        }
    }
    return min;
}
public static Long func_eadda14bf725472a917809b472aea1ac(Long initadd, Integer numtie, Double max, Long[] v, Integer i, Long waste, Long B) {
    long bet = (long) i.intValue() * (v[i] - 1L);
    long min = 0L;
    for (int j = 0; j < i; ++j) {
        min += v[j].longValue();
    }
    if ((long) i.intValue() * v[i - 1] - min > B) {
        bet = 0L;
    } else if (bet - min + waste > B) {
        bet = (long) i.intValue() * v[i - 1] - min;
        bet += (long) i.intValue() * ((B - bet - waste) / (long) i.intValue());
    } else {
        bet -= min;
        if (36 > i + numtie) {
            long tp = B - bet - waste;
            tp /= (long) (i + numtie);
            while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
                long dif = v[i + numtie] - v[i];
                waste = waste + (long) numtie.intValue() * dif;
                numtie = numtie + 1;
                Long[] arrlong = v;
                int n = i;
                arrlong[n] = arrlong[n] + dif;
                initadd = initadd + dif;
                tp = B - (bet += (long) i.intValue() * dif) - waste;
                tp /= (long) (i + numtie);
            }
            waste = waste + (long) numtie.intValue() * tp;
            bet += (long) i.intValue() * tp;
        }
    }
    if (bet > 0L) {
        long v1 = 36L * bet;
        double val = (double) v1 / ((double) i.intValue() + 0.0);
        val -= (double) bet;
        System.out.println(val -= (double) waste.longValue());
        if (val > max) {
            Double.valueOf(val);
        }
    }
    Long[] v1 = v;
    int n = i;
    v1[n] = v1[n] - initadd;
    return min;
}


****** Cluster 326 ******
public static Long func_e500bab59d9f427e8e81f3abf8081130(Long initadd, Integer numtie, Double max, Long[] v, Integer i, Long waste, Long B) {
    long bet = (long) i.intValue() * (v[i] - 1L);
    long min = 0L;
    for (int j = 0; j < i; ++j) {
        min += v[j].longValue();
    }
    if ((long) i.intValue() * v[i - 1] - min > B) {
        bet = 0L;
    } else if (bet - min + waste > B) {
        bet = (long) i.intValue() * v[i - 1] - min;
        bet += (long) i.intValue() * ((B - bet - waste) / (long) i.intValue());
    } else {
        bet -= min;
        if (36 > i + numtie) {
            long tp = B - bet - waste;
            tp /= (long) (i + numtie);
            while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
                long dif = v[i + numtie] - v[i];
                waste = waste + (long) numtie.intValue() * dif;
                numtie = numtie + 1;
                Long[] arrlong = v;
                int n = i;
                arrlong[n] = arrlong[n] + dif;
                initadd = initadd + dif;
                tp = B - (bet += (long) i.intValue() * dif) - waste;
                tp /= (long) (i + numtie);
            }
            waste = waste + (long) numtie.intValue() * tp;
            bet += (long) i.intValue() * tp;
        }
    }
    if (bet > 0L) {
        long v1 = 36L * bet;
        double val = (double) v1 / ((double) i.intValue() + 0.0);
        val -= (double) bet;
        System.out.println(val -= (double) waste.longValue());
        if (val > max) {
            Double.valueOf(val);
        }
    }
    return waste;
}
public static Long func_9fb467a04a254604973a3952409d7059(Long initadd, Integer numtie, Double max, Long[] v, Integer i, Long waste, Long B) {
    long bet = (long) i.intValue() * (v[i] - 1L);
    long min = 0L;
    for (int j = 0; j < i; ++j) {
        min += v[j].longValue();
    }
    if ((long) i.intValue() * v[i - 1] - min > B) {
        bet = 0L;
    } else if (bet - min + waste > B) {
        bet = (long) i.intValue() * v[i - 1] - min;
        bet += (long) i.intValue() * ((B - bet - waste) / (long) i.intValue());
    } else {
        bet -= min;
        if (36 > i + numtie) {
            long tp = B - bet - waste;
            tp /= (long) (i + numtie);
            while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
                long dif = v[i + numtie] - v[i];
                waste = waste + (long) numtie.intValue() * dif;
                numtie = numtie + 1;
                Long[] arrlong = v;
                int n = i;
                arrlong[n] = arrlong[n] + dif;
                initadd = initadd + dif;
                tp = B - (bet += (long) i.intValue() * dif) - waste;
                tp /= (long) (i + numtie);
            }
            waste = waste + (long) numtie.intValue() * tp;
            bet += (long) i.intValue() * tp;
        }
    }
    if (bet > 0L) {
        long v1 = 36L * bet;
        double val = (double) v1 / ((double) i.intValue() + 0.0);
        val -= (double) bet;
        System.out.println(val -= (double) waste.longValue());
        if (val > max) {
            Double.valueOf(val);
        }
    }
    Long[] v1 = v;
    int n = i;
    v1[n] = v1[n] - initadd;
    return waste;
}


****** Cluster 327 ******
public static Integer func_21e127024dc74e3fae45d1c71013f5af(Long[] arr, Integer N, Integer first, Long avg) {
    int index;
    long temp = 0L;
    for (index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
        first = index;
    }
    index = first + 1;
    return index;
}
public static Integer func_2f836b5ccf2f4454ac8b84172fad596d(Long[] arr, Integer N, Integer first, Long avg) {
    int index;
    N.intValue();
    long temp = 0L;
    for (index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
        first = index;
    }
    index = first + 1;
    return index;
}


****** Cluster 328 ******
public static Long func_023e54a749be45c79dab1e7edbce16f3(Long initadd, Integer numtie, Double max, Long[] v, Integer i, Long waste, Long B) {
    long bet = (long) i.intValue() * (v[i] - 1L);
    long min = 0L;
    for (int j = 0; j < i; ++j) {
        min += v[j].longValue();
    }
    if ((long) i.intValue() * v[i - 1] - min > B) {
        bet = 0L;
    } else if (bet - min + waste > B) {
        bet = (long) i.intValue() * v[i - 1] - min;
        bet += (long) i.intValue() * ((B - bet - waste) / (long) i.intValue());
    } else {
        bet -= min;
        if (36 > i + numtie) {
            long tp = B - bet - waste;
            tp /= (long) (i + numtie);
            while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
                long dif = v[i + numtie] - v[i];
                waste = waste + (long) numtie.intValue() * dif;
                numtie = numtie + 1;
                Long[] arrlong = v;
                int n = i;
                arrlong[n] = arrlong[n] + dif;
                initadd = initadd + dif;
                tp = B - (bet += (long) i.intValue() * dif) - waste;
                tp /= (long) (i + numtie);
            }
            waste = waste + (long) numtie.intValue() * tp;
            bet += (long) i.intValue() * tp;
        }
    }
    if (bet > 0L) {
        long v1 = 36L * bet;
        double val = (double) v1 / ((double) i.intValue() + 0.0);
        val -= (double) bet;
        System.out.println(val -= (double) waste.longValue());
        if (val > max) {
            Double.valueOf(val);
        }
    }
    return bet;
}
public static Long func_9c2b9f5d484542e99a584a56e3e92777(Long initadd, Integer numtie, Double max, Long[] v, Integer i, Long waste, Long B) {
    long bet = (long) i.intValue() * (v[i] - 1L);
    long min = 0L;
    for (int j = 0; j < i; ++j) {
        min += v[j].longValue();
    }
    if ((long) i.intValue() * v[i - 1] - min > B) {
        bet = 0L;
    } else if (bet - min + waste > B) {
        bet = (long) i.intValue() * v[i - 1] - min;
        bet += (long) i.intValue() * ((B - bet - waste) / (long) i.intValue());
    } else {
        bet -= min;
        if (36 > i + numtie) {
            long tp = B - bet - waste;
            tp /= (long) (i + numtie);
            while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
                long dif = v[i + numtie] - v[i];
                waste = waste + (long) numtie.intValue() * dif;
                numtie = numtie + 1;
                Long[] arrlong = v;
                int n = i;
                arrlong[n] = arrlong[n] + dif;
                initadd = initadd + dif;
                tp = B - (bet += (long) i.intValue() * dif) - waste;
                tp /= (long) (i + numtie);
            }
            waste = waste + (long) numtie.intValue() * tp;
            bet += (long) i.intValue() * tp;
        }
    }
    if (bet > 0L) {
        long v1 = 36L * bet;
        double val = (double) v1 / ((double) i.intValue() + 0.0);
        val -= (double) bet;
        System.out.println(val -= (double) waste.longValue());
        if (val > max) {
            Double.valueOf(val);
        }
    }
    Long[] v1 = v;
    int n = i;
    v1[n] = v1[n] - initadd;
    return bet;
}


****** Cluster 329 ******
public static Integer func_b4b7ba8f56ac479f9d21e30a0c788fdf(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long[] dp = new long[N + 1];
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    int second = N - 1;
    return second;
}
public static Integer func_dc59509cfeba45df972ce2b1d53034ee(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long[] dp = new long[N + 1];
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    int second = N - 1;
    return second;
}
public static Integer func_7ad86c45272146e8a5ad207aa8b77e91(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long[] dp = new long[N + 1];
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    int second = N - 1;
    return second;
}
public static Integer func_6cab2c7e9cf140a38b95dcff9eec997e(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int second = N - 1;
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return second;
}
public static Integer func_25ae336525d74c779eb7ca8cd4b4b403(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int second = N - 1;
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return second;
}
public static Integer func_84d0b8aae0fb489bae4cb59305b3d1a9(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int second = N - 1;
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return second;
}


****** Cluster 330 ******
public static Long func_3a206b2b9e684f97b876173942e7e9ed(Integer numtie, Long initadd, Double max, Long[] v, Integer i, Long waste, Long B) {
    if (v[i] == v[i - 1]) {
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + 1L;
        initadd = initadd + 1L;
        waste = waste + (long) numtie.intValue();
    }
    long bet = (long) i.intValue() * (v[i] - 1L);
    long min = 0L;
    for (int j = 0; j < i; ++j) {
        min += v[j].longValue();
    }
    if ((long) i.intValue() * v[i - 1] - min > B) {
        bet = 0L;
    } else if (bet - min + waste > B) {
        bet = (long) i.intValue() * v[i - 1] - min;
        bet += (long) i.intValue() * ((B - bet - waste) / (long) i.intValue());
    } else {
        bet -= min;
        if (36 > i + numtie) {
            long tp = B - bet - waste;
            tp /= (long) (i + numtie);
            while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
                long dif = v[i + numtie] - v[i];
                waste = waste + (long) numtie.intValue() * dif;
                numtie = numtie + 1;
                Long[] arrlong = v;
                int n = i;
                arrlong[n] = arrlong[n] + dif;
                initadd = initadd + dif;
                tp = B - (bet += (long) i.intValue() * dif) - waste;
                tp /= (long) (i + numtie);
            }
            waste = waste + (long) numtie.intValue() * tp;
            bet += (long) i.intValue() * tp;
        }
    }
    if (bet > 0L) {
        long v1 = 36L * bet;
        double val = (double) v1 / ((double) i.intValue() + 0.0);
        val -= (double) bet;
        System.out.println(val -= (double) waste.longValue());
        if (val > max) {
            Double.valueOf(val);
        }
    }
    return initadd;
}
public static Long func_0b0a3d6f0e5745d38e835a0fadd005d3(Integer numtie, Long initadd, Double max, Long[] v, Integer i, Long waste, Long B) {
    if (v[i] == v[i - 1]) {
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + 1L;
        initadd = initadd + 1L;
        waste = waste + (long) numtie.intValue();
    }
    long bet = (long) i.intValue() * (v[i] - 1L);
    long min = 0L;
    for (int j = 0; j < i; ++j) {
        min += v[j].longValue();
    }
    if ((long) i.intValue() * v[i - 1] - min > B) {
        bet = 0L;
    } else if (bet - min + waste > B) {
        bet = (long) i.intValue() * v[i - 1] - min;
        bet += (long) i.intValue() * ((B - bet - waste) / (long) i.intValue());
    } else {
        bet -= min;
        if (36 > i + numtie) {
            long tp = B - bet - waste;
            tp /= (long) (i + numtie);
            while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
                long dif = v[i + numtie] - v[i];
                waste = waste + (long) numtie.intValue() * dif;
                numtie = numtie + 1;
                Long[] arrlong = v;
                int n = i;
                arrlong[n] = arrlong[n] + dif;
                initadd = initadd + dif;
                tp = B - (bet += (long) i.intValue() * dif) - waste;
                tp /= (long) (i + numtie);
            }
            waste = waste + (long) numtie.intValue() * tp;
            bet += (long) i.intValue() * tp;
        }
    }
    if (bet > 0L) {
        long v1 = 36L * bet;
        double val = (double) v1 / ((double) i.intValue() + 0.0);
        val -= (double) bet;
        System.out.println(val -= (double) waste.longValue());
        if (val > max) {
            Double.valueOf(val);
        }
    }
    Long[] v1 = v;
    int n = i;
    v1[n] = v1[n] - initadd;
    return initadd;
}


****** Cluster 331 ******
public static Long func_d4cd3ed2509448ad8588fb185d887870(Integer numtie, Long initadd, Double max, Long[] v, Integer i, Long waste, Long B) {
    if (v[i] == v[i - 1]) {
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + 1L;
        initadd = initadd + 1L;
        waste = waste + (long) numtie.intValue();
    }
    long bet = (long) i.intValue() * (v[i] - 1L);
    long min = 0L;
    for (int j = 0; j < i; ++j) {
        min += v[j].longValue();
    }
    if ((long) i.intValue() * v[i - 1] - min > B) {
        bet = 0L;
    } else if (bet - min + waste > B) {
        bet = (long) i.intValue() * v[i - 1] - min;
        bet += (long) i.intValue() * ((B - bet - waste) / (long) i.intValue());
    } else {
        bet -= min;
        if (36 > i + numtie) {
            long tp = B - bet - waste;
            tp /= (long) (i + numtie);
            while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
                long dif = v[i + numtie] - v[i];
                waste = waste + (long) numtie.intValue() * dif;
                numtie = numtie + 1;
                Long[] arrlong = v;
                int n = i;
                arrlong[n] = arrlong[n] + dif;
                initadd = initadd + dif;
                tp = B - (bet += (long) i.intValue() * dif) - waste;
                tp /= (long) (i + numtie);
            }
            waste = waste + (long) numtie.intValue() * tp;
            bet += (long) i.intValue() * tp;
        }
    }
    if (bet > 0L) {
        long v1 = 36L * bet;
        double val = (double) v1 / ((double) i.intValue() + 0.0);
        val -= (double) bet;
        System.out.println(val -= (double) waste.longValue());
        if (val > max) {
            Double.valueOf(val);
        }
    }
    return min;
}
public static Long func_bedf855a335a4d4b818f52dd0c538efe(Integer numtie, Long initadd, Double max, Long[] v, Integer i, Long waste, Long B) {
    if (v[i] == v[i - 1]) {
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + 1L;
        initadd = initadd + 1L;
        waste = waste + (long) numtie.intValue();
    }
    long bet = (long) i.intValue() * (v[i] - 1L);
    long min = 0L;
    for (int j = 0; j < i; ++j) {
        min += v[j].longValue();
    }
    if ((long) i.intValue() * v[i - 1] - min > B) {
        bet = 0L;
    } else if (bet - min + waste > B) {
        bet = (long) i.intValue() * v[i - 1] - min;
        bet += (long) i.intValue() * ((B - bet - waste) / (long) i.intValue());
    } else {
        bet -= min;
        if (36 > i + numtie) {
            long tp = B - bet - waste;
            tp /= (long) (i + numtie);
            while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
                long dif = v[i + numtie] - v[i];
                waste = waste + (long) numtie.intValue() * dif;
                numtie = numtie + 1;
                Long[] arrlong = v;
                int n = i;
                arrlong[n] = arrlong[n] + dif;
                initadd = initadd + dif;
                tp = B - (bet += (long) i.intValue() * dif) - waste;
                tp /= (long) (i + numtie);
            }
            waste = waste + (long) numtie.intValue() * tp;
            bet += (long) i.intValue() * tp;
        }
    }
    if (bet > 0L) {
        long v1 = 36L * bet;
        double val = (double) v1 / ((double) i.intValue() + 0.0);
        val -= (double) bet;
        System.out.println(val -= (double) waste.longValue());
        if (val > max) {
            Double.valueOf(val);
        }
    }
    Long[] v1 = v;
    int n = i;
    v1[n] = v1[n] - initadd;
    return min;
}


****** Cluster 332 ******
public static Double func_5cede82bc36a4bfca0399d9070e0e341(Integer numtie, Long initadd, Double max, Long[] v, Integer i, Long waste, Long B) {
    if (v[i] == v[i - 1]) {
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + 1L;
        initadd = initadd + 1L;
        waste = waste + (long) numtie.intValue();
    }
    long bet = (long) i.intValue() * (v[i] - 1L);
    long min = 0L;
    for (int j = 0; j < i; ++j) {
        min += v[j].longValue();
    }
    if ((long) i.intValue() * v[i - 1] - min > B) {
        bet = 0L;
    } else if (bet - min + waste > B) {
        bet = (long) i.intValue() * v[i - 1] - min;
        bet += (long) i.intValue() * ((B - bet - waste) / (long) i.intValue());
    } else {
        bet -= min;
        if (36 > i + numtie) {
            long tp = B - bet - waste;
            tp /= (long) (i + numtie);
            while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
                long dif = v[i + numtie] - v[i];
                waste = waste + (long) numtie.intValue() * dif;
                numtie = numtie + 1;
                Long[] arrlong = v;
                int n = i;
                arrlong[n] = arrlong[n] + dif;
                initadd = initadd + dif;
                tp = B - (bet += (long) i.intValue() * dif) - waste;
                tp /= (long) (i + numtie);
            }
            waste = waste + (long) numtie.intValue() * tp;
            bet += (long) i.intValue() * tp;
        }
    }
    if (bet > 0L) {
        long v1 = 36L * bet;
        double val = (double) v1 / ((double) i.intValue() + 0.0);
        val -= (double) bet;
        System.out.println(val -= (double) waste.longValue());
        if (val > max) {
            max = val;
        }
    }
    return max;
}
public static Double func_b58c58d963b84308a568dbde8d86e65e(Integer numtie, Long initadd, Double max, Long[] v, Integer i, Long waste, Long B) {
    if (v[i] == v[i - 1]) {
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + 1L;
        initadd = initadd + 1L;
        waste = waste + (long) numtie.intValue();
    }
    long bet = (long) i.intValue() * (v[i] - 1L);
    long min = 0L;
    for (int j = 0; j < i; ++j) {
        min += v[j].longValue();
    }
    if ((long) i.intValue() * v[i - 1] - min > B) {
        bet = 0L;
    } else if (bet - min + waste > B) {
        bet = (long) i.intValue() * v[i - 1] - min;
        bet += (long) i.intValue() * ((B - bet - waste) / (long) i.intValue());
    } else {
        bet -= min;
        if (36 > i + numtie) {
            long tp = B - bet - waste;
            tp /= (long) (i + numtie);
            while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
                long dif = v[i + numtie] - v[i];
                waste = waste + (long) numtie.intValue() * dif;
                numtie = numtie + 1;
                Long[] arrlong = v;
                int n = i;
                arrlong[n] = arrlong[n] + dif;
                initadd = initadd + dif;
                tp = B - (bet += (long) i.intValue() * dif) - waste;
                tp /= (long) (i + numtie);
            }
            waste = waste + (long) numtie.intValue() * tp;
            bet += (long) i.intValue() * tp;
        }
    }
    if (bet > 0L) {
        long v1 = 36L * bet;
        double val = (double) v1 / ((double) i.intValue() + 0.0);
        val -= (double) bet;
        System.out.println(val -= (double) waste.longValue());
        if (val > max) {
            max = val;
        }
    }
    Long[] v1 = v;
    int n = i;
    v1[n] = v1[n] - initadd;
    return max;
}


****** Cluster 333 ******
public static Long func_40fb2a941af94be196eafb6da8692f46(Integer numtie, Long initadd, Double max, Long[] v, Integer i, Long waste, Long B) {
    if (v[i] == v[i - 1]) {
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + 1L;
        initadd = initadd + 1L;
        waste = waste + (long) numtie.intValue();
    }
    long bet = (long) i.intValue() * (v[i] - 1L);
    long min = 0L;
    for (int j = 0; j < i; ++j) {
        min += v[j].longValue();
    }
    if ((long) i.intValue() * v[i - 1] - min > B) {
        bet = 0L;
    } else if (bet - min + waste > B) {
        bet = (long) i.intValue() * v[i - 1] - min;
        bet += (long) i.intValue() * ((B - bet - waste) / (long) i.intValue());
    } else {
        bet -= min;
        if (36 > i + numtie) {
            long tp = B - bet - waste;
            tp /= (long) (i + numtie);
            while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
                long dif = v[i + numtie] - v[i];
                waste = waste + (long) numtie.intValue() * dif;
                numtie = numtie + 1;
                Long[] arrlong = v;
                int n = i;
                arrlong[n] = arrlong[n] + dif;
                initadd = initadd + dif;
                tp = B - (bet += (long) i.intValue() * dif) - waste;
                tp /= (long) (i + numtie);
            }
            waste = waste + (long) numtie.intValue() * tp;
            bet += (long) i.intValue() * tp;
        }
    }
    if (bet > 0L) {
        long v1 = 36L * bet;
        double val = (double) v1 / ((double) i.intValue() + 0.0);
        val -= (double) bet;
        System.out.println(val -= (double) waste.longValue());
        if (val > max) {
            Double.valueOf(val);
        }
    }
    return waste;
}
public static Long func_8fc9ea1b6cf64509a5e9808b90084b5b(Integer numtie, Long initadd, Double max, Long[] v, Integer i, Long waste, Long B) {
    if (v[i] == v[i - 1]) {
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + 1L;
        initadd = initadd + 1L;
        waste = waste + (long) numtie.intValue();
    }
    long bet = (long) i.intValue() * (v[i] - 1L);
    long min = 0L;
    for (int j = 0; j < i; ++j) {
        min += v[j].longValue();
    }
    if ((long) i.intValue() * v[i - 1] - min > B) {
        bet = 0L;
    } else if (bet - min + waste > B) {
        bet = (long) i.intValue() * v[i - 1] - min;
        bet += (long) i.intValue() * ((B - bet - waste) / (long) i.intValue());
    } else {
        bet -= min;
        if (36 > i + numtie) {
            long tp = B - bet - waste;
            tp /= (long) (i + numtie);
            while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
                long dif = v[i + numtie] - v[i];
                waste = waste + (long) numtie.intValue() * dif;
                numtie = numtie + 1;
                Long[] arrlong = v;
                int n = i;
                arrlong[n] = arrlong[n] + dif;
                initadd = initadd + dif;
                tp = B - (bet += (long) i.intValue() * dif) - waste;
                tp /= (long) (i + numtie);
            }
            waste = waste + (long) numtie.intValue() * tp;
            bet += (long) i.intValue() * tp;
        }
    }
    if (bet > 0L) {
        long v1 = 36L * bet;
        double val = (double) v1 / ((double) i.intValue() + 0.0);
        val -= (double) bet;
        System.out.println(val -= (double) waste.longValue());
        if (val > max) {
            Double.valueOf(val);
        }
    }
    Long[] v1 = v;
    int n = i;
    v1[n] = v1[n] - initadd;
    return waste;
}


****** Cluster 334 ******
public static Long func_35e01e09cc7943ef9476efe2cdca8759(Integer numtie, Long initadd, Double max, Long[] v, Integer i, Long waste, Long B) {
    if (v[i] == v[i - 1]) {
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + 1L;
        initadd = initadd + 1L;
        waste = waste + (long) numtie.intValue();
    }
    long bet = (long) i.intValue() * (v[i] - 1L);
    long min = 0L;
    for (int j = 0; j < i; ++j) {
        min += v[j].longValue();
    }
    if ((long) i.intValue() * v[i - 1] - min > B) {
        bet = 0L;
    } else if (bet - min + waste > B) {
        bet = (long) i.intValue() * v[i - 1] - min;
        bet += (long) i.intValue() * ((B - bet - waste) / (long) i.intValue());
    } else {
        bet -= min;
        if (36 > i + numtie) {
            long tp = B - bet - waste;
            tp /= (long) (i + numtie);
            while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
                long dif = v[i + numtie] - v[i];
                waste = waste + (long) numtie.intValue() * dif;
                numtie = numtie + 1;
                Long[] arrlong = v;
                int n = i;
                arrlong[n] = arrlong[n] + dif;
                initadd = initadd + dif;
                tp = B - (bet += (long) i.intValue() * dif) - waste;
                tp /= (long) (i + numtie);
            }
            waste = waste + (long) numtie.intValue() * tp;
            bet += (long) i.intValue() * tp;
        }
    }
    if (bet > 0L) {
        long v1 = 36L * bet;
        double val = (double) v1 / ((double) i.intValue() + 0.0);
        val -= (double) bet;
        System.out.println(val -= (double) waste.longValue());
        if (val > max) {
            Double.valueOf(val);
        }
    }
    return bet;
}
public static Long func_530d1cf52d764fad8fd9f39d3d0621ff(Integer numtie, Long initadd, Double max, Long[] v, Integer i, Long waste, Long B) {
    if (v[i] == v[i - 1]) {
        Long[] arrlong = v;
        int n = i;
        arrlong[n] = arrlong[n] + 1L;
        initadd = initadd + 1L;
        waste = waste + (long) numtie.intValue();
    }
    long bet = (long) i.intValue() * (v[i] - 1L);
    long min = 0L;
    for (int j = 0; j < i; ++j) {
        min += v[j].longValue();
    }
    if ((long) i.intValue() * v[i - 1] - min > B) {
        bet = 0L;
    } else if (bet - min + waste > B) {
        bet = (long) i.intValue() * v[i - 1] - min;
        bet += (long) i.intValue() * ((B - bet - waste) / (long) i.intValue());
    } else {
        bet -= min;
        if (36 > i + numtie) {
            long tp = B - bet - waste;
            tp /= (long) (i + numtie);
            while (i + numtie < 37 && v[i + numtie] < v[i] + tp) {
                long dif = v[i + numtie] - v[i];
                waste = waste + (long) numtie.intValue() * dif;
                numtie = numtie + 1;
                Long[] arrlong = v;
                int n = i;
                arrlong[n] = arrlong[n] + dif;
                initadd = initadd + dif;
                tp = B - (bet += (long) i.intValue() * dif) - waste;
                tp /= (long) (i + numtie);
            }
            waste = waste + (long) numtie.intValue() * tp;
            bet += (long) i.intValue() * tp;
        }
    }
    if (bet > 0L) {
        long v1 = 36L * bet;
        double val = (double) v1 / ((double) i.intValue() + 0.0);
        val -= (double) bet;
        System.out.println(val -= (double) waste.longValue());
        if (val > max) {
            Double.valueOf(val);
        }
    }
    Long[] v1 = v;
    int n = i;
    v1[n] = v1[n] - initadd;
    return bet;
}


****** Cluster 335 ******
public static Integer func_0edfbc283b184af881ba8abb8bd826d3(Long[] arr, Integer N, Long sum) {
    int index;
    long avg = sum / 3L;
    N.intValue();
    long temp = 0L;
    for (index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return index;
}
public static Integer func_d404359f327d438795588f96f08d4197(Long[] arr, Integer N, Long sum) {
    int index;
    long avg = sum / 3L;
    N.intValue();
    long temp = 0L;
    for (index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return index;
}


****** Cluster 336 ******
public static Integer func_7ff2d615987c467591b32c09ff1c9268(Long[] arr, Integer N, Long sum) {
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (long temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    return first;
}
public static Integer func_781a7b99e406455ab222a9df6a03f82b(Long[] arr, Integer N, Long sum) {
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (long temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    return first;
}
public static Integer func_938044da60f145e2832d0516ef5a846e(Long[] arr, Integer N, Long sum) {
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (long temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    return first;
}
public static Integer func_aba567de540a455884da497224fd92cf(Long[] arr, Integer N, Long sum) {
    long temp;
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return first;
}
public static Integer func_616fa5432cea4369a29de15633a9f5c1(Long[] arr, Integer N, Long sum) {
    long temp;
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return first;
}


****** Cluster 337 ******
public static Long func_b4054d0fc22346e6881e6223b0c380be(Long[] arr, Integer N, Long sum) {
    long avg = sum / 3L;
    N.intValue();
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return avg;
}
public static Long func_a99d7817bc8047e59ba7fef670065fd4(Long[] arr, Integer N, Long sum) {
    long avg = sum / 3L;
    N.intValue();
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return avg;
}
public static Long func_7ba6530b73c343b9b021af6840789eca(Long[] arr, Integer N, Long sum) {
    long avg = sum / 3L;
    N.intValue();
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return avg;
}


****** Cluster 338 ******
public static Long func_c74abbb318f34141a49739f51489bd2f$1fc4d2c2(Long[] arr, Integer N, Integer first, Long avg) {
    int index;
    long temp = 0L;
    for (index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
        first = index;
    }
    temp = 0L;
    for (index = first.intValue() + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
        Integer.valueOf(index);
    }
    return temp;
}
public static Long func_8749bb9ac956449b942b420edf4b5e1a(Long[] arr, Integer N, Integer first, Long avg) {
    int index;
    N.intValue();
    long temp = 0L;
    for (index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
        first = index;
    }
    temp = 0L;
    for (index = first.intValue() + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return temp;
}
public static Long func_6fc0e54368c744e4b07b0c865aa1c858$1fc4d2c2(Long[] arr, Integer N, Integer first, Long avg) {
    int index;
    long temp = 0L;
    for (index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
        first = index;
    }
    temp = 0L;
    for (index = first.intValue() + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
        Integer.valueOf(index);
    }
    return temp;
}
public static Long func_18b98e4a0dc44ed583457ade5ac8bb37(Long[] arr, Integer N, Integer first, Long avg) {
    int index;
    N.intValue();
    long temp = 0L;
    for (index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
        first = index;
    }
    temp = 0L;
    for (index = first.intValue() + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return temp;
}


****** Cluster 339 ******
public static Integer func_916d42e2d0214c53baf6473d1eec1b6b$5bdd71a2(Long[] arr, Integer N, Integer first, Long avg) {
    int index;
    long temp = 0L;
    for (index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
        first = index;
    }
    temp = 0L;
    for (index = first.intValue() + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
        Integer.valueOf(index);
    }
    return index;
}
public static Integer func_cabf94b3bde248c6b11f7a068b173c94(Long[] arr, Integer N, Integer first, Long avg) {
    int index;
    N.intValue();
    long temp = 0L;
    for (index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
        first = index;
    }
    temp = 0L;
    for (index = first.intValue() + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return index;
}
public static Integer func_4cfeccfd81a04dda9f2b219475267838$5bdd71a2(Long[] arr, Integer N, Integer first, Long avg) {
    int index;
    long temp = 0L;
    for (index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
        first = index;
    }
    temp = 0L;
    for (index = first.intValue() + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
        Integer.valueOf(index);
    }
    return index;
}
public static Integer func_7d1048cfea03436187e5d381554a9c49(Long[] arr, Integer N, Integer first, Long avg) {
    int index;
    N.intValue();
    long temp = 0L;
    for (index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
        first = index;
    }
    temp = 0L;
    for (index = first.intValue() + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return index;
}


****** Cluster 340 ******
public static Integer func_1a012ef2788e4b8fae8453b842d5e1fe$5bdd71a2(Long[] arr, Integer N, Integer first, Long avg) {
    int index;
    long temp = 0L;
    for (index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
        first = index;
    }
    temp = 0L;
    for (index = first.intValue() + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
        Integer.valueOf(index);
    }
    return first;
}
public static Integer func_cd3a62cf21354f67bb794df507dca655(Long[] arr, Integer N, Integer first, Long avg) {
    int index;
    N.intValue();
    long temp = 0L;
    for (index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
        first = index;
    }
    temp = 0L;
    for (index = first.intValue() + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return first;
}
public static Integer func_fc14a9ac95174bb7b52fb53dfad67a53$5bdd71a2(Long[] arr, Integer N, Integer first, Long avg) {
    int index;
    long temp = 0L;
    for (index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
        first = index;
    }
    temp = 0L;
    for (index = first.intValue() + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
        Integer.valueOf(index);
    }
    return first;
}
public static Integer func_56654b1a066b42288937d06a09d1463b(Long[] arr, Integer N, Integer first, Long avg) {
    int index;
    N.intValue();
    long temp = 0L;
    for (index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
        first = index;
    }
    temp = 0L;
    for (index = first.intValue() + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return first;
}


****** Cluster 341 ******
public static Integer func_049646ed73eb4834b8680de9415d7b58(Long[] arr, Integer N, Integer first, Integer second, Long avg) {
    int index;
    long temp = 0L;
    for (index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
        first = index;
    }
    temp = 0L;
    for (index = first.intValue() + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
        second = index;
    }
    return second;
}
public static Integer func_73bdbfd0b79449a794a92711d0821eac(Long[] arr, Integer N, Integer first, Integer second, Long avg) {
    int index;
    long temp = 0L;
    for (index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
        first = index;
    }
    temp = 0L;
    for (index = first.intValue() + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
        second = index;
    }
    return second;
}


****** Cluster 342 ******
public static Integer func_f30e4cbef58842c1b88fbea6500c7f6b(Long p, Integer N, Long s, Long r, Long q) {
    long[] arr = new long[N.intValue()];
    long[] dp = new long[N + 1];
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        dp[i + 1] = dp[i] + arr[i];
    }
    int second = N - 1;
    return second;
}
public static Integer func_c0c65c8409bf49368205cb5edc18e952(Long p, Integer N, Long s, Long r, Long q) {
    long[] arr = new long[N.intValue()];
    long[] dp = new long[N + 1];
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        dp[i + 1] = dp[i] + arr[i];
    }
    int second = N - 1;
    return second;
}
public static Integer func_61dc98cb38304f5ab69907a63c57aeee(Long p, Integer N, Long s, Long r, Long q) {
    long[] arr = new long[N.intValue()];
    long[] dp = new long[N + 1];
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        dp[i + 1] = dp[i] + arr[i];
    }
    int second = N - 1;
    return second;
}
public static Integer func_67fbe7eabf674d3d92ea6d201df92f23(Long p, Integer N, Long s, Long r, Long q) {
    long[] arr = new long[N.intValue()];
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int second = N - 1;
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index], ++index) {
    }
    return second;
}
public static Integer func_87e9b9d8e00a42eaa04ee8283946266c(Long p, Integer N, Long s, Long r, Long q) {
    long[] arr = new long[N.intValue()];
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int second = N - 1;
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index], ++index) {
    }
    return second;
}
public static Integer func_833f7b2065d44524ad06f852e4f2d355(Long p, Integer N, Long s, Long r, Long q) {
    long[] arr = new long[N.intValue()];
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int second = N - 1;
    long temp = 0L;
    for (int index = 0; temp < avg && index < N; temp += arr[index], ++index) {
    }
    return second;
}


****** Cluster 343 ******
public static Integer func_4122058b0d804758b44e9afc5be12b22(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    int index;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    long temp = 0L;
    for (index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return index;
}
public static Integer func_7889fb7cb6c94b22a44d97153e444ac2(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    int index;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    long temp = 0L;
    for (index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return index;
}


****** Cluster 344 ******
public static Integer func_49d7f62630a84a03a7ef3665271f06a3(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (long temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    return first;
}
public static Integer func_0b86880d73d34750995fe69ea201b77a(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (long temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    return first;
}
public static Integer func_7e8b8c4d8a02427dbfc1f0e86b6a6831(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (long temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    return first;
}
public static Integer func_29f3b3c740f04dd792c674c19c5bb887(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    long temp;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return first;
}
public static Integer func_14fb11c8b0b0406c923d5b8e9eb2c257(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    long temp;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return first;
}
public static Integer func_31f8f481f46c4ecba37a8d115f70154d(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    long temp;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    int second = N - 1;
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    index = first + 1;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        second = index++;
    }
    double res = 0.0;
    for (int i = Math.max((int) 0, (int) (first - 100)); i < Math.min(N, first + 100); ++i) {
        for (int j = Math.max((int) 0, (int) (second - 100)); j < Math.min(N, second + 100); ++j) {
            if (j <= i)
                continue;
            long a2 = dp[i + 1];
            long b = dp[j] - dp[i + 1];
            long c = dp[N] - dp[j];
            long left = sum - Math.max(a2, Math.max(b, c));
            res = Math.max(res, 1.0 * (double) left / (double) sum.longValue());
        }
    }
    return first;
}


****** Cluster 345 ******
public static Integer func_92a376d905184417b7332d656b59e8d8(Long[] arr, Integer N, Integer first, Long avg) {
    int index;
    int second = N - 1;
    long temp = 0L;
    for (index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
        first = index;
    }
    index = first + 1;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        second = index++;
    }
    return second;
}
public static Integer func_f3b507fd74084577a1527509a4593267(Long[] arr, Integer N, Integer first, Long avg) {
    int index;
    int second = N - 1;
    long temp = 0L;
    for (index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
        first = index;
    }
    index = first + 1;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        second = index++;
    }
    return second;
}


****** Cluster 346 ******
public static Integer func_d6c11c02b0d84454b7d38861fdd2b302(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    int index;
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    long temp = 0L;
    for (index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return index;
}
public static Integer func_049a74ab44b447949454e8fcebcab0d1(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    int index;
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    long temp = 0L;
    for (index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return index;
}


****** Cluster 347 ******
public static Integer func_4e22a302328543a2b870a67ce4603824(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (long temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    return first;
}
public static Integer func_682a572f9e5d4cacaedf8b40e033b7c2(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (long temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    return first;
}
public static Integer func_3c3e9b6ae17044be8205766c7cb2defc(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (long temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    return first;
}
public static Integer func_762270e1086a4f34844f8db8f78d63d5(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    long temp;
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return first;
}
public static Integer func_9c6a434c68c145f1a62c57c17a09c188(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    long temp;
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return first;
}
public static Integer func_a5d70be1393745b78be79e3cfc217cb2(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    long temp;
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    int second = N - 1;
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    index = first + 1;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        second = index++;
    }
    double res = 0.0;
    for (int i = Math.max((int) 0, (int) (first - 100)); i < Math.min(N, first + 100); ++i) {
        for (int j = Math.max((int) 0, (int) (second - 100)); j < Math.min(N, second + 100); ++j) {
            if (j <= i)
                continue;
            long a2 = dp[i + 1];
            long b = dp[j] - dp[i + 1];
            long c = dp[N] - dp[j];
            long left = sum - Math.max(a2, Math.max(b, c));
            res = Math.max(res, 1.0 * (double) left / (double) sum);
        }
    }
    return first;
}


****** Cluster 348 ******
public static Long func_fb06233a48384417b182d9686a43b960(Long[] arr, Integer N, Long avg) {
    long temp;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return temp;
}
public static Long func_920a8c01d3c54497ad2ffc3ba41bf981(Long[] arr, Integer N, Long avg) {
    long temp;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return temp;
}


****** Cluster 349 ******
public static Integer func_ef5b3c29c48c491baf658e5f769957bc(Long[] arr, Integer N, Long avg) {
    long temp;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return index;
}
public static Integer func_8db636ad68dc4f5a8537ac1a24709ad0(Long[] arr, Integer N, Long avg) {
    long temp;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return index;
}


****** Cluster 350 ******
public static Integer func_78f80bf19a5e4fc99a6e75f897d283ca(Long[] arr, Integer N, Long avg) {
    long temp;
    int first = 0;
    int second = N - 1;
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    index = first + 1;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        second = index++;
    }
    return second;
}
public static Integer func_daca4f597a434621a8429dc7f935572c(Long[] arr, Integer N, Long avg) {
    long temp;
    int first = 0;
    int second = N - 1;
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    index = first + 1;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        second = index++;
    }
    return second;
}


****** Cluster 351 ******
public static Long func_654e06e8b11f419f9eaf06953725a76b(Integer numtie, Long[] v, Integer i, Long waste) {
    long dif = v[i + numtie] - v[i];
    waste = waste + (long) numtie.intValue() * dif;
    return waste;
}
public static Long func_0dd861c4c222470c9fae5a2b713fcaf5(Integer numtie, Long[] v, Integer i, Long waste) {
    long dif = v[i + numtie] - v[i];
    Long.valueOf(waste + (long) numtie.intValue() * dif);
    return dif;
}


****** Cluster 352 ******
public static Long func_a8fd80ece0ad41799c6f555c28327095(Integer numtie, Integer i, Long waste, Long dif, Long bet) {
    waste = waste + (long) numtie.intValue() * dif;
    Long.valueOf(bet + (long) i.intValue() * dif);
    return waste;
}
public static Long func_d22c4e7e26424813a222bf99aeea38a9(Integer numtie, Integer i, Long waste, Long dif, Long bet) {
    waste = waste + (long) numtie.intValue() * dif;
    Long.valueOf(bet + (long) i.intValue() * dif);
    Integer.valueOf(numtie + 1);
    return waste;
}


****** Cluster 353 ******
public static Long func_b3e2d0515f474c8abc7d09ad6d1ab563(Integer numtie, Integer i, Long waste, Long dif, Long bet) {
    Long.valueOf(waste + (long) numtie.intValue() * dif);
    bet = bet + (long) i.intValue() * dif;
    return bet;
}
public static Long func_c988d7158d6340bdb1dc57e5ea6212c6(Integer numtie, Integer i, Long waste, Long dif, Long bet) {
    Long.valueOf(waste + (long) numtie.intValue() * dif);
    bet = bet + (long) i.intValue() * dif;
    Integer.valueOf(numtie + 1);
    return bet;
}


****** Cluster 354 ******
public static Long func_ee8ebec4f5a84219ac79d713f2e579f4(Long initadd, Integer numtie, Long[] v, Integer i, Long dif) {
    Integer.valueOf(numtie + 1);
    Long[] arrlong = v;
    int n = i;
    arrlong[n] = arrlong[n] + dif;
    initadd = initadd + dif;
    return initadd;
}
public static Long func_e62b028ab6f54b4d917c120af8ac8164(Integer numtie, Long initadd, Long[] v, Integer i, Long waste) {
    Long[] arrlong = v;
    int n = i;
    arrlong[n] = arrlong[n] + 1L;
    Long.valueOf(initadd + 1L);
    waste = waste + (long) numtie.intValue();
    return waste;
}


****** Cluster 355 ******
public static Integer func_482c1710f36e40a38932c7ab83c65856(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    int index;
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    long temp = 0L;
    for (index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return index;
}
public static Integer func_4e83859813d54072bf5962b8e27c6461(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    int index;
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    long temp = 0L;
    for (index = 0; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return index;
}


****** Cluster 356 ******
public static Double func_dcf250e9eec14fc18b0dcc956dee735c(Long[] a2, Long bet, Integer count) {
    int i;
    double win = 0.0;
    for (i = 0; i < count; ++i) {
        win -= (double) (bet - a2[i]);
        win += 1.0 / (double) count.intValue() * 36.0 * (double) (bet - a2[i]);
    }
    for (i = count.intValue(); i < a2.length; ++i) {
        if (a2[i] > bet)
            continue;
        win -= (double) (bet + 1L - a2[i]);
    }
    return win;
}
public static double func_3b8342ebf88d4b52855e92d3ea5c67ec(Long[] a2, Long bet, Integer count) {
    int i;
    double win = 0.0;
    for (i = 0; i < count; ++i) {
        win -= (double) (bet - a2[i]);
        win += 1.0 / (double) count.intValue() * 36.0 * (double) (bet - a2[i]);
    }
    for (i = count.intValue(); i < a2.length; ++i) {
        if (a2[i] > bet)
            continue;
        win -= (double) (bet + 1L - a2[i]);
    }
    return win;
}


****** Cluster 357 ******
public static Long func_37a834b961df4909b246c7add7072e94(Integer count, Long bet, Long[] a2) {
    int i;
    long result = 0L;
    for (i = 0; i < count; ++i) {
        result += bet - a2[i];
    }
    for (i = count.intValue(); i < a2.length; ++i) {
        if (a2[i] > bet)
            continue;
        result += bet + 1L - a2[i];
    }
    return result;
}
public static long func_11db09aa2619464abcee26b35f95d258(Integer count, Long bet, Long[] a2) {
    int i;
    long result = 0L;
    for (i = 0; i < count; ++i) {
        result += bet - a2[i];
    }
    for (i = count.intValue(); i < a2.length; ++i) {
        if (a2[i] > bet)
            continue;
        result += bet + 1L - a2[i];
    }
    return result;
}


****** Cluster 358 ******
public static Long func_e66995f13ab34625b9d4d1e2e79a93f5(Long[] arr, Integer N, Long sum) {
    long temp;
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return temp;
}
public static Long func_88683d7a43fc479ba59baf4c491f6b39(Long[] arr, Integer N, Long sum) {
    long temp;
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return temp;
}


****** Cluster 359 ******
public static Integer func_94b2cbcf00c94dab879f3ac6d7eaf827(Long floor, Long[] a2) {
    int cnt = 0;
    for (int i = 0; i < 37 && a2[i] <= floor; ++i) {
        ++cnt;
    }
    return cnt;
}
public static Integer func_8c7943b450d847ce8e80ca2814ac6178(Long floor, Long[] a2) {
    int cnt = 0;
    for (int i = 0; i < 37 && a2[i] <= floor; ++i) {
        ++cnt;
    }
    return cnt;
}


****** Cluster 360 ******
public static Integer func_b191231a54d04d4bac7f9c46e6d8ad92(Long[] arr, Integer N, Long sum) {
    long temp;
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return index;
}
public static Integer func_f85600f16f314e8790d1cf1b99a8a7a8(Long[] arr, Integer N, Long sum) {
    long temp;
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return index;
}


****** Cluster 361 ******
public static Double func_015172081cc54c459ff9eb6f5898d7de(Long[] x2, Integer w, Long min, Double res, Integer cnt, Long[] bets) {
    int i;
    for (i = 0; i < x2.length; ++i) {
        if (x2[i] != min)
            continue;
        cnt = cnt + 1;
    }
    for (i = 0; i < x2.length; ++i) {
        if (x2[i] != min)
            continue;
        res = res + 1.0 / (double) cnt.intValue() * (double) bets[i].longValue() * (double) w.intValue();
    }
    return res;
}
public static double func_137668e8543a49cabac46ebf35da8e17(Long[] x2, Integer w, Long min, Double res, Integer cnt, Long[] bets) {
    int i;
    for (i = 0; i < x2.length; ++i) {
        if (x2[i] != min)
            continue;
        cnt = cnt + 1;
    }
    for (i = 0; i < x2.length; ++i) {
        if (x2[i] != min)
            continue;
        res = res + 1.0 / (double) cnt.intValue() * (double) bets[i].longValue() * (double) w.intValue();
    }
    return res;
}


****** Cluster 362 ******
public static Double func_e17499383e964013b9a000cbe3169868(Long[] x2, Integer w, Long min, Double res, Long[] bets) {
    int i;
    int cnt = 0;
    for (i = 0; i < x2.length; ++i) {
        if (x2[i] != min)
            continue;
        ++cnt;
    }
    for (i = 0; i < x2.length; ++i) {
        if (x2[i] != min)
            continue;
        res = res + 1.0 / (double) cnt * (double) bets[i].longValue() * (double) w.intValue();
    }
    return res;
}
public static double func_39a6acea87424db1a1962857a8a76a78(Long[] x2, Integer w, Long min, Double res, Long[] bets) {
    int i;
    int cnt = 0;
    for (i = 0; i < x2.length; ++i) {
        if (x2[i] != min)
            continue;
        ++cnt;
    }
    for (i = 0; i < x2.length; ++i) {
        if (x2[i] != min)
            continue;
        res = res + 1.0 / (double) cnt * (double) bets[i].longValue() * (double) w.intValue();
    }
    return res;
}


****** Cluster 363 ******
public static double func_2e589ef636b4463bb934bc3619121bc0(Long[] x2, Integer w, Long min, Double res, Integer cnt, Long[] bets) {
    for (int i = 0; i < x2.length; ++i) {
        if (x2[i] != min)
            continue;
        res = res + 1.0 / (double) cnt.intValue() * (double) bets[i].longValue() * (double) w.intValue();
    }
    return res;
}
public static Double func_299c3a7fc76348e6af86e503068e4071(Long[] x2, Integer w, Long min, Double res, Integer cnt, Long[] bets) {
    for (int i = 0; i < x2.length; ++i) {
        if (x2[i] != min)
            continue;
        res = res + 1.0 / (double) cnt.intValue() * (double) bets[i].longValue() * (double) w.intValue();
    }
    return res;
}


****** Cluster 364 ******
public static Integer func_ae7771699e7045e78633a3ca889826ff(Long[] arr, Integer N, Long sum) {
    long temp;
    long avg = sum / 3L;
    int first = 0;
    int second = N - 1;
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    index = first + 1;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        second = index++;
    }
    return second;
}
public static Integer func_11d0e7a4fee047baa67da89ae88af59b(Long[] arr, Integer N, Long sum) {
    long temp;
    long avg = sum / 3L;
    int first = 0;
    int second = N - 1;
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    index = first + 1;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        second = index++;
    }
    return second;
}


****** Cluster 365 ******
public static Long func_3cb9cc1ce110459e8be4ddf0d9bc7389(Long[] arr, Integer N, Long sum) {
    long temp;
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return avg;
}
public static Long func_4bdf8b5ac05542ddbacac324717f6dd4(Long[] arr, Integer N, Long sum) {
    long temp;
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return avg;
}


****** Cluster 366 ******
public static Long func_8cc9c793fc664ee2a690dc6e0820789a(Long[] x2) {
    long res = Long.MAX_VALUE;
    Long[] arr$ = x2;
    int len$ = arr$.length;
    for (int i$ = 0; i$ < len$; ++i$) {
        long xx = arr$[i$];
        if (xx >= res)
            continue;
        res = xx;
    }
    return res;
}
public static long func_3b0e83fe0a194e82a1ab62d5cbaf086d(Long[] x2) {
    long res = Long.MAX_VALUE;
    Long[] arr$ = x2;
    int len$ = arr$.length;
    for (int i$ = 0; i$ < len$; ++i$) {
        long xx = arr$[i$];
        if (xx >= res)
            continue;
        res = xx;
    }
    return res;
}
def func_64370f211be94eb09baf3bf3468e6614(y):
    ymin = min(y)
    count = 0
    return ymin

def func_7898c03239094d6b88103ae04fe50725(y):
    ymin = min(y)
    count = 0
    total = 0
    return ymin

def func_28a4c60450ee4c18a36d793eb38b1698(a):
    m = min(a)
    res = 0.0
    return m

def func_49bf619db5644a76a059afcf7d9d5f25(a):
    m = min(a)
    res = 0.0
    k = 0
    return m

def func_6ba6a21b2a2d43148d994bac1df78e7a(x):
    x = sorted(x)
    lo = min(x)
    hi = max(x)
    return lo

def func_7828b96ed9024ef28fa4c953139672e4(x):
    x = sorted(x)
    lo = min(x)
    return lo

def func_7e72a51a0427499ab4bba0a107c24e4e(x):
    lo = min(x)
    hi = max(x)
    return lo

def func_8554b3480b7c49bf8d6510648af5974e(x):
    if len(x) < 37:
        x = x + [0] * (37 - len(x))
    x = sorted(x)
    lo = min(x)
    return lo

def func_b386aea9a37d4a559019a3f26a72c65e(x):
    if len(x) < 37:
        x = x + [0] * (37 - len(x))
    x = sorted(x)
    lo = min(x)
    hi = max(x)
    return lo



****** Cluster 367 ******
public static long func_929e1870bb9045fbbd0900ab7c31adea(Long[] x2, Long res) {
    Long[] arr$ = x2;
    int len$ = arr$.length;
    for (int i$ = 0; i$ < len$; ++i$) {
        long xx = arr$[i$];
        if (xx >= res)
            continue;
        res = xx;
    }
    return res;
}
public static Long func_7447be9cb6b6412ea183da0e05239323(Long[] x2, Long res) {
    Long[] arr$ = x2;
    int len$ = arr$.length;
    for (int i$ = 0; i$ < len$; ++i$) {
        long xx = arr$[i$];
        if (xx >= res)
            continue;
        res = xx;
    }
    return res;
}


****** Cluster 368 ******
public static Integer func_9ded43ce5b4c47f4868a2ef34d33c110(Integer[] x2) {
    int cnt = 0;
    Integer[] arr$ = x2;
    int len$ = arr$.length;
    for (int i$ = 0; i$ < len$; ++i$) {
        int tmp = arr$[i$];
        if (tmp != x2[0])
            continue;
        ++cnt;
    }
    return cnt;
}
public static Integer func_e2f6821a8eaf449f861361be6b375568(Integer[] x2) {
    int cnt = 0;
    Integer[] arr$ = x2;
    int len$ = arr$.length;
    for (int i$ = 0; i$ < len$; ++i$) {
        int tmp = arr$[i$];
        if (tmp != x2[0])
            continue;
        ++cnt;
    }
    return cnt;
}


****** Cluster 369 ******
public static Integer func_8eb820b5b8474e8090e8a217c6740bfc(Long p, Integer N, Long s, Long r, Long q) {
    int index;
    long[] arr = new long[N.intValue()];
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    long temp = 0L;
    for (index = 0; temp < avg && index < N; temp += arr[index], ++index) {
    }
    return index;
}
public static Integer func_3ce0d60c42064b79a4fdfe18845cbec4(Long p, Integer N, Long s, Long r, Long q) {
    int index;
    long[] arr = new long[N.intValue()];
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    N.intValue();
    long temp = 0L;
    for (index = 0; temp < avg && index < N; temp += arr[index], ++index) {
    }
    return index;
}


****** Cluster 370 ******
public static Long func_e7603c628b3f4eb699247c6fdce2067c(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    long temp;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return temp;
}
public static Long func_2e1c960c846b4822913779c00f5d931b(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    long temp;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return temp;
}


****** Cluster 371 ******
public static Integer func_2f0fbd53aaee4d65b0583c3f9588a1e6(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    long temp;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return index;
}
public static Integer func_8480127164fc4fdebdd16bd0b07092ba(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    long temp;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return index;
}


****** Cluster 372 ******
public static Integer func_c904e7086b30485bb4413bae138f44fc(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    long temp;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    int second = N - 1;
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    index = first + 1;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        second = index++;
    }
    return second;
}
public static Integer func_7495cc0c00fa4a42bbd62c2f168d08d2(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    long temp;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    int second = N - 1;
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    index = first + 1;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        second = index++;
    }
    return second;
}
public static Integer func_d6dba19d87b545839a157a46a38f4b7b(Long p, Long[] arr, Integer N, Long s, Long sum, Long[] dp, Long r, Long q) {
    long temp;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum = sum + arr[i];
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    int second = N - 1;
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    index = first + 1;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        second = index++;
    }
    double res = 0.0;
    for (int i = Math.max((int) 0, (int) (first - 100)); i < Math.min(N, first + 100); ++i) {
        for (int j = Math.max((int) 0, (int) (second - 100)); j < Math.min(N, second + 100); ++j) {
            if (j <= i)
                continue;
            long a2 = dp[i + 1];
            long b = dp[j] - dp[i + 1];
            long c = dp[N] - dp[j];
            long left = sum - Math.max(a2, Math.max(b, c));
            res = Math.max(res, 1.0 * (double) left / (double) sum.longValue());
        }
    }
    return second;
}


****** Cluster 373 ******
public static Long func_dd9b5835320e4ba691dce2750aa66c0d(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    long temp;
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return temp;
}
public static Long func_8d7d460c81fc49b4ab4c80a617e7049a(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    long temp;
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return temp;
}


****** Cluster 374 ******
public static Integer func_e23e848395ee46ab8aaa019c993caf38(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    long temp;
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return index;
}
public static Integer func_6409694230614b8b9f677edb35cd0cc4(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    long temp;
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return index;
}


****** Cluster 375 ******
public static Integer func_402780e679b64e4c87a4688b70a55a6e(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    long temp;
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    int second = N - 1;
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    index = first + 1;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        second = index++;
    }
    return second;
}
public static Integer func_72d018333ffe42bd9946e18141b9d12f(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    long temp;
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    int second = N - 1;
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    index = first + 1;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        second = index++;
    }
    return second;
}
public static Integer func_c45d4a7414614ab49e6c196e800417d6(Long p, Long[] arr, Integer N, Long s, Long[] dp, Long r, Long q) {
    long temp;
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    int second = N - 1;
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    index = first + 1;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        second = index++;
    }
    double res = 0.0;
    for (int i = Math.max((int) 0, (int) (first - 100)); i < Math.min(N, first + 100); ++i) {
        for (int j = Math.max((int) 0, (int) (second - 100)); j < Math.min(N, second + 100); ++j) {
            if (j <= i)
                continue;
            long a2 = dp[i + 1];
            long b = dp[j] - dp[i + 1];
            long c = dp[N] - dp[j];
            long left = sum - Math.max(a2, Math.max(b, c));
            res = Math.max(res, 1.0 * (double) left / (double) sum);
        }
    }
    return second;
}


****** Cluster 376 ******
public static Long func_ae3d05dba6b34a9db30ac3c70baa9bcf(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long temp;
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return temp;
}
public static Long func_d4f863b723424f1cab2313e86ec90e8d(Long p, Long[] arr, Integer N, Long s, Long r, Long q) {
    long temp;
    long[] dp = new long[N + 1];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        sum += arr[i].longValue();
        dp[i + 1] = dp[i] + arr[i];
    }
    long avg = sum / 3L;
    int first = 0;
    N.intValue();
    int index = 0;
    for (temp = 0L; temp < avg && index < N; temp += arr[index].longValue()) {
        first = index++;
    }
    temp = 0L;
    for (index = first + 1; temp < avg && index < N; temp += arr[index].longValue(), ++index) {
    }
    return temp;
}


****** Cluster 377 ******
public static Integer func_21343093404b4718979e9c922638f506$695c3767(Long temp, Long[] arr, Integer index) {
    Long.valueOf(temp + arr[index]);
    Integer first = index;
    return first;
}
public static Integer func_a1c664805a494ef1ba5656012c9ec5db$695c3767(Long temp, Long[] arr, Integer index) {
    Long.valueOf(temp + arr[index]);
    Integer first = index;
    Integer.valueOf(index + 1);
    return first;
}
public static Integer func_5851615f4b0042a79608d8e7be30f88a$695c3767(Long temp, Long[] arr, Integer index) {
    Long.valueOf(temp + arr[index]);
    Integer second = index;
    return second;
}
public static Integer func_3635ba517b214ed999ddae4caa5d4c94$695c3767(Long temp, Long[] arr, Integer index) {
    Long.valueOf(temp + arr[index]);
    Integer second = index;
    Integer.valueOf(index + 1);
    return second;
}
public static Integer func_ecc310e002c4476a8de74b1bc2bc5467(Integer N, Long[] sums, Integer start) {
    sums[start].longValue();
    int left = start;
    N.intValue();
    return left;
}


****** Cluster 378 ******
public static Long func_df0186878d3a42f5a4a7973483e6611b(Integer j, Long a2, Integer N, Long sum, Double res, Long[] dp, Long b) {
    long c = dp[N] - dp[j];
    long left = sum - Math.max(a2, Math.max(b, c));
    Double.valueOf(Math.max(res, 1.0 * (double) left / (double) sum.longValue()));
    return c;
}
public static Double func_a4349ec913d4431e8653285ad55f0f6c(Integer j, Long a2, Integer N, Long sum, Double res, Long[] dp, Long b) {
    long c = dp[N] - dp[j];
    long left = sum - Math.max(a2, Math.max(b, c));
    res = Math.max(res, 1.0 * (double) left / (double) sum.longValue());
    return res;
}
public static Long func_05b1d475bdbb4f09a83d410f1b268cae(Integer j, Long a2, Integer N, Long sum, Double res, Long[] dp, Long b) {
    long c = dp[N] - dp[j];
    long left = sum - Math.max(a2, Math.max(b, c));
    Double.valueOf(Math.max(res, 1.0 * (double) left / (double) sum.longValue()));
    return left;
}


****** Cluster 379 ******
public static Long func_6e164df05e5b4937a3a43415c045535f(Integer l, Long[] s, Integer n, Integer delta, Integer r, Long best) {
    if ((l = Integer.valueOf(l + delta)) >= 1 && l <= r) {
        long cur = 0L;
        cur = Math.max(cur, s[l - 1]);
        cur = Math.max(cur, s[r] - s[l - 1]);
        cur = Math.max(cur, s[n] - s[r]);
        best = Math.min(best, cur);
    }
    return best;
}
public static Long func_c738e5f5eb05448893ce78a351c94387(Integer l, Long[] s, Integer n, Integer delta, Integer r, Long best) {
    if ((l = Integer.valueOf(l + delta)) >= 1 && l <= r) {
        long cur = 0L;
        cur = Math.max(cur, s[l - 1]);
        cur = Math.max(cur, s[r] - s[l - 1]);
        cur = Math.max(cur, s[n] - s[r]);
        best = Math.min(best, cur);
    }
    Integer.valueOf(l - delta);
    return best;
}


****** Cluster 380 ******
public static Long func_572f6f81be2841fa9c876dcd953ec997(Long[] s, Integer[] a2, Integer n) {
    for (int i = 0; i < n; ++i) {
        s[i + 1] = s[i] + (long) a2[i].intValue();
    }
    long best = s[n];
    return best;
}
public static Long func_cad586ca4a2a4c4eb350b3715c604259(Long[] sum, Integer[] a2, Integer n) {
    for (int i = 0; i < n; ++i) {
        sum[i + 1] = sum[i] + (long) a2[i].intValue();
    }
    long x2 = sum[n];
    return x2;
}
public static Long func_05f716ce0aa94474bd38b8597130c204(Long[] sum, Integer[] a2, Integer n) {
    for (int i = 0; i < n; ++i) {
        sum[i + 1] = sum[i] + (long) a2[i].intValue();
    }
    long x2 = sum[n];
    return x2;
}
public static Long func_4cbf1a24aeb0419281dad02d480eaa49(Long[] pref, Integer[] a2, Integer n) {
    for (int i = 0; i < n; ++i) {
        pref[i + 1] = pref[i] + (long) a2[i].intValue();
    }
    long high = pref[n];
    return high;
}
public static Long func_f03451fe53544bd38d2e95daf2fef60a(Long[] pref, Integer[] a2, Integer n) {
    for (int i = 0; i < n; ++i) {
        pref[i + 1] = pref[i] + (long) a2[i].intValue();
    }
    long low = 0L;
    long high = pref[n];
    block1: while (low + 1L < high) {
        long mid = (low + high) / 2L;
        int cur = 0;
        for (int i = 0; i < 3; ++i) {
            long need = pref[cur] + mid;
            int x2 = Arrays.binarySearch((Object[]) pref, (Object) need);
            if (x2 < 0) {
                x2 = -x2 - 2;
            }
            if (x2 == n) {
                high = mid;
                continue block1;
            }
            cur = x2;
        }
        low = mid;
    }
    return high;
}


****** Cluster 381 ******
public static Long func_9f6cb29490e34813ae31dccb43195ea8(Integer[] a2, Integer n) {
    long[] s = new long[n + 1];
    for (int i = 0; i < n; ++i) {
        s[i + 1] = s[i] + (long) a2[i].intValue();
    }
    long best = s[n];
    return best;
}
public static Long func_e94ce1a150ed4bc8968718c16d78a51f(Integer[] a2, Integer n) {
    long[] s = new long[n + 1];
    for (int i = 0; i < n; ++i) {
        s[i + 1] = s[i] + (long) a2[i].intValue();
    }
    int l = 1;
    long best = s[n];
    for (int r = 1; r <= n; ++r) {
        while (l < r && s[l - 1] < s[r] - s[l - 1]) {
            ++l;
        }
        for (int delta = -2; delta <= 2; ++delta) {
            if ((l += delta) >= 1 && l <= r) {
                long cur = 0L;
                cur = Math.max(cur, s[l - 1]);
                cur = Math.max(cur, s[r] - s[l - 1]);
                cur = Math.max(cur, s[n] - s[r]);
                best = Math.min(best, cur);
            }
            l -= delta;
        }
    }
    return best;
}
public static Long func_23342a1149374a93ad38e0e1af7b5e6e(Integer[] array, Integer n) {
    long[] partials = new long[n + 1];
    for (int i = 1; i <= n; ++i) {
        partials[i] = partials[i - 1] + (long) array[i - 1].intValue();
    }
    long best = partials[n];
    return best;
}
public static Long func_f1d0f459b6644d4f870de57eeb8d6d7f(Integer[] a2, Integer n) {
    long[] pref = new long[n + 1];
    for (int i = 0; i < n; ++i) {
        pref[i + 1] = pref[i] + (long) a2[i].intValue();
    }
    long high = pref[n];
    return high;
}
public static Long func_68e28783ea774e58a971c9c193caa65e(Integer[] a2, Integer n) {
    long[] pref = new long[n + 1];
    for (int i = 0; i < n; ++i) {
        pref[i + 1] = pref[i] + (long) a2[i].intValue();
    }
    long low = 0L;
    long high = pref[n];
    block1: while (low + 1L < high) {
        long mid = (low + high) / 2L;
        int cur = 0;
        for (int i = 0; i < 3; ++i) {
            long need = pref[cur] + mid;
            int x2 = Arrays.binarySearch(pref, need);
            if (x2 < 0) {
                x2 = -x2 - 2;
            }
            if (x2 == n) {
                high = mid;
                continue block1;
            }
            cur = x2;
        }
        low = mid;
    }
    return high;
}
public static Long func_ef50b8c392b84555bc3a34fb020ad92c(Integer[] a2, Integer n) {
    long[] pref = new long[n + 1];
    for (int i = 0; i < n; ++i) {
        pref[i + 1] = pref[i] + (long) a2[i].intValue();
    }
    long low = 0L;
    long high = pref[n];
    block1: while (low + 1L < high) {
        long mid = (low + high) / 2L;
        int cur = 0;
        for (int i = 0; i < 3; ++i) {
            long need = pref[cur] + mid;
            int x2 = Arrays.binarySearch(pref, need);
            if (x2 < 0) {
                x2 = -x2 - 2;
            }
            if (x2 == n) {
                high = mid;
                continue block1;
            }
            cur = x2;
        }
        low = mid;
    }
    n.intValue();
    n.intValue();
    return high;
}


****** Cluster 382 ******
public static Long func_dcc6c5f3006e4d7ca89f4264243ec7a6(Long[] a2, Long[] b) {
    long result = 0L;
    for (int t = 1; t < a2.length - 1; ++t) {
        int l = 0;
        int h = t - 1;
        while (h > l) {
            int mid = l + h >> 1;
            if (a2[t] - a2[mid] >= a2[mid] && a2[t] - a2[mid] >= b[t + 1]) {
                l = mid + 1;
                continue;
            }
            h = mid;
        }
        if (a2[t] - a2[h] < a2[h] || a2[t] - a2[h] < b[t + 1]) {
            --h;
        }
        if (h < 0 || a2[t] - a2[h] < a2[h] || a2[t] - a2[h] < b[t + 1])
            continue;
        result = Math.max(result, a2[h] + b[t + 1]);
    }
    return result;
}
public static long func_0c38ab4dff76402f88d94fd8b9c2e49b(Long[] a2, Long[] b) {
    long result = 0L;
    for (int t = 1; t < a2.length - 1; ++t) {
        int l = 0;
        int h = t - 1;
        while (h > l) {
            int mid = l + h >> 1;
            if (a2[t] - a2[mid] >= a2[mid] && a2[t] - a2[mid] >= b[t + 1]) {
                l = mid + 1;
                continue;
            }
            h = mid;
        }
        if (a2[t] - a2[h] < a2[h] || a2[t] - a2[h] < b[t + 1]) {
            --h;
        }
        if (h < 0 || a2[t] - a2[h] < a2[h] || a2[t] - a2[h] < b[t + 1])
            continue;
        result = Math.max(result, a2[h] + b[t + 1]);
    }
    return result;
}


****** Cluster 383 ******
public static long func_4dab5c55f0ed48919156ae03b3539ecc(Long result, Long[] a2, Long[] b) {
    for (int t = 1; t < a2.length - 1; ++t) {
        int l = 0;
        int h = t - 1;
        while (h > l) {
            int mid = l + h >> 1;
            if (a2[t] - a2[mid] >= a2[mid] && a2[t] - a2[mid] >= b[t + 1]) {
                l = mid + 1;
                continue;
            }
            h = mid;
        }
        if (a2[t] - a2[h] < a2[h] || a2[t] - a2[h] < b[t + 1]) {
            --h;
        }
        if (h < 0 || a2[t] - a2[h] < a2[h] || a2[t] - a2[h] < b[t + 1])
            continue;
        result = Math.max(result, a2[h] + b[t + 1]);
    }
    return result;
}
public static Long func_d0457a5d4f65433f8f7d8ce11bae0e73(Long result, Long[] a2, Long[] b) {
    for (int t = 1; t < a2.length - 1; ++t) {
        int l = 0;
        int h = t - 1;
        while (h > l) {
            int mid = l + h >> 1;
            if (a2[t] - a2[mid] >= a2[mid] && a2[t] - a2[mid] >= b[t + 1]) {
                l = mid + 1;
                continue;
            }
            h = mid;
        }
        if (a2[t] - a2[h] < a2[h] || a2[t] - a2[h] < b[t + 1]) {
            --h;
        }
        if (h < 0 || a2[t] - a2[h] < a2[h] || a2[t] - a2[h] < b[t + 1])
            continue;
        result = Math.max(result, a2[h] + b[t + 1]);
    }
    return result;
}


****** Cluster 384 ******
public static Long func_65ae66c364db4d9895bd4e9737ff405e(Long[] weights, Integer n, Integer i) {
    long t = weights[i];
    weights[i.intValue()] = weights[n - 1 - i];
    return t;
}
public static Long func_b0888b82090849178ae3de64dd1c6cca(Long[] weights, Integer n, Integer i) {
    long t = weights[i];
    weights[i.intValue()] = weights[n - 1 - i];
    weights[n.intValue() - 1 - i.intValue()] = t;
    return t;
}


****** Cluster 385 ******
public static Long func_6a64d50065944388bedbc2a2ccd43748(Long[] weights, Integer n) {
    int i;
    long[] forward = new long[n.intValue()];
    long[] backward = new long[n.intValue()];
    for (i = 0; i < forward.length; ++i) {
        forward[i] = weights[i];
        if (i == 0)
            continue;
        long[] arrl = forward;
        int n2 = i;
        arrl[n2] = arrl[n2] + forward[i - 1];
    }
    for (i = n.intValue() - 1; i >= 0; --i) {
        backward[i] = weights[i];
        if (i == n - 1)
            continue;
        long[] arrl = backward;
        int n3 = i;
        arrl[n3] = arrl[n3] + backward[i + 1];
    }
    long result = 0L;
    for (int i2 = 1; i2 < n; ++i2) {
        result = Math.max(result, Math.min(forward[i2 - 1], backward[i2]));
    }
    return result;
}
public static Long func_ec5f7ca06fac47539ac758217e71d56c(Long[] nums, Integer n) {
    long[] rsum = new long[n.intValue()];
    for (int i = 0; i < n; ++i) {
        if (i != 0) {
            long[] arrl = rsum;
            int n2 = i;
            arrl[n2] = arrl[n2] + rsum[i - 1];
        }
        long[] arrl = rsum;
        int n3 = i;
        arrl[n3] = arrl[n3] + nums[i];
    }
    long best = 0L;
    for (int i = 0; i < n; ++i) {
        long suffSum;
        long sum;
        long prefixSum;
        int low = i;
        int high = n - 1;
        long l = prefixSum = i == 0 ? 0L : rsum[i - 1];
        while (high - low > 1) {
            int mid = (high + low) / 2;
            sum = rsum[mid] - prefixSum;
            suffSum = rsum[n - 1] - sum - prefixSum;
            if (sum <= suffSum) {
                low = mid;
                continue;
            }
            high = mid;
        }
        for (int j = low; j <= high; ++j) {
            sum = rsum[j] - prefixSum;
            suffSum = rsum[n - 1] - sum - prefixSum;
            long max = Math.max(sum, suffSum);
            max = Math.max(max, prefixSum);
            best = Math.max(best, rsum[n - 1] - max);
        }
    }
    return best;
}


****** Cluster 386 ******
public static Long func_0095fdef5a55434c976d5aa58c365d74(Long[] b, Long[] a2) {
    long result = 0L;
    for (int i = 0; i < a2.length - 2; ++i) {
        long meSum = a2[i];
        int l = i + 1;
        int h = a2.length - 2;
        while (h > l) {
            int mid = l + h >> 1;
            if (a2[mid] - meSum <= meSum) {
                l = mid + 1;
                continue;
            }
            h = mid;
        }
        if (a2[h] - meSum > meSum) {
            --h;
        }
        if (h <= i || b[h + 1] > meSum)
            continue;
        result = Math.max(result, b[h + 1] + a2[h] - meSum);
    }
    return result;
}
public static long func_5caf528107b44b7ab62d1b69fffabbb9(Long[] b, Long[] a2) {
    long result = 0L;
    for (int i = 0; i < a2.length - 2; ++i) {
        long meSum = a2[i];
        int l = i + 1;
        int h = a2.length - 2;
        while (h > l) {
            int mid = l + h >> 1;
            if (a2[mid] - meSum <= meSum) {
                l = mid + 1;
                continue;
            }
            h = mid;
        }
        if (a2[h] - meSum > meSum) {
            --h;
        }
        if (h <= i || b[h + 1] > meSum)
            continue;
        result = Math.max(result, b[h + 1] + a2[h] - meSum);
    }
    return result;
}


****** Cluster 387 ******
public static long func_4f657b07c81f423496bf4f605a0f67fb(Long[] b, Long result, Long[] a2) {
    for (int i = 0; i < a2.length - 2; ++i) {
        long meSum = a2[i];
        int l = i + 1;
        int h = a2.length - 2;
        while (h > l) {
            int mid = l + h >> 1;
            if (a2[mid] - meSum <= meSum) {
                l = mid + 1;
                continue;
            }
            h = mid;
        }
        if (a2[h] - meSum > meSum) {
            --h;
        }
        if (h <= i || b[h + 1] > meSum)
            continue;
        result = Math.max(result, b[h + 1] + a2[h] - meSum);
    }
    return result;
}
public static Long func_f273d8ac10cd4e199dc444737d93b472(Long[] b, Long result, Long[] a2) {
    for (int i = 0; i < a2.length - 2; ++i) {
        long meSum = a2[i];
        int l = i + 1;
        int h = a2.length - 2;
        while (h > l) {
            int mid = l + h >> 1;
            if (a2[mid] - meSum <= meSum) {
                l = mid + 1;
                continue;
            }
            h = mid;
        }
        if (a2[h] - meSum > meSum) {
            --h;
        }
        if (h <= i || b[h + 1] > meSum)
            continue;
        result = Math.max(result, b[h + 1] + a2[h] - meSum);
    }
    return result;
}


****** Cluster 388 ******
public static Integer func_a212ba2fa3e94c3f9f2a834f5945f059(Integer i, Long[] a2) {
    long meSum = a2[i];
    int l = i + 1;
    int h = a2.length - 2;
    while (h > l) {
        int mid = l + h >> 1;
        if (a2[mid] - meSum <= meSum) {
            l = mid + 1;
            continue;
        }
        h = mid;
    }
    return l;
}
public static Integer func_fcbcce4b2f4a4b13ad269a7e8d022b19(Integer i, Long[] a2) {
    long meSum = a2[i];
    int l = i + 1;
    int h = a2.length - 2;
    while (h > l) {
        int mid = l + h >> 1;
        if (a2[mid] - meSum <= meSum) {
            l = mid + 1;
            continue;
        }
        h = mid;
    }
    a2[h].longValue();
    return l;
}


****** Cluster 389 ******
public static Integer func_d55d4b3368314e3ab1337f9a7f064c54(Integer i, Long meSum, Long[] a2) {
    int l = i + 1;
    int h = a2.length - 2;
    while (h > l) {
        int mid = l + h >> 1;
        if (a2[mid] - meSum <= meSum) {
            l = mid + 1;
            continue;
        }
        h = mid;
    }
    a2[h].longValue();
    meSum.longValue();
    meSum.longValue();
    return l;
}
public static Integer func_45ba4b849da84fc4b600947f64469ab2(Integer i, Long meSum, Long[] a2) {
    int l = i + 1;
    int h = a2.length - 2;
    while (h > l) {
        int mid = l + h >> 1;
        if (a2[mid] - meSum <= meSum) {
            l = mid + 1;
            continue;
        }
        h = mid;
    }
    return l;
}


****** Cluster 390 ******
public static Integer func_eb9b037a9eca479394ac4a0c1e4c7827(Integer i, Long[] a2) {
    a2[i].longValue();
    int l = i + 1;
    return l;
}
public static Integer func_c02609ddcdb24489a9e3e1f3b38f0929(Integer i, Long[] a2) {
    a2[i].longValue();
    int l = i + 1;
    return l;
}


****** Cluster 391 ******
public static Integer func_1bc1e5a3ce8b4eee88268979a3269c47(Integer l, Long meSum, Long[] a2) {
    int h = a2.length - 2;
    while (h > l) {
        int mid = l + h >> 1;
        if (a2[mid] - meSum <= meSum) {
            l = mid + 1;
            continue;
        }
        h = mid;
    }
    return l;
}
public static Integer func_220de4e605044b86b9cdec74bb781dcb(Integer l, Long meSum, Long[] a2) {
    int h = a2.length - 2;
    while (h > l) {
        int mid = l + h >> 1;
        if (a2[mid] - meSum <= meSum) {
            l = mid + 1;
            continue;
        }
        h = mid;
    }
    a2[h].longValue();
    meSum.longValue();
    meSum.longValue();
    return l;
}


****** Cluster 392 ******
public static Long func_eaf55ed40edc4fa7afc503e2cd24d85a(Long q, Integer c, Long[] a2) {
    q = q + a2[c];
    Integer.valueOf(c + 1);
    return q;
}
public static Long func_443fc981b166432aa557aa37dc1ff5c2(Long q, Integer c, Long[] a2) {
    q = q + a2[c];
    Integer.valueOf(c + 1);
    return q;
}
public static Long func_ccb8a716677342218bbdd30bac8ff239(Long q, Integer c, Long[] a2) {
    q = q + a2[c];
    Integer.valueOf(c + 1);
    return q;
}
public static Long func_c07e56c11307429e9534337a101a93b4(Long x2, Integer i, Long[] a2) {
    x2 = x2 + a2[i];
    Integer.valueOf(i + 1);
    return x2;
}


****** Cluster 393 ******
public static Integer func_974f79e3e90e413e9ceb4fb5a514363c(Integer n, Long[] a2, Long m) {
    int c;
    long q = 0L;
    for (c = 0; c < n && q + a2[c] <= m; ++c) {
        q += a2[c].longValue();
    }
    return c;
}
public static Integer func_72effc903b2c470494b7366d45d092e4(Integer n, Long[] a2, Long m) {
    int c;
    long q = 0L;
    for (c = 0; c < n && q + a2[c] <= m; ++c) {
        q += a2[c].longValue();
    }
    return c;
}
public static Integer func_3f656c4296cb4d34a2f5f7e14ed7b6cb(Integer n, Long[] a2, Long m) {
    int c;
    long q = 0L;
    for (c = 0; c < n && q + a2[c] <= m; ++c) {
        q += a2[c].longValue();
    }
    q = 0L;
    while (c < n && q + a2[c] <= m) {
        q += a2[c].longValue();
        ++c;
    }
    return c;
}
public static Integer func_040d606038394a8ba5d3b4f4e52ed17f(Integer n, Long[] a2, Long m) {
    int c;
    long q = 0L;
    for (c = 0; c < n && q + a2[c] <= m; ++c) {
        q += a2[c].longValue();
    }
    q = 0L;
    while (c < n && q + a2[c] <= m) {
        q += a2[c].longValue();
        ++c;
    }
    return c;
}
public static Integer func_426950deb91049088c7af55eeb8f77e5(Integer n, Long[] a2, Long m) {
    int c;
    long q = 0L;
    for (c = 0; c < n && q + a2[c] <= m; ++c) {
        q += a2[c].longValue();
    }
    q = 0L;
    while (c < n && q + a2[c] <= m) {
        q += a2[c].longValue();
        ++c;
    }
    q = 0L;
    while (c < n && q + a2[c] <= m) {
        q += a2[c].longValue();
        ++c;
    }
    return c;
}
public static Integer func_ceabd7ef175547399f6b50754daa0f42$510b42aa(Integer n, Long[] a2, Long m) {
    int c;
    long q = 0L;
    for (c = 0; c < n && q + a2[c] <= m; ++c) {
        q += a2[c].longValue();
    }
    q = 0L;
    while (c < n && q + a2[c] <= m) {
        q += a2[c].longValue();
        ++c;
    }
    q = 0L;
    while (c < n && q + a2[c] <= m) {
        q += a2[c].longValue();
        ++c;
    }
    n.intValue();
    return c;
}


****** Cluster 394 ******
public static Long func_f9979c778a15423e8e9032db3dd62ba4(Integer n, Long[] a2, Long m) {
    int c;
    long q = 0L;
    for (c = 0; c < n && q + a2[c] <= m; ++c) {
        q += a2[c].longValue();
    }
    q = 0L;
    while (c < n && q + a2[c] <= m) {
        q += a2[c].longValue();
        ++c;
    }
    return q;
}
public static Long func_d5bea643797c4f0bb79db90d7f689c33(Integer n, Long[] a2, Long m) {
    int c;
    long q = 0L;
    for (c = 0; c < n && q + a2[c] <= m; ++c) {
        q += a2[c].longValue();
    }
    q = 0L;
    while (c < n && q + a2[c] <= m) {
        q += a2[c].longValue();
        ++c;
    }
    q = 0L;
    while (c < n && q + a2[c] <= m) {
        q += a2[c].longValue();
        ++c;
    }
    return q;
}
public static Long func_864a3b52c17445c99af7671a4fee47b4$6ed82146(Integer n, Long[] a2, Long m) {
    int c;
    long q = 0L;
    for (c = 0; c < n && q + a2[c] <= m; ++c) {
        q += a2[c].longValue();
    }
    q = 0L;
    while (c < n && q + a2[c] <= m) {
        q += a2[c].longValue();
        ++c;
    }
    q = 0L;
    while (c < n && q + a2[c] <= m) {
        q += a2[c].longValue();
        ++c;
    }
    n.intValue();
    return q;
}


****** Cluster 395 ******
public static Boolean func_633eb605a20e454495fa45028923ac96(Integer n, Long[] a2, Long m) {
    boolean ok = true;
    for (int i = 0; i < n; ++i) {
        if (a2[i] <= m)
            continue;
        ok = false;
    }
    return ok;
}
public static Boolean func_3541eba615da42c89bde34c7faf70b30$48c2fac(Integer n, Long[] a2, Long m) {
    boolean ok = true;
    for (int i = 0; i < n; ++i) {
        if (a2[i] <= m)
            continue;
        ok = false;
    }
    if (ok) {
        int c;
        long q = 0L;
        for (c = 0; c < n && q + a2[c] <= m; ++c) {
            q += a2[c].longValue();
        }
        q = 0L;
        while (c < n && q + a2[c] <= m) {
            q += a2[c].longValue();
            ++c;
        }
        q = 0L;
        while (c < n && q + a2[c] <= m) {
            q += a2[c].longValue();
            ++c;
        }
        n.intValue();
    }
    return ok;
}


****** Cluster 396 ******
public static Boolean func_537aed927cd2406e9c2a8dc89a9c773f(Long r, Long l, Integer n, Long[] a2) {
    long m = (l + r) / 2L;
    boolean ok = true;
    for (int i = 0; i < n; ++i) {
        if (a2[i] <= m)
            continue;
        ok = false;
    }
    return ok;
}
public static Boolean func_44e4e7f0598f4c39a6ad0363f0b5cdba(Long r, Long l, Integer n, Long[] a2) {
    long m = (l + r) / 2L;
    boolean ok = true;
    for (int i = 0; i < n; ++i) {
        if (a2[i] <= m)
            continue;
        ok = false;
    }
    if (!ok) {
        Long.valueOf(m);
    } else {
        int c;
        long q = 0L;
        for (c = 0; c < n && q + a2[c] <= m; ++c) {
            q += a2[c].longValue();
        }
        q = 0L;
        while (c < n && q + a2[c] <= m) {
            q += a2[c].longValue();
            ++c;
        }
        q = 0L;
        while (c < n && q + a2[c] <= m) {
            q += a2[c].longValue();
            ++c;
        }
        if (c == n) {
            Long.valueOf(m);
        } else {
            Long.valueOf(m);
        }
    }
    return ok;
}


****** Cluster 397 ******
public static Long func_e2f61f4767f744e382633d37318b20fd(Long r, Long l, Integer n, Long[] a2) {
    long m = (l + r) / 2L;
    for (int i = 0; i < n; ++i) {
        a2[i].longValue();
    }
    return m;
}
public static Long func_1e711e2848d44917a6947506808718a1(Long r, Long l, Integer n, Long[] a2) {
    long m = (l + r) / 2L;
    boolean ok = true;
    for (int i = 0; i < n; ++i) {
        if (a2[i] <= m)
            continue;
        ok = false;
    }
    if (!ok) {
        Long.valueOf(m);
    } else {
        int c;
        long q = 0L;
        for (c = 0; c < n && q + a2[c] <= m; ++c) {
            q += a2[c].longValue();
        }
        q = 0L;
        while (c < n && q + a2[c] <= m) {
            q += a2[c].longValue();
            ++c;
        }
        q = 0L;
        while (c < n && q + a2[c] <= m) {
            q += a2[c].longValue();
            ++c;
        }
        if (c == n) {
            Long.valueOf(m);
        } else {
            Long.valueOf(m);
        }
    }
    return m;
}


****** Cluster 398 ******
public static Long func_46548f7fbc6f41438507b1e776dc00dc(Long P2, Long S, Long Q, Long R, Integer n, Long[] a2) {
    long ss = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * P2 + Q) % R + S;
        ss += a2[i].longValue();
    }
    return ss;
}
public static Long func_7ffb8d1ab89a44b98cbee020dc0fa3c1(Long P2, Long S, Long Q, Long R, Integer n, Long[] a2) {
    long ss = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * P2 + Q) % R + S;
        ss += a2[i].longValue();
    }
    return ss;
}
public static Long func_5ea5aa3052bc483789ba00e98eaaaf9c(Long P2, Long S, Long Q, Long R, Integer n, Long[] a2) {
    long ss = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * P2 + Q) % R + S;
        ss += a2[i].longValue();
    }
    long r = ss;
    return r;
}
public static Long func_ac559b64a8d84c55a4784706c518f16c(Long P2, Long S, Long Q, Long R, Integer n, Long[] a2) {
    long ss = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * P2 + Q) % R + S;
        ss += a2[i].longValue();
    }
    return ss;
}
public static Long func_191079a5ada644dbabd4914577562ef6(Long P2, Long S, Long Q, Long R, Integer n, Long[] a2) {
    long ss = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * P2 + Q) % R + S;
        ss += a2[i].longValue();
    }
    long l = 0L;
    long r = ss;
    while (r > l + 1L) {
        int c;
        long m = (l + r) / 2L;
        boolean ok = true;
        for (int i = 0; i < n; ++i) {
            if (a2[i] <= m)
                continue;
            ok = false;
        }
        if (!ok) {
            l = m;
            continue;
        }
        long q = 0L;
        for (c = 0; c < n && q + a2[c] <= m; ++c) {
            q += a2[c].longValue();
        }
        q = 0L;
        while (c < n && q + a2[c] <= m) {
            q += a2[c].longValue();
            ++c;
        }
        q = 0L;
        while (c < n && q + a2[c] <= m) {
            q += a2[c].longValue();
            ++c;
        }
        if (c == n) {
            r = m;
            continue;
        }
        l = m;
    }
    return ss;
}


****** Cluster 399 ******
public static Long func_9f745f5cc11d4dcd9851fcaf557708bf(Long P2, Long S, Long Q, Long R, Long ss, Integer n, Long[] a2) {
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * P2 + Q) % R + S;
        ss = ss + a2[i];
    }
    return ss;
}
public static Long func_83a79d44fe8a4ea6a52edfde4f24e35c(Long P2, Long S, Long Q, Long R, Long ss, Integer n, Long[] a2) {
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * P2 + Q) % R + S;
        ss = ss + a2[i];
    }
    long r = ss;
    return r;
}
public static Long func_22396e96393d4d69953ebe83fa799562(Long P2, Long S, Long Q, Long R, Long ss, Integer n, Long[] a2) {
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * P2 + Q) % R + S;
        ss = ss + a2[i];
    }
    ss.longValue();
    return ss;
}
public static Long func_e486ee9fb8da42318beaf5edffbfab71(Long P2, Long S, Long Q, Long R, Long ss, Integer n, Long[] a2) {
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * P2 + Q) % R + S;
        ss = ss + a2[i];
    }
    long l = 0L;
    long r = ss;
    while (r > l + 1L) {
        int c;
        long m = (l + r) / 2L;
        boolean ok = true;
        for (int i = 0; i < n; ++i) {
            if (a2[i] <= m)
                continue;
            ok = false;
        }
        if (!ok) {
            l = m;
            continue;
        }
        long q = 0L;
        for (c = 0; c < n && q + a2[c] <= m; ++c) {
            q += a2[c].longValue();
        }
        q = 0L;
        while (c < n && q + a2[c] <= m) {
            q += a2[c].longValue();
            ++c;
        }
        q = 0L;
        while (c < n && q + a2[c] <= m) {
            q += a2[c].longValue();
            ++c;
        }
        if (c == n) {
            r = m;
            continue;
        }
        l = m;
    }
    return ss;
}
public static Long func_6db2b064ae8d414bb2709cd2854ce407(Long P2, Long S, Long Q, Long R, Long ss, Integer n, Long[] a2) {
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * P2 + Q) % R + S;
        ss = ss + a2[i];
    }
    return ss;
}


****** Cluster 400 ******
public static Long func_a971cfebfe2e4492a28346e17b02e9cd(Long P2, Long S, Long Q, Long R, Integer n) {
    long[] a2 = new long[n.intValue()];
    long ss = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * P2 + Q) % R + S;
        ss += a2[i];
    }
    return ss;
}
public static Long func_fa50b1af957340399a2a3ad0068b8922(Long P2, Long S, Long Q, Long R, Integer n) {
    long[] a2 = new long[n.intValue()];
    long ss = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * P2 + Q) % R + S;
        ss += a2[i];
    }
    return ss;
}
public static Long func_747176027e86406290e5a4582d8a6ba1(Long P2, Long S, Long Q, Long R, Integer n) {
    long[] a2 = new long[n.intValue()];
    long ss = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * P2 + Q) % R + S;
        ss += a2[i];
    }
    long r = ss;
    return r;
}
public static Long func_8ba4dc584f3f4650bd9df39e88d0184c(Long P2, Long S, Long Q, Long R, Integer n) {
    long[] a2 = new long[n.intValue()];
    long ss = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * P2 + Q) % R + S;
        ss += a2[i];
    }
    return ss;
}
public static Long func_11b7684464fa4f97be1e93d7f69153f4(Long P2, Long S, Long Q, Long R, Integer n) {
    long[] a2 = new long[n.intValue()];
    long ss = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * P2 + Q) % R + S;
        ss += a2[i];
    }
    long l = 0L;
    long r = ss;
    while (r > l + 1L) {
        int c;
        long m = (l + r) / 2L;
        boolean ok = true;
        for (int i = 0; i < n; ++i) {
            if (a2[i] <= m)
                continue;
            ok = false;
        }
        if (!ok) {
            l = m;
            continue;
        }
        long q = 0L;
        for (c = 0; c < n && q + a2[c] <= m; ++c) {
            q += a2[c];
        }
        q = 0L;
        while (c < n && q + a2[c] <= m) {
            q += a2[c];
            ++c;
        }
        q = 0L;
        while (c < n && q + a2[c] <= m) {
            q += a2[c];
            ++c;
        }
        if (c == n) {
            r = m;
            continue;
        }
        l = m;
    }
    return ss;
}
public static Long func_283c1d6b6a50487288c6e874cb3eae17(Integer p, Integer s, Integer q, Integer r, Integer n) {
    int[] a2 = new int[n.intValue()];
    for (int i = 0; i < n; ++i) {
        a2[i] = (int) (((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue());
    }
    long[] pref = new long[n + 1];
    for (int i = 0; i < n; ++i) {
        pref[i + 1] = pref[i] + (long) a2[i];
    }
    long high = pref[n];
    return high;
}


****** Cluster 401 ******
public static Long func_c2920388f36746cb8db48a5b45c62a7f(Long P2, Long S, Long Q, Long R, Integer n) {
    long[] a2 = new long[n.intValue()];
    long ss = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * P2 + Q) % R + S;
        ss += a2[i];
    }
    long l = 0L;
    long r = ss;
    while (r > l + 1L) {
        int c;
        long m = (l + r) / 2L;
        boolean ok = true;
        for (int i = 0; i < n; ++i) {
            if (a2[i] <= m)
                continue;
            ok = false;
        }
        if (!ok) {
            l = m;
            continue;
        }
        long q = 0L;
        for (c = 0; c < n && q + a2[c] <= m; ++c) {
            q += a2[c];
        }
        q = 0L;
        while (c < n && q + a2[c] <= m) {
            q += a2[c];
            ++c;
        }
        q = 0L;
        while (c < n && q + a2[c] <= m) {
            q += a2[c];
            ++c;
        }
        if (c == n) {
            r = m;
            continue;
        }
        l = m;
    }
    return r;
}
public static Long func_a8c65ff3217c43b5950b25f9510fb3fb(Integer p, Integer s, Integer q, Integer r, Integer n) {
    int[] a2 = new int[n.intValue()];
    for (int i = 0; i < n; ++i) {
        a2[i] = (int) (((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue());
    }
    long[] pref = new long[n + 1];
    for (int i = 0; i < n; ++i) {
        pref[i + 1] = pref[i] + (long) a2[i];
    }
    long low = 0L;
    long high = pref[n];
    block2: while (low + 1L < high) {
        long mid = (low + high) / 2L;
        int cur = 0;
        for (int i = 0; i < 3; ++i) {
            long need = pref[cur] + mid;
            int x2 = Arrays.binarySearch(pref, need);
            if (x2 < 0) {
                x2 = -x2 - 2;
            }
            if (x2 == n) {
                high = mid;
                continue block2;
            }
            cur = x2;
        }
        low = mid;
    }
    return high;
}
public static Long func_c6f18d79d4194d7d94fddc7f6b42d8ee(Integer p, Integer s, Integer q, Integer r, Integer n) {
    int[] a2 = new int[n.intValue()];
    for (int i = 0; i < n; ++i) {
        a2[i] = (int) (((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue());
    }
    long[] pref = new long[n + 1];
    for (int i = 0; i < n; ++i) {
        pref[i + 1] = pref[i] + (long) a2[i];
    }
    long low = 0L;
    long high = pref[n];
    block2: while (low + 1L < high) {
        long mid = (low + high) / 2L;
        int cur = 0;
        for (int i = 0; i < 3; ++i) {
            long need = pref[cur] + mid;
            int x2 = Arrays.binarySearch(pref, need);
            if (x2 < 0) {
                x2 = -x2 - 2;
            }
            if (x2 == n) {
                high = mid;
                continue block2;
            }
            cur = x2;
        }
        low = mid;
    }
    n.intValue();
    n.intValue();
    return high;
}


****** Cluster 402 ******
public static Long func_f6dac92ec784488791b00aa06c3ace8d(Long P2, Long S, Long Q, Long R, Integer n) {
    long[] a2 = new long[n.intValue()];
    long ss = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * P2 + Q) % R + S;
        ss += a2[i];
    }
    long l = 0L;
    long r = ss;
    while (r > l + 1L) {
        int c;
        long m = (l + r) / 2L;
        boolean ok = true;
        for (int i = 0; i < n; ++i) {
            if (a2[i] <= m)
                continue;
            ok = false;
        }
        if (!ok) {
            l = m;
            continue;
        }
        long q = 0L;
        for (c = 0; c < n && q + a2[c] <= m; ++c) {
            q += a2[c];
        }
        q = 0L;
        while (c < n && q + a2[c] <= m) {
            q += a2[c];
            ++c;
        }
        q = 0L;
        while (c < n && q + a2[c] <= m) {
            q += a2[c];
            ++c;
        }
        if (c == n) {
            r = m;
            continue;
        }
        l = m;
    }
    return l;
}
public static Long func_3ac53da2512743dbb0011a667fd1712a(Integer p, Integer s, Integer q, Integer r, Integer n) {
    int[] a2 = new int[n.intValue()];
    for (int i = 0; i < n; ++i) {
        a2[i] = (int) (((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue());
    }
    long[] pref = new long[n + 1];
    for (int i = 0; i < n; ++i) {
        pref[i + 1] = pref[i] + (long) a2[i];
    }
    long low = 0L;
    long high = pref[n];
    block2: while (low + 1L < high) {
        long mid = (low + high) / 2L;
        int cur = 0;
        for (int i = 0; i < 3; ++i) {
            long need = pref[cur] + mid;
            int x2 = Arrays.binarySearch(pref, need);
            if (x2 < 0) {
                x2 = -x2 - 2;
            }
            if (x2 == n) {
                high = mid;
                continue block2;
            }
            cur = x2;
        }
        low = mid;
    }
    return low;
}
public static Long func_e7ee2158d5834d5ea0a386f87ef9dd1e(Integer p, Integer s, Integer q, Integer r, Integer n) {
    int[] a2 = new int[n.intValue()];
    for (int i = 0; i < n; ++i) {
        a2[i] = (int) (((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue());
    }
    long[] pref = new long[n + 1];
    for (int i = 0; i < n; ++i) {
        pref[i + 1] = pref[i] + (long) a2[i];
    }
    long low = 0L;
    long high = pref[n];
    block2: while (low + 1L < high) {
        long mid = (low + high) / 2L;
        int cur = 0;
        for (int i = 0; i < 3; ++i) {
            long need = pref[cur] + mid;
            int x2 = Arrays.binarySearch(pref, need);
            if (x2 < 0) {
                x2 = -x2 - 2;
            }
            if (x2 == n) {
                high = mid;
                continue block2;
            }
            cur = x2;
        }
        low = mid;
    }
    n.intValue();
    n.intValue();
    return low;
}


****** Cluster 403 ******
public static Integer func_0c1e6b97a5ce4a5baac3f9ff9b8abc90(Integer left, Integer N, Long[] sums, Integer start) {
    int right = N;
    while (left <= right) {
        long rightCount;
        int middle = left + right >> 1;
        long midCount = sums[middle] - sums[start];
        if (midCount < (rightCount = sums[N] - sums[middle])) {
            left = middle + 1;
            continue;
        }
        right = middle - 1;
    }
    return left;
}
public static Integer func_c0034921fe0c42cc9bb4253e106eb85b(Integer left, Integer N, Long[] sums, Integer start) {
    int right = N;
    while (left <= right) {
        long rightCount;
        int middle = left + right >> 1;
        long midCount = sums[middle] - sums[start];
        if (midCount < (rightCount = sums[N] - sums[middle])) {
            left = middle + 1;
            continue;
        }
        right = middle - 1;
    }
    return left;
}


****** Cluster 404 ******
public static Integer func_2dd1f49847f843a99d940693d4a5c3b2(Integer left, Integer N, Long[] sums, Integer start) {
    int right = N;
    while (left <= right) {
        long rightCount;
        int middle = left + right >> 1;
        long midCount = sums[middle] - sums[start];
        if (midCount < (rightCount = sums[N] - sums[middle])) {
            left = middle + 1;
            continue;
        }
        right = middle - 1;
    }
    return right;
}
public static Integer func_0a6dc3cfc4834feeb058abd4927173ba(Integer left, Integer N, Long[] sums, Integer start) {
    int right = N;
    while (left <= right) {
        long rightCount;
        int middle = left + right >> 1;
        long midCount = sums[middle] - sums[start];
        if (midCount < (rightCount = sums[N] - sums[middle])) {
            left = middle + 1;
            continue;
        }
        right = middle - 1;
    }
    return right;
}


****** Cluster 405 ******
public static Integer func_d3167b6450804721b28895069896bfeb(Integer N, Long[] sums, Integer start) {
    int left = start;
    int right = N;
    while (left <= right) {
        long rightCount;
        int middle = left + right >> 1;
        long midCount = sums[middle] - sums[start];
        if (midCount < (rightCount = sums[N] - sums[middle])) {
            left = middle + 1;
            continue;
        }
        right = middle - 1;
    }
    return left;
}
public static Integer func_eba0426984ac4f1b9def1d182fb56c83(Integer N, Long[] sums, Integer start) {
    int left = start;
    int right = N;
    while (left <= right) {
        long rightCount;
        int middle = left + right >> 1;
        long midCount = sums[middle] - sums[start];
        if (midCount < (rightCount = sums[N] - sums[middle])) {
            left = middle + 1;
            continue;
        }
        right = middle - 1;
    }
    return left;
}


****** Cluster 406 ******
public static Integer func_d19436d34ca64aa89cbf4bdc816a9af7(Integer N, Long[] sums, Integer start) {
    int left = start;
    int right = N;
    while (left <= right) {
        long rightCount;
        int middle = left + right >> 1;
        long midCount = sums[middle] - sums[start];
        if (midCount < (rightCount = sums[N] - sums[middle])) {
            left = middle + 1;
            continue;
        }
        right = middle - 1;
    }
    return right;
}
public static Integer func_6bc1232cd2c840d3a057823bf6910084(Integer N, Long[] sums, Integer start) {
    int left = start;
    int right = N;
    while (left <= right) {
        long rightCount;
        int middle = left + right >> 1;
        long midCount = sums[middle] - sums[start];
        if (midCount < (rightCount = sums[N] - sums[middle])) {
            left = middle + 1;
            continue;
        }
        right = middle - 1;
    }
    return right;
}


****** Cluster 407 ******
public static Integer func_9c307a7278c24d7bb8f9453360829d17(Integer N, Long[] sums, Integer start) {
    sums[start].longValue();
    int left = start;
    int right = N;
    while (left <= right) {
        long rightCount;
        int middle = left + right >> 1;
        long midCount = sums[middle] - sums[start];
        if (midCount < (rightCount = sums[N] - sums[middle])) {
            left = middle + 1;
            continue;
        }
        right = middle - 1;
    }
    return left;
}
public static Integer func_601027e3015d486fbac51bc3b310d3d7(Integer N, Long[] sums, Integer start) {
    sums[start].longValue();
    int left = start;
    int right = N;
    while (left <= right) {
        long rightCount;
        int middle = left + right >> 1;
        long midCount = sums[middle] - sums[start];
        if (midCount < (rightCount = sums[N] - sums[middle])) {
            left = middle + 1;
            continue;
        }
        right = middle - 1;
    }
    return left;
}


****** Cluster 408 ******
public static Integer func_1a8fd265260d4c3cb5db1e816bdd5ebb(Integer N, Long[] sums, Integer start) {
    sums[start].longValue();
    int left = start;
    int right = N;
    while (left <= right) {
        long rightCount;
        int middle = left + right >> 1;
        long midCount = sums[middle] - sums[start];
        if (midCount < (rightCount = sums[N] - sums[middle])) {
            left = middle + 1;
            continue;
        }
        right = middle - 1;
    }
    return right;
}
public static Integer func_aaa5dd3d9cf443c3b645645fa6e2dc07(Integer N, Long[] sums, Integer start) {
    sums[start].longValue();
    int left = start;
    int right = N;
    while (left <= right) {
        long rightCount;
        int middle = left + right >> 1;
        long midCount = sums[middle] - sums[start];
        if (midCount < (rightCount = sums[N] - sums[middle])) {
            left = middle + 1;
            continue;
        }
        right = middle - 1;
    }
    return right;
}


****** Cluster 409 ******
public static Long func_1bf8a43d55164d4fa1dca0988725214e(Integer N, Long[] sums, Integer start) {
    long leftCount = sums[start];
    int left = start;
    int right = N;
    while (left <= right) {
        long rightCount;
        int middle = left + right >> 1;
        long midCount = sums[middle] - sums[start];
        if (midCount < (rightCount = sums[N] - sums[middle])) {
            left = middle + 1;
            continue;
        }
        right = middle - 1;
    }
    return leftCount;
}
public static Long func_101807f9a2e24074ac6b7456c4ef0521(Integer N, Long[] sums, Integer start) {
    long leftCount = sums[start];
    int left = start;
    int right = N;
    while (left <= right) {
        long rightCount;
        int middle = left + right >> 1;
        long midCount = sums[middle] - sums[start];
        if (midCount < (rightCount = sums[N] - sums[middle])) {
            left = middle + 1;
            continue;
        }
        right = middle - 1;
    }
    return leftCount;
}


****** Cluster 410 ******
public static Long func_f11610d9ab0845588d9aad73637be82b(Integer N, Long[] counts, Long[] sums) {
    for (int i = 0; i < N; ++i) {
        sums[i + 1] = sums[i] + counts[i];
    }
    long total = sums[N];
    return total;
}
public static Long func_3bfc3343e31a44b7924929d7382aa2ac(Integer N, Long[] counts, Long[] sums) {
    for (int i = 0; i < N; ++i) {
        sums[i + 1] = sums[i] + counts[i];
    }
    long total = sums[N];
    return total;
}


****** Cluster 411 ******
public static Long func_c79e46806c584f9d8065e7f4bb6b7d01(Integer N, Long s, Long q, Long[] counts, Long p, Long r) {
    for (int i = 0; i < N; ++i) {
        counts[i] = ((long) i * p + q) % r + s;
    }
    long[] sums = new long[N + 1];
    for (int i = 0; i < N; ++i) {
        sums[i + 1] = sums[i] + counts[i];
    }
    long total = sums[N];
    return total;
}
public static Long func_5acce021ef9741aaa17385c8490c6fbc(Integer N, Long s, Long q, Long[] counts, Long p, Long r) {
    for (int i = 0; i < N; ++i) {
        counts[i] = ((long) i * p + q) % r + s;
    }
    long[] sums = new long[N + 1];
    for (int i = 0; i < N; ++i) {
        sums[i + 1] = sums[i] + counts[i];
    }
    long total = sums[N];
    return total;
}


****** Cluster 412 ******
public static Long func_f1986c84ba4e4fa8ac3a422eba431380(Integer N, Long s, Long q, Long p, Long r) {
    long[] counts = new long[N.intValue()];
    for (int i = 0; i < N; ++i) {
        counts[i] = ((long) i * p + q) % r + s;
    }
    long[] sums = new long[N + 1];
    for (int i = 0; i < N; ++i) {
        sums[i + 1] = sums[i] + counts[i];
    }
    long total = sums[N];
    return total;
}
public static Long func_897f0a0164504863b5976acd08640e88(Integer N, Long s, Long q, Long p, Long r) {
    long[] counts = new long[N.intValue()];
    for (int i = 0; i < N; ++i) {
        counts[i] = ((long) i * p + q) % r + s;
    }
    long[] sums = new long[N + 1];
    for (int i = 0; i < N; ++i) {
        sums[i + 1] = sums[i] + counts[i];
    }
    long total = sums[N];
    return total;
}


****** Cluster 413 ******
public static Long func_3cb7c6f654ae45ecb6aceec7bbb34e12(Integer N, Long a2, Integer b, Integer d, Integer c) {
    int[] arr = new int[N.intValue()];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = (int) (((long) i * a2 + (long) b.intValue()) % (long) c.intValue() + (long) d.intValue());
        sum += (long) arr[i];
    }
    return sum;
}
public static Long func_4c985f24bef148f69ed2816634b69dfe(Integer N, Long a2, Integer b, Integer d, Integer c) {
    int[] arr = new int[N.intValue()];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = (int) (((long) i * a2 + (long) b.intValue()) % (long) c.intValue() + (long) d.intValue());
        sum += (long) arr[i];
    }
    N.intValue();
    return sum;
}
public static Long func_69047998f709473287207b2faef79bcb(Integer N, Long a2, Integer b, Integer d, Integer c) {
    int[] arr = new int[N.intValue()];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = (int) (((long) i * a2 + (long) b.intValue()) % (long) c.intValue() + (long) d.intValue());
        sum += (long) arr[i];
    }
    N.intValue();
    N.intValue();
    return sum;
}
public static Long func_f4d4a1beb8f84d5cbde17c43d2508af6(Integer N, Long a2, Integer b, Integer d, Integer c) {
    int[] arr = new int[N.intValue()];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = (int) (((long) i * a2 + (long) b.intValue()) % (long) c.intValue() + (long) d.intValue());
        sum += (long) arr[i];
    }
    long[] LS = new long[N.intValue()];
    long[] RS = new long[N.intValue()];
    for (int i = 0; i < N; ++i) {
        LS[i] = (long) arr[i] + (i > 0 ? LS[i - 1] : 0L);
        RS[i] = (long) arr[N - i - 1] + (i > 0 ? RS[i - 1] : 0L);
    }
    return sum;
}
public static Long func_3e46d47b162c479cb91f745f90c61079(Integer N, Long a2, Integer b, Integer d, Integer c) {
    int[] arr = new int[N.intValue()];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = (int) (((long) i * a2 + (long) b.intValue()) % (long) c.intValue() + (long) d.intValue());
        sum += (long) arr[i];
    }
    long[] LS = new long[N.intValue()];
    long[] RS = new long[N.intValue()];
    for (int i = 0; i < N; ++i) {
        LS[i] = (long) arr[i] + (i > 0 ? LS[i - 1] : 0L);
        RS[i] = (long) arr[N - i - 1] + (i > 0 ? RS[i - 1] : 0L);
    }
    return sum;
}
public static Long func_92fc4fe3f7f0442c90c5cd565cfa3145(Integer N, Long a2, Integer b, Integer d, Integer c) {
    int[] arr = new int[N.intValue()];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = (int) (((long) i * a2 + (long) b.intValue()) % (long) c.intValue() + (long) d.intValue());
        sum += (long) arr[i];
    }
    long[] LS = new long[N.intValue()];
    long[] RS = new long[N.intValue()];
    for (int i = 0; i < N; ++i) {
        LS[i] = (long) arr[i] + (i > 0 ? LS[i - 1] : 0L);
        RS[i] = (long) arr[N - i - 1] + (i > 0 ? RS[i - 1] : 0L);
    }
    long HI = sum;
    return HI;
}
public static Long func_21026c2b56ec44afa5508d6669fab928(Integer N, Long a2, Integer b, Integer d, Integer c) {
    int[] arr = new int[N.intValue()];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = (int) (((long) i * a2 + (long) b.intValue()) % (long) c.intValue() + (long) d.intValue());
        sum += (long) arr[i];
    }
    long[] LS = new long[N.intValue()];
    long[] RS = new long[N.intValue()];
    for (int i = 0; i < N; ++i) {
        LS[i] = (long) arr[i] + (i > 0 ? LS[i - 1] : 0L);
        RS[i] = (long) arr[N - i - 1] + (i > 0 ? RS[i - 1] : 0L);
    }
    return sum;
}
public static Long func_cca98405cfeb467b8aa424da6ea20e86(Integer N, Long a2, Integer b, Integer d, Integer c) {
    int[] arr = new int[N.intValue()];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = (int) (((long) i * a2 + (long) b.intValue()) % (long) c.intValue() + (long) d.intValue());
        sum += (long) arr[i];
    }
    long[] LS = new long[N.intValue()];
    long[] RS = new long[N.intValue()];
    for (int i = 0; i < N; ++i) {
        LS[i] = (long) arr[i] + (i > 0 ? LS[i - 1] : 0L);
        RS[i] = (long) arr[N - i - 1] + (i > 0 ? RS[i - 1] : 0L);
    }
    long HI = sum;
    return HI;
}
public static Long func_aba8f5f5835641e6861988c4007f3f49(Integer N, Long a2, Integer b, Integer d, Integer c) {
    int[] arr = new int[N.intValue()];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = (int) (((long) i * a2 + (long) b.intValue()) % (long) c.intValue() + (long) d.intValue());
        sum += (long) arr[i];
    }
    long[] LS = new long[N.intValue()];
    long[] RS = new long[N.intValue()];
    for (int i = 0; i < N; ++i) {
        LS[i] = (long) arr[i] + (i > 0 ? LS[i - 1] : 0L);
        RS[i] = (long) arr[N - i - 1] + (i > 0 ? RS[i - 1] : 0L);
    }
    return sum;
}
public static Long func_3bf923fb09ff4f8790c16e23248485d8(Integer N, Long a2, Integer b, Integer d, Integer c) {
    int[] arr = new int[N.intValue()];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = (int) (((long) i * a2 + (long) b.intValue()) % (long) c.intValue() + (long) d.intValue());
        sum += (long) arr[i];
    }
    long[] LS = new long[N.intValue()];
    long[] RS = new long[N.intValue()];
    for (int i = 0; i < N; ++i) {
        LS[i] = (long) arr[i] + (i > 0 ? LS[i - 1] : 0L);
        RS[i] = (long) arr[N - i - 1] + (i > 0 ? RS[i - 1] : 0L);
    }
    long HI = sum;
    int pow2 = 1;
    while (pow2 * 2 <= N) {
        pow2 *= 2;
    }
    return HI;
}
public static Long func_884701d077334a36af0ae7dac117a33f(Integer N, Long a2, Integer b, Integer d, Integer c) {
    int[] arr = new int[N.intValue()];
    long sum = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = (int) (((long) i * a2 + (long) b.intValue()) % (long) c.intValue() + (long) d.intValue());
        sum += (long) arr[i];
    }
    long[] LS = new long[N.intValue()];
    long[] RS = new long[N.intValue()];
    for (int i = 0; i < N; ++i) {
        LS[i] = (long) arr[i] + (i > 0 ? LS[i - 1] : 0L);
        RS[i] = (long) arr[N - i - 1] + (i > 0 ? RS[i - 1] : 0L);
    }
    int pow2 = 1;
    while (pow2 * 2 <= N) {
        pow2 *= 2;
    }
    return sum;
}


****** Cluster 414 ******
public static Integer func_7c650ff1ef6c44888d7a3183aa9d6439(Integer N, Long sum) {
    sum.longValue();
    int pow2 = 1;
    while (pow2 * 2 <= N) {
        pow2 *= 2;
    }
    return pow2;
}
public static Integer func_74fc348bcf494bf186fc57188d889f96(Integer N, Long sum) {
    sum.longValue();
    int pow2 = 1;
    while (pow2 * 2 <= N) {
        pow2 *= 2;
    }
    return pow2;
}


****** Cluster 415 ******
public static Integer func_85d103c0cfe24da18b29ebd56145022a(Long[] S, Integer ans, Long tot, Integer hi, Integer i, Integer lo) {
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ans = ans + 1;
    }
    S[i + 1].longValue();
    S[ans].longValue();
    return ans;
}
public static Long func_adb15e1b18cb42689f31c63d27e29737(Long[] S, Integer ans, Long tot, Integer hi, Integer i, Integer lo) {
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ans = ans + 1;
    }
    S[i + 1].longValue();
    S[ans].longValue();
    return diff2;
}
public static Long func_db5b49e5eae8495897c93cce0a329809(Long[] S, Integer ans, Long tot, Integer hi, Integer i, Integer lo) {
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ans = ans + 1;
    }
    long center = S[i + 1] - S[ans];
    return center;
}
public static Integer func_1c4a6bd5d8e74c6f9b4be503d8bc80c0(Long[] S, Integer ans, Long tot, Integer hi, Integer i, Integer lo) {
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ans = ans + 1;
    }
    S[i + 1].longValue();
    S[ans].longValue();
    return lo;
}
public static Integer func_7c2a96e0171d4bf1963f8c2dcc83f068(Long[] S, Integer ans, Long tot, Integer hi, Integer i, Integer lo) {
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ans = ans + 1;
    }
    S[i + 1].longValue();
    S[ans].longValue();
    return hi;
}
public static Long func_6189a4459303444395f39144902cd3d5(Long[] S, Integer ans, Long tot, Integer hi, Integer i, Integer lo) {
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ans = ans + 1;
    }
    S[i + 1].longValue();
    S[ans].longValue();
    return diff1;
}
public static Integer func_6ffa33d9e9c84630ae5830461ff1fba2(Long[] S, Integer ans, Long tot, Integer hi, Integer i, Integer lo) {
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ans = ans + 1;
    }
    S[i + 1].longValue();
    S[ans].longValue();
    S[ans].longValue();
    S[0].longValue();
    return ans;
}
public static Long func_e44afc25887d46c2a0f89f9b9a995b1b(Long[] S, Integer ans, Long tot, Integer hi, Integer i, Integer lo) {
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ans = ans + 1;
    }
    S[i + 1].longValue();
    S[ans].longValue();
    long left = S[ans] - S[0];
    return left;
}
public static Long func_04320a310ff647fabf0d179ceb37dceb(Long[] S, Integer ans, Long tot, Integer hi, Integer i, Integer lo) {
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ans = ans + 1;
    }
    S[i + 1].longValue();
    S[ans].longValue();
    S[ans].longValue();
    S[0].longValue();
    return diff2;
}
public static Long func_74b1c73e8e9142d286b6b522cb9788d5(Long[] S, Integer ans, Long tot, Integer hi, Integer i, Integer lo) {
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ans = ans + 1;
    }
    long center = S[i + 1] - S[ans];
    S[ans].longValue();
    S[0].longValue();
    return center;
}
public static Integer func_86eaf64c25db460993160717da3c7e8c(Long[] S, Integer ans, Long tot, Integer hi, Integer i, Integer lo) {
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ans = ans + 1;
    }
    S[i + 1].longValue();
    S[ans].longValue();
    S[ans].longValue();
    S[0].longValue();
    return hi;
}
public static Integer func_465f055e42af4a6ba009d169e660112a(Long[] S, Integer ans, Long tot, Integer hi, Integer i, Integer lo) {
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ans = ans + 1;
    }
    S[i + 1].longValue();
    S[ans].longValue();
    S[ans].longValue();
    S[0].longValue();
    return lo;
}
public static Long func_afe98bf13476434c91f82d0148a73cce(Long[] S, Integer ans, Long tot, Integer hi, Integer i, Integer lo) {
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ans = ans + 1;
    }
    S[i + 1].longValue();
    S[ans].longValue();
    S[ans].longValue();
    S[0].longValue();
    return diff1;
}
public static Integer func_8fcb3b090f7445359ad89de46f8deae1(Long[] S, Integer ans, Long tot, Integer hi, Integer i, Integer lo) {
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    return ans;
}
public static Integer func_6eebf9cfec074af98825b1a194be934d(Long[] S, Integer ans, Long tot, Integer hi, Integer i, Integer lo) {
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    return hi;
}
public static Integer func_41ca72d601a04a5589c6241fd7f311f2(Long[] S, Integer ans, Long tot, Integer hi, Integer i, Integer lo) {
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    return lo;
}
public static Long func_e72ce6e6ea7c465babb64342cf67e6c2(Long[] S, Integer ans, Long tot, Integer hi, Integer i, Integer lo) {
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    return diff1;
}
public static Integer func_738400a7dc1f4c8499be1543da4f9b19(Long[] S, Integer ans, Long tot, Integer hi, Integer i, Integer lo) {
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    return ans;
}
public static Long func_03b90a36188d4ecab388eff2755e6014(Long[] S, Integer ans, Long tot, Integer hi, Integer i, Integer lo) {
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    return diff2;
}
public static Integer func_2c50466becc142c1849e711c40b06349(Long[] S, Integer ans, Long tot, Integer hi, Integer i, Integer lo) {
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    return hi;
}
public static Integer func_6d47d7b08e4c4080a591f7321468e0dd(Long[] S, Integer ans, Long tot, Integer hi, Integer i, Integer lo) {
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    return lo;
}
public static Long func_71bbe2fee82c4801be918eaf1b29fd88(Long[] S, Integer ans, Long tot, Integer hi, Integer i, Integer lo) {
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    return diff1;
}
public static Integer func_945c968d5f9340eb9a07db053b6e85f3(Long[] S, Integer ans, Long tot, Integer hi, Integer i, Integer lo) {
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ans = ans + 1;
    }
    return ans;
}
public static Long func_f4736370cfdd4dd1850ea01a871899dc(Long[] S, Integer ans, Long tot, Integer hi, Integer i, Integer lo) {
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        Integer.valueOf(ans + 1);
    }
    return diff2;
}
public static Integer func_a23281f367b94e3cb12967d3ccfda4ec(Long[] S, Integer ans, Long tot, Integer hi, Integer i, Integer lo) {
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        Integer.valueOf(ans + 1);
    }
    return hi;
}
public static Integer func_52600461c8d5435b864e6e09c6c10a1e(Long[] S, Integer ans, Long tot, Integer hi, Integer i, Integer lo) {
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        Integer.valueOf(ans + 1);
    }
    return lo;
}
public static Long func_54b02f10defb4de08adcd123021d974f(Long[] S, Integer ans, Long tot, Integer hi, Integer i, Integer lo) {
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        Integer.valueOf(ans + 1);
    }
    return diff1;
}


****** Cluster 416 ******
public static Integer func_b1c1fcff89d94cdd8fad8656aac2b991(Long[] S, Integer i) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    return hi;
}
public static Integer func_0f77731ae5294f8cae5fa411786458cf(Long[] S, Integer i) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    return ans;
}
public static Integer func_6d9174c6003f4fc1869a1de9d975d79c(Long[] S, Integer i) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    return hi;
}
public static Integer func_8fe5a0fcd6414bf08adfceecda907b9e(Long[] S, Integer i) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    return ans;
}
public static Integer func_4f67a29b1c62410dae9720d9739328af(Long[] S, Integer i) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    return hi;
}
public static Integer func_bc0f7f0c49b74a1d9581e5b6b5743924(Long[] S, Integer i) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ++ans;
    }
    S[i + 1].longValue();
    S[ans].longValue();
    return hi;
}
public static Integer func_9e948734a1ab4e0baa7b58c756ab37c1(Long[] S, Integer i) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ++ans;
    }
    S[i + 1].longValue();
    S[ans].longValue();
    S[ans].longValue();
    S[0].longValue();
    return hi;
}


****** Cluster 417 ******
public static Long func_30638627ab5d42be8987abb99bf229c8(Long[] S, Integer i) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    return tot;
}
public static Long func_eeb62e06a6c24be89d8b0611a8fedd9f(Long[] S, Integer i) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    return tot;
}
public static Long func_140d418fbb804ae5a20ca3d29bdfd5fc(Long[] S, Integer i) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    return tot;
}
public static Long func_eda5217f6a60404cadee366636573312(Long[] S, Integer i) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ++ans;
    }
    S[i + 1].longValue();
    S[ans].longValue();
    return tot;
}
public static Long func_aa8a831e3e4c4681b1c5d29e7214877a(Long[] S, Integer i) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ++ans;
    }
    S[i + 1].longValue();
    S[ans].longValue();
    S[ans].longValue();
    S[0].longValue();
    return tot;
}


****** Cluster 418 ******
public static Integer func_3596b832b8444f0ab76e81d53277c479(Long[] S, Integer i) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    return lo;
}
public static Integer func_d09cd9698e244088aa6104eb76c47c30(Long[] S, Integer i) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    return lo;
}
public static Integer func_d6246fbd689347aba07c16ef7e46d4ad(Long[] S, Integer i) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    return lo;
}
public static Integer func_2e7b8c7ecdd14a5ab1c5b88d25dd7f1e(Long[] S, Integer i) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ++ans;
    }
    S[i + 1].longValue();
    S[ans].longValue();
    return lo;
}
public static Integer func_c20ecf5b58a648458fd2b351aad2cc8a(Long[] S, Integer i) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ++ans;
    }
    S[i + 1].longValue();
    S[ans].longValue();
    S[ans].longValue();
    S[0].longValue();
    return lo;
}


****** Cluster 419 ******
public static Long func_3a54007896114e80a73fa4f2bd79e01d(Long[] S, Integer i) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    return diff1;
}
public static Long func_49b6281ce2084374b4baece2a380e044(Long[] S, Integer i) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    return diff1;
}
public static Long func_cb4cedab21c84cf48ae6dbe92d87b24b(Long[] S, Integer i) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    return diff1;
}
public static Long func_1a74e495622345a68fa8f7f1ddba9b94(Long[] S, Integer i) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ++ans;
    }
    S[i + 1].longValue();
    S[ans].longValue();
    return diff1;
}
public static Long func_a841e4b9702a49159280c1eee4d730c8(Long[] S, Integer i) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ++ans;
    }
    S[i + 1].longValue();
    S[ans].longValue();
    S[ans].longValue();
    S[0].longValue();
    return diff1;
}


****** Cluster 420 ******
public static Long func_f0a059cb572f45d99c6744743889acae(Long[] S, Integer i) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    return diff2;
}
public static Long func_055d5917842a4b6a99af036a4e62fe81(Long[] S, Integer i) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    return diff2;
}
public static Long func_a76635d5d7204cff831624df5f8fcee0(Long[] S, Integer i) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ++ans;
    }
    S[i + 1].longValue();
    S[ans].longValue();
    return diff2;
}
public static Long func_23ebca0f9ff34822b21a755d39673dc1(Long[] S, Integer i) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ++ans;
    }
    S[i + 1].longValue();
    S[ans].longValue();
    S[ans].longValue();
    S[0].longValue();
    return diff2;
}


****** Cluster 421 ******
public static Integer func_38dc3dc539544b8387408005da207a5b(Long[] S, Integer i) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ++ans;
    }
    return ans;
}
public static Integer func_81bd814f456e4d039d9b60437f9ffef0(Long[] S, Integer i) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ++ans;
    }
    S[i + 1].longValue();
    S[ans].longValue();
    return ans;
}
public static Integer func_5893d213955a462fab145be3190eb7d6(Long[] S, Integer i) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ++ans;
    }
    S[i + 1].longValue();
    S[ans].longValue();
    S[ans].longValue();
    S[0].longValue();
    return ans;
}


****** Cluster 422 ******
public static Long func_088ad0c56fa94a2a99566be60a88e296(Long[] S, Integer i) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ++ans;
    }
    long center = S[i + 1] - S[ans];
    return center;
}
public static Long func_a67ea37c7e4a48b5a6464b13e1ba176b(Long[] S, Integer i) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ++ans;
    }
    long center = S[i + 1] - S[ans];
    S[ans].longValue();
    S[0].longValue();
    return center;
}


****** Cluster 423 ******
public static Integer func_25b51ab4ee204e24bc636f54d6d0d116(Long[] S, Long max, Integer i, Integer n) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ++ans;
    }
    long center = S[i + 1] - S[ans];
    long left = S[ans] - S[0];
    long right = S[n] - left - center;
    long take = S[n] - Math.max(center, Math.max(left, right));
    Long.valueOf(Math.max(max, take));
    return ans;
}
public static Long func_33a5e2ed8e9c4edfb8db84dc19d5aaaa(Long[] S, Long max, Integer i, Integer n) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ++ans;
    }
    long center = S[i + 1] - S[ans];
    long left = S[ans] - S[0];
    long right = S[n] - left - center;
    long take = S[n] - Math.max(center, Math.max(left, right));
    Long.valueOf(Math.max(max, take));
    return take;
}
public static Long func_8e34effda9bc422cb54ee26e28a8d082(Long[] S, Long max, Integer i, Integer n) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ++ans;
    }
    long center = S[i + 1] - S[ans];
    long left = S[ans] - S[0];
    long right = S[n] - left - center;
    long take = S[n] - Math.max(center, Math.max(left, right));
    Long.valueOf(Math.max(max, take));
    return left;
}
public static Long func_90a6c42997da4759881aa009ddbb9636(Long[] S, Long max, Integer i, Integer n) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ++ans;
    }
    long center = S[i + 1] - S[ans];
    long left = S[ans] - S[0];
    long right = S[n] - left - center;
    long take = S[n] - Math.max(center, Math.max(left, right));
    max = Math.max(max, take);
    return max;
}
public static Long func_0efec82bfff7431496a3703016dbde3d(Long[] S, Long max, Integer i, Integer n) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ++ans;
    }
    long center = S[i + 1] - S[ans];
    long left = S[ans] - S[0];
    long right = S[n] - left - center;
    long take = S[n] - Math.max(center, Math.max(left, right));
    Long.valueOf(Math.max(max, take));
    return diff2;
}
public static Long func_f04bf0b5a696426bad52df8a9a79cdca(Long[] S, Long max, Integer i, Integer n) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ++ans;
    }
    long center = S[i + 1] - S[ans];
    long left = S[ans] - S[0];
    long right = S[n] - left - center;
    long take = S[n] - Math.max(center, Math.max(left, right));
    Long.valueOf(Math.max(max, take));
    return center;
}
public static Integer func_c15727a04d2b432f8ce5d6e96def6957(Long[] S, Long max, Integer i, Integer n) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ++ans;
    }
    long center = S[i + 1] - S[ans];
    long left = S[ans] - S[0];
    long right = S[n] - left - center;
    long take = S[n] - Math.max(center, Math.max(left, right));
    Long.valueOf(Math.max(max, take));
    return hi;
}
public static Long func_c193e47e3d3349bd9aaf0b283a851eb1(Long[] S, Long max, Integer i, Integer n) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ++ans;
    }
    long center = S[i + 1] - S[ans];
    long left = S[ans] - S[0];
    long right = S[n] - left - center;
    long take = S[n] - Math.max(center, Math.max(left, right));
    Long.valueOf(Math.max(max, take));
    return tot;
}
public static Integer func_69c72d9202384be4b84d5d1073a4cbdc(Long[] S, Long max, Integer i, Integer n) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ++ans;
    }
    long center = S[i + 1] - S[ans];
    long left = S[ans] - S[0];
    long right = S[n] - left - center;
    long take = S[n] - Math.max(center, Math.max(left, right));
    Long.valueOf(Math.max(max, take));
    return lo;
}
public static Long func_ee7946c41c83429798338ae9b1ee97da(Long[] S, Long max, Integer i, Integer n) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ++ans;
    }
    long center = S[i + 1] - S[ans];
    long left = S[ans] - S[0];
    long right = S[n] - left - center;
    long take = S[n] - Math.max(center, Math.max(left, right));
    Long.valueOf(Math.max(max, take));
    return diff1;
}
public static Long func_a4e78ab649af43be8221a81db3cae180(Long[] S, Long max, Integer i, Integer n) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    long diff1 = Math.abs(S[i + 1] - S[ans] - (S[ans] - S[0]));
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ++ans;
    }
    long center = S[i + 1] - S[ans];
    long left = S[ans] - S[0];
    long right = S[n] - left - center;
    long take = S[n] - Math.max(center, Math.max(left, right));
    Long.valueOf(Math.max(max, take));
    return right;
}


****** Cluster 424 ******
public static Long func_822c9fda2c6d42db9780d962562edef1(Long[] S, Long tot, Integer i, Integer mid) {
    long center = S[i + 1] - S[mid];
    long left = tot - center;
    return left;
}
public static Long func_f21a53f471734ed4ba09e3454a42594f(Long[] S, Long tot, Integer i, Integer mid) {
    long center = S[i + 1] - S[mid];
    tot.longValue();
    return center;
}
public static Long func_d032c7c1662f4b01b1b34d2bdd106605$5398d4e2(Long[] S, Long tot, Integer i, Integer mid) {
    long center = S[i + 1] - S[mid];
    long left = tot - center;
    if (left > center) {
        Integer.valueOf(mid - 1);
    } else {
        Integer.valueOf(mid + 1);
    }
    return left;
}
public static Long func_79ef61460baa466d8e627cc54eac9d6a$5398d4e2(Long[] S, Long tot, Integer i, Integer mid) {
    long center = S[i + 1] - S[mid];
    long left = tot - center;
    if (left > center) {
        Integer.valueOf(mid - 1);
    } else {
        Integer.valueOf(mid + 1);
    }
    return center;
}


****** Cluster 425 ******
public static Long func_68becafbe88e408697868d159607bfbd(Long[] S, Long tot, Integer hi, Integer i, Integer lo) {
    int mid = (lo + hi) / 2;
    long center = S[i + 1] - S[mid];
    long left = tot - center;
    return left;
}
public static Long func_13f401aca2064f3185ebbba653ad7e0f$22cf344b(Long[] S, Long tot, Integer hi, Integer i, Integer lo) {
    int mid = (lo + hi) / 2;
    long center = S[i + 1] - S[mid];
    long left = tot - center;
    if (left > center) {
        Integer.valueOf(mid - 1);
    } else {
        Integer.valueOf(mid);
        Integer.valueOf(mid + 1);
    }
    return left;
}


****** Cluster 426 ******
public static Integer func_33a8521a63e14fa4b5ff3c28b7336ce2(Long[] S, Long tot, Integer hi, Integer i, Integer lo) {
    int mid = (lo + hi) / 2;
    S[i + 1].longValue();
    S[mid].longValue();
    tot.longValue();
    return mid;
}
public static Integer func_cc5ecf787d274eb7be2883cae56bbd63$30e9b779(Long[] S, Long tot, Integer hi, Integer i, Integer lo) {
    int mid = (lo + hi) / 2;
    long center = S[i + 1] - S[mid];
    long left = tot - center;
    if (left > center) {
        Integer.valueOf(mid - 1);
    } else {
        Integer.valueOf(mid);
        Integer.valueOf(mid + 1);
    }
    return mid;
}


****** Cluster 427 ******
public static Long func_13d85be256f34dcda41e3f2ead2f40a5(Long[] S, Long tot, Integer hi, Integer i, Integer lo) {
    int mid = (lo + hi) / 2;
    long center = S[i + 1] - S[mid];
    tot.longValue();
    return center;
}
public static Long func_6602985a69d647e6940355a03d13f932$22cf344b(Long[] S, Long tot, Integer hi, Integer i, Integer lo) {
    int mid = (lo + hi) / 2;
    long center = S[i + 1] - S[mid];
    long left = tot - center;
    if (left > center) {
        Integer.valueOf(mid - 1);
    } else {
        Integer.valueOf(mid);
        Integer.valueOf(mid + 1);
    }
    return center;
}


****** Cluster 428 ******
public static Long func_0f8980b81d0e458d992c2177236f0f15(Long[] S, Integer i) {
    long tot = S[i + 1] - S[0];
    return tot;
}
public static Long func_7a84753f4f5240c5955b4c48cf60fa08(Long[] S, Integer i) {
    i.intValue();
    long tot = S[i + 1] - S[0];
    return tot;
}
public static Long func_71ef725f97634cffa9ca33a83a9d3032(Long[] S, Integer i) {
    i.intValue();
    long tot = S[i + 1] - S[0];
    return tot;
}
public static Long func_f5e5e10777bc4bd0b180ae79f59f9767(Long[] S, Integer i) {
    int lo = 0;
    int hi = i;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        lo = mid + 1;
    }
    return tot;
}


****** Cluster 429 ******
public static Long func_e87137f7ddda47aabc7966b87709c26c$2ede158a(Long[] S, Integer hi, Integer i, Integer lo) {
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        Integer.valueOf(mid);
        lo = mid + 1;
    }
    return tot;
}
public static Long func_6b97c2487b76477085da86d248e70678(Long[] S, Integer hi, Integer i, Integer lo) {
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        lo = mid + 1;
    }
    return tot;
}


****** Cluster 430 ******
public static Integer func_c7d55b2673e84dae99749f358139555e$687fd9da(Long[] S, Integer hi, Integer i, Integer lo) {
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        Integer.valueOf(mid);
        lo = mid + 1;
    }
    return hi;
}
public static Integer func_5fe3cf0f41d64a3686b08146fb577d56(Long[] S, Integer hi, Integer i, Integer lo) {
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        lo = mid + 1;
    }
    return hi;
}


****** Cluster 431 ******
public static Integer func_348064e97f7e4925835b52e9113b5ce9$687fd9da(Long[] S, Integer hi, Integer i, Integer lo) {
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        Integer.valueOf(mid);
        lo = mid + 1;
    }
    return lo;
}
public static Integer func_09a3b78967624c97b86caa68b1f26dc0(Long[] S, Integer hi, Integer i, Integer lo) {
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        lo = mid + 1;
    }
    return lo;
}


****** Cluster 432 ******
public static Long func_e8041a6fcb7d4ae8bb2493cb41014dc5(Long[] S, Integer ans, Integer i, Long diff1) {
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        Integer.valueOf(ans + 1);
    }
    return diff2;
}
public static Long func_58a81834c81346c9899674950739fc65(Long[] S, Integer ans, Integer i, Long diff1) {
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ans = ans + 1;
    }
    S[i + 1].longValue();
    S[ans].longValue();
    return diff2;
}
public static Long func_207e67d9e1c8478ca654165b244ca7d5(Long[] S, Integer ans, Integer i, Long diff1) {
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ans = ans + 1;
    }
    long center = S[i + 1] - S[ans];
    return center;
}
public static Long func_4ad5eb8fe7f7441589f87ac54d4ae533(Long[] S, Integer ans, Integer i, Long diff1) {
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ans = ans + 1;
    }
    S[i + 1].longValue();
    S[ans].longValue();
    long left = S[ans] - S[0];
    return left;
}
public static Long func_dfece70b25cb4b35ac011b6336fc07cf(Long[] S, Integer ans, Integer i, Long diff1) {
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ans = ans + 1;
    }
    S[i + 1].longValue();
    S[ans].longValue();
    S[ans].longValue();
    S[0].longValue();
    return diff2;
}
public static Long func_c5038c63d3b842a1b21f3ab167c61f1f(Long[] S, Integer ans, Integer i, Long diff1) {
    long diff2 = Math.abs(S[i + 1] - S[ans + 1] - (S[ans + 1] - S[0]));
    if (diff2 < diff1) {
        ans = ans + 1;
    }
    long center = S[i + 1] - S[ans];
    S[ans].longValue();
    S[0].longValue();
    return center;
}


****** Cluster 433 ******
public static Long func_f414b3a953274359a975b1849d5c199d(Long[] S, Integer ans, Integer i) {
    S[i + 1].longValue();
    S[ans].longValue();
    long left = S[ans] - S[0];
    return left;
}
public static Long func_a70c1ada027d4c68a0d07ddd58878dda(Long[] S, Integer ans, Integer i) {
    long center = S[i + 1] - S[ans];
    S[ans].longValue();
    S[0].longValue();
    return center;
}
public static Long func_492514731530483bb71fabe4e776bd17(Long[] imos, Integer h, Integer t) {
    long med = imos[t + 1] - imos[h];
    imos[imos.length - 1].longValue();
    imos[t + 1].longValue();
    return med;
}
public static Long func_43e70cf5b5394e85a1956713266b8bec(Long[] imos, Integer h, Integer t) {
    imos[t + 1].longValue();
    imos[h].longValue();
    long right = imos[imos.length - 1] - imos[t + 1];
    return right;
}


****** Cluster 434 ******
public static Long func_21cf8d008e5e43d4a8a610be4edbbf7b(Long[] S, Integer ans, Long center, Integer n) {
    long left = S[ans] - S[0];
    S[n].longValue();
    center.longValue();
    return left;
}
public static Long func_8edf03d9822443ab96a7c49161ff926e(Long[] S, Integer ans, Long center, Integer n) {
    long left = S[ans] - S[0];
    long right = S[n] - left - center;
    S[n].longValue();
    Math.max(center, Math.max(left, right));
    return left;
}


****** Cluster 435 ******
public static Long func_3b96a3d2cef44b23911178b4499b6432(Long[] S, Integer ans, Long center, Integer n) {
    long left = S[ans] - S[0];
    long right = S[n] - left - center;
    return right;
}
public static Long func_dd695c4b66ab4f95950a5706a54ec10d(Long[] S, Integer ans, Long center, Integer n) {
    long left = S[ans] - S[0];
    long right = S[n] - left - center;
    S[n].longValue();
    Math.max(center, Math.max(left, right));
    return right;
}


****** Cluster 436 ******
public static Integer func_aabf5fba59e7485b85c1397f1a848ea9(Long[] S, Integer i) {
    int hi = i;
    S[i + 1].longValue();
    S[0].longValue();
    return hi;
}
public static Integer func_1d9d1818291643edb1d036ad86f58d35(Long[] S, Integer i) {
    int hi = i;
    S[i + 1].longValue();
    S[0].longValue();
    return hi;
}


****** Cluster 437 ******
public static Integer func_0aad674dcd6f465bb265776a7a490457(Long[] S, Integer i) {
    int lo = 0;
    int hi = i;
    int ans = -1;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        ans = mid;
        lo = mid + 1;
    }
    return ans;
}
public static Integer func_bbff4257fba3424281aa71f18cf83c74(Long[] S, Integer i) {
    int lo = 0;
    int hi = i;
    long tot = S[i + 1] - S[0];
    while (lo <= hi) {
        int mid = (lo + hi) / 2;
        long center = S[i + 1] - S[mid];
        long left = tot - center;
        if (left > center) {
            hi = mid - 1;
            continue;
        }
        lo = mid + 1;
    }
    return hi;
}


****** Cluster 438 ******
public static Long func_7c96e9b2c32c473aa90fd83423bf7fa3(Integer[] a2, Integer n) {
    long[] sum = new long[n + 1];
    sum[0] = 0L;
    for (int i = 0; i < n; ++i) {
        sum[i + 1] = sum[i] + (long) a2[i].intValue();
    }
    long x2 = sum[n];
    return x2;
}
public static Long func_544a7d7e5fed49ed8ed187e91c431315(Integer[] a2, Integer n) {
    long[] sum = new long[n + 1];
    sum[0] = 0L;
    for (int i = 0; i < n; ++i) {
        sum[i + 1] = sum[i] + (long) a2[i].intValue();
    }
    long x2 = sum[n];
    return x2;
}


****** Cluster 439 ******
public static Long func_c24b5ef11e8244e897b4464576ddcb6d(Integer q, Integer[] a2, Integer p, Integer r, Integer n, Integer s) {
    for (int i = 0; i < n; ++i) {
        a2[i] = (int) (((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue());
    }
    long[] sum = new long[n + 1];
    sum[0] = 0L;
    for (int i = 0; i < n; ++i) {
        sum[i + 1] = sum[i] + (long) a2[i].intValue();
    }
    long x2 = sum[n];
    return x2;
}
public static Long func_6503c6197e55422baeea93270f5ae952(Integer q, Integer[] a2, Integer p, Integer r, Integer n, Integer s) {
    for (int i = 0; i < n; ++i) {
        a2[i] = (int) (((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue());
    }
    long[] sum = new long[n + 1];
    sum[0] = 0L;
    for (int i = 0; i < n; ++i) {
        sum[i + 1] = sum[i] + (long) a2[i].intValue();
    }
    long x2 = sum[n];
    return x2;
}


****** Cluster 440 ******
public static Long func_e2c4f0357a344ea1b0cbe0f5f1e1b9d7(Integer q, Integer p, Integer r, Integer n, Integer s) {
    int[] a2 = new int[n.intValue()];
    for (int i = 0; i < n; ++i) {
        a2[i] = (int) (((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue());
    }
    long[] sum = new long[n + 1];
    sum[0] = 0L;
    for (int i = 0; i < n; ++i) {
        sum[i + 1] = sum[i] + (long) a2[i];
    }
    long x2 = sum[n];
    return x2;
}
public static Long func_40d6849ee9ff44eb963bc1bd35cda093(Integer q, Integer p, Integer r, Integer n, Integer s) {
    int[] a2 = new int[n.intValue()];
    for (int i = 0; i < n; ++i) {
        a2[i] = (int) (((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue());
    }
    long[] sum = new long[n + 1];
    sum[0] = 0L;
    for (int i = 0; i < n; ++i) {
        sum[i + 1] = sum[i] + (long) a2[i];
    }
    long x2 = sum[n];
    return x2;
}


****** Cluster 441 ******
public static Long func_773eaa3ac1be4c19b3f449dc542893c5(Integer r, Integer p, Integer n, Long sum, Integer q, Integer s) {
    long[] a2 = new long[n.intValue()];
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum = sum + a2[i];
    }
    sum.longValue();
    return sum;
}
public static Long func_ac972dd5657a4c95959ded045e84ee95(Integer r, Integer p, Integer n, Long sum, Integer q, Integer s) {
    long[] a2 = new long[n.intValue()];
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum = sum + a2[i];
    }
    return sum;
}
public static Long func_fda91bbd37ac4309835d8f7594673de1(Integer r, Integer p, Integer n, Long sum, Integer q, Integer s) {
    long[] a2 = new long[n.intValue()];
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum = sum + a2[i];
    }
    long min = sum;
    return min;
}
public static Long func_9d379cc9ab784fb2b762bdb81e4d5e5b(Integer r, Integer p, Integer n, Long sum, Integer q, Integer s) {
    long[] a2 = new long[n.intValue()];
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum = sum + a2[i];
    }
    sum.longValue();
    return sum;
}
public static Long func_e52fe56eb48d40eb8b90d7f02e4984f5(Integer r, Integer p, Integer n, Long sum, Integer q, Integer s) {
    long[] a2 = new long[n.intValue()];
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum = sum + a2[i];
    }
    long min = sum;
    return min;
}


****** Cluster 442 ******
public static Long func_7795d4bbdf674a38b968ed1bbb9bf579(Integer r, Integer p, Integer n, Integer q, Integer s) {
    long sum = 0L;
    long[] a2 = new long[n.intValue()];
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i];
    }
    long min = sum;
    return min;
}
public static Long func_2cb82840c82e4b9db32ba54135040035(Integer r, Integer p, Integer n, Integer q, Integer s) {
    long sum = 0L;
    long[] a2 = new long[n.intValue()];
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i];
    }
    return sum;
}
public static Long func_3a91b43e22f14b0fa67fa5e3f36f1b97(Integer r, Integer p, Integer n, Integer q, Integer s) {
    long sum = 0L;
    long[] a2 = new long[n.intValue()];
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i];
    }
    return sum;
}
public static Long func_5728e4c272194680990c479158d3e4e1(Integer r, Integer p, Integer n, Integer q, Integer s) {
    long sum = 0L;
    long[] a2 = new long[n.intValue()];
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i];
    }
    long min = sum;
    return min;
}
public static Long func_d487e7cd8d3646e792d463055cf7ee6a(Integer r, Integer p, Integer n, Integer q, Integer s) {
    long sum = 0L;
    long[] a2 = new long[n.intValue()];
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i];
    }
    return sum;
}


****** Cluster 443 ******
public static Long func_2f2aba615b114279bb22a9ee61a113f7(Long[] values) {
    long max = values[0];
    for (int i = 1; i < values.length; ++i) {
        if (max >= values[i])
            continue;
        max = values[i];
    }
    return max;
}
public static long func_a2013ecc88cf485da2d6f0e79071aa91(Long[] values) {
    long max = values[0];
    for (int i = 1; i < values.length; ++i) {
        if (max >= values[i])
            continue;
        max = values[i];
    }
    return max;
}
def func_774b404443274841a3a1f3703f0d3645(x):
    if len(x) < 37:
        x = x + [0] * (37 - len(x))
    x = sorted(x)
    lo = min(x)
    hi = max(x)
    return hi

def func_eedeeab5dfea4907b2e517e7f98617e2(x):
    x = sorted(x)
    lo = min(x)
    hi = max(x)
    return hi

def func_fc1df07e5f3644499d33685ea449984b(x):
    lo = min(x)
    hi = max(x)
    return hi

def func_f0729025c12341a5b02eb2e1839e8746(x):
    x.sort()
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    return mx



****** Cluster 444 ******
public static long func_715694b505374a79be2629ca03f32849(Long[] values, Long max) {
    for (int i = 1; i < values.length; ++i) {
        if (max >= values[i])
            continue;
        max = values[i];
    }
    return max;
}
public static Long func_d078aa8ee0864b61a0e53a7e0491f88b(Long[] values, Long max) {
    for (int i = 1; i < values.length; ++i) {
        if (max >= values[i])
            continue;
        max = values[i];
    }
    return max;
}


****** Cluster 445 ******
public static Long func_d54d8133814e45458654d32776766fd6(Long[] a2, Integer r, Integer p, Integer n, Long sum, Integer q, Integer s) {
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum = sum + a2[i];
    }
    long min = sum;
    return min;
}
public static Long func_062ecbf48bbf4940ab61b94fd8f67e88(Long[] a2, Integer r, Integer p, Integer n, Long sum, Integer q, Integer s) {
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum = sum + a2[i];
    }
    sum.longValue();
    return sum;
}
public static Long func_f98feed4bf20442a84eab81f0a0198af(Long[] a2, Integer r, Integer p, Integer n, Long sum, Integer q, Integer s) {
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum = sum + a2[i];
    }
    long min = sum;
    return min;
}
public static Long func_2e3b193987994deab4dab45a31f57523(Long[] a2, Integer r, Integer p, Integer n, Long sum, Integer q, Integer s) {
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum = sum + a2[i];
    }
    sum.longValue();
    return sum;
}


****** Cluster 446 ******
public static Long func_73434b17ef84443f820d54d02209085a(Integer mid, Integer i, Long[] psum, Long left) {
    long s1 = psum[mid] - psum[i];
    left.longValue();
    return s1;
}
public static Long func_d3cbff37c2e3453fb4dbc43e0a170ef4(Integer mid, Integer i, Long[] psum, Long left) {
    long s1 = psum[mid] - psum[i];
    long s2 = left - s1;
    return s2;
}
public static Long func_56135469c2cf4ffebe5f06386b77c691$12816c31(Integer mid, Integer i, Long[] psum, Long left) {
    long s2;
    long s1 = psum[mid] - psum[i];
    if (s1 < (s2 = left - s1)) {
        Integer.valueOf(mid + 1);
    }
    return s1;
}
public static Long func_685100b1b624427791ba34f796e8b12e$12816c31(Integer mid, Integer i, Long[] psum, Long left) {
    long s2;
    long s1 = psum[mid] - psum[i];
    if (s1 < (s2 = left - s1)) {
        Integer.valueOf(mid + 1);
    }
    return s2;
}
public static Long func_a4ca02c27db74d30bdf79542946cda3e(Integer lo, Integer i, Long[] psum, Long left) {
    long t = psum[lo] - psum[i];
    Math.max(t, left - t);
    return t;
}
public static Long func_19ceca3833694cd7ba4218d940958369(Integer lo, Integer i, Long[] psum, Long left) {
    long t = psum[lo] - psum[i];
    long a2 = Math.max(t, left - t);
    return a2;
}
public static Long func_1b49544369f746ed91813ee5affb115f(Integer lo, Integer i, Long[] psum, Long left) {
    long t = psum[lo] - psum[i];
    long a2 = Math.max(t, left - t);
    if (lo > i + 1) {
        t = psum[lo - 1] - psum[i];
        Math.min(a2, Math.max(t, left - t));
    }
    return t;
}
public static Long func_6d0c502b150d445d9fca7ab16a76143c(Integer lo, Integer i, Long[] psum, Long left) {
    long t = psum[lo] - psum[i];
    long a2 = Math.max(t, left - t);
    if (lo > i + 1) {
        t = psum[lo - 1] - psum[i];
        a2 = Math.min(a2, Math.max(t, left - t));
    }
    return a2;
}


****** Cluster 447 ******
public static Integer func_7cf671f395534dc9a388a43623532024(Integer lo, Integer i, Long[] psum, Integer hi, Long left) {
    int mid = lo + hi >> 1;
    psum[mid].longValue();
    psum[i].longValue();
    left.longValue();
    return mid;
}
public static Integer func_e738d51efd0845e288885a6af64a310a(Integer lo, Integer i, Long[] psum, Integer hi, Long left) {
    long s2;
    int mid = lo + hi >> 1;
    long s1 = psum[mid] - psum[i];
    if (s1 >= (s2 = left - s1)) {
        Integer.valueOf(mid);
    } else {
        Integer.valueOf(mid + 1);
    }
    return mid;
}


****** Cluster 448 ******
public static Long func_425824eac83640d69526087deb8a5c3c(Integer lo, Integer i, Long[] psum, Integer hi, Long left) {
    int mid = lo + hi >> 1;
    long s1 = psum[mid] - psum[i];
    left.longValue();
    return s1;
}
public static Long func_2b06e29adaae4929a29b1e64bd05ee27(Integer lo, Integer i, Long[] psum, Integer hi, Long left) {
    long s2;
    int mid = lo + hi >> 1;
    long s1 = psum[mid] - psum[i];
    if (s1 >= (s2 = left - s1)) {
        Integer.valueOf(mid);
    } else {
        Integer.valueOf(mid + 1);
    }
    return s1;
}


****** Cluster 449 ******
public static Long func_a1b54a5ba646417396fad234232b5954(Integer lo, Integer i, Long[] psum, Integer hi, Long left) {
    int mid = lo + hi >> 1;
    long s1 = psum[mid] - psum[i];
    long s2 = left - s1;
    return s2;
}
public static Long func_0592decb314a4b5e88e4a3d05a503afd(Integer lo, Integer i, Long[] psum, Integer hi, Long left) {
    long s2;
    int mid = lo + hi >> 1;
    long s1 = psum[mid] - psum[i];
    if (s1 >= (s2 = left - s1)) {
        Integer.valueOf(mid);
    } else {
        Integer.valueOf(mid + 1);
    }
    return s2;
}


****** Cluster 450 ******
public static Integer func_9c33a0fe9d76493583fbc77488c229f1(Integer i, Integer N, Long[] psum) {
    int lo = i + 1;
    N.intValue();
    psum[N].longValue();
    psum[i].longValue();
    return lo;
}
public static Integer func_c4309cf2afbe4048b1151ae39fb3a83f(Integer i, Integer N, Long[] psum) {
    int lo = i + 1;
    int hi = N;
    long left = psum[N] - psum[i];
    while (lo < hi) {
        long s2;
        int mid = lo + hi >> 1;
        long s1 = psum[mid] - psum[i];
        if (s1 >= (s2 = left - s1)) {
            hi = mid;
            continue;
        }
        lo = mid + 1;
    }
    return lo;
}
public static Integer func_79125e01b47d4159adbb748fc21a9544(Integer i, Integer N, Long[] psum) {
    int lo = i + 1;
    int hi = N;
    long left = psum[N] - psum[i];
    while (lo < hi) {
        long s2;
        int mid = lo + hi >> 1;
        long s1 = psum[mid] - psum[i];
        if (s1 >= (s2 = left - s1)) {
            hi = mid;
            continue;
        }
        lo = mid + 1;
    }
    psum[lo].longValue();
    psum[i].longValue();
    return lo;
}
public static Integer func_2e6aec6819264589aea9704e44b21b85(Integer i, Integer N, Long[] psum) {
    int lo = i + 1;
    int hi = N;
    long left = psum[N] - psum[i];
    while (lo < hi) {
        long s2;
        int mid = lo + hi >> 1;
        long s1 = psum[mid] - psum[i];
        if (s1 >= (s2 = left - s1)) {
            hi = mid;
            continue;
        }
        lo = mid + 1;
    }
    long t = psum[lo] - psum[i];
    Math.max(t, left - t);
    return lo;
}
public static Integer func_9c0446355c574e00a50dbc93faff1503(Integer i, Integer N, Long[] psum) {
    int lo = i + 1;
    int hi = N;
    long left = psum[N] - psum[i];
    while (lo < hi) {
        long s2;
        int mid = lo + hi >> 1;
        long s1 = psum[mid] - psum[i];
        if (s1 >= (s2 = left - s1)) {
            hi = mid;
            continue;
        }
        lo = mid + 1;
    }
    long t = psum[lo] - psum[i];
    long a2 = Math.max(t, left - t);
    if (lo > i + 1) {
        t = psum[lo - 1] - psum[i];
        Math.min(a2, Math.max(t, left - t));
    }
    return lo;
}
public static Integer func_fb0e672891cb4b75a217c1101bac3b21(Integer i, Integer N, Long[] psum) {
    int lo = i + 1;
    int hi = N;
    long left = psum[N] - psum[i];
    while (lo < hi) {
        long s2;
        int mid = lo + hi >> 1;
        long s1 = psum[mid] - psum[i];
        if (s1 >= (s2 = left - s1)) {
            hi = mid;
            continue;
        }
        lo = mid + 1;
    }
    long t = psum[lo] - psum[i];
    long a2 = Math.max(t, left - t);
    if (lo > i + 1) {
        t = psum[lo - 1] - psum[i];
        a2 = Math.min(a2, Math.max(t, left - t));
    }
    psum[N].longValue();
    Math.max(psum[i], a2);
    return lo;
}


****** Cluster 451 ******
public static Integer func_88e5d2ffc7e444e8aa9e3cf911864eab(Integer i, Integer N, Long[] psum) {
    i.intValue();
    int hi = N;
    psum[N].longValue();
    psum[i].longValue();
    return hi;
}
public static Integer func_295870a6253b4b88bed5cf1bc9b0f316(Integer i, Integer N, Long[] psum) {
    int lo = i + 1;
    int hi = N;
    long left = psum[N] - psum[i];
    while (lo < hi) {
        long s2;
        int mid = lo + hi >> 1;
        long s1 = psum[mid] - psum[i];
        if (s1 >= (s2 = left - s1)) {
            hi = mid;
            continue;
        }
        lo = mid + 1;
    }
    return hi;
}
public static Integer func_923c55740cf04126a1c3748ffe3cb53f(Integer i, Integer N, Long[] psum) {
    int lo = i + 1;
    int hi = N;
    long left = psum[N] - psum[i];
    while (lo < hi) {
        long s2;
        int mid = lo + hi >> 1;
        long s1 = psum[mid] - psum[i];
        if (s1 >= (s2 = left - s1)) {
            hi = mid;
            continue;
        }
        lo = mid + 1;
    }
    psum[lo].longValue();
    psum[i].longValue();
    return hi;
}
public static Integer func_a5f3746de88b420fa31de095ae767adc(Integer i, Integer N, Long[] psum) {
    int lo = i + 1;
    int hi = N;
    long left = psum[N] - psum[i];
    while (lo < hi) {
        long s2;
        int mid = lo + hi >> 1;
        long s1 = psum[mid] - psum[i];
        if (s1 >= (s2 = left - s1)) {
            hi = mid;
            continue;
        }
        lo = mid + 1;
    }
    long t = psum[lo] - psum[i];
    Math.max(t, left - t);
    return hi;
}
public static Integer func_8b378ab29e094fcebd3d4186746fa7b4(Integer i, Integer N, Long[] psum) {
    int lo = i + 1;
    int hi = N;
    long left = psum[N] - psum[i];
    while (lo < hi) {
        long s2;
        int mid = lo + hi >> 1;
        long s1 = psum[mid] - psum[i];
        if (s1 >= (s2 = left - s1)) {
            hi = mid;
            continue;
        }
        lo = mid + 1;
    }
    long t = psum[lo] - psum[i];
    long a2 = Math.max(t, left - t);
    if (lo > i + 1) {
        t = psum[lo - 1] - psum[i];
        Math.min(a2, Math.max(t, left - t));
    }
    return hi;
}
public static Integer func_c12d190015c340cdbe6369421722fcef(Integer i, Integer N, Long[] psum) {
    int lo = i + 1;
    int hi = N;
    long left = psum[N] - psum[i];
    while (lo < hi) {
        long s2;
        int mid = lo + hi >> 1;
        long s1 = psum[mid] - psum[i];
        if (s1 >= (s2 = left - s1)) {
            hi = mid;
            continue;
        }
        lo = mid + 1;
    }
    long t = psum[lo] - psum[i];
    long a2 = Math.max(t, left - t);
    if (lo > i + 1) {
        t = psum[lo - 1] - psum[i];
        a2 = Math.min(a2, Math.max(t, left - t));
    }
    psum[N].longValue();
    Math.max(psum[i], a2);
    return hi;
}


****** Cluster 452 ******
public static Long func_4be899868c374dfc90d1262b3cd59c1b(Integer i, Integer N, Long[] psum) {
    i.intValue();
    N.intValue();
    long left = psum[N] - psum[i];
    return left;
}
public static Long func_40e578ca020348128f798ebe1b919b45(Integer i, Integer N, Long[] psum) {
    int lo = i + 1;
    int hi = N;
    long left = psum[N] - psum[i];
    while (lo < hi) {
        long s2;
        int mid = lo + hi >> 1;
        long s1 = psum[mid] - psum[i];
        if (s1 >= (s2 = left - s1)) {
            hi = mid;
            continue;
        }
        lo = mid + 1;
    }
    return left;
}
public static Long func_24e705e96bed43618745bebabd91e278(Integer i, Integer N, Long[] psum) {
    int lo = i + 1;
    int hi = N;
    long left = psum[N] - psum[i];
    while (lo < hi) {
        long s2;
        int mid = lo + hi >> 1;
        long s1 = psum[mid] - psum[i];
        if (s1 >= (s2 = left - s1)) {
            hi = mid;
            continue;
        }
        lo = mid + 1;
    }
    psum[lo].longValue();
    psum[i].longValue();
    return left;
}
public static Long func_e3e076fc047c4194bcc13c2ff025f8f9(Integer i, Integer N, Long[] psum) {
    int lo = i + 1;
    int hi = N;
    long left = psum[N] - psum[i];
    while (lo < hi) {
        long s2;
        int mid = lo + hi >> 1;
        long s1 = psum[mid] - psum[i];
        if (s1 >= (s2 = left - s1)) {
            hi = mid;
            continue;
        }
        lo = mid + 1;
    }
    long t = psum[lo] - psum[i];
    Math.max(t, left - t);
    return left;
}
public static Long func_2a21b9258d6943feb49d205c2be18663(Integer i, Integer N, Long[] psum) {
    int lo = i + 1;
    int hi = N;
    long left = psum[N] - psum[i];
    while (lo < hi) {
        long s2;
        int mid = lo + hi >> 1;
        long s1 = psum[mid] - psum[i];
        if (s1 >= (s2 = left - s1)) {
            hi = mid;
            continue;
        }
        lo = mid + 1;
    }
    long t = psum[lo] - psum[i];
    long a2 = Math.max(t, left - t);
    if (lo > i + 1) {
        t = psum[lo - 1] - psum[i];
        Math.min(a2, Math.max(t, left - t));
    }
    return left;
}
public static Long func_0c1ff63508774f818018526cc6084929(Integer i, Integer N, Long[] psum) {
    int lo = i + 1;
    int hi = N;
    long left = psum[N] - psum[i];
    while (lo < hi) {
        long s2;
        int mid = lo + hi >> 1;
        long s1 = psum[mid] - psum[i];
        if (s1 >= (s2 = left - s1)) {
            hi = mid;
            continue;
        }
        lo = mid + 1;
    }
    long t = psum[lo] - psum[i];
    long a2 = Math.max(t, left - t);
    if (lo > i + 1) {
        t = psum[lo - 1] - psum[i];
        a2 = Math.min(a2, Math.max(t, left - t));
    }
    psum[N].longValue();
    Math.max(psum[i], a2);
    return left;
}


****** Cluster 453 ******
public static Integer func_1c987543f83a4715a09861b2f592e2c5(Integer lo, Integer i, Long[] psum, Integer hi, Long left) {
    while (lo < hi) {
        long s2;
        int mid = lo + hi >> 1;
        long s1 = psum[mid] - psum[i];
        if (s1 >= (s2 = left - s1)) {
            hi = mid;
            continue;
        }
        lo = mid + 1;
    }
    psum[lo].longValue();
    psum[i].longValue();
    return lo;
}
public static Long func_e63f347cbc5f4b5d981b686838edf47e(Integer lo, Integer i, Long[] psum, Integer hi, Long left) {
    while (lo < hi) {
        long s2;
        int mid = lo + hi >> 1;
        long s1 = psum[mid] - psum[i];
        if (s1 >= (s2 = left - s1)) {
            hi = mid;
            continue;
        }
        lo = mid + 1;
    }
    long t = psum[lo] - psum[i];
    return t;
}
public static Integer func_f48c0e20a6e24b049871cb985042e23b(Integer lo, Integer i, Long[] psum, Integer hi, Long left) {
    while (lo < hi) {
        long s2;
        int mid = lo + hi >> 1;
        long s1 = psum[mid] - psum[i];
        if (s1 >= (s2 = left - s1)) {
            hi = mid;
            continue;
        }
        lo = mid + 1;
    }
    psum[lo].longValue();
    psum[i].longValue();
    return hi;
}
public static Integer func_d3b4b46eaf4041588e68a95e934b7743(Integer lo, Integer i, Long[] psum, Integer hi, Long left) {
    while (lo < hi) {
        long s2;
        int mid = lo + hi >> 1;
        long s1 = psum[mid] - psum[i];
        if (s1 >= (s2 = left - s1)) {
            hi = mid;
            continue;
        }
        lo = mid + 1;
    }
    long t = psum[lo] - psum[i];
    Math.max(t, left - t);
    return lo;
}
public static Long func_32b461a98c034c0e8f235e4e7849dad1(Integer lo, Integer i, Long[] psum, Integer hi, Long left) {
    while (lo < hi) {
        long s2;
        int mid = lo + hi >> 1;
        long s1 = psum[mid] - psum[i];
        if (s1 >= (s2 = left - s1)) {
            hi = mid;
            continue;
        }
        lo = mid + 1;
    }
    long t = psum[lo] - psum[i];
    Math.max(t, left - t);
    return t;
}
public static Long func_5d3209010fce4b47bd1145ff6cdfe0fb(Integer lo, Integer i, Long[] psum, Integer hi, Long left) {
    while (lo < hi) {
        long s2;
        int mid = lo + hi >> 1;
        long s1 = psum[mid] - psum[i];
        if (s1 >= (s2 = left - s1)) {
            hi = mid;
            continue;
        }
        lo = mid + 1;
    }
    long t = psum[lo] - psum[i];
    long a2 = Math.max(t, left - t);
    return a2;
}
public static Integer func_01927c7fa9654971a15ee3f020b43b13(Integer lo, Integer i, Long[] psum, Integer hi, Long left) {
    while (lo < hi) {
        long s2;
        int mid = lo + hi >> 1;
        long s1 = psum[mid] - psum[i];
        if (s1 >= (s2 = left - s1)) {
            hi = mid;
            continue;
        }
        lo = mid + 1;
    }
    long t = psum[lo] - psum[i];
    Math.max(t, left - t);
    return hi;
}
public static Integer func_5f1a20764f1945539957f38fa6b463b1(Integer lo, Integer i, Long[] psum, Integer hi, Long left) {
    while (lo < hi) {
        long s2;
        int mid = lo + hi >> 1;
        long s1 = psum[mid] - psum[i];
        if (s1 >= (s2 = left - s1)) {
            hi = mid;
            continue;
        }
        lo = mid + 1;
    }
    long t = psum[lo] - psum[i];
    long a2 = Math.max(t, left - t);
    if (lo > i + 1) {
        t = psum[lo - 1] - psum[i];
        Math.min(a2, Math.max(t, left - t));
    }
    return lo;
}
public static Long func_080cb7dd9fca45558a9bee1183c7d7df(Integer lo, Integer i, Long[] psum, Integer hi, Long left) {
    while (lo < hi) {
        long s2;
        int mid = lo + hi >> 1;
        long s1 = psum[mid] - psum[i];
        if (s1 >= (s2 = left - s1)) {
            hi = mid;
            continue;
        }
        lo = mid + 1;
    }
    long t = psum[lo] - psum[i];
    long a2 = Math.max(t, left - t);
    if (lo > i + 1) {
        t = psum[lo - 1] - psum[i];
        Math.min(a2, Math.max(t, left - t));
    }
    return t;
}
public static Long func_344cc9f7895d40a9ad96e754dbdf8946(Integer lo, Integer i, Long[] psum, Integer hi, Long left) {
    while (lo < hi) {
        long s2;
        int mid = lo + hi >> 1;
        long s1 = psum[mid] - psum[i];
        if (s1 >= (s2 = left - s1)) {
            hi = mid;
            continue;
        }
        lo = mid + 1;
    }
    long t = psum[lo] - psum[i];
    long a2 = Math.max(t, left - t);
    if (lo > i + 1) {
        t = psum[lo - 1] - psum[i];
        a2 = Math.min(a2, Math.max(t, left - t));
    }
    return a2;
}
public static Integer func_6e5e64aba60c42ab9f87ea7e8e3fd00a(Integer lo, Integer i, Long[] psum, Integer hi, Long left) {
    while (lo < hi) {
        long s2;
        int mid = lo + hi >> 1;
        long s1 = psum[mid] - psum[i];
        if (s1 >= (s2 = left - s1)) {
            hi = mid;
            continue;
        }
        lo = mid + 1;
    }
    long t = psum[lo] - psum[i];
    long a2 = Math.max(t, left - t);
    if (lo > i + 1) {
        t = psum[lo - 1] - psum[i];
        Math.min(a2, Math.max(t, left - t));
    }
    return hi;
}


****** Cluster 454 ******
public static Long func_b22c3197e6454e58a2338448f2394f07(Integer i, Integer N, Long[] psum) {
    int lo = i + 1;
    int hi = N;
    long left = psum[N] - psum[i];
    while (lo < hi) {
        long s2;
        int mid = lo + hi >> 1;
        long s1 = psum[mid] - psum[i];
        if (s1 >= (s2 = left - s1)) {
            hi = mid;
            continue;
        }
        lo = mid + 1;
    }
    long t = psum[lo] - psum[i];
    return t;
}
public static Long func_a494298d63b44a83b86c406befc88aee(Integer i, Integer N, Long[] psum) {
    int lo = i + 1;
    int hi = N;
    long left = psum[N] - psum[i];
    while (lo < hi) {
        long s2;
        int mid = lo + hi >> 1;
        long s1 = psum[mid] - psum[i];
        if (s1 >= (s2 = left - s1)) {
            hi = mid;
            continue;
        }
        lo = mid + 1;
    }
    long t = psum[lo] - psum[i];
    Math.max(t, left - t);
    return t;
}
public static Long func_f57ed7e2d3144510af3326c945e6f491(Integer i, Integer N, Long[] psum) {
    int lo = i + 1;
    int hi = N;
    long left = psum[N] - psum[i];
    while (lo < hi) {
        long s2;
        int mid = lo + hi >> 1;
        long s1 = psum[mid] - psum[i];
        if (s1 >= (s2 = left - s1)) {
            hi = mid;
            continue;
        }
        lo = mid + 1;
    }
    long t = psum[lo] - psum[i];
    long a2 = Math.max(t, left - t);
    return a2;
}
public static Long func_84bad03d64774cd8bad1b42d93adb45b(Integer i, Integer N, Long[] psum) {
    int lo = i + 1;
    int hi = N;
    long left = psum[N] - psum[i];
    while (lo < hi) {
        long s2;
        int mid = lo + hi >> 1;
        long s1 = psum[mid] - psum[i];
        if (s1 >= (s2 = left - s1)) {
            hi = mid;
            continue;
        }
        lo = mid + 1;
    }
    long t = psum[lo] - psum[i];
    long a2 = Math.max(t, left - t);
    if (lo > i + 1) {
        t = psum[lo - 1] - psum[i];
        Math.min(a2, Math.max(t, left - t));
    }
    return t;
}
public static Long func_c7f1980c988741ca915d5d5da12f22c2(Integer i, Integer N, Long[] psum) {
    int lo = i + 1;
    int hi = N;
    long left = psum[N] - psum[i];
    while (lo < hi) {
        long s2;
        int mid = lo + hi >> 1;
        long s1 = psum[mid] - psum[i];
        if (s1 >= (s2 = left - s1)) {
            hi = mid;
            continue;
        }
        lo = mid + 1;
    }
    long t = psum[lo] - psum[i];
    long a2 = Math.max(t, left - t);
    if (lo > i + 1) {
        t = psum[lo - 1] - psum[i];
        a2 = Math.min(a2, Math.max(t, left - t));
    }
    return a2;
}
public static Long func_b9bbe2137ad14c7bb5a3f3195b0e7deb(Integer i, Integer N, Long[] psum) {
    int lo = i + 1;
    int hi = N;
    long left = psum[N] - psum[i];
    while (lo < hi) {
        long s2;
        int mid = lo + hi >> 1;
        long s1 = psum[mid] - psum[i];
        if (s1 >= (s2 = left - s1)) {
            hi = mid;
            continue;
        }
        lo = mid + 1;
    }
    long t = psum[lo] - psum[i];
    long a2 = Math.max(t, left - t);
    if (lo > i + 1) {
        t = psum[lo - 1] - psum[i];
        a2 = Math.min(a2, Math.max(t, left - t));
    }
    psum[N].longValue();
    Math.max(psum[i], a2);
    return t;
}
public static Long func_c3cb0a54e5244ccc8d7b76f5cbc4f692(Integer i, Integer N, Long[] psum) {
    int lo = i + 1;
    int hi = N;
    long left = psum[N] - psum[i];
    while (lo < hi) {
        long s2;
        int mid = lo + hi >> 1;
        long s1 = psum[mid] - psum[i];
        if (s1 >= (s2 = left - s1)) {
            hi = mid;
            continue;
        }
        lo = mid + 1;
    }
    long t = psum[lo] - psum[i];
    long a2 = Math.max(t, left - t);
    if (lo > i + 1) {
        t = psum[lo - 1] - psum[i];
        a2 = Math.min(a2, Math.max(t, left - t));
    }
    psum[N].longValue();
    Math.max(psum[i], a2);
    return a2;
}


****** Cluster 455 ******
public static Long func_b0ec4f9d7c9a484ca5afc37b108aa6a8(Integer s, Integer p, Integer q, Long[] a2, Integer r) {
    long sum = 0L;
    for (int i = 0; i < a2.length; ++i) {
        a2[i] = (1L * (long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i].longValue();
    }
    return sum;
}
public static Long func_3ba9cad7e1674ee19e6ee1044dde0876(Integer s, Integer p, Integer q, Long[] a2, Integer r) {
    long sum = 0L;
    for (int i = 0; i < a2.length; ++i) {
        a2[i] = (1L * (long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i].longValue();
    }
    new java.util.TreeSet();
    return sum;
}
public static Long func_fac6585845994d6394b7a2f220914033(Integer s, Integer p, Integer q, Long[] a2, Integer r) {
    long sum = 0L;
    for (int i = 0; i < a2.length; ++i) {
        a2[i] = (1L * (long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i].longValue();
    }
    TreeSet<Long> all = new TreeSet<Long>();
    all.add(0L);
    return sum;
}
public static Long func_6cadf94fd8da47bb9fe2569bb64eb15f(Integer s, Integer p, Integer q, Long[] a2, Integer r) {
    long sum = 0L;
    for (int i = 0; i < a2.length; ++i) {
        a2[i] = (1L * (long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i].longValue();
    }
    TreeSet<Long> all = new TreeSet<Long>();
    all.add(0L);
    return sum;
}
public static Long func_2633c48fba6e40d68b255a6275281b2d(Integer s, Integer p, Integer q, Long[] a2, Integer r) {
    long sum = 0L;
    for (int i = 0; i < a2.length; ++i) {
        a2[i] = (1L * (long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i].longValue();
    }
    TreeSet<Long> all = new TreeSet<Long>();
    all.add(0L);
    return sum;
}


****** Cluster 456 ******
public static Long func_dbb305a37fef4a968b8a2e08e63598ae(Integer s, Integer p, Integer q, Long[] a2, Integer r, Long sum) {
    for (int i = 0; i < a2.length; ++i) {
        a2[i] = (1L * (long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum = sum + a2[i];
    }
    new java.util.TreeSet();
    return sum;
}
public static Long func_6abee01fdf154c3d9a6b141365ac32a4(Integer s, Integer p, Integer q, Long[] a2, Integer r, Long sum) {
    for (int i = 0; i < a2.length; ++i) {
        a2[i] = (1L * (long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum = sum + a2[i];
    }
    TreeSet<Long> all = new TreeSet<Long>();
    all.add(0L);
    return sum;
}
public static Long func_784559ebf7964e1a95fdd8a064b74a7b(Integer s, Integer p, Integer q, Long[] a2, Integer r, Long sum) {
    for (int i = 0; i < a2.length; ++i) {
        a2[i] = (1L * (long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum = sum + a2[i];
    }
    TreeSet<Long> all = new TreeSet<Long>();
    all.add(0L);
    return sum;
}
public static Long func_af669833efac42158cffd6dc9b02f002(Integer s, Integer p, Integer q, Long[] a2, Integer r, Long sum) {
    for (int i = 0; i < a2.length; ++i) {
        a2[i] = (1L * (long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum = sum + a2[i];
    }
    TreeSet<Long> all = new TreeSet<Long>();
    all.add(0L);
    return sum;
}
public static Long func_6104c22ee8f842a38578fdcb739fa23b(Integer s, Integer p, Integer q, Long[] a2, Integer r, Long sum) {
    for (int i = 0; i < a2.length; ++i) {
        a2[i] = (1L * (long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum = sum + a2[i];
    }
    return sum;
}


****** Cluster 457 ******
public static Long func_0cdb49f2fb8c4d85a501dd4c2287fe9a(Integer s, Integer p, Integer q, Integer r, Integer n) {
    long[] a2 = new long[n.intValue()];
    long sum = 0L;
    for (int i = 0; i < a2.length; ++i) {
        a2[i] = (1L * (long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i];
    }
    return sum;
}
public static Long func_be41df69690b44d590f3f18788338162(Integer s, Integer p, Integer q, Integer r, Integer n) {
    long[] a2 = new long[n.intValue()];
    long sum = 0L;
    for (int i = 0; i < a2.length; ++i) {
        a2[i] = (1L * (long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i];
    }
    new java.util.TreeSet();
    return sum;
}
public static Long func_2e365c85b1dc4e92814ebe88fbd430fc(Integer s, Integer p, Integer q, Integer r, Integer n) {
    long[] a2 = new long[n.intValue()];
    long sum = 0L;
    for (int i = 0; i < a2.length; ++i) {
        a2[i] = (1L * (long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i];
    }
    TreeSet<Long> all = new TreeSet<Long>();
    all.add(0L);
    return sum;
}
public static Long func_bec2d6d0f37845e690695e6de9e08a95(Integer s, Integer p, Integer q, Integer r, Integer n) {
    long[] a2 = new long[n.intValue()];
    long sum = 0L;
    for (int i = 0; i < a2.length; ++i) {
        a2[i] = (1L * (long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i];
    }
    TreeSet<Long> all = new TreeSet<Long>();
    all.add(0L);
    return sum;
}
public static Long func_af6099ba979f446493f051cebc0b542a(Integer s, Integer p, Integer q, Integer r, Integer n) {
    long[] a2 = new long[n.intValue()];
    long sum = 0L;
    for (int i = 0; i < a2.length; ++i) {
        a2[i] = (1L * (long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i];
    }
    TreeSet<Long> all = new TreeSet<Long>();
    all.add(0L);
    return sum;
}
public static Long func_a40a4353edc346b1b06e86f84cb90861(Integer s, Integer p, Integer q, Integer r, Integer n) {
    long[] a2 = new long[n.intValue()];
    long sum = 0L;
    for (int i = 0; i < a2.length; ++i) {
        a2[i] = (1L * (long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i];
    }
    TreeSet<Long> all = new TreeSet<Long>();
    all.add(0L);
    long x2 = 0L;
    long best = Long.MAX_VALUE;
    for (int i = 0; i < n; ++i) {
        Long down;
        Long up = all.ceiling((x2 += a2[i]) / 2L + 1L);
        if (up != null) {
            long now = Math.max(up, Math.max(x2 - up, sum - x2));
            best = Math.min(best, now);
        }
        if ((down = all.floor(x2 / 2L)) != null) {
            long now = Math.max(down, Math.max(x2 - down, sum - x2));
            best = Math.min(best, now);
        }
        all.add(x2);
    }
    return x2;
}
public static Long func_eda676801fc8497e8d4c4386bb1af030(Integer s, Integer p, Integer q, Integer r, Integer n) {
    long[] a2 = new long[n.intValue()];
    long sum = 0L;
    for (int i = 0; i < a2.length; ++i) {
        a2[i] = (1L * (long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i];
    }
    TreeSet<Long> all = new TreeSet<Long>();
    all.add(0L);
    long x2 = 0L;
    long best = Long.MAX_VALUE;
    for (int i = 0; i < n; ++i) {
        Long down;
        Long up = all.ceiling((x2 += a2[i]) / 2L + 1L);
        if (up != null) {
            long now = Math.max(up, Math.max(x2 - up, sum - x2));
            best = Math.min(best, now);
        }
        if ((down = all.floor(x2 / 2L)) != null) {
            long now = Math.max(down, Math.max(x2 - down, sum - x2));
            best = Math.min(best, now);
        }
        all.add(x2);
    }
    return sum;
}


****** Cluster 458 ******
public static Integer func_4480bdeffeb440fb8e389bfe99867026(Integer s1, Integer j, Integer n, Integer s2, Integer[] ps) {
    int s3 = ps[n] - ps[j];
    Math.max(s1, Math.max(s2, s3));
    return s3;
}
public static Integer func_eed1a0e645b0448a96e53a08ba8d4fbc(Integer s1, Integer j, Integer n, Integer s2, Integer[] ps) {
    int s3 = ps[n] - ps[j];
    int max = Math.max(s1, Math.max(s2, s3));
    return max;
}


****** Cluster 459 ******
public static Integer func_92b47fb94dc54cb3ba15e752d7965bd5(Integer s1, Integer j, Double ans, Integer n, Integer s2, Integer[] ps) {
    int s3 = ps[n] - ps[j];
    int max = Math.max(s1, Math.max(s2, s3));
    Double.valueOf(Math.max(ans, 1.0 * (double) (ps[n] - max) / (double) ps[n].intValue()));
    return s3;
}
public static Integer func_529ebc6e6c4a45f09e066304391a0478(Integer s1, Integer j, Double ans, Integer n, Integer s2, Integer[] ps) {
    int s3 = ps[n] - ps[j];
    int max = Math.max(s1, Math.max(s2, s3));
    Double.valueOf(Math.max(ans, 1.0 * (double) (ps[n] - max) / (double) ps[n].intValue()));
    return max;
}


****** Cluster 460 ******
public static Long func_3e42f054d4414269a6741b673bb4bdcb(Long[] partials, Integer n, Integer i) {
    long first = partials[i];
    partials[n].longValue();
    return first;
}
public static Long func_802c78fe54384a6690412104f86661d0(Long[] partials, Integer n, Integer i) {
    long first = partials[i];
    long rest = partials[n] - first;
    return rest;
}
public static Long func_1a97b69b0ab7417f84e2dbfdcfce25dc(Long[] partials, Integer n, Integer i) {
    long rest;
    long first = partials[i];
    if (first > (rest = partials[n] - first)) {
        return first;
    }
    return first;
}
public static Long func_207f34ea21134031ac4936a04092715c(Long[] partials, Integer n, Integer i) {
    long rest;
    long first = partials[i];
    if (first > (rest = partials[n] - first)) {
        return first;
    }
    return rest;
}
public static Long func_78d9813d9d5140a6805cd50028ded2d1(Long[] partials, Integer n, Integer i) {
    long rest;
    long first = partials[i];
    if (first > (rest = partials[n] - first)) {
        return first;
    }
    i.intValue();
    n.intValue();
    return first;
}
public static Long func_f19bf05ac6a44d5d917b4293b930af38(Long[] partials, Integer n, Integer i) {
    long rest;
    long first = partials[i];
    if (first > (rest = partials[n] - first)) {
        return first;
    }
    i.intValue();
    n.intValue();
    return rest;
}
public static Long func_8598ebfb01814efc96ade35ae95c23a4(Long[] partials, Integer n, Integer i) {
    long rest;
    long first = partials[i];
    if (first > (rest = partials[n] - first)) {
        return first;
    }
    int low = i;
    int high = n;
    while (low + 1 < high) {
        int guess = (low + high) / 2;
        long second = partials[guess] - partials[i];
        if (second * 2L > rest) {
            high = guess;
            continue;
        }
        low = guess;
    }
    return first;
}
public static Long func_24869d17b99342ed869734f13a63d2e4(Long[] partials, Integer n, Integer i) {
    long rest;
    long first = partials[i];
    if (first > (rest = partials[n] - first)) {
        return first;
    }
    int low = i;
    int high = n;
    while (low + 1 < high) {
        int guess = (low + high) / 2;
        long second = partials[guess] - partials[i];
        if (second * 2L > rest) {
            high = guess;
            continue;
        }
        low = guess;
    }
    return rest;
}


****** Cluster 461 ******
public static Long func_ebe2bd08cd8340dda2263ac690751b55(Long t2, Long[] a2, Integer j, Long rest) {
    t2 = t2 + a2[j];
    Long.valueOf(rest - a2[j]);
    return t2;
}
public static Long func_25290270e7fd4fe8860d4d21d80b205d(Long t2, Long[] a2, Integer j, Long rest) {
    t2 = t2 + a2[j];
    Long.valueOf(rest - a2[j]);
    Integer.valueOf(j + 1);
    return t2;
}


****** Cluster 462 ******
public static Long func_90e9ae3be605451cb429aa9ca2ca0d17(Long t2, Long[] a2, Integer j, Long rest) {
    Long.valueOf(t2 + a2[j]);
    rest = rest - a2[j];
    return rest;
}
public static Long func_b704066dda664cdaa0997b6f63dd3cc9(Long t2, Long[] a2, Integer j, Long rest) {
    Long.valueOf(t2 + a2[j]);
    rest = rest - a2[j];
    Integer.valueOf(j + 1);
    return rest;
}


****** Cluster 463 ******
public static Long func_2ce4570b989a40b6a94041ba490dfab3(Long[] a2, Integer j, Long rest) {
    rest = rest - a2[j];
    Integer.valueOf(j + 1);
    return rest;
}
public static Long func_7a356278a23e4fb5bf53332e94ae274e(Long[] a2, Integer j, Long rest) {
    rest = rest - a2[j];
    Integer.valueOf(j + 1);
    return rest;
}


****** Cluster 464 ******
public static Long func_1d334f03521d4ac88e1984dee0f194cd$77e486f1(Long t2, Long[] a2, Integer j, Long t1, Integer i, Double ans, Long sum, Long rest, Integer n) {
    if (j < n) {
        Double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        Double.valueOf(Math.max(ans, pp));
    }
    t1 = t1 + a2[i];
    return t1;
}
public static Long func_ce63bd6902f4486db384bdcfbf526dc4(Long t2, Long[] a2, Integer j, Long t1, Integer i, Double ans, Long sum, Long rest, Integer n) {
    double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2, rest))) / (double) sum.longValue();
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        Double.valueOf(Math.max(ans, pp));
    }
    t1 = t1 + a2[i];
    return t1;
}
public static Long func_43da6d0791754e62b625b657d37771e7(Long t2, Long[] a2, Integer j, Long t1, Integer i, Double ans, Long sum, Long rest, Integer n) {
    while (j < n && t2 + a2[j] <= rest - a2[j]) {
        t2 = t2 + a2[j];
        rest = rest - a2[j];
        j = j + 1;
    }
    double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2, rest))) / (double) sum.longValue();
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        Double.valueOf(Math.max(ans, pp));
    }
    t1 = t1 + a2[i];
    return t1;
}
public static Long func_57fff14472404c9f97681b19e78c8d87(Long t2, Long[] a2, Integer j, Long t1, Integer i, Double ans, Long sum, Long rest, Integer n) {
    double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2, rest))) / (double) sum.longValue();
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        Double.valueOf(Math.max(ans, pp));
    }
    t1 = t1 + a2[i];
    Long.valueOf(t2 - a2[i]);
    return t1;
}
public static Long func_2bf7a775ce63404bbcd1872f1104bbd7(Long t2, Long[] a2, Integer j, Long t1, Integer i, Double ans, Long sum, Long rest, Integer n) {
    while (j < n && t2 + a2[j] <= rest - a2[j]) {
        t2 = t2 + a2[j];
        rest = rest - a2[j];
        j = j + 1;
    }
    double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2, rest))) / (double) sum.longValue();
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        Double.valueOf(Math.max(ans, pp));
    }
    t1 = t1 + a2[i];
    Long.valueOf(t2 - a2[i]);
    return t1;
}
public static Long func_2ec56670039641a095d99014f0c54ffd(Long t2, Long[] a2, Integer j, Long t1, Integer i, Double ans, Long sum, Long rest, Integer n) {
    double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2, rest))) / (double) sum.longValue();
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        Double.valueOf(Math.max(ans, pp));
    }
    t1 = t1 + a2[i];
    Long.valueOf(t2 - a2[i]);
    if (j == i) {
        Long.valueOf(rest - a2[j]);
        Integer.valueOf(j + 1);
    }
    return t1;
}
public static Long func_0ece8980a4084bc19f1b88e2aacc44c6(Long t2, Long[] a2, Integer j, Long t1, Integer i, Double ans, Long sum, Long rest, Integer n) {
    while (j < n && t2 + a2[j] <= rest - a2[j]) {
        t2 = t2 + a2[j];
        rest = rest - a2[j];
        j = j + 1;
    }
    double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2, rest))) / (double) sum.longValue();
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        Double.valueOf(Math.max(ans, pp));
    }
    t1 = t1 + a2[i];
    Long.valueOf(t2 - a2[i]);
    if (j == i) {
        Long.valueOf(rest - a2[j]);
        Integer.valueOf(j + 1);
    }
    return t1;
}


****** Cluster 465 ******
public static Double func_df4b546425394a11a62b4bcc99b5c486$6a0dd7bc(Long t2, Long[] a2, Integer j, Long t1, Integer i, Double ans, Long sum, Long rest, Integer n) {
    if (j < n) {
        Double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        ans = Math.max(ans, pp);
    }
    Long.valueOf(t1 + a2[i]);
    return ans;
}
public static Double func_f071bc49991f4c878351cb291def345a(Long t2, Long[] a2, Integer j, Long t1, Integer i, Double ans, Long sum, Long rest, Integer n) {
    double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2, rest))) / (double) sum.longValue();
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        ans = Math.max(ans, pp);
    }
    Long.valueOf(t1 + a2[i]);
    return ans;
}
public static Double func_196f4030b5094c46bbe963b64694682f(Long t2, Long[] a2, Integer j, Long t1, Integer i, Double ans, Long sum, Long rest, Integer n) {
    while (j < n && t2 + a2[j] <= rest - a2[j]) {
        t2 = t2 + a2[j];
        rest = rest - a2[j];
        j = j + 1;
    }
    double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2, rest))) / (double) sum.longValue();
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        ans = Math.max(ans, pp);
    }
    Long.valueOf(t1 + a2[i]);
    return ans;
}
public static Double func_6c60344e97d947789e68a08437b9eb4a(Long t2, Long[] a2, Integer j, Long t1, Integer i, Double ans, Long sum, Long rest, Integer n) {
    double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2, rest))) / (double) sum.longValue();
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        ans = Math.max(ans, pp);
    }
    Long.valueOf(t1 + a2[i]);
    Long.valueOf(t2 - a2[i]);
    return ans;
}
public static Double func_b9914467a35f44bf9bb2ba6d486f2218(Long t2, Long[] a2, Integer j, Long t1, Integer i, Double ans, Long sum, Long rest, Integer n) {
    while (j < n && t2 + a2[j] <= rest - a2[j]) {
        t2 = t2 + a2[j];
        rest = rest - a2[j];
        j = j + 1;
    }
    double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2, rest))) / (double) sum.longValue();
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        ans = Math.max(ans, pp);
    }
    Long.valueOf(t1 + a2[i]);
    Long.valueOf(t2 - a2[i]);
    return ans;
}
public static Double func_3fb5bed0a391484e9ece7a78940e9037(Long t2, Long[] a2, Integer j, Long t1, Integer i, Double ans, Long sum, Long rest, Integer n) {
    double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2, rest))) / (double) sum.longValue();
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        ans = Math.max(ans, pp);
    }
    Long.valueOf(t1 + a2[i]);
    Long.valueOf(t2 - a2[i]);
    if (j == i) {
        Long.valueOf(rest - a2[j]);
        Integer.valueOf(j + 1);
    }
    return ans;
}
public static Double func_3038cd82875b40668167932ccb22f4fc(Long t2, Long[] a2, Integer j, Long t1, Integer i, Double ans, Long sum, Long rest, Integer n) {
    while (j < n && t2 + a2[j] <= rest - a2[j]) {
        t2 = t2 + a2[j];
        rest = rest - a2[j];
        j = j + 1;
    }
    double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2, rest))) / (double) sum.longValue();
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        ans = Math.max(ans, pp);
    }
    Long.valueOf(t1 + a2[i]);
    Long.valueOf(t2 - a2[i]);
    if (j == i) {
        Long.valueOf(rest - a2[j]);
        Integer.valueOf(j + 1);
    }
    return ans;
}


****** Cluster 466 ******
public static Long func_4bdfdab20cde477ea14d8431327e06db(Long t2, Long[] a2, Integer j, Long t1, Double ans, Long sum, Long rest, Integer n) {
    while (j < n && t2 + a2[j] <= rest - a2[j]) {
        t2 = t2 + a2[j];
        rest = rest - a2[j];
        j = j + 1;
    }
    double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2, rest))) / (double) sum.longValue();
    Double.valueOf(Math.max(ans, pp));
    return t2;
}
public static Long func_7ed6285bfa6d47ecadc5c1eaa6890742(Long t2, Long[] a2, Integer j, Long t1, Double ans, Long sum, Long rest, Integer n) {
    while (j < n && t2 + a2[j] <= rest - a2[j]) {
        t2 = t2 + a2[j];
        rest = rest - a2[j];
        j = j + 1;
    }
    double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2, rest))) / (double) sum.longValue();
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        Double.valueOf(Math.max(ans, pp));
    }
    return t2;
}


****** Cluster 467 ******
public static Double func_b3671901e0a04a5f98c587bc33140a90(Long t2, Long[] a2, Integer j, Long t1, Double ans, Long sum, Long rest, Integer n) {
    while (j < n && t2 + a2[j] <= rest - a2[j]) {
        t2 = t2 + a2[j];
        rest = rest - a2[j];
        j = j + 1;
    }
    double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2, rest))) / (double) sum.longValue();
    Double.valueOf(Math.max(ans, pp));
    return pp;
}
public static Double func_7f219069291b47d6b97bc9ab24da24ca(Long t2, Long[] a2, Integer j, Long t1, Double ans, Long sum, Long rest, Integer n) {
    while (j < n && t2 + a2[j] <= rest - a2[j]) {
        t2 = t2 + a2[j];
        rest = rest - a2[j];
        j = j + 1;
    }
    double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2, rest))) / (double) sum.longValue();
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        Double.valueOf(Math.max(ans, pp));
    }
    return pp;
}


****** Cluster 468 ******
public static Double func_2f04eef7015d4e8196380f70586736d0(Long t2, Long[] a2, Integer j, Long t1, Double ans, Long sum, Long rest, Integer n) {
    while (j < n && t2 + a2[j] <= rest - a2[j]) {
        t2 = t2 + a2[j];
        rest = rest - a2[j];
        j = j + 1;
    }
    double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2, rest))) / (double) sum.longValue();
    ans = Math.max(ans, pp);
    return ans;
}
public static Double func_97d9cb3826de4b41aa56855d6f574592(Long t2, Long[] a2, Integer j, Long t1, Double ans, Long sum, Long rest, Integer n) {
    while (j < n && t2 + a2[j] <= rest - a2[j]) {
        t2 = t2 + a2[j];
        rest = rest - a2[j];
        j = j + 1;
    }
    double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2, rest))) / (double) sum.longValue();
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        ans = Math.max(ans, pp);
    }
    return ans;
}


****** Cluster 469 ******
public static Long func_76b476017557498a84185231e86df93a(Long t2, Long[] a2, Integer j, Long t1, Double ans, Long sum, Long rest, Integer n) {
    while (j < n && t2 + a2[j] <= rest - a2[j]) {
        t2 = t2 + a2[j];
        rest = rest - a2[j];
        j = j + 1;
    }
    double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2, rest))) / (double) sum.longValue();
    Double.valueOf(Math.max(ans, pp));
    return rest;
}
public static Long func_b2f0b6fdaa2545459ec95f5650af8fdc(Long t2, Long[] a2, Integer j, Long t1, Double ans, Long sum, Long rest, Integer n) {
    while (j < n && t2 + a2[j] <= rest - a2[j]) {
        t2 = t2 + a2[j];
        rest = rest - a2[j];
        j = j + 1;
    }
    double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2, rest))) / (double) sum.longValue();
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        Double.valueOf(Math.max(ans, pp));
    }
    return rest;
}


****** Cluster 470 ******
public static Double func_922c3fdf938d456eaf649e97890a5427(Long t2, Long[] a2, Integer j, Double pp, Long t1, Integer i, Double ans, Long sum, Long rest, Integer n) {
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        Double.valueOf(Math.max(ans, pp));
    }
    Long.valueOf(t1 + a2[i]);
    return pp;
}
public static Double func_e8e510c18d014140b8b2a62a33fa1337(Long t2, Long[] a2, Integer j, Double pp, Long t1, Integer i, Double ans, Long sum, Long rest, Integer n) {
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        Double.valueOf(Math.max(ans, pp));
    }
    Long.valueOf(t1 + a2[i]);
    Long.valueOf(t2 - a2[i]);
    return pp;
}
public static Double func_a9d3cefecba44f99bf430e07a0a05d47(Long t2, Long[] a2, Integer j, Double pp, Long t1, Integer i, Double ans, Long sum, Long rest, Integer n) {
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        Double.valueOf(Math.max(ans, pp));
    }
    Long.valueOf(t1 + a2[i]);
    Long.valueOf(t2 - a2[i]);
    if (j == i) {
        Long.valueOf(rest - a2[j]);
        Integer.valueOf(j + 1);
    }
    return pp;
}


****** Cluster 471 ******
public static Long func_1fcb741eaedd4b4b8c00901031e602d3(Long t2, Long[] a2, Integer j, Double pp, Long t1, Integer i, Double ans, Long sum, Long rest, Integer n) {
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        Double.valueOf(Math.max(ans, pp));
    }
    t1 = t1 + a2[i];
    return t1;
}
public static Long func_90d896c610d141059a53f7fa9b90fb32(Long t2, Long[] a2, Integer j, Double pp, Long t1, Integer i, Double ans, Long sum, Long rest, Integer n) {
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        Double.valueOf(Math.max(ans, pp));
    }
    t1 = t1 + a2[i];
    Long.valueOf(t2 - a2[i]);
    return t1;
}
public static Long func_e21bb67d20ac4b74be221f0d3527a298(Long t2, Long[] a2, Integer j, Double pp, Long t1, Integer i, Double ans, Long sum, Long rest, Integer n) {
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        Double.valueOf(Math.max(ans, pp));
    }
    t1 = t1 + a2[i];
    Long.valueOf(t2 - a2[i]);
    if (j == i) {
        Long.valueOf(rest - a2[j]);
        Integer.valueOf(j + 1);
    }
    return t1;
}


****** Cluster 472 ******
public static Double func_edd57f2deb244c8fa3a43490d532e65e(Long t2, Long[] a2, Integer j, Double pp, Long t1, Integer i, Double ans, Long sum, Long rest, Integer n) {
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        ans = Math.max(ans, pp);
    }
    Long.valueOf(t1 + a2[i]);
    return ans;
}
public static Double func_7eb0f75bb3ad4ac3857819fca477b5d3(Long t2, Long[] a2, Integer j, Double pp, Long t1, Integer i, Double ans, Long sum, Long rest, Integer n) {
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        ans = Math.max(ans, pp);
    }
    Long.valueOf(t1 + a2[i]);
    Long.valueOf(t2 - a2[i]);
    return ans;
}
public static Double func_1e12caa4daf1438db65c2c0a6a4f388b(Long t2, Long[] a2, Integer j, Double pp, Long t1, Integer i, Double ans, Long sum, Long rest, Integer n) {
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        ans = Math.max(ans, pp);
    }
    Long.valueOf(t1 + a2[i]);
    Long.valueOf(t2 - a2[i]);
    if (j == i) {
        Long.valueOf(rest - a2[j]);
        Integer.valueOf(j + 1);
    }
    return ans;
}


****** Cluster 473 ******
public static Long func_ce01bc46f83e4429974455fae0f25c34$85740a3(Long t2, Long[] a2, Integer j, Long t1, Double ans, Integer i, Long sum, Long rest, Integer n) {
    if (j < n) {
        Double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        Double.valueOf(Math.max(ans, pp));
    }
    Long.valueOf(t1 + a2[i]);
    t2 = t2 - a2[i];
    return t2;
}
public static Long func_ff876df372284105af2d8913be83f0f3$85740a3(Long t2, Long[] a2, Integer j, Long t1, Double ans, Integer i, Long sum, Long rest, Integer n) {
    if (j < n) {
        Double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        Double.valueOf(Math.max(ans, pp));
    }
    Long.valueOf(t1 + a2[i]);
    t2 = t2 - a2[i];
    if (j == i) {
        Long.valueOf(rest - a2[j]);
        Integer.valueOf(j + 1);
    }
    return t2;
}


****** Cluster 474 ******
public static Double func_38cf52df39b4414f959811371a55dfa8(Long t2, Long[] a2, Double pp, Integer j, Long t1, Double ans, Integer i, Long sum, Long rest, Integer n) {
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        Double.valueOf(Math.max(ans, pp));
    }
    Long.valueOf(t1 + a2[i]);
    Long.valueOf(t2 - a2[i]);
    return pp;
}
public static Double func_5cc28282360a4a4aa3de78f27d76ddda(Long t2, Long[] a2, Double pp, Integer j, Long t1, Double ans, Integer i, Long sum, Long rest, Integer n) {
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        Double.valueOf(Math.max(ans, pp));
    }
    Long.valueOf(t1 + a2[i]);
    Long.valueOf(t2 - a2[i]);
    if (j == i) {
        Long.valueOf(rest - a2[j]);
        Integer.valueOf(j + 1);
    }
    return pp;
}


****** Cluster 475 ******
public static Long func_725f20e034fc4954aeaa9657c6873be5$85740a3(Long t2, Long[] a2, Integer j, Long t1, Double ans, Integer i, Long sum, Long rest, Integer n) {
    if (j < n) {
        Double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        Double.valueOf(Math.max(ans, pp));
    }
    t1 = t1 + a2[i];
    Long.valueOf(t2 - a2[i]);
    return t1;
}
public static Long func_0596d1206bc248cb9ad93ef077f3c78f$85740a3(Long t2, Long[] a2, Integer j, Long t1, Double ans, Integer i, Long sum, Long rest, Integer n) {
    if (j < n) {
        Double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        Double.valueOf(Math.max(ans, pp));
    }
    t1 = t1 + a2[i];
    Long.valueOf(t2 - a2[i]);
    if (j == i) {
        Long.valueOf(rest - a2[j]);
        Integer.valueOf(j + 1);
    }
    return t1;
}


****** Cluster 476 ******
public static Double func_aafd4b27ed994419849422e1011f3af6$9a5a528(Long t2, Long[] a2, Integer j, Long t1, Double ans, Integer i, Long sum, Long rest, Integer n) {
    if (j < n) {
        Double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        ans = Math.max(ans, pp);
    }
    Long.valueOf(t1 + a2[i]);
    Long.valueOf(t2 - a2[i]);
    return ans;
}
public static Double func_10e23cba2b9c44a38897b5a33b780297$9a5a528(Long t2, Long[] a2, Integer j, Long t1, Double ans, Integer i, Long sum, Long rest, Integer n) {
    if (j < n) {
        Double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        ans = Math.max(ans, pp);
    }
    Long.valueOf(t1 + a2[i]);
    Long.valueOf(t2 - a2[i]);
    if (j == i) {
        Long.valueOf(rest - a2[j]);
        Integer.valueOf(j + 1);
    }
    return ans;
}


****** Cluster 477 ******
public static Double func_aed8d34d56224c9e95b88b647d612556(Long t2, Long[] a2, Integer j, Long t1, Integer i, Double ans, Long sum, Long rest, Integer n) {
    double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2, rest))) / (double) sum.longValue();
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        Double.valueOf(Math.max(ans, pp));
    }
    Long.valueOf(t1 + a2[i]);
    return pp;
}
public static Double func_e2aac133f20241b88c9c0231df3f4d67(Long t2, Long[] a2, Integer j, Long t1, Integer i, Double ans, Long sum, Long rest, Integer n) {
    while (j < n && t2 + a2[j] <= rest - a2[j]) {
        t2 = t2 + a2[j];
        rest = rest - a2[j];
        j = j + 1;
    }
    double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2, rest))) / (double) sum.longValue();
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        Double.valueOf(Math.max(ans, pp));
    }
    Long.valueOf(t1 + a2[i]);
    return pp;
}
public static Double func_c37769f115aa41519e0cab7a5d111fd5(Long t2, Long[] a2, Integer j, Long t1, Integer i, Double ans, Long sum, Long rest, Integer n) {
    double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2, rest))) / (double) sum.longValue();
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        Double.valueOf(Math.max(ans, pp));
    }
    Long.valueOf(t1 + a2[i]);
    Long.valueOf(t2 - a2[i]);
    return pp;
}
public static Double func_9d91c46ca1c64236a05e8ef739ca5a66(Long t2, Long[] a2, Integer j, Long t1, Integer i, Double ans, Long sum, Long rest, Integer n) {
    while (j < n && t2 + a2[j] <= rest - a2[j]) {
        t2 = t2 + a2[j];
        rest = rest - a2[j];
        j = j + 1;
    }
    double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2, rest))) / (double) sum.longValue();
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        Double.valueOf(Math.max(ans, pp));
    }
    Long.valueOf(t1 + a2[i]);
    Long.valueOf(t2 - a2[i]);
    return pp;
}
public static Double func_aaca2d9b8177421bb9d48e31505e6f97(Long t2, Long[] a2, Integer j, Long t1, Integer i, Double ans, Long sum, Long rest, Integer n) {
    double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2, rest))) / (double) sum.longValue();
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        Double.valueOf(Math.max(ans, pp));
    }
    Long.valueOf(t1 + a2[i]);
    Long.valueOf(t2 - a2[i]);
    if (j == i) {
        Long.valueOf(rest - a2[j]);
        Integer.valueOf(j + 1);
    }
    return pp;
}
public static Double func_5d7982b465354992b2557bd27eeeb101(Long t2, Long[] a2, Integer j, Long t1, Integer i, Double ans, Long sum, Long rest, Integer n) {
    while (j < n && t2 + a2[j] <= rest - a2[j]) {
        t2 = t2 + a2[j];
        rest = rest - a2[j];
        j = j + 1;
    }
    double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2, rest))) / (double) sum.longValue();
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        Double.valueOf(Math.max(ans, pp));
    }
    Long.valueOf(t1 + a2[i]);
    Long.valueOf(t2 - a2[i]);
    if (j == i) {
        Long.valueOf(rest - a2[j]);
        Integer.valueOf(j + 1);
    }
    return pp;
}


****** Cluster 478 ******
public static Long func_3cbd5318975049edb40716f80fbd879e(Long t2, Long[] a2, Integer j, Double pp, Long t1, Integer i, Double ans, Long sum, Long rest, Integer n) {
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        Double.valueOf(Math.max(ans, pp));
    }
    Long.valueOf(t1 + a2[i]);
    t2 = t2 - a2[i];
    return t2;
}
public static Long func_d1d17219a738497a98434ad1f413474d(Long t2, Long[] a2, Integer j, Double pp, Long t1, Integer i, Double ans, Long sum, Long rest, Integer n) {
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        Double.valueOf(Math.max(ans, pp));
    }
    Long.valueOf(t1 + a2[i]);
    t2 = t2 - a2[i];
    if (j == i) {
        Long.valueOf(rest - a2[j]);
        Integer.valueOf(j + 1);
    }
    return t2;
}


****** Cluster 479 ******
public static Long func_7c5d5bc37f2f489f830f5d3dba1bf033(Long t2, Long[] a2, Integer j, Long t1, Integer i, Double ans, Long sum, Long rest, Integer n) {
    while (j < n && t2 + a2[j] <= rest - a2[j]) {
        t2 = t2 + a2[j];
        rest = rest - a2[j];
        j = j + 1;
    }
    double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2, rest))) / (double) sum.longValue();
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        Double.valueOf(Math.max(ans, pp));
    }
    Long.valueOf(t1 + a2[i]);
    return rest;
}
public static Long func_5b5a5c25d61c4f98b174036bb50ce3a2(Long t2, Long[] a2, Integer j, Long t1, Integer i, Double ans, Long sum, Long rest, Integer n) {
    while (j < n && t2 + a2[j] <= rest - a2[j]) {
        t2 = t2 + a2[j];
        rest = rest - a2[j];
        j = j + 1;
    }
    double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2, rest))) / (double) sum.longValue();
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        Double.valueOf(Math.max(ans, pp));
    }
    Long.valueOf(t1 + a2[i]);
    Long.valueOf(t2 - a2[i]);
    return rest;
}
public static Long func_1c035c2197ba419a89671dc20fa60128(Long t2, Long[] a2, Integer j, Long t1, Integer i, Double ans, Long sum, Long rest, Integer n) {
    double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2, rest))) / (double) sum.longValue();
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        Double.valueOf(Math.max(ans, pp));
    }
    Long.valueOf(t1 + a2[i]);
    Long.valueOf(t2 - a2[i]);
    if (j == i) {
        rest = rest - a2[j];
        Integer.valueOf(j + 1);
    }
    return rest;
}
public static Long func_fbbd76a19e0f479395bbf54f4f2f84f3(Long t2, Long[] a2, Integer j, Long t1, Integer i, Double ans, Long sum, Long rest, Integer n) {
    while (j < n && t2 + a2[j] <= rest - a2[j]) {
        t2 = t2 + a2[j];
        rest = rest - a2[j];
        j = j + 1;
    }
    double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2, rest))) / (double) sum.longValue();
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        Double.valueOf(Math.max(ans, pp));
    }
    Long.valueOf(t1 + a2[i]);
    Long.valueOf(t2 - a2[i]);
    if (j == i) {
        rest = rest - a2[j];
        Integer.valueOf(j + 1);
    }
    return rest;
}


****** Cluster 480 ******
public static Long func_c9e60a00ea704b6fb3546c99378a3729(Long t2, Long[] a2, Integer j, Long t1, Integer i, Double ans, Long sum, Long rest, Integer n) {
    double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2, rest))) / (double) sum.longValue();
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        Double.valueOf(Math.max(ans, pp));
    }
    Long.valueOf(t1 + a2[i]);
    t2 = t2 - a2[i];
    return t2;
}
public static Long func_b710279e740b4e5d9ee955fee0b5877e(Long t2, Long[] a2, Integer j, Long t1, Integer i, Double ans, Long sum, Long rest, Integer n) {
    while (j < n && t2 + a2[j] <= rest - a2[j]) {
        t2 = t2 + a2[j];
        rest = rest - a2[j];
        j = j + 1;
    }
    double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2, rest))) / (double) sum.longValue();
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        Double.valueOf(Math.max(ans, pp));
    }
    Long.valueOf(t1 + a2[i]);
    t2 = t2 - a2[i];
    return t2;
}
public static Long func_d72b1ff14e624d048c31705b00dd90bd(Long t2, Long[] a2, Integer j, Long t1, Integer i, Double ans, Long sum, Long rest, Integer n) {
    double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2, rest))) / (double) sum.longValue();
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        Double.valueOf(Math.max(ans, pp));
    }
    Long.valueOf(t1 + a2[i]);
    t2 = t2 - a2[i];
    if (j == i) {
        Long.valueOf(rest - a2[j]);
        Integer.valueOf(j + 1);
    }
    return t2;
}
public static Long func_d79169e779d0472ead33b19d22afbb86(Long t2, Long[] a2, Integer j, Long t1, Integer i, Double ans, Long sum, Long rest, Integer n) {
    while (j < n && t2 + a2[j] <= rest - a2[j]) {
        t2 = t2 + a2[j];
        rest = rest - a2[j];
        j = j + 1;
    }
    double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2, rest))) / (double) sum.longValue();
    ans = Math.max(ans, pp);
    if (j < n) {
        pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
        Double.valueOf(Math.max(ans, pp));
    }
    Long.valueOf(t1 + a2[i]);
    t2 = t2 - a2[i];
    if (j == i) {
        Long.valueOf(rest - a2[j]);
        Integer.valueOf(j + 1);
    }
    return t2;
}


****** Cluster 481 ******
public static Long func_e51eae5279304387b146161abb857bc3(Integer q, Integer r, Long[] a2, Long p, Integer n, Integer s) {
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * p + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i].longValue();
    }
    return sum;
}
public static Long func_eec9f171f30847609d4a7b0d6cdceba4(Integer q, Integer r, Long[] a2, Long p, Integer n, Integer s) {
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * p + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i].longValue();
    }
    return sum;
}
public static Long func_2d4672505e074586be7c4514aeaccbb0(Integer q, Integer r, Long[] a2, Long p, Integer n, Integer s) {
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * p + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i].longValue();
    }
    return sum;
}
public static Long func_53afd27130c440edb0f36a001a0a815d(Integer q, Integer r, Long[] a2, Long p, Integer n, Integer s) {
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * p + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i].longValue();
    }
    return sum;
}
public static Long func_3ec9290b4ff844a1b570f91a9b3054aa(Integer q, Integer r, Long[] a2, Long p, Integer n, Integer s) {
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * p + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i].longValue();
    }
    long rest = sum;
    return rest;
}
public static Long func_3ac5213ba6c049428f8996e03ce72f81(Integer q, Integer r, Long[] a2, Long p, Integer n, Integer s) {
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * p + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i].longValue();
    }
    return sum;
}
public static Long func_c8aaee0d0a834bfe886a6749ff946b2c(Integer q, Integer r, Long[] a2, Long p, Integer n, Integer s) {
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * p + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i].longValue();
    }
    long rest = sum;
    return rest;
}
public static Long func_6405d8deef2d45e8a10d50b1afe97a1a(Integer q, Integer r, Long[] a2, Long p, Integer n, Integer s) {
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * p + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i].longValue();
    }
    return sum;
}
public static Long func_92de2707ecbd46c580600ff09de2452d(Integer q, Integer r, Long[] a2, Long p, Integer n, Integer s) {
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * p + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i].longValue();
    }
    long rest = sum;
    return rest;
}
public static Long func_af797e7934804872a8d469cd2c6b14c1(Integer q, Integer r, Long[] a2, Long p, Integer n, Integer s) {
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * p + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i].longValue();
    }
    long t1 = 0L;
    long t2 = 0L;
    long rest = sum;
    int j = 0;
    double ans = 0.0;
    for (int i = 0; i < n; ++i) {
        while (j < n && t2 + a2[j] <= rest - a2[j]) {
            t2 += a2[j].longValue();
            rest -= a2[j].longValue();
            ++j;
        }
        double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2, rest))) / (double) sum;
        ans = Math.max(ans, pp);
        if (j < n) {
            pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum;
            ans = Math.max(ans, pp);
        }
        t1 += a2[i].longValue();
        t2 -= a2[i].longValue();
        if (j != i)
            continue;
        rest -= a2[j].longValue();
        ++j;
    }
    return t1;
}
public static Long func_df9b4a4f7cb848c1902e8f51517dcf24(Integer q, Integer r, Long[] a2, Long p, Integer n, Integer s) {
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * p + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i].longValue();
    }
    long t1 = 0L;
    long t2 = 0L;
    long rest = sum;
    int j = 0;
    double ans = 0.0;
    for (int i = 0; i < n; ++i) {
        while (j < n && t2 + a2[j] <= rest - a2[j]) {
            t2 += a2[j].longValue();
            rest -= a2[j].longValue();
            ++j;
        }
        double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2, rest))) / (double) sum;
        ans = Math.max(ans, pp);
        if (j < n) {
            pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum;
            ans = Math.max(ans, pp);
        }
        t1 += a2[i].longValue();
        t2 -= a2[i].longValue();
        if (j != i)
            continue;
        rest -= a2[j].longValue();
        ++j;
    }
    return sum;
}


****** Cluster 482 ******
public static Long func_2ef32068d0f7472ea1bcb00d0521765e(Integer q, Integer r, Long[] a2, Long p, Long sum, Integer n, Integer s) {
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * p + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum = sum + a2[i];
    }
    return sum;
}
public static Long func_18067da23ed8447fa2dbdefc1e32910f(Integer q, Integer r, Long[] a2, Long p, Long sum, Integer n, Integer s) {
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * p + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum = sum + a2[i];
    }
    return sum;
}
public static Long func_61374ff06f75485093d4f10feb27d244(Integer q, Integer r, Long[] a2, Long p, Long sum, Integer n, Integer s) {
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * p + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum = sum + a2[i];
    }
    sum.longValue();
    return sum;
}
public static Long func_8aaaeb9f9c58489ebb7f8951819a5610(Integer q, Integer r, Long[] a2, Long p, Long sum, Integer n, Integer s) {
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * p + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum = sum + a2[i];
    }
    long rest = sum;
    return rest;
}
public static Long func_788a37e35f62417fad4ae6bfbe494dd8(Integer q, Integer r, Long[] a2, Long p, Long sum, Integer n, Integer s) {
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * p + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum = sum + a2[i];
    }
    sum.longValue();
    return sum;
}
public static Long func_974e7c59fc894a7ca1e381174ddd3a92(Integer q, Integer r, Long[] a2, Long p, Long sum, Integer n, Integer s) {
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * p + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum = sum + a2[i];
    }
    long rest = sum;
    return rest;
}
public static Long func_acefae9b15e44642be3ee0ba001190e3(Integer q, Integer r, Long[] a2, Long p, Long sum, Integer n, Integer s) {
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * p + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum = sum + a2[i];
    }
    sum.longValue();
    return sum;
}
public static Long func_56aad0d2b1ef42c6a815c17266e87e37(Integer q, Integer r, Long[] a2, Long p, Long sum, Integer n, Integer s) {
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * p + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum = sum + a2[i];
    }
    long rest = sum;
    return rest;
}
public static Long func_417b48bf480b4fcbaf494497e51dad4d(Integer q, Integer r, Long[] a2, Long p, Long sum, Integer n, Integer s) {
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * p + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum = sum + a2[i];
    }
    long t1 = 0L;
    long t2 = 0L;
    long rest = sum;
    int j = 0;
    double ans = 0.0;
    for (int i = 0; i < n; ++i) {
        while (j < n && t2 + a2[j] <= rest - a2[j]) {
            t2 += a2[j].longValue();
            rest -= a2[j].longValue();
            ++j;
        }
        double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2, rest))) / (double) sum.longValue();
        ans = Math.max(ans, pp);
        if (j < n) {
            pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum.longValue();
            ans = Math.max(ans, pp);
        }
        t1 += a2[i].longValue();
        t2 -= a2[i].longValue();
        if (j != i)
            continue;
        rest -= a2[j].longValue();
        ++j;
    }
    return sum;
}


****** Cluster 483 ******
public static Long func_f6da24440f9745f1a7ec3239c6d2d6ff(Integer q, Integer r, Long p, Integer n, Integer s) {
    long[] a2 = new long[n.intValue()];
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * p + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i];
    }
    return sum;
}
public static Long func_91cc86e9d2e14f7d8bd61eb70c5a7208(Integer q, Integer r, Long p, Integer n, Integer s) {
    long[] a2 = new long[n.intValue()];
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * p + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i];
    }
    return sum;
}
public static Long func_89af5590485044afac1223c8fe03a82d(Integer q, Integer r, Long p, Integer n, Integer s) {
    long[] a2 = new long[n.intValue()];
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * p + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i];
    }
    return sum;
}
public static Long func_f00ca4d8fd264165a9eb8d213c484bcc(Integer q, Integer r, Long p, Integer n, Integer s) {
    long[] a2 = new long[n.intValue()];
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * p + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i];
    }
    return sum;
}
public static Long func_ed8c2e98cc7b4443822f6229d1829415(Integer q, Integer r, Long p, Integer n, Integer s) {
    long[] a2 = new long[n.intValue()];
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * p + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i];
    }
    long rest = sum;
    return rest;
}
public static Long func_55a5e8dca03340bbb1e90c4306bc9521(Integer q, Integer r, Long p, Integer n, Integer s) {
    long[] a2 = new long[n.intValue()];
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * p + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i];
    }
    return sum;
}
public static Long func_c2914bb628bc453a82df0125dc663fe6(Integer q, Integer r, Long p, Integer n, Integer s) {
    long[] a2 = new long[n.intValue()];
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * p + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i];
    }
    long rest = sum;
    return rest;
}
public static Long func_db80408ca6d5460cac2720385c329a33(Integer q, Integer r, Long p, Integer n, Integer s) {
    long[] a2 = new long[n.intValue()];
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * p + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i];
    }
    return sum;
}
public static Long func_e92d61eb72cc4a4aa3226c73f8eaaa4c(Integer q, Integer r, Long p, Integer n, Integer s) {
    long[] a2 = new long[n.intValue()];
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * p + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i];
    }
    long rest = sum;
    return rest;
}
public static Long func_5fb67befbe1a42999d7b30e2a371cb78(Integer q, Integer r, Long p, Integer n, Integer s) {
    long[] a2 = new long[n.intValue()];
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * p + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i];
    }
    long t1 = 0L;
    long t2 = 0L;
    long rest = sum;
    int j = 0;
    double ans = 0.0;
    for (int i = 0; i < n; ++i) {
        while (j < n && t2 + a2[j] <= rest - a2[j]) {
            t2 += a2[j];
            rest -= a2[j];
            ++j;
        }
        double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2, rest))) / (double) sum;
        ans = Math.max(ans, pp);
        if (j < n) {
            pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum;
            ans = Math.max(ans, pp);
        }
        t1 += a2[i];
        t2 -= a2[i];
        if (j != i)
            continue;
        rest -= a2[j];
        ++j;
    }
    return t1;
}
public static Long func_e22c57b26d784b1592f0a07ef3f958d7(Integer q, Integer r, Long p, Integer n, Integer s) {
    long[] a2 = new long[n.intValue()];
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * p + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i];
    }
    long t1 = 0L;
    long t2 = 0L;
    long rest = sum;
    int j = 0;
    double ans = 0.0;
    for (int i = 0; i < n; ++i) {
        while (j < n && t2 + a2[j] <= rest - a2[j]) {
            t2 += a2[j];
            rest -= a2[j];
            ++j;
        }
        double pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2, rest))) / (double) sum;
        ans = Math.max(ans, pp);
        if (j < n) {
            pp = 1.0 * (double) (sum - Math.max(t1, Math.max(t2 + a2[j], rest - a2[j]))) / (double) sum;
            ans = Math.max(ans, pp);
        }
        t1 += a2[i];
        t2 -= a2[i];
        if (j != i)
            continue;
        rest -= a2[j];
        ++j;
    }
    return sum;
}


****** Cluster 484 ******
public static Long func_4d0b055323454a99ad44fc868faf5f0d(Long[] n, Integer R, Long sum, Integer L) {
    if (R >= 0) {
        sum = n[R];
    }
    if (L > 0) {
        sum = sum - n[L - 1];
    }
    return sum;
}
public static long func_f9edcef0adf74a25bb6fe1a1eb179b35(Long[] n, Integer R, Long sum, Integer L) {
    if (R >= 0) {
        sum = n[R];
    }
    if (L > 0) {
        sum = sum - n[L - 1];
    }
    return sum;
}


****** Cluster 485 ******
public static long func_9e4c9878d446425e822a20f92fbcfe16(Long[] n, Long sum, Integer L) {
    if (L > 0) {
        sum = sum - n[L - 1];
    }
    return sum;
}
public static Long func_47932681696349b7a129e356922b5a00(Long[] n, Long sum, Integer L) {
    if (L > 0) {
        sum = sum - n[L - 1];
    }
    return sum;
}


****** Cluster 486 ******
public static Long func_b7f8ebcb034340ca99e3875997b46af5(Long[] n, Integer R, Integer L) {
    long sum = 0L;
    if (R >= 0) {
        sum = n[R];
    }
    if (L > 0) {
        sum -= n[L - 1].longValue();
    }
    return sum;
}
public static long func_fffaea3f71ad4fa899017e3d1685f7b9(Long[] n, Integer R, Integer L) {
    long sum = 0L;
    if (R >= 0) {
        sum = n[R];
    }
    if (L > 0) {
        sum -= n[L - 1].longValue();
    }
    return sum;
}


****** Cluster 487 ******
public static Long func_f5ec3f66f1df4a5d84a1fd2a712fffde(Integer j, Long[] rsum, Long prefixSum, Long best, Integer n) {
    long sum = rsum[j] - prefixSum;
    long suffSum = rsum[n - 1] - sum - prefixSum;
    long max = Math.max(sum, suffSum);
    max = Math.max(max, prefixSum);
    best = Math.max(best, rsum[n - 1] - max);
    return best;
}
public static Integer func_e7eb78bde4a84d5d93d77dc7bfca7195$7a1cd1d3(Integer mid, Long[] rsum, Long prefixSum, Integer low, Integer n) {
    long suffSum;
    long sum = rsum[mid] - prefixSum;
    if (sum <= (suffSum = rsum[n - 1] - sum - prefixSum)) {
        low = mid;
    }
    return low;
}


****** Cluster 488 ******
public static Long func_bb13c96c4bb741f0bbedc95eee5bd6a2(Integer j, Long[] rsum, Long prefixSum, Long best, Integer n) {
    long sum = rsum[j] - prefixSum;
    long suffSum = rsum[n - 1] - sum - prefixSum;
    long max = Math.max(sum, suffSum);
    max = Math.max(max, prefixSum);
    Long.valueOf(Math.max(best, rsum[n - 1] - max));
    return sum;
}
public static Long func_22f26155a8ef4454b0e437a110b37595(Integer j, Long[] rsum, Long prefixSum, Long best, Integer n) {
    long sum = rsum[j] - prefixSum;
    long suffSum = rsum[n - 1] - sum - prefixSum;
    long max = Math.max(sum, suffSum);
    max = Math.max(max, prefixSum);
    Long.valueOf(Math.max(best, rsum[n - 1] - max));
    return max;
}


****** Cluster 489 ******
public static Integer func_a547a60a292f4f8e98778b6035265c7a(Integer i, Integer n) {
    i.intValue();
    int high = n - 1;
    return high;
}
public static Integer func_fe91e48b4ebf42b999b898de136849e4(Integer i, Integer n) {
    i.intValue();
    int max = n - 1;
    return max;
}
public static Integer func_66338d06d84e4d79beebf1d93f54f977(Integer h, Integer n) {
    h.intValue();
    int max = n - 1;
    return max;
}
def func_91c088b065a64defa4723edb0f819d66(a_try, N):
    b_lo = a_try
    b_hi = N - 1
    return b_hi

def func_08131d9388fc42bdb609372e3a2b37a1(tot, n):
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    return j

def func_148d74ad2c8e4449be514af82bd99614(tot, n):
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    return j

def func_15bdb0a282c342c49ced38d577cb3f17(tot, n):
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    return j

def func_bb57cbd34f0f4408ae0f0fd3db24fa47(tot, n):
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    return j

def func_d67500c4eeff4e3189af34385d646331(tot, n):
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    return j

def func_e13b8bb355624a61811945f9f8c7d010(tot, n):
    j = n - 1
    ltot = 0
    mtot = tot
    return j



****** Cluster 490 ******
public static Long func_127f5925cc5f4cbd9168731047024ff0(Integer i, Long[] rsum, Integer n) {
    n.intValue();
    long prefixSum = i == 0 ? 0L : rsum[i - 1];
    return prefixSum;
}
public static Long func_c4ff737927ce493098e8ff9d3aefb989(Integer i, Long[] rsum, Integer n) {
    i.intValue();
    n.intValue();
    long prefixSum = i == 0 ? 0L : rsum[i - 1];
    return prefixSum;
}


****** Cluster 491 ******
public static Integer func_890926c9ec6f45d79b68e9ca69d07b89(Integer i, Long[] rsum, Integer n) {
    int high = n - 1;
    if (i != 0) {
        rsum[i - 1].longValue();
    }
    return high;
}
public static Integer func_7b88bbd91e134274a143fc42cfc5411d(Integer i, Long[] rsum, Integer n) {
    i.intValue();
    int high = n - 1;
    if (i != 0) {
        rsum[i - 1].longValue();
    }
    return high;
}


****** Cluster 492 ******
public static Long func_2727f22a4ed64c89b1f88bd1befc9b9b(Integer j, Long[] rsum, Long prefixSum, Integer n) {
    long sum = rsum[j] - prefixSum;
    long suffSum = rsum[n - 1] - sum - prefixSum;
    return suffSum;
}
public static Long func_7fa4d438d8204db5a1425c3c9617bba9(Integer j, Long[] rsum, Long prefixSum, Integer n) {
    long sum = rsum[j] - prefixSum;
    long suffSum = rsum[n - 1] - sum - prefixSum;
    long max = Math.max(sum, suffSum);
    return max;
}
public static Long func_3c6d0205f30a45498975c0b126fc352d(Integer j, Long[] rsum, Long prefixSum, Integer n) {
    long sum = rsum[j] - prefixSum;
    long suffSum = rsum[n - 1] - sum - prefixSum;
    Math.max(sum, suffSum);
    return suffSum;
}
public static Long func_a53074a321554b00ba323ce5f3b9684b(Integer j, Long[] rsum, Long prefixSum, Integer n) {
    long sum = rsum[j] - prefixSum;
    long suffSum = rsum[n - 1] - sum - prefixSum;
    long max = Math.max(sum, suffSum);
    max = Math.max(max, prefixSum);
    return max;
}
public static Long func_dc277297111b487e963bf17eb860e0fa(Integer j, Long[] rsum, Long prefixSum, Integer n) {
    long sum = rsum[j] - prefixSum;
    long suffSum = rsum[n - 1] - sum - prefixSum;
    long max = Math.max(sum, suffSum);
    Math.max(max, prefixSum);
    return suffSum;
}
public static Long func_e1836c68d42d424bb01aa99543f8a4bb(Integer mid, Long[] rsum, Long prefixSum, Integer n) {
    long sum = rsum[mid] - prefixSum;
    long suffSum = rsum[n - 1] - sum - prefixSum;
    return suffSum;
}
public static Long func_0f1a371b5e4a48d68511eb45f186127c$602837cf(Integer mid, Long[] rsum, Long prefixSum, Integer n) {
    long sum = rsum[mid] - prefixSum;
    long suffSum = rsum[n - 1] - sum - prefixSum;
    return suffSum;
}


****** Cluster 493 ******
public static Long func_586da724e58c4174b4a681d6e3092bb8(Integer j, Long[] rsum, Long prefixSum, Integer n) {
    long sum = rsum[j] - prefixSum;
    rsum[n - 1].longValue();
    prefixSum.longValue();
    return sum;
}
public static Long func_27b39e16bfc44b988d3eb427cc9f6e9a(Integer j, Long[] rsum, Long prefixSum, Integer n) {
    long sum = rsum[j] - prefixSum;
    long suffSum = rsum[n - 1] - sum - prefixSum;
    Math.max(sum, suffSum);
    return sum;
}
public static Long func_c40bf38af2db4580b7b7ea05a28ddb58(Integer j, Long[] rsum, Long prefixSum, Integer n) {
    long sum = rsum[j] - prefixSum;
    long suffSum = rsum[n - 1] - sum - prefixSum;
    long max = Math.max(sum, suffSum);
    Math.max(max, prefixSum);
    return sum;
}
public static Long func_9333e65e5ecb43bebd248d40b4658e3a(Integer mid, Long[] rsum, Long prefixSum, Integer n) {
    long sum = rsum[mid] - prefixSum;
    rsum[n - 1].longValue();
    prefixSum.longValue();
    return sum;
}
public static Long func_f513b4acff924819955c38e7d8883b3a$602837cf(Integer mid, Long[] rsum, Long prefixSum, Integer n) {
    long sum = rsum[mid] - prefixSum;
    rsum[n - 1].longValue();
    prefixSum.longValue();
    return sum;
}


****** Cluster 494 ******
public static Long func_1afc3f6be6f843f89618b243a011ee14(Long[] rsum, Long prefixSum, Integer n, Long sum) {
    long suffSum = rsum[n - 1] - sum - prefixSum;
    Math.max(sum, suffSum);
    return suffSum;
}
public static Long func_84fb6b62b2d04bb7b6e5624f27eabff5(Long[] rsum, Long prefixSum, Integer n, Long sum) {
    long suffSum = rsum[n - 1] - sum - prefixSum;
    long max = Math.max(sum, suffSum);
    Math.max(max, prefixSum);
    return suffSum;
}
public static Long func_c36f7e855418401f86daf70182f91462$6c05e5b0$675293d0(Long[] rsum, Long prefixSum, Integer n, Long sum) {
    long suffSum = rsum[n - 1] - sum - prefixSum;
    sum.longValue();
    return suffSum;
}


****** Cluster 495 ******
public static Long func_9966a6b718a74005897458f7a71353c9(Long suffSum, Long prefixSum, Long sum) {
    long max = Math.max(sum, suffSum);
    max = Math.max(max, prefixSum);
    return max;
}
public static Long func_ad3d1d69fbbe477ea12ed72e6ac9ae6b(Long a2, Long c, Long b) {
    long s = Math.max(a2, b);
    s = Math.max(s, c);
    return s;
}


****** Cluster 496 ******
public static Integer func_d0e034b786a24848aa7407e41df194a9(Long[] array) {
    int right = array.length - 1;
    return right;
}
def func_2ed93b5909db490fa3ea49868d115850(pi):
    """Find lecographically first maximum element"""
    b = None
    for j in xrange(len(pi)):
        if pi[j] == None:
            continue
        if b == None:
            b = j
            continue
        if pi[j] > pi[b]:
            b = j
    return j

def func_6e4f21b15e2e4fb9a70d63db92518320(pi):
    b = None
    for j in xrange(len(pi)):
        if pi[j] == None:
            continue
        if b == None:
            b = j
            continue
        if pi[j] > pi[b]:
            b = j
    return j

def func_0245f530d5564d87890c40919a15241c(x):
    rmax = 0.0
    y = [x[i] for i in xrange(len(x))]
    r = calc(x, y, 0)
    return i

def func_1472a001d8d24286b7efb96e876a84e8(x):
    rmax = 0.0
    y = [x[i] for i in xrange(len(x))]
    r = calc(x, y, 0)
    if r > rmax:
        rmax = r
    return i

def func_362bc007d2e64cb5ac43066659a2eefa(x):
    rmax = 0.0
    y = [x[i] for i in xrange(len(x))]
    return i

def func_8558402c71554d3ab0608e4bdc758237(x):
    x = sorted(x, reverse=True)
    rmax = 0.0
    y = [x[i] for i in xrange(len(x))]
    r = calc(x, y, 0)
    if r > rmax:
        rmax = r
    return i

def func_9be5f186efaf4644bfcf72d571fe5134(x):
    x = sorted(x, reverse=True)
    rmax = 0.0
    y = [x[i] for i in xrange(len(x))]
    r = calc(x, y, 0)
    return i

def func_e6d0c1056a434f40b3a6de51407302ea(x):
    y = [x[i] for i in xrange(len(x))]
    r = calc(x, y, 0)
    return i

def func_ea98b07783e546cbbdcf79f548d74933(x):
    x = sorted(x, reverse=True)
    rmax = 0.0
    y = [x[i] for i in xrange(len(x))]
    return i



****** Cluster 497 ******
public static Long func_1be21c5722ef402e9fffc5c9df406f80(Long sum, Long[] A3, Long beforeHalfSum, Integer beforeHalf, Integer n) {
    sum = sum + A3[n];
    while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < sum / 2L) {
        beforeHalfSum = beforeHalfSum + A3[beforeHalf];
        beforeHalf = beforeHalf + 1;
    }
    return sum;
}
public static Long func_aeb1c26bffde43ee97996e2d7e4bd25f(Long sum, Long[] A3, Long beforeHalfSum, Integer beforeHalf, Integer n) {
    sum = sum + A3[n];
    while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < sum / 2L) {
        beforeHalfSum = beforeHalfSum + A3[beforeHalf];
        beforeHalf = beforeHalf + 1;
    }
    sum.longValue();
    return sum;
}
public static Long func_f830b838063a45bc9e1c2e13b28b37a0(Long sum, Long[] A3, Long beforeHalfSum, Integer beforeHalf, Integer n) {
    sum = sum + A3[n];
    while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < sum / 2L) {
        beforeHalfSum = beforeHalfSum + A3[beforeHalf];
        beforeHalf = beforeHalf + 1;
    }
    long max = sum;
    return max;
}
public static Long func_19e5983b9ab24aebaa8263733c778ce3(Long sum, Long[] A3, Long beforeHalfSum, Integer beforeHalf, Integer n) {
    sum = sum + A3[n];
    while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < sum / 2L) {
        beforeHalfSum = beforeHalfSum + A3[beforeHalf];
        beforeHalf = beforeHalf + 1;
    }
    sum.longValue();
    if (beforeHalf > 0) {
        Math.max(beforeHalfSum, sum - beforeHalfSum);
    }
    return sum;
}
public static Long func_613714968c584938a9ce60f577f7888d(Long sum, Long[] A3, Long beforeHalfSum, Integer beforeHalf, Integer n) {
    sum = sum + A3[n];
    while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < sum / 2L) {
        beforeHalfSum = beforeHalfSum + A3[beforeHalf];
        beforeHalf = beforeHalf + 1;
    }
    long max = sum;
    if (beforeHalf > 0) {
        max = Math.max(beforeHalfSum, sum - beforeHalfSum);
    }
    if (beforeHalf <= n - 1) {
        long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
        Math.min(max, value);
    }
    return sum;
}


****** Cluster 498 ******
public static Long func_5c41853cb4ed4d0cad58c699c3cfa246(Long sum, Long[] A3, Long beforeHalfSum, Integer beforeHalf, Integer n) {
    sum = sum + A3[n];
    while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < sum / 2L) {
        beforeHalfSum = beforeHalfSum + A3[beforeHalf];
        beforeHalf = beforeHalf + 1;
    }
    return beforeHalfSum;
}
public static Long func_b914e6c729bd42d38a4311c35a31f40b(Long sum, Long[] A3, Long beforeHalfSum, Integer beforeHalf, Integer n) {
    sum = sum + A3[n];
    while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < sum / 2L) {
        beforeHalfSum = beforeHalfSum + A3[beforeHalf];
        beforeHalf = beforeHalf + 1;
    }
    sum.longValue();
    return beforeHalfSum;
}
public static Long func_b89de3b663714c6faece222705a8f459(Long sum, Long[] A3, Long beforeHalfSum, Integer beforeHalf, Integer n) {
    sum = sum + A3[n];
    while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < sum / 2L) {
        beforeHalfSum = beforeHalfSum + A3[beforeHalf];
        beforeHalf = beforeHalf + 1;
    }
    sum.longValue();
    if (beforeHalf > 0) {
        Math.max(beforeHalfSum, sum - beforeHalfSum);
    }
    return beforeHalfSum;
}
public static Long func_d921a112f3d74a7d98bbcc96186879e8(Long sum, Long[] A3, Long beforeHalfSum, Integer beforeHalf, Integer n) {
    sum = sum + A3[n];
    while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < sum / 2L) {
        beforeHalfSum = beforeHalfSum + A3[beforeHalf];
        beforeHalf = beforeHalf + 1;
    }
    long max = sum;
    if (beforeHalf > 0) {
        max = Math.max(beforeHalfSum, sum - beforeHalfSum);
    }
    if (beforeHalf <= n - 1) {
        long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
        Math.min(max, value);
    }
    return beforeHalfSum;
}


****** Cluster 499 ******
public static Long func_075b18a3add745c9b579c9307c9fe18a(Long sum, Long[] A3, Long beforeHalfSum, Integer beforeHalf, Integer n) {
    while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < sum / 2L) {
        beforeHalfSum = beforeHalfSum + A3[beforeHalf];
        beforeHalf = beforeHalf + 1;
    }
    sum.longValue();
    return beforeHalfSum;
}
public static Long func_26f7d43c6d4e4c2d920f6228ba7e734c(Long sum, Long[] A3, Long beforeHalfSum, Integer beforeHalf, Integer n) {
    while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < sum / 2L) {
        beforeHalfSum = beforeHalfSum + A3[beforeHalf];
        beforeHalf = beforeHalf + 1;
    }
    sum.longValue();
    if (beforeHalf > 0) {
        Math.max(beforeHalfSum, sum - beforeHalfSum);
    }
    return beforeHalfSum;
}
public static Long func_b44c98d4a271455999adc26e02d7088b(Long sum, Long[] A3, Long beforeHalfSum, Integer beforeHalf, Integer n) {
    while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < sum / 2L) {
        beforeHalfSum = beforeHalfSum + A3[beforeHalf];
        beforeHalf = beforeHalf + 1;
    }
    long max = sum;
    if (beforeHalf > 0) {
        max = Math.max(beforeHalfSum, sum - beforeHalfSum);
    }
    if (beforeHalf <= n - 1) {
        long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
        Math.min(max, value);
    }
    return beforeHalfSum;
}


****** Cluster 500 ******
public static Long func_8eba59aa998c49e2af9cad44f8ef945b(Long sum, Long[] A3, Long beforeHalfSum, Integer beforeHalf, Integer n) {
    while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < sum / 2L) {
        beforeHalfSum = beforeHalfSum + A3[beforeHalf];
        beforeHalf = beforeHalf + 1;
    }
    long max = sum;
    if (beforeHalf > 0) {
        max = Math.max(beforeHalfSum, sum - beforeHalfSum);
    }
    return max;
}
public static Long func_1bfad30b54b44b8e9d83c0f37bd0d227(Long sum, Long[] A3, Long beforeHalfSum, Integer beforeHalf, Integer n) {
    while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < sum / 2L) {
        beforeHalfSum = beforeHalfSum + A3[beforeHalf];
        beforeHalf = beforeHalf + 1;
    }
    long max = sum;
    if (beforeHalf > 0) {
        max = Math.max(beforeHalfSum, sum - beforeHalfSum);
    }
    if (beforeHalf <= n - 1) {
        long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
        max = Math.min(max, value);
    }
    return max;
}


****** Cluster 501 ******
public static Long func_cf3ba2e34c8641bea1f1564b4d325ba8(Long sum, Long[] A3, Long beforeHalfSum, Integer beforeHalf, Integer n) {
    sum = sum + A3[n];
    while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < sum / 2L) {
        beforeHalfSum = beforeHalfSum + A3[beforeHalf];
        beforeHalf = beforeHalf + 1;
    }
    long max = sum;
    if (beforeHalf > 0) {
        max = Math.max(beforeHalfSum, sum - beforeHalfSum);
    }
    return max;
}
public static Long func_dc50bde7ade34264a3f9b62e199af184(Long sum, Long[] A3, Long beforeHalfSum, Integer beforeHalf, Integer n) {
    sum = sum + A3[n];
    while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < sum / 2L) {
        beforeHalfSum = beforeHalfSum + A3[beforeHalf];
        beforeHalf = beforeHalf + 1;
    }
    long max = sum;
    if (beforeHalf > 0) {
        max = Math.max(beforeHalfSum, sum - beforeHalfSum);
    }
    if (beforeHalf <= n - 1) {
        long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
        max = Math.min(max, value);
    }
    return max;
}


****** Cluster 502 ******
public static Long func_c1c978fa53d44200b9671b4502849478(Long sum, Long[] A3, Long[] best, Long beforeHalfSum, Integer beforeHalf, Integer N) {
    for (int n = 0; n < N; ++n) {
        sum = sum + A3[n];
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < sum / 2L) {
            beforeHalfSum = beforeHalfSum + A3[beforeHalf];
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    return min;
}
public static Long func_178b89190ac44a73bf864c030955e275(Long sum, Long[] A3, Long[] best, Long beforeHalfSum, Integer beforeHalf, Integer N) {
    for (int n = 0; n < N; ++n) {
        sum = sum + A3[n];
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < sum / 2L) {
            beforeHalfSum = beforeHalfSum + A3[beforeHalf];
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    return min;
}


****** Cluster 503 ******
public static Long func_75d7bba82f5740b7b0810eb658a2cfcc(Long sum, Long[] A3, Long[] best, Long beforeHalfSum, Integer beforeHalf, Integer N) {
    for (int n = 0; n < N; ++n) {
        sum = sum + A3[n];
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < sum / 2L) {
            beforeHalfSum = beforeHalfSum + A3[beforeHalf];
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    best[N - 1].longValue();
    return sum;
}
public static Long func_8452d642861743ad95c802cdc6d439c6(Long sum, Long[] A3, Long[] best, Long beforeHalfSum, Integer beforeHalf, Integer N) {
    for (int n = 0; n < N; ++n) {
        sum = sum + A3[n];
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < sum / 2L) {
            beforeHalfSum = beforeHalfSum + A3[beforeHalf];
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    best[N - 1].longValue();
    return sum;
}
public static Long func_08166a748cd74270b8e0aefedf834147(Long sum, Long[] A3, Long[] best, Long beforeHalfSum, Integer beforeHalf, Integer N) {
    for (int n = 0; n < N; ++n) {
        sum = sum + A3[n];
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < sum / 2L) {
            beforeHalfSum = beforeHalfSum + A3[beforeHalf];
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return sum;
}
public static Long func_f663d8427ab04765adff4ee103e52c6e(Long sum, Long[] A3, Long[] best, Long beforeHalfSum, Integer beforeHalf, Integer N) {
    for (int n = 0; n < N; ++n) {
        sum = sum + A3[n];
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < sum / 2L) {
            beforeHalfSum = beforeHalfSum + A3[beforeHalf];
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    sum.longValue();
    sum.longValue();
    return sum;
}


****** Cluster 504 ******
public static Long func_e97627e1120645dba084b7dda3176e96(Long sum, Long[] A3, Long[] best, Long beforeHalfSum, Integer beforeHalf, Integer N) {
    for (int n = 0; n < N; ++n) {
        sum = sum + A3[n];
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < sum / 2L) {
            beforeHalfSum = beforeHalfSum + A3[beforeHalf];
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    best[N - 1].longValue();
    return beforeHalfSum;
}
public static Long func_63e500b966764679980a6c27c1e293b1(Long sum, Long[] A3, Long[] best, Long beforeHalfSum, Integer beforeHalf, Integer N) {
    for (int n = 0; n < N; ++n) {
        sum = sum + A3[n];
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < sum / 2L) {
            beforeHalfSum = beforeHalfSum + A3[beforeHalf];
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    best[N - 1].longValue();
    return beforeHalfSum;
}
public static Long func_9628aa885bc04edca11f590ff80ab6d6(Long sum, Long[] A3, Long[] best, Long beforeHalfSum, Integer beforeHalf, Integer N) {
    for (int n = 0; n < N; ++n) {
        sum = sum + A3[n];
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < sum / 2L) {
            beforeHalfSum = beforeHalfSum + A3[beforeHalf];
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return beforeHalfSum;
}
public static Long func_224bd36ece3e433ca52cd97cb3791c4d(Long sum, Long[] A3, Long[] best, Long beforeHalfSum, Integer beforeHalf, Integer N) {
    for (int n = 0; n < N; ++n) {
        sum = sum + A3[n];
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < sum / 2L) {
            beforeHalfSum = beforeHalfSum + A3[beforeHalf];
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    sum.longValue();
    sum.longValue();
    return beforeHalfSum;
}


****** Cluster 505 ******
public static Long func_224bf1da355d41adb1a1d73c7c5759da(Long[] A3, Long[] best, Integer beforeHalf, Integer N) {
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    return sum;
}
public static Long func_36097f484711465c92af40cc241fee3e(Long[] A3, Long[] best, Integer beforeHalf, Integer N) {
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    return beforeHalfSum;
}


****** Cluster 506 ******
public static Long func_2aef05918b934f3985a795e5173af442(Long[] A3, Long[] best, Long beforeHalfSum, Integer beforeHalf, Integer N) {
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum = beforeHalfSum + A3[beforeHalf];
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    return min;
}
public static Long func_596c1621bfea4ae89f5113e8e2fcef23(Long[] A3, Long[] best, Long beforeHalfSum, Integer beforeHalf, Integer N) {
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum = beforeHalfSum + A3[beforeHalf];
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    return min;
}
public static Long func_27c750d72cbe402c9d9eb5c5bcd7a2f8(Long[] A3, Long[] best, Long beforeHalfSum, Integer beforeHalf, Integer N) {
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum = beforeHalfSum + A3[beforeHalf];
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return min;
}
public static Long func_7754121877674e5eba9b9db0b39bba63(Long[] A3, Long[] best, Long beforeHalfSum, Integer beforeHalf, Integer N) {
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum = beforeHalfSum + A3[beforeHalf];
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return min;
}


****** Cluster 507 ******
public static Long func_6281df5d2d584bf6833a1910e4d22756(Long[] A3, Long[] best, Long beforeHalfSum, Integer beforeHalf, Integer N) {
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum = beforeHalfSum + A3[beforeHalf];
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    best[N - 1].longValue();
    return sum;
}
public static Long func_13822bbac6e84df296a615761bc17cc1(Long[] A3, Long[] best, Long beforeHalfSum, Integer beforeHalf, Integer N) {
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum = beforeHalfSum + A3[beforeHalf];
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    best[N - 1].longValue();
    return sum;
}
public static Long func_f7f7212480374e58aa6002e4b4523819(Long[] A3, Long[] best, Long beforeHalfSum, Integer beforeHalf, Integer N) {
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum = beforeHalfSum + A3[beforeHalf];
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return sum;
}
public static Long func_3d030d984f2d49e2ba3ef0c0db27e0eb(Long[] A3, Long[] best, Long beforeHalfSum, Integer beforeHalf, Integer N) {
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum = beforeHalfSum + A3[beforeHalf];
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return sum;
}


****** Cluster 508 ******
public static Long func_17ecbcddb0e7455aa3fed80b0fc8dd74(Long[] A3, Long[] best, Long beforeHalfSum, Integer beforeHalf, Integer N) {
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum = beforeHalfSum + A3[beforeHalf];
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    best[N - 1].longValue();
    return beforeHalfSum;
}
public static Long func_5f60ffbecc1d4912b0df7e699b916160(Long[] A3, Long[] best, Long beforeHalfSum, Integer beforeHalf, Integer N) {
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum = beforeHalfSum + A3[beforeHalf];
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    best[N - 1].longValue();
    return beforeHalfSum;
}
public static Long func_00a8ad869ddc4fafb7e48e0e7f7b26ce(Long[] A3, Long[] best, Long beforeHalfSum, Integer beforeHalf, Integer N) {
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum = beforeHalfSum + A3[beforeHalf];
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return beforeHalfSum;
}
public static Long func_0f42b935905445469121725a7274c8f3(Long[] A3, Long[] best, Long beforeHalfSum, Integer beforeHalf, Integer N) {
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum = beforeHalfSum + A3[beforeHalf];
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return beforeHalfSum;
}


****** Cluster 509 ******
public static Long func_1709ffeb32514962a05db6c2c3a55dd5(Long[] A3, Long[] best, Integer beforeHalf, Integer N) {
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    return min;
}
public static Long func_8c9c265b325e4d74b3597da967d09c8b(Long[] A3, Long[] best, Integer beforeHalf, Integer N) {
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    best[N - 1].longValue();
    return sum;
}
public static Long func_295ba923b7c54da4aed59dfb0f454ffb(Long[] A3, Long[] best, Integer beforeHalf, Integer N) {
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    best[N - 1].longValue();
    return beforeHalfSum;
}
public static Long func_58ad2933aaeb4c95a333e0b2c717dd80(Long[] A3, Long[] best, Integer beforeHalf, Integer N) {
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    return min;
}
public static Long func_bb7aa886246b4e01a4d0d15820883922(Long[] A3, Long[] best, Integer beforeHalf, Integer N) {
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    best[N - 1].longValue();
    return sum;
}
public static Long func_4c9814f6dd44435c84f997b55a771426(Long[] A3, Long[] best, Integer beforeHalf, Integer N) {
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    best[N - 1].longValue();
    return beforeHalfSum;
}
public static Long func_79efed92bdb940afa148c3ec38ce896b(Long[] A3, Long[] best, Integer beforeHalf, Integer N) {
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return min;
}
public static Long func_b68486db3f144090b2b9d0283dbd5a62(Long[] A3, Long[] best, Integer beforeHalf, Integer N) {
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return sum;
}
public static Long func_7df3e413b46448fab31f192311e182e9(Long[] A3, Long[] best, Integer beforeHalf, Integer N) {
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return beforeHalfSum;
}
public static Long func_68435ecd3b9642acbfaef757d5e2456f(Long[] A3, Long[] best, Integer beforeHalf, Integer N) {
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return min;
}
public static Long func_f8e806d4f5d5496e8dd2dd4c6f511753(Long[] A3, Long[] best, Integer beforeHalf, Integer N) {
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return sum;
}
public static Long func_1f3d6ac9f0d541999bd0547a57460304(Long[] A3, Long[] best, Integer beforeHalf, Integer N) {
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return beforeHalfSum;
}


****** Cluster 510 ******
public static Long func_94f3c4d6333c4b65b639367250069053(Long sum, Long[] A3, Long[] best, Long beforeHalfSum, Integer beforeHalf, Integer N) {
    for (int n = 0; n < N; ++n) {
        sum = sum + A3[n];
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < sum / 2L) {
            beforeHalfSum = beforeHalfSum + A3[beforeHalf];
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return subSum;
}
public static Long func_2d081b949c1043e59353eddf87c5226c(Long sum, Long[] A3, Long[] best, Long beforeHalfSum, Integer beforeHalf, Integer N) {
    for (int n = 0; n < N; ++n) {
        sum = sum + A3[n];
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < sum / 2L) {
            beforeHalfSum = beforeHalfSum + A3[beforeHalf];
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    sum.longValue();
    sum.longValue();
    return subSum;
}


****** Cluster 511 ******
public static Long func_b9562c6ae5b442c1b1be6edd00005d28(Long sum, Long[] A3, Long[] best, Long beforeHalfSum, Integer beforeHalf, Integer N) {
    for (int n = 0; n < N; ++n) {
        sum = sum + A3[n];
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < sum / 2L) {
            beforeHalfSum = beforeHalfSum + A3[beforeHalf];
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return min;
}
public static Long func_2ae23ce31b1848208f4adce7b35dbdf3(Long sum, Long[] A3, Long[] best, Long beforeHalfSum, Integer beforeHalf, Integer N) {
    for (int n = 0; n < N; ++n) {
        sum = sum + A3[n];
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < sum / 2L) {
            beforeHalfSum = beforeHalfSum + A3[beforeHalf];
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    sum.longValue();
    sum.longValue();
    return min;
}


****** Cluster 512 ******
public static Long func_75e51d1fb4724c1a87a470a4bfef0301(Long[] A3, Integer N) {
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    return sum;
}
public static Long func_974b0306c7cc4586b46c06da1717d894(Long[] A3, Integer N) {
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    N.intValue();
    return sum;
}
public static Long func_82b67d2a191e4219890951f7823ce392(Long[] A3, Integer N) {
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    N.intValue();
    return sum;
}


****** Cluster 513 ******
public static Long func_ea268f0bdb324a8baa4f438bd7ec4df4(Long[] A3, Integer N) {
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    return beforeHalfSum;
}
public static Long func_e4c2df9957914218a0683191752f42f8(Long[] A3, Integer N) {
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    N.intValue();
    return beforeHalfSum;
}
public static Long func_c3bdf262613648afaabb2e93cda425d3(Long[] A3, Integer N) {
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    N.intValue();
    return beforeHalfSum;
}


****** Cluster 514 ******
public static Integer func_64d768ed512f415ba1df7372c57b977a(Long[] A3, Integer N) {
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    return beforeHalf;
}
public static Integer func_6e7a2bd4349f48a9b7c18775e28e2740(Long[] A3, Integer N) {
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    N.intValue();
    return beforeHalf;
}
public static Integer func_fb24c2e90d5d406ead16792c8bd98c90(Long[] A3, Integer N) {
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    N.intValue();
    return beforeHalf;
}


****** Cluster 515 ******
public static Long func_2c86f43f627d48938ba038934d00c487(Long[] A3, Long[] best, Integer N) {
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    return min;
}
public static Long func_32b8ac025d484e99bfc54669470a3046(Long[] A3, Long[] best, Integer N) {
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    return min;
}


****** Cluster 516 ******
public static Long func_752ac5f404654a66a82911ce7c0a9a93(Long[] A3, Long[] best, Integer N) {
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    best[N - 1].longValue();
    return sum;
}
public static Long func_edf07a9cd81a4b1bb8e4528866030c31(Long[] A3, Long[] best, Integer N) {
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    best[N - 1].longValue();
    return sum;
}
public static Long func_f97b3d85e3684efeb6ddb2bf6c66fff9(Long[] A3, Long[] best, Integer N) {
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return subSum;
}
public static Long func_aea624220f9947ceacd1f1acceaca1a8(Long[] A3, Long[] best, Integer N) {
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return sum;
}
public static Long func_6b4fe297dedd4572840fd29134ef4afa(Long[] A3, Long[] best, Integer N) {
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return subSum;
}
public static Long func_20bd09e54d064b2b829c7d3860832f7f(Long[] A3, Long[] best, Integer N) {
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return sum;
}


****** Cluster 517 ******
public static Long func_f4610344bc4c4881818ec669e8797797(Long[] A3, Long[] best, Integer N) {
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    best[N - 1].longValue();
    return beforeHalfSum;
}
public static Long func_dd834b02762140b08376bd09c84259a9(Long[] A3, Long[] best, Integer N) {
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    best[N - 1].longValue();
    return beforeHalfSum;
}
public static Long func_5e1774d0795943f481ca0c17604271f4(Long[] A3, Long[] best, Integer N) {
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return beforeHalfSum;
}
public static Long func_af05c70b0ac44ca0bdd5b42d9a3460ff(Long[] A3, Long[] best, Integer N) {
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return beforeHalfSum;
}


****** Cluster 518 ******
public static Integer func_f8a9a0ee07a44712bfba2ac438cd996f(Long[] A3, Long[] best, Integer N) {
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    best[N - 1].longValue();
    return beforeHalf;
}
public static Integer func_6e6546b72f8645a486103f2682e4b89e(Long[] A3, Long[] best, Integer N) {
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    best[N - 1].longValue();
    return beforeHalf;
}
public static Integer func_d831c32cca8b4488ac4aa25f45018969(Long[] A3, Long[] best, Integer N) {
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return beforeHalf;
}
public static Integer func_b99bea7e6a7f4d668d79411228b8bd54(Long[] A3, Long[] best, Integer N) {
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return beforeHalf;
}


****** Cluster 519 ******
public static Long func_15433d68a3d34bd98ab57d46c0e68fd2(Long[] A3, Long[] best, Long beforeHalfSum, Integer beforeHalf, Integer N) {
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum = beforeHalfSum + A3[beforeHalf];
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return subSum;
}
public static Long func_a39329aedc2445cc9253c8729f007bdb(Long[] A3, Long[] best, Long beforeHalfSum, Integer beforeHalf, Integer N) {
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum = beforeHalfSum + A3[beforeHalf];
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return subSum;
}


****** Cluster 520 ******
public static Long func_d1adcdd04e644de386eaef9a608f6999(Long r, Long q, Long[] A3, Long p, Long s, Integer N) {
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    return sum;
}
public static Long func_218049a4cd42483d92f4138b07cbfea9(Long r, Long q, Long[] A3, Long p, Long s, Integer N) {
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    N.intValue();
    return sum;
}
public static Long func_8dc9a2fed156438cb74dcddff1234f15(Long r, Long q, Long[] A3, Long p, Long s, Integer N) {
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    N.intValue();
    return sum;
}


****** Cluster 521 ******
public static Long func_081a5b6e366e46e0bc8871a5511e072c(Long r, Long q, Long[] A3, Long p, Long s, Integer N) {
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    return beforeHalfSum;
}
public static Long func_fae02109b831424ca8e57db17d790c6b(Long r, Long q, Long[] A3, Long p, Long s, Integer N) {
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    N.intValue();
    return beforeHalfSum;
}
public static Long func_2f32e8eead484be4acc0c87f4167e654(Long r, Long q, Long[] A3, Long p, Long s, Integer N) {
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    N.intValue();
    return beforeHalfSum;
}


****** Cluster 522 ******
public static Integer func_20f1a543d72a462ab3cc4af8c76920e0(Long r, Long q, Long[] A3, Long p, Long s, Integer N) {
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    return beforeHalf;
}
public static Integer func_9c91acc5db714e75839558ae049979a5(Long r, Long q, Long[] A3, Long p, Long s, Integer N) {
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    N.intValue();
    return beforeHalf;
}
public static Integer func_9d67d792d9ee47c58254469e4d6aad2e(Long r, Long q, Long[] A3, Long p, Long s, Integer N) {
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    N.intValue();
    return beforeHalf;
}


****** Cluster 523 ******
public static Long func_17c79a628d334bd5b5374246d6841d5d(Long[] A3, Integer N) {
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    return min;
}
public static Long func_53d0224593394b5f9fbeea074bb6f61e(Long[] A3, Integer N) {
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    return min;
}


****** Cluster 524 ******
public static Long func_c8b7632cf5054503bb3f0abcc9afea37(Long[] A3, Long[] best, Integer beforeHalf, Integer N) {
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return subSum;
}
public static Long func_7a2dfa733326427786cc53b6f9d87e34(Long[] A3, Long[] best, Integer beforeHalf, Integer N) {
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            beforeHalf = beforeHalf + 1;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return subSum;
}


****** Cluster 525 ******
public static Long func_3b9e8b6dbe1a467189860a862605e4a0(Long r, Long q, Long p, Long s, Integer N) {
    long[] A3 = new long[N.intValue()];
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n]) / 2L) {
            beforeHalfSum += A3[beforeHalf];
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    return sum;
}
public static Long func_21c84a51d6b841e8ac99dd85387c27a4(Long r, Long q, Long p, Long s, Integer N) {
    long[] A3 = new long[N.intValue()];
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n]) / 2L) {
            beforeHalfSum += A3[beforeHalf];
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    N.intValue();
    return sum;
}
public static Long func_fcc1e9dc458d4e7d89d1c8c9fe99792b(Long r, Long q, Long p, Long s, Integer N) {
    long[] A3 = new long[N.intValue()];
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n]) / 2L) {
            beforeHalfSum += A3[beforeHalf];
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    N.intValue();
    return sum;
}


****** Cluster 526 ******
public static Long func_2ab9da4c77c644efa241a98d90cae8f4(Long r, Long q, Long p, Long s, Integer N) {
    long[] A3 = new long[N.intValue()];
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n]) / 2L) {
            beforeHalfSum += A3[beforeHalf];
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    return beforeHalfSum;
}
public static Long func_00c7e42214c143f2a05ca9ab15b91099(Long r, Long q, Long p, Long s, Integer N) {
    long[] A3 = new long[N.intValue()];
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n]) / 2L) {
            beforeHalfSum += A3[beforeHalf];
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    N.intValue();
    return beforeHalfSum;
}
public static Long func_4371f61f8d484f409730487c8789905c(Long r, Long q, Long p, Long s, Integer N) {
    long[] A3 = new long[N.intValue()];
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n]) / 2L) {
            beforeHalfSum += A3[beforeHalf];
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    N.intValue();
    return beforeHalfSum;
}


****** Cluster 527 ******
public static Integer func_f92b45a3890143169f444f07cfebaf5b(Long r, Long q, Long p, Long s, Integer N) {
    long[] A3 = new long[N.intValue()];
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n]) / 2L) {
            beforeHalfSum += A3[beforeHalf];
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    return beforeHalf;
}
public static Integer func_40bd4dfb38ef41d4ae329142dfa43706(Long r, Long q, Long p, Long s, Integer N) {
    long[] A3 = new long[N.intValue()];
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n]) / 2L) {
            beforeHalfSum += A3[beforeHalf];
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    N.intValue();
    return beforeHalf;
}
public static Integer func_fa952329d7994a7090c4bb08344d09f8(Long r, Long q, Long p, Long s, Integer N) {
    long[] A3 = new long[N.intValue()];
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n]) / 2L) {
            beforeHalfSum += A3[beforeHalf];
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    N.intValue();
    return beforeHalf;
}


****** Cluster 528 ******
public static Long func_a238ed50e7d942f3ae947c1c5c105895(Long r, Long q, Long[] A3, Long p, Long s, Integer N) {
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    return min;
}
public static Long func_901c8e7682394051ae6bae981247cb08(Long r, Long q, Long[] A3, Long p, Long s, Integer N) {
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    return min;
}


****** Cluster 529 ******
public static Long func_2c5cf416bc4843deab9bbe1e8ea6c150(Long[] A3, Long[] best, Integer N) {
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return min;
}
public static Long func_70e06d9bb5e242b2832c5be6d5133f27(Long[] A3, Long[] best, Integer N) {
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return min;
}


****** Cluster 530 ******
public static Long func_d69a11939ad347199acb98c3dcf1f7bf(Long r, Long q, Long p, Long s, Integer N) {
    long[] A3 = new long[N.intValue()];
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n]) / 2L) {
            beforeHalfSum += A3[beforeHalf];
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    return min;
}
public static Long func_62ebb4a453fc4393a0674429aebffc8d(Long r, Long q, Long p, Long s, Integer N) {
    long[] A3 = new long[N.intValue()];
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n]) / 2L) {
            beforeHalfSum += A3[beforeHalf];
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    return min;
}


****** Cluster 531 ******
public static Long func_ca9c92a9b84b4a5599d4c42756d70920(Long[] A3, Integer N) {
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return subSum;
}
public static Long func_25b7a7ac870b42c3b3e45df8de1c186f(Long[] A3, Integer N) {
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return sum;
}
public static Long func_f837ef6bbc7f4f969ea68ed9de4362d2(Long[] A3, Integer N) {
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return subSum;
}
public static Long func_055c38f0d1fd43ffaa451aabd965d98a(Long[] A3, Integer N) {
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return sum;
}


****** Cluster 532 ******
public static Long func_d03aae29faf04edaa8b4ba862843687d(Long[] A3, Integer N) {
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return min;
}
public static Long func_9e60553bb2394d938150f416abf01f31(Long[] A3, Integer N) {
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return min;
}


****** Cluster 533 ******
public static Long func_0017dd0b00f44456b019dcb059155892(Long[] A3, Integer N) {
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return beforeHalfSum;
}
public static Long func_a8c5d0de405d479da6bec67da23da519(Long[] A3, Integer N) {
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return beforeHalfSum;
}


****** Cluster 534 ******
public static Integer func_39d8116213474b5f842d418f49e2153e(Long[] A3, Integer N) {
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return beforeHalf;
}
public static Integer func_c9b41031a613445db4ec7abf87e55fbd(Long[] A3, Integer N) {
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return beforeHalf;
}


****** Cluster 535 ******
public static Long func_40ab13c0bda0458cab7e2e04edfbd762(Long r, Long q, Long[] A3, Long p, Long s, Integer N) {
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return subSum;
}
public static Long func_22df96c403f54e8aaa779f462c3e18a9(Long r, Long q, Long[] A3, Long p, Long s, Integer N) {
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return subSum;
}


****** Cluster 536 ******
public static Long func_25044411d4c5493fbae4341f740520fd(Long r, Long q, Long[] A3, Long p, Long s, Integer N) {
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return min;
}
public static Long func_6841ac6038954d6cb9ea4880cc1c65a6(Long r, Long q, Long[] A3, Long p, Long s, Integer N) {
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return min;
}


****** Cluster 537 ******
public static Long func_8aa25466252d43e79750466fe03d0789(Long r, Long q, Long[] A3, Long p, Long s, Integer N) {
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return sum;
}
public static Long func_15ed3b5e26674406beefbc9400873687(Long r, Long q, Long[] A3, Long p, Long s, Integer N) {
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return sum;
}


****** Cluster 538 ******
public static Long func_9fbdbe0c148f453fbc612aca64078812(Long r, Long q, Long[] A3, Long p, Long s, Integer N) {
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return beforeHalfSum;
}
public static Long func_102f21cd8d5d4893bb502850af3592f2(Long r, Long q, Long[] A3, Long p, Long s, Integer N) {
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return beforeHalfSum;
}


****** Cluster 539 ******
public static Integer func_66d81c1f99904a4abd3c9f860cbf7012(Long r, Long q, Long[] A3, Long p, Long s, Integer N) {
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return beforeHalf;
}
public static Integer func_0b3afb2a91c940cc971a97b411d9995a(Long r, Long q, Long[] A3, Long p, Long s, Integer N) {
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n].longValue()) / 2L) {
            beforeHalfSum += A3[beforeHalf].longValue();
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n].longValue(), best[n - 1]));
    }
    return beforeHalf;
}


****** Cluster 540 ******
public static Long func_13de4b5a53e44eec96df8655b601f601(Long r, Long q, Long p, Long s, Integer N) {
    long[] A3 = new long[N.intValue()];
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n]) / 2L) {
            beforeHalfSum += A3[beforeHalf];
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n], best[n - 1]));
    }
    return subSum;
}
public static Long func_b205f5511736490aac0fd7f16c73a727(Long r, Long q, Long p, Long s, Integer N) {
    long[] A3 = new long[N.intValue()];
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n]) / 2L) {
            beforeHalfSum += A3[beforeHalf];
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n], best[n - 1]));
    }
    return subSum;
}


****** Cluster 541 ******
public static Long func_b35e249618c24187a84e7365a1752aba(Long r, Long q, Long p, Long s, Integer N) {
    long[] A3 = new long[N.intValue()];
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n]) / 2L) {
            beforeHalfSum += A3[beforeHalf];
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n], best[n - 1]));
    }
    return min;
}
public static Long func_d9a1d0d3741d4a26993114c27e19dd5f(Long r, Long q, Long p, Long s, Integer N) {
    long[] A3 = new long[N.intValue()];
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n]) / 2L) {
            beforeHalfSum += A3[beforeHalf];
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n], best[n - 1]));
    }
    return min;
}


****** Cluster 542 ******
public static Long func_666d70d2ec64487689820c2283907302(Long r, Long q, Long p, Long s, Integer N) {
    long[] A3 = new long[N.intValue()];
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n]) / 2L) {
            beforeHalfSum += A3[beforeHalf];
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n], best[n - 1]));
    }
    return sum;
}
public static Long func_38438535117d40b4a6444cd24c05fa3d(Long r, Long q, Long p, Long s, Integer N) {
    long[] A3 = new long[N.intValue()];
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n]) / 2L) {
            beforeHalfSum += A3[beforeHalf];
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n], best[n - 1]));
    }
    return sum;
}


****** Cluster 543 ******
public static Long func_387856d29e4f4ae993748df2d3167310(Long r, Long q, Long p, Long s, Integer N) {
    long[] A3 = new long[N.intValue()];
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n]) / 2L) {
            beforeHalfSum += A3[beforeHalf];
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n], best[n - 1]));
    }
    return beforeHalfSum;
}
public static Long func_da2343c24005478fa09dfa1d0b4e550d(Long r, Long q, Long p, Long s, Integer N) {
    long[] A3 = new long[N.intValue()];
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n]) / 2L) {
            beforeHalfSum += A3[beforeHalf];
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n], best[n - 1]));
    }
    return beforeHalfSum;
}


****** Cluster 544 ******
public static Integer func_0876b8fd1b92423a98535844e283e067(Long r, Long q, Long p, Long s, Integer N) {
    long[] A3 = new long[N.intValue()];
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n]) / 2L) {
            beforeHalfSum += A3[beforeHalf];
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n], best[n - 1]));
    }
    return beforeHalf;
}
public static Integer func_fd580dd65a7047c8b094d659e8d3edcd(Long r, Long q, Long p, Long s, Integer N) {
    long[] A3 = new long[N.intValue()];
    for (int n = 0; n < N; ++n) {
        A3[n] = ((long) n * p + q) % r + s;
    }
    long[] best = new long[N.intValue()];
    int beforeHalf = 0;
    long beforeHalfSum = 0L;
    long sum = 0L;
    for (int n = 0; n < N; ++n) {
        while (beforeHalf < n && beforeHalfSum + A3[beforeHalf] < (sum += A3[n]) / 2L) {
            beforeHalfSum += A3[beforeHalf];
            ++beforeHalf;
        }
        long max = sum;
        if (beforeHalf > 0) {
            max = Math.max(beforeHalfSum, sum - beforeHalfSum);
        }
        if (beforeHalf <= n - 1) {
            long value = Math.max(beforeHalfSum + A3[beforeHalf], sum - beforeHalfSum - A3[beforeHalf]);
            max = Math.min(max, value);
        }
        best[n] = max;
    }
    long min = best[N - 1];
    long subSum = 0L;
    for (int n = N.intValue() - 1; n >= 1; --n) {
        min = Math.min(min, Math.max(subSum += A3[n], best[n - 1]));
    }
    return beforeHalf;
}


****** Cluster 545 ******
public static Long func_ee8c98eac34549f19993eb51328de2ce(Long[] pref, Integer n) {
    long low = 0L;
    long high = pref[n];
    block0: while (low + 1L < high) {
        long mid = (low + high) / 2L;
        int cur = 0;
        for (int i = 0; i < 3; ++i) {
            long need = pref[cur] + mid;
            int x2 = Arrays.binarySearch((Object[]) pref, (Object) need);
            if (x2 < 0) {
                x2 = -x2 - 2;
            }
            if (x2 == n) {
                high = mid;
                continue block0;
            }
            cur = x2;
        }
        low = mid;
    }
    return low;
}
public static Long func_050ece3c5a3749a9aa8a00e9c1210b35(Long[] pref, Integer n) {
    long low = 0L;
    long high = pref[n];
    block0: while (low + 1L < high) {
        long mid = (low + high) / 2L;
        int cur = 0;
        for (int i = 0; i < 3; ++i) {
            long need = pref[cur] + mid;
            int x2 = Arrays.binarySearch((Object[]) pref, (Object) need);
            if (x2 < 0) {
                x2 = -x2 - 2;
            }
            if (x2 == n) {
                high = mid;
                continue block0;
            }
            cur = x2;
        }
        low = mid;
    }
    pref[n].longValue();
    pref[n].longValue();
    return low;
}


****** Cluster 546 ******
public static Long func_cb779b6483c44d868c6c09c07615ee0f(Long[] pref, Integer n) {
    long low = 0L;
    long high = pref[n];
    block0: while (low + 1L < high) {
        long mid = (low + high) / 2L;
        int cur = 0;
        for (int i = 0; i < 3; ++i) {
            long need = pref[cur] + mid;
            int x2 = Arrays.binarySearch((Object[]) pref, (Object) need);
            if (x2 < 0) {
                x2 = -x2 - 2;
            }
            if (x2 == n) {
                high = mid;
                continue block0;
            }
            cur = x2;
        }
        low = mid;
    }
    return high;
}
public static Long func_479cc171d44e46bb9b79ee65768c34ac(Long[] pref, Integer n) {
    long low = 0L;
    long high = pref[n];
    block0: while (low + 1L < high) {
        long mid = (low + high) / 2L;
        int cur = 0;
        for (int i = 0; i < 3; ++i) {
            long need = pref[cur] + mid;
            int x2 = Arrays.binarySearch((Object[]) pref, (Object) need);
            if (x2 < 0) {
                x2 = -x2 - 2;
            }
            if (x2 == n) {
                high = mid;
                continue block0;
            }
            cur = x2;
        }
        low = mid;
    }
    pref[n].longValue();
    pref[n].longValue();
    return high;
}


****** Cluster 547 ******
public static Long func_794796ae61394396b7a0ef46d7e19d79(Long low, Long[] pref, Integer n) {
    long high = pref[n];
    block0: while (low + 1L < high) {
        long mid = (low + high) / 2L;
        int cur = 0;
        for (int i = 0; i < 3; ++i) {
            long need = pref[cur] + mid;
            int x2 = Arrays.binarySearch((Object[]) pref, (Object) need);
            if (x2 < 0) {
                x2 = -x2 - 2;
            }
            if (x2 == n) {
                high = mid;
                continue block0;
            }
            cur = x2;
        }
        low = mid;
    }
    pref[n].longValue();
    pref[n].longValue();
    return low;
}
public static Long func_cb8f3a8c9e5a41e08947296c8192de2b(Long low, Long[] pref, Integer n) {
    long high = pref[n];
    block0: while (low + 1L < high) {
        long mid = (low + high) / 2L;
        int cur = 0;
        for (int i = 0; i < 3; ++i) {
            long need = pref[cur] + mid;
            int x2 = Arrays.binarySearch((Object[]) pref, (Object) need);
            if (x2 < 0) {
                x2 = -x2 - 2;
            }
            if (x2 == n) {
                high = mid;
                continue block0;
            }
            cur = x2;
        }
        low = mid;
    }
    return low;
}


****** Cluster 548 ******
public static Long func_2a8b618dc53649748ad27373f7741ee6(Long low, Long[] pref, Integer n) {
    long high = pref[n];
    block0: while (low + 1L < high) {
        long mid = (low + high) / 2L;
        int cur = 0;
        for (int i = 0; i < 3; ++i) {
            long need = pref[cur] + mid;
            int x2 = Arrays.binarySearch((Object[]) pref, (Object) need);
            if (x2 < 0) {
                x2 = -x2 - 2;
            }
            if (x2 == n) {
                high = mid;
                continue block0;
            }
            cur = x2;
        }
        low = mid;
    }
    pref[n].longValue();
    pref[n].longValue();
    return high;
}
public static Long func_1d8e4b5a84144933ba75904029d8472e(Long low, Long[] pref, Integer n) {
    long high = pref[n];
    block0: while (low + 1L < high) {
        long mid = (low + high) / 2L;
        int cur = 0;
        for (int i = 0; i < 3; ++i) {
            long need = pref[cur] + mid;
            int x2 = Arrays.binarySearch((Object[]) pref, (Object) need);
            if (x2 < 0) {
                x2 = -x2 - 2;
            }
            if (x2 == n) {
                high = mid;
                continue block0;
            }
            cur = x2;
        }
        low = mid;
    }
    return high;
}


****** Cluster 549 ******
public static Long func_08dafc2067de4626958b4253436a1e28(Integer[] a2, Integer n) {
    long[] pref = new long[n + 1];
    for (int i = 0; i < n; ++i) {
        pref[i + 1] = pref[i] + (long) a2[i].intValue();
    }
    long low = 0L;
    long high = pref[n];
    block1: while (low + 1L < high) {
        long mid = (low + high) / 2L;
        int cur = 0;
        for (int i = 0; i < 3; ++i) {
            long need = pref[cur] + mid;
            int x2 = Arrays.binarySearch(pref, need);
            if (x2 < 0) {
                x2 = -x2 - 2;
            }
            if (x2 == n) {
                high = mid;
                continue block1;
            }
            cur = x2;
        }
        low = mid;
    }
    return low;
}
public static Long func_aa5110a79aa44bcea38dbf3078f90248(Integer[] a2, Integer n) {
    long[] pref = new long[n + 1];
    for (int i = 0; i < n; ++i) {
        pref[i + 1] = pref[i] + (long) a2[i].intValue();
    }
    long low = 0L;
    long high = pref[n];
    block1: while (low + 1L < high) {
        long mid = (low + high) / 2L;
        int cur = 0;
        for (int i = 0; i < 3; ++i) {
            long need = pref[cur] + mid;
            int x2 = Arrays.binarySearch(pref, need);
            if (x2 < 0) {
                x2 = -x2 - 2;
            }
            if (x2 == n) {
                high = mid;
                continue block1;
            }
            cur = x2;
        }
        low = mid;
    }
    n.intValue();
    n.intValue();
    return low;
}


****** Cluster 550 ******
public static Long func_eb50b8bcf1e34a80998b8ed4832e0390(Long sr, Long sl, Long sm, Integer l, Integer r, Long[] a2) {
    sm = sm + a2[r];
    Long.valueOf(sr - a2[r]);
    while (l < r && Math.max(sl + a2[l], sm - a2[l]) < Math.max(sl, sm)) {
        sl = sl + a2[l];
        sm = sm - a2[l];
        l = l + 1;
    }
    return sl;
}
public static Long func_52c82520e55d442a8d43e44524c92c3f(Long sr, Long sm, Long sl, Integer l, Integer r, Long[] a2) {
    Long.valueOf(sr - a2[r]);
    while (l < r && Math.max(sl + a2[l], sm - a2[l]) < Math.max(sl, sm)) {
        sl = sl + a2[l];
        sm = sm - a2[l];
        l = l + 1;
    }
    return sm;
}


****** Cluster 551 ******
public static Long func_5e721e58f7b14e0996a1c94b8c31acfc(Long sr, Long sm, Long sl, Integer l, Integer r, Long ans, Long[] a2) {
    sr = sr - a2[r];
    while (l < r && Math.max(sl + a2[l], sm - a2[l]) < Math.max(sl, sm)) {
        sl = sl + a2[l];
        sm = sm - a2[l];
        l = l + 1;
    }
    Long.valueOf(Math.min(ans, Math.max(sr, Math.max(sm, sl))));
    return sr;
}
public static Long func_151a498d4fe5496c91fbbd158ee8f15d(Long sr, Long sm, Long sl, Integer l, Integer r, Long ans, Long[] a2) {
    sm = sm + a2[r];
    sr = sr - a2[r];
    while (l < r && Math.max(sl + a2[l], sm - a2[l]) < Math.max(sl, sm)) {
        sl = sl + a2[l];
        sm = sm - a2[l];
        l = l + 1;
    }
    Long.valueOf(Math.min(ans, Math.max(sr, Math.max(sm, sl))));
    return sr;
}


****** Cluster 552 ******
public static Long func_cb68d02d810047fda9293f8d9b401dae(Long sr, Long sm, Long sl, Integer l, Integer r, Long ans, Long[] a2) {
    sr = sr - a2[r];
    while (l < r && Math.max(sl + a2[l], sm - a2[l]) < Math.max(sl, sm)) {
        sl = sl + a2[l];
        sm = sm - a2[l];
        l = l + 1;
    }
    Long.valueOf(Math.min(ans, Math.max(sr, Math.max(sm, sl))));
    return sl;
}
public static Long func_882c77ed49674a949a4e8305151c7ea0(Long sr, Long sm, Long sl, Integer l, Integer r, Long ans, Long[] a2) {
    sm = sm + a2[r];
    sr = sr - a2[r];
    while (l < r && Math.max(sl + a2[l], sm - a2[l]) < Math.max(sl, sm)) {
        sl = sl + a2[l];
        sm = sm - a2[l];
        l = l + 1;
    }
    Long.valueOf(Math.min(ans, Math.max(sr, Math.max(sm, sl))));
    return sl;
}


****** Cluster 553 ******
public static Long func_809f630472b14f0da4a856f2119ffe65(Long sr, Long sm, Long sl, Integer l, Integer r, Long ans, Long[] a2) {
    sr = sr - a2[r];
    while (l < r && Math.max(sl + a2[l], sm - a2[l]) < Math.max(sl, sm)) {
        sl = sl + a2[l];
        sm = sm - a2[l];
        l = l + 1;
    }
    ans = Math.min(ans, Math.max(sr, Math.max(sm, sl)));
    return ans;
}
public static Long func_7a09a58014fb4c5bb969669495ff104e(Long sr, Long sm, Long sl, Integer l, Integer r, Long ans, Long[] a2) {
    sm = sm + a2[r];
    sr = sr - a2[r];
    while (l < r && Math.max(sl + a2[l], sm - a2[l]) < Math.max(sl, sm)) {
        sl = sl + a2[l];
        sm = sm - a2[l];
        l = l + 1;
    }
    ans = Math.min(ans, Math.max(sr, Math.max(sm, sl)));
    return ans;
}


****** Cluster 554 ******
public static Long func_d97dde58ec2540939877256d7cf98680(Long[] a2) {
    long sm = a2[0];
    return sm;
}
public static Long func_0d7b94f71ce14f09a2ca7721c2817f46(Long[] a2) {
    long sm = a2[0];
    return sm;
}
public static Long func_07c6478d52e14889815188566f076045(Long[] a2) {
    long sm = a2[0];
    return sm;
}
public static Long func_2f9e29b5e8af474f8880554a264baf23(Long[] a2) {
    long sm = a2[0];
    for (int i = 1; i < a2.length; ++i) {
        a2[i].longValue();
    }
    return sm;
}
public static Long func_21c0e6cc58224344996fa1945a80ddd6(Long[] a2) {
    long sm = a2[0];
    for (int i = 1; i < a2.length; ++i) {
        a2[i].longValue();
    }
    return sm;
}
public static Long func_5842f07752994469967bf70f0a027aec(Long[] a2) {
    long sm = a2[0];
    for (int i = 1; i < a2.length; ++i) {
        a2[i].longValue();
    }
    return sm;
}
public static Long func_b795b644565b4ec7be8ed92f8b91ca6a(Long[] a2) {
    long sm = a2[0];
    for (int i = 1; i < a2.length; ++i) {
        a2[i].longValue();
    }
    return sm;
}
public static Long func_9055428db3ae4ff5af8eb31f80b471b6(Long[] a2) {
    long sm = a2[0];
    long sr = 0L;
    for (int i = 1; i < a2.length; ++i) {
        sr += a2[i].longValue();
    }
    Math.max(sm, sr);
    return sm;
}
public static Long func_f83d238d31c14966a086d203e1710da7(Long[] a2) {
    long sm = a2[0];
    long sr = 0L;
    for (int i = 1; i < a2.length; ++i) {
        sr += a2[i].longValue();
    }
    Math.max(sm, sr);
    return sm;
}
public static Long func_7cbcf6d45a6e4b5f89bfe534d585df77(Long[] a2) {
    long sm = a2[0];
    long sr = 0L;
    for (int i = 1; i < a2.length; ++i) {
        sr += a2[i].longValue();
    }
    Math.max(sm, sr);
    return sm;
}
public static Long func_34f642ad4a494fb0b1649bcbb222cfe4(Long[] a2) {
    long sm = a2[0];
    long sr = 0L;
    for (int i = 1; i < a2.length; ++i) {
        sr += a2[i].longValue();
    }
    Math.max(sm, sr);
    return sm;
}
def func_d7a088aa09064bf68677d9235fbaa89f(y):
    jmin = 0
    hmin = y[0]
    return hmin



****** Cluster 555 ******
public static Long func_ec251336c208462fb3c797539aa4e2b2(Long[] a2) {
    long sr = 0L;
    for (int i = 1; i < a2.length; ++i) {
        sr += a2[i].longValue();
    }
    return sr;
}
public static Long func_70e65c901dc04bc8bc70a63c53829e05(Long[] a2) {
    a2[0].longValue();
    long sr = 0L;
    for (int i = 1; i < a2.length; ++i) {
        sr += a2[i].longValue();
    }
    return sr;
}
public static Long func_2b16054fb43d4ab8a97153e187f97895(Long[] a2) {
    a2[0].longValue();
    long sr = 0L;
    for (int i = 1; i < a2.length; ++i) {
        sr += a2[i].longValue();
    }
    return sr;
}
public static Long func_d7eb71cc3b214cb282b8d6e463d4b159(Long[] a2) {
    a2[0].longValue();
    long sr = 0L;
    for (int i = 1; i < a2.length; ++i) {
        sr += a2[i].longValue();
    }
    return sr;
}
public static Long func_2cd75a181ddd4eb8bb62796319c2d5ed(Long[] a2) {
    a2[0].longValue();
    long sr = 0L;
    for (int i = 1; i < a2.length; ++i) {
        sr += a2[i].longValue();
    }
    return sr;
}
public static Long func_f54713336a83410a89c2bfa5ff189165(Long[] a2) {
    long sm = a2[0];
    long sr = 0L;
    for (int i = 1; i < a2.length; ++i) {
        sr += a2[i].longValue();
    }
    Math.max(sm, sr);
    return sr;
}
public static Long func_7216a25c92244230bff432a738386b5f(Long[] a2) {
    long sm = a2[0];
    long sr = 0L;
    for (int i = 1; i < a2.length; ++i) {
        sr += a2[i].longValue();
    }
    Math.max(sm, sr);
    return sr;
}
public static Long func_8568c5140c9d44fab0bf27b031230911(Long[] a2) {
    long sm = a2[0];
    long sr = 0L;
    for (int i = 1; i < a2.length; ++i) {
        sr += a2[i].longValue();
    }
    Math.max(sm, sr);
    return sr;
}
public static Long func_da462fe0f36d45a9a2c48f63446461e1(Long[] a2) {
    long sm = a2[0];
    long sr = 0L;
    for (int i = 1; i < a2.length; ++i) {
        sr += a2[i].longValue();
    }
    Math.max(sm, sr);
    return sr;
}


****** Cluster 556 ******
public static Long func_f6e0cc7c9dc54857be70672f3eb94e6a(Long sr, Long sm, Long[] a2) {
    for (int i = 1; i < a2.length; ++i) {
        sr = sr + a2[i];
    }
    sm.longValue();
    sr.longValue();
    return sr;
}
public static Long func_4c1dd57e41564c28baaf1c3bf69a514e(Long sr, Long sm, Long[] a2) {
    for (int i = 1; i < a2.length; ++i) {
        sr = sr + a2[i];
    }
    sm.longValue();
    sr.longValue();
    Math.max(sm, sr);
    return sr;
}
public static Long func_25f0a49a4b4245318ed2f4bdda4722ff(Long sr, Long sm, Long[] a2) {
    for (int i = 1; i < a2.length; ++i) {
        sr = sr + a2[i];
    }
    sm.longValue();
    sr.longValue();
    Math.max(sm, sr);
    return sr;
}
public static Long func_d62c0a8f44a64f6d9116652843503a08(Long sm, Long sl, Long[] a2) {
    long sr = 0L;
    for (int i = 1; i < a2.length; ++i) {
        sr += a2[i].longValue();
    }
    long sum = sm + sr;
    long ans = Math.max(sm, sr);
    int l = 0;
    for (int r = 1; r < a2.length; ++r) {
        sm = sm + a2[r];
        sr -= a2[r].longValue();
        while (l < r && Math.max(sl + a2[l], sm - a2[l]) < Math.max(sl, sm)) {
            sl = sl + a2[l];
            sm = sm - a2[l];
            ++l;
        }
        ans = Math.min(ans, Math.max(sr, Math.max(sm, sl)));
    }
    return sum;
}


****** Cluster 557 ******
public static Long func_a0619b0e2e2545318e3bd8b99546e5cb(Long sr, Long sm) {
    long sum = sm + sr;
    Math.max(sm, sr);
    return sum;
}
public static Long func_39b1c8809b4e4ec39ca273aa56be269f(Long sr, Long sm) {
    long sum = sm + sr;
    Math.max(sm, sr);
    return sum;
}


****** Cluster 558 ******
public static Long func_f5a81cb66fe3432d8a19efa7d9bd94c2(Long sr, Long sm) {
    sm.longValue();
    sr.longValue();
    long ans = Math.max(sm, sr);
    return ans;
}
public static Long func_626e307ec7084e88b085fc44f9f34264(Long sr, Long sm) {
    long ans = Math.max(sm, sr);
    return ans;
}
public static Long func_c25f22d20d0d44ddb4e2bd176ba22bd1(Long sr, Long sm) {
    sm.longValue();
    sr.longValue();
    long ans = Math.max(sm, sr);
    return ans;
}


****** Cluster 559 ******
public static Long func_d40659f1c6f74d8989b9e32baf633766(Long sr, Long sm, Long[] a2) {
    for (int i = 1; i < a2.length; ++i) {
        sr = sr + a2[i];
    }
    long sum = sm + sr;
    return sum;
}
public static Long func_0f163716b5f94561b99d7b2570b67b8b(Long sr, Long sm, Long[] a2) {
    for (int i = 1; i < a2.length; ++i) {
        sr = sr + a2[i];
    }
    long sum = sm + sr;
    Math.max(sm, sr);
    return sum;
}
public static Long func_53e4558e66154ab69a00aca573863743(Long sr, Long sm, Long[] a2) {
    for (int i = 1; i < a2.length; ++i) {
        sr = sr + a2[i];
    }
    long sum = sm + sr;
    Math.max(sm, sr);
    return sum;
}


****** Cluster 560 ******
public static Long func_e7c3442f5e3b48fe853bc7157f9a18a6(Long sm, Long[] a2) {
    long sr = 0L;
    for (int i = 1; i < a2.length; ++i) {
        sr += a2[i].longValue();
    }
    sm.longValue();
    return sr;
}
public static Long func_2872d6c04efc44c9a09e21046247e0b6(Long sm, Long[] a2) {
    long sr = 0L;
    for (int i = 1; i < a2.length; ++i) {
        sr += a2[i].longValue();
    }
    sm.longValue();
    Math.max(sm, sr);
    return sr;
}
public static Long func_3d6cad7cf3094347ad9451e053fc7067(Long sm, Long[] a2) {
    long sr = 0L;
    for (int i = 1; i < a2.length; ++i) {
        sr += a2[i].longValue();
    }
    sm.longValue();
    Math.max(sm, sr);
    return sr;
}


****** Cluster 561 ******
public static Long func_a6cff5515c76404caa100a7bee0cdd64(Long sm, Long[] a2) {
    long sr = 0L;
    for (int i = 1; i < a2.length; ++i) {
        sr += a2[i].longValue();
    }
    long sum = sm + sr;
    return sum;
}
public static Long func_7c4921e6ad184186970ae5db834496e9(Long sm, Long[] a2) {
    long sr = 0L;
    for (int i = 1; i < a2.length; ++i) {
        sr += a2[i].longValue();
    }
    long sum = sm + sr;
    Math.max(sm, sr);
    return sum;
}
public static Long func_1563037f2ce748caaa02acbce4dd90a1(Long sm, Long[] a2) {
    long sr = 0L;
    for (int i = 1; i < a2.length; ++i) {
        sr += a2[i].longValue();
    }
    long sum = sm + sr;
    Math.max(sm, sr);
    return sum;
}


****** Cluster 562 ******
public static Long func_10adb2023cd94b15b90d0dcacfa6e051(Long sr, Long sm, Long[] a2) {
    for (int i = 1; i < a2.length; ++i) {
        sr = sr + a2[i];
    }
    sm.longValue();
    sr.longValue();
    long ans = Math.max(sm, sr);
    return ans;
}
public static Long func_ecbcf3371071417d932bfbc83b8e31e9(Long sr, Long sm, Long[] a2) {
    for (int i = 1; i < a2.length; ++i) {
        sr = sr + a2[i];
    }
    sm.longValue();
    sr.longValue();
    long ans = Math.max(sm, sr);
    return ans;
}


****** Cluster 563 ******
public static Long func_e98f8cb53e134bd794d8bda7861c7322(Long sr, Long sm, Long sl, Long[] a2) {
    long ans = Math.max(sm, sr);
    int l = 0;
    for (int r = 1; r < a2.length; ++r) {
        sm = sm + a2[r];
        sr = sr - a2[r];
        while (l < r && Math.max(sl + a2[l], sm - a2[l]) < Math.max(sl, sm)) {
            sl = sl + a2[l];
            sm = sm - a2[l];
            ++l;
        }
        ans = Math.min(ans, Math.max(sr, Math.max(sm, sl)));
    }
    return sr;
}
public static Long func_8a2adbf83a0f4166b8f936bc35c424fc(Long sr, Long sm, Long sl, Long[] a2) {
    sm.longValue();
    sr.longValue();
    long ans = Math.max(sm, sr);
    int l = 0;
    for (int r = 1; r < a2.length; ++r) {
        sm = sm + a2[r];
        sr = sr - a2[r];
        while (l < r && Math.max(sl + a2[l], sm - a2[l]) < Math.max(sl, sm)) {
            sl = sl + a2[l];
            sm = sm - a2[l];
            ++l;
        }
        ans = Math.min(ans, Math.max(sr, Math.max(sm, sl)));
    }
    return sr;
}


****** Cluster 564 ******
public static Long func_fab8c9ac0d2346bbb2426dfa13ddb4d9(Long sr, Long sm, Long sl, Long[] a2) {
    long ans = Math.max(sm, sr);
    int l = 0;
    for (int r = 1; r < a2.length; ++r) {
        sm = sm + a2[r];
        sr = sr - a2[r];
        while (l < r && Math.max(sl + a2[l], sm - a2[l]) < Math.max(sl, sm)) {
            sl = sl + a2[l];
            sm = sm - a2[l];
            ++l;
        }
        ans = Math.min(ans, Math.max(sr, Math.max(sm, sl)));
    }
    return sm;
}
public static Long func_68ab6cb7e4e14d5e9c51da36856460cd(Long sr, Long sm, Long sl, Long[] a2) {
    sm.longValue();
    sr.longValue();
    long ans = Math.max(sm, sr);
    int l = 0;
    for (int r = 1; r < a2.length; ++r) {
        sm = sm + a2[r];
        sr = sr - a2[r];
        while (l < r && Math.max(sl + a2[l], sm - a2[l]) < Math.max(sl, sm)) {
            sl = sl + a2[l];
            sm = sm - a2[l];
            ++l;
        }
        ans = Math.min(ans, Math.max(sr, Math.max(sm, sl)));
    }
    return sm;
}
public static Long func_d9a7f140ca39441f871537de26231d29(Long sr, Long sm, Long sl, Long[] a2) {
    for (int i = 1; i < a2.length; ++i) {
        sr = sr + a2[i];
    }
    sm.longValue();
    sr.longValue();
    long ans = Math.max(sm, sr);
    int l = 0;
    for (int r = 1; r < a2.length; ++r) {
        sm = sm + a2[r];
        sr = sr - a2[r];
        while (l < r && Math.max(sl + a2[l], sm - a2[l]) < Math.max(sl, sm)) {
            sl = sl + a2[l];
            sm = sm - a2[l];
            ++l;
        }
        ans = Math.min(ans, Math.max(sr, Math.max(sm, sl)));
    }
    return sm;
}


****** Cluster 565 ******
public static Long func_203e2ad4cf6b492b85981ba70f105f40(Long sr, Long sm, Long sl, Long[] a2) {
    long ans = Math.max(sm, sr);
    int l = 0;
    for (int r = 1; r < a2.length; ++r) {
        sm = sm + a2[r];
        sr = sr - a2[r];
        while (l < r && Math.max(sl + a2[l], sm - a2[l]) < Math.max(sl, sm)) {
            sl = sl + a2[l];
            sm = sm - a2[l];
            ++l;
        }
        ans = Math.min(ans, Math.max(sr, Math.max(sm, sl)));
    }
    return sl;
}
public static Long func_1c91bcc12d844778a048ff2190a99758(Long sr, Long sm, Long sl, Long[] a2) {
    sm.longValue();
    sr.longValue();
    long ans = Math.max(sm, sr);
    int l = 0;
    for (int r = 1; r < a2.length; ++r) {
        sm = sm + a2[r];
        sr = sr - a2[r];
        while (l < r && Math.max(sl + a2[l], sm - a2[l]) < Math.max(sl, sm)) {
            sl = sl + a2[l];
            sm = sm - a2[l];
            ++l;
        }
        ans = Math.min(ans, Math.max(sr, Math.max(sm, sl)));
    }
    return sl;
}
public static Long func_25854cf7d537496684b826e576ccf3f1(Long sr, Long sm, Long sl, Long[] a2) {
    for (int i = 1; i < a2.length; ++i) {
        sr = sr + a2[i];
    }
    sm.longValue();
    sr.longValue();
    long ans = Math.max(sm, sr);
    int l = 0;
    for (int r = 1; r < a2.length; ++r) {
        sm = sm + a2[r];
        sr = sr - a2[r];
        while (l < r && Math.max(sl + a2[l], sm - a2[l]) < Math.max(sl, sm)) {
            sl = sl + a2[l];
            sm = sm - a2[l];
            ++l;
        }
        ans = Math.min(ans, Math.max(sr, Math.max(sm, sl)));
    }
    return sl;
}


****** Cluster 566 ******
public static Integer func_cdb0677cdef342c0ab711a2d95e55ddb(Long sr, Long sm, Long sl, Long[] a2) {
    long ans = Math.max(sm, sr);
    int l = 0;
    for (int r = 1; r < a2.length; ++r) {
        sm = sm + a2[r];
        sr = sr - a2[r];
        while (l < r && Math.max(sl + a2[l], sm - a2[l]) < Math.max(sl, sm)) {
            sl = sl + a2[l];
            sm = sm - a2[l];
            ++l;
        }
        ans = Math.min(ans, Math.max(sr, Math.max(sm, sl)));
    }
    return l;
}
public static Integer func_fe9e15e04a514accbea35e6e9af2147e(Long sr, Long sm, Long sl, Long[] a2) {
    sm.longValue();
    sr.longValue();
    long ans = Math.max(sm, sr);
    int l = 0;
    for (int r = 1; r < a2.length; ++r) {
        sm = sm + a2[r];
        sr = sr - a2[r];
        while (l < r && Math.max(sl + a2[l], sm - a2[l]) < Math.max(sl, sm)) {
            sl = sl + a2[l];
            sm = sm - a2[l];
            ++l;
        }
        ans = Math.min(ans, Math.max(sr, Math.max(sm, sl)));
    }
    return l;
}
public static Integer func_f7eb5106be70485fb72f3cefe1b23481(Long sr, Long sm, Long sl, Long[] a2) {
    for (int i = 1; i < a2.length; ++i) {
        sr = sr + a2[i];
    }
    sm.longValue();
    sr.longValue();
    long ans = Math.max(sm, sr);
    int l = 0;
    for (int r = 1; r < a2.length; ++r) {
        sm = sm + a2[r];
        sr = sr - a2[r];
        while (l < r && Math.max(sl + a2[l], sm - a2[l]) < Math.max(sl, sm)) {
            sl = sl + a2[l];
            sm = sm - a2[l];
            ++l;
        }
        ans = Math.min(ans, Math.max(sr, Math.max(sm, sl)));
    }
    return l;
}


****** Cluster 567 ******
public static Long func_a62d96df95d048929aa75bdbdc67de38(Long sr, Long sm, Long sl, Long[] a2) {
    long ans = Math.max(sm, sr);
    int l = 0;
    for (int r = 1; r < a2.length; ++r) {
        sm = sm + a2[r];
        sr = sr - a2[r];
        while (l < r && Math.max(sl + a2[l], sm - a2[l]) < Math.max(sl, sm)) {
            sl = sl + a2[l];
            sm = sm - a2[l];
            ++l;
        }
        ans = Math.min(ans, Math.max(sr, Math.max(sm, sl)));
    }
    return ans;
}
public static Long func_7b8c2da1dc5a423fb06b96e2bd50f123(Long sr, Long sm, Long sl, Long[] a2) {
    sm.longValue();
    sr.longValue();
    long ans = Math.max(sm, sr);
    int l = 0;
    for (int r = 1; r < a2.length; ++r) {
        sm = sm + a2[r];
        sr = sr - a2[r];
        while (l < r && Math.max(sl + a2[l], sm - a2[l]) < Math.max(sl, sm)) {
            sl = sl + a2[l];
            sm = sm - a2[l];
            ++l;
        }
        ans = Math.min(ans, Math.max(sr, Math.max(sm, sl)));
    }
    return ans;
}


****** Cluster 568 ******
public static Long func_0ecf3d7599e4456ebcf48ae519c66407(Long[] a2) {
    long sm = a2[0];
    long sr = 0L;
    for (int i = 1; i < a2.length; ++i) {
        sr += a2[i].longValue();
    }
    long sum = sm + sr;
    return sum;
}
public static Long func_2a48fd269b24414bb598f748aa33aba5(Long[] a2) {
    long sm = a2[0];
    long sr = 0L;
    for (int i = 1; i < a2.length; ++i) {
        sr += a2[i].longValue();
    }
    long sum = sm + sr;
    return sum;
}
public static Long func_6e74f6492a004eeaa7eaf7450eb10afd(Long[] a2) {
    long sm = a2[0];
    long sr = 0L;
    for (int i = 1; i < a2.length; ++i) {
        sr += a2[i].longValue();
    }
    long sum = sm + sr;
    Math.max(sm, sr);
    return sum;
}
public static Long func_c96a897759754e45ae4dba5789f1fb6f(Long[] a2) {
    long sm = a2[0];
    long sr = 0L;
    for (int i = 1; i < a2.length; ++i) {
        sr += a2[i].longValue();
    }
    long sum = sm + sr;
    Math.max(sm, sr);
    return sum;
}
public static Long func_38141cb9058c4ad2949d3e5750e8c057(Long[] a2) {
    long sm = a2[0];
    long sr = 0L;
    for (int i = 1; i < a2.length; ++i) {
        sr += a2[i].longValue();
    }
    long sum = sm + sr;
    Math.max(sm, sr);
    return sum;
}
public static Long func_25b184f3b2d64e94b859d736b9bf0252(Long[] a2) {
    long sm = a2[0];
    long sr = 0L;
    for (int i = 1; i < a2.length; ++i) {
        sr += a2[i].longValue();
    }
    long sum = sm + sr;
    Math.max(sm, sr);
    return sum;
}
public static Long func_cbfa7cac14f34bd6a3d274c717bff02f(Long[] a2) {
    long sl = 0L;
    long sm = a2[0];
    long sr = 0L;
    for (int i = 1; i < a2.length; ++i) {
        sr += a2[i].longValue();
    }
    long sum = sm + sr;
    long ans = Math.max(sm, sr);
    int l = 0;
    for (int r = 1; r < a2.length; ++r) {
        sm += a2[r].longValue();
        sr -= a2[r].longValue();
        while (l < r && Math.max(sl + a2[l], sm - a2[l]) < Math.max(sl, sm)) {
            sl += a2[l].longValue();
            sm -= a2[l].longValue();
            ++l;
        }
        ans = Math.min(ans, Math.max(sr, Math.max(sm, sl)));
    }
    return sum;
}
def func_c080f973c26143d197f04158b1bd248d(transistors):
    transistorsum = sum(transistors)
    first = 0
    return transistorsum

def func_9391841ca22f4e45864b78ca7501bd3b(A):
    total = sum(A)
    totalsum = [a for a in A]
    return total

def func_0d7ad9bc79a14c84b31f38d7b49af6ea(D):
    S = sum(D)
    ans = S
    return ans

def func_1c4494b20d8b4bf1adff5177a5a78dd8(D):
    S = sum(D)
    ans = S
    return S

def func_4e279cb869f14253b9cbe076a362d83a(D):
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    a = 0
    return C

def func_540bc82d469f4d72a3ecf7827de5b8f2(D):
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    return S

def func_73bb2fc31cb14d7b8bddb35332da3947(D):
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    return ans

def func_7f447c5c1e634764a46ebbe8a82bd676(D):
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    return C

def func_aca7977c5ae34ed7a55f54cb27f1e884(D):
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    return C

def func_c5c1cd9252a44a0fb2eb6bbc6cd0f635(D):
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    a = 0
    return ans

def func_c9fc8e641877498aac97aeadd677b1ea(D):
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    return S

def func_cd2cc3ec4e1e49bf987ba6b021edd4dd(D):
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    return ans

def func_d80b5445bcb8423ea115253bdafb1a49(D):
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    a = 0
    return S

def func_651a5cb4ac5f4e63866a55a11cf609f9(t):
    total = sum(t)
    c = [0]
    for x in t:
        c.append(c[-1] + x)
    a = b = 0
    best = 0
    return total

def func_73eb9647c9334e16997c1fab6b1088d3(t):
    total = sum(t)
    c = [0]
    for x in t:
        c.append(c[-1] + x)
    a = b = 0
    return total

def func_8328426d57a34863a8e0d6d227cd3c27(t):
    total = sum(t)
    c = [0]
    return total

def func_f7402311ae2a42afb047fd8e02c9f097(t):
    total = sum(t)
    c = [0]
    for x in t:
        c.append(c[-1] + x)
    return total

def func_42ba69ea24604bddbf989de31d8784e3(transistors):
    total = sum(transistors)
    sums = []
    return total

def func_721374bb49b6444b8f2b83d968b3be75(transistors):
    total = sum(transistors)
    sums = []
    t = 0
    return total

def func_21f77a2097554e7a89f21e47cf37f796(l):
    vsota = sum(l)
    cum = [0]
    for x in l:
        cum.append(cum[-1] + x)
    best = 0.0
    return vsota

def func_64dbb86ea41b48c890fd0574ae1446f1(l):
    vsota = sum(l)
    cum = [0]
    for x in l:
        cum.append(cum[-1] + x)
    return vsota

def func_bd0ddcb706654b92a5ea8f4e5bc047fc(l):
    vsota = sum(l)
    cum = [0]
    return vsota

def func_480380f795c7446fb359a26b430a3af9(items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    return _sum

def func_631e519cf6a94c2c9de61e3fe39da828(items):
    _sum = sum(items)
    part = _sum / 3
    return _sum

def func_82993337cfb44b6c92aa9244fd759e5a(items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    return _sum

def func_dd6176fd74a94303b665d9535c51a3f1(items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    return _sum

def func_e30a29e2706a42b6ba129f621adc12d3(items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    return _sum

def func_36c6ecc1c1f14c6b9c50527375afde8b(dev):
    tot = sum(dev)
    i = 0
    return tot

def func_1061798b98c646c69ae5ec87be036720(x):
    cx = list(x)
    sx = sum(x)
    return sx

def func_8d78284b9549466b92a0257a1207623e(x):
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    return sx

def func_ba6c6cf85c5c42289b94a45e06d83a74(x):
    x.sort()
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    return sx

def func_ca1317bd485c4e87a82141180a5265bc(x):
    x.sort()
    cx = list(x)
    sx = sum(x)
    return sx

def func_fc2e6161d945453185c01d939f5761ae(x):
    sx = sum(x)
    mx = x[-1]
    return sx



****** Cluster 569 ******
public static Long func_0586907983b84f55bf059ec9581f80bd(Long sm, Long[] a2) {
    long sr = 0L;
    for (int i = 1; i < a2.length; ++i) {
        sr += a2[i].longValue();
    }
    sm.longValue();
    long ans = Math.max(sm, sr);
    return ans;
}
public static Long func_a938d4b9ea654b909fbfc2e2f168f0a7(Long sm, Long[] a2) {
    long sr = 0L;
    for (int i = 1; i < a2.length; ++i) {
        sr += a2[i].longValue();
    }
    sm.longValue();
    long ans = Math.max(sm, sr);
    return ans;
}


****** Cluster 570 ******
public static Long func_1e54a5c05ce8486cb2ddb0ab48887ab5(Long[] a2) {
    long sm = a2[0];
    long sr = 0L;
    for (int i = 1; i < a2.length; ++i) {
        sr += a2[i].longValue();
    }
    long ans = Math.max(sm, sr);
    return ans;
}
public static Long func_238f5a2322e14a89be9caad964a0839c(Long[] a2) {
    long sm = a2[0];
    long sr = 0L;
    for (int i = 1; i < a2.length; ++i) {
        sr += a2[i].longValue();
    }
    long ans = Math.max(sm, sr);
    return ans;
}
public static Long func_632c82846dec4bfe9af98cedbe62e930(Long[] a2) {
    long sm = a2[0];
    long sr = 0L;
    for (int i = 1; i < a2.length; ++i) {
        sr += a2[i].longValue();
    }
    long ans = Math.max(sm, sr);
    return ans;
}
public static Long func_5fcf314055134d28a80ef8e1c259ad10(Long[] a2) {
    long sm = a2[0];
    long sr = 0L;
    for (int i = 1; i < a2.length; ++i) {
        sr += a2[i].longValue();
    }
    long ans = Math.max(sm, sr);
    return ans;
}


****** Cluster 571 ******
public static Long func_f3620937ff7c4e61888d1eb98dddbb44(Long sm, Long sl, Integer l, Long[] a2) {
    sl = sl + a2[l];
    Long.valueOf(sm - a2[l]);
    return sl;
}
public static Long func_1ac31a9151b64e6280391dabb8729daf(Long sm, Long sl, Integer l, Long[] a2) {
    sl = sl + a2[l];
    Long.valueOf(sm - a2[l]);
    Integer.valueOf(l + 1);
    return sl;
}
public static Long func_2fefda0121bf4932a1595e27e9ee557e(Long sr, Long sm, Integer r, Long[] a2) {
    sm = sm + a2[r];
    Long.valueOf(sr - a2[r]);
    return sm;
}


****** Cluster 572 ******
public static Long func_4d83d4df9a1445498bc3e3c975d3c9d8(Long sm, Long sl, Integer l, Long[] a2) {
    Long.valueOf(sl + a2[l]);
    sm = sm - a2[l];
    Integer.valueOf(l + 1);
    return sm;
}
public static Long func_087a8e602ebf4a05bb3f17971fa636b2(Long sr, Long sm, Integer r, Long[] a2) {
    Long.valueOf(sm + a2[r]);
    sr = sr - a2[r];
    return sr;
}
public static Long func_9a7b9a884e494d6e8a4e63edab7fc2ed(Long sm, Long sl, Integer l, Long[] a2) {
    Long.valueOf(sl + a2[l]);
    sm = sm - a2[l];
    return sm;
}


****** Cluster 573 ******
public static Long func_e1d923a655a14801adf188f74ace9930(Long sr, Long sm, Long sl, Integer l, Integer r, Long[] a2) {
    sr = sr - a2[r];
    while (l < r && Math.max(sl + a2[l], sm - a2[l]) < Math.max(sl, sm)) {
        sl = sl + a2[l];
        sm = sm - a2[l];
        l = l + 1;
    }
    return sr;
}
public static Long func_4cf1e03ee27d49c0b20e6f293d0566e5(Long sr, Long sl, Long sm, Integer l, Integer r, Long[] a2) {
    sm = sm + a2[r];
    sr = sr - a2[r];
    while (l < r && Math.max(sl + a2[l], sm - a2[l]) < Math.max(sl, sm)) {
        sl = sl + a2[l];
        sm = sm - a2[l];
        l = l + 1;
    }
    return sr;
}


****** Cluster 574 ******
public static Long func_35fdd649a1294062a9cad73b245d5b19(Long[] imos, Integer h, Integer t) {
    long left = imos[h];
    imos[t + 1].longValue();
    imos[h].longValue();
    return left;
}
public static Long func_c58dcbca12de4cacb6c21a104cd32c6f(Long[] imos, Integer h, Integer t) {
    imos[h].longValue();
    long med = imos[t + 1] - imos[h];
    return med;
}
public static Long func_bf0b7ba9a91d453ba1fd11a022e07c86(Long[] imos, Integer h, Integer t) {
    long left = imos[h];
    imos[t + 1].longValue();
    imos[h].longValue();
    imos[imos.length - 1].longValue();
    imos[t + 1].longValue();
    return left;
}
public static Long func_8f049b2460684ab4b59850873216d196(Long[] imos, Integer h, Integer t) {
    imos[h].longValue();
    long med = imos[t + 1] - imos[h];
    imos[imos.length - 1].longValue();
    imos[t + 1].longValue();
    return med;
}
public static Long func_90701f1854884a3a8ee69e27a78a2760(Long[] imos, Integer h, Integer t) {
    imos[h].longValue();
    imos[t + 1].longValue();
    imos[h].longValue();
    long right = imos[imos.length - 1] - imos[t + 1];
    return right;
}
public static long func_092737f678084714932ea8a8363de9a6(Long[] imos, Integer h, Integer t) {
    long left = imos[h];
    long med = imos[t + 1] - imos[h];
    long right = imos[imos.length - 1] - imos[t + 1];
    return imos[imos.length - 1] - Math.max(left, Math.max(med, right));
}


****** Cluster 575 ******
public static Long func_dcf57a08dfea459ab52701e8955d2934$4f8f5f3e(Integer n, Long sum, Long[] a2) {
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        if ((tmp += a2[i].longValue()) * 3L <= sum) {
            Integer.valueOf(i);
        }
        if (tmp * 3L > sum * 2L)
            continue;
        Integer.valueOf(i);
    }
    return tmp;
}
public static Long func_7ea8f71f789144be81d3c614e9ab7e32(Integer n, Long sum, Long[] a2) {
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        tmp += a2[i].longValue();
        sum.longValue();
        sum.longValue();
    }
    return tmp;
}
public static Long func_e9d657ef017d4461a7f93f25ea2a31ed$4f8f5f3e(Integer n, Long sum, Long[] a2) {
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        if ((tmp += a2[i].longValue()) * 3L <= sum) {
            Integer.valueOf(i);
        }
        if (tmp * 3L > sum * 2L)
            continue;
        Integer.valueOf(i);
    }
    return tmp;
}
public static Long func_a1423ea0364d48aba44fd67271ef504e(Integer n, Long sum, Long[] a2) {
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        tmp += a2[i].longValue();
        sum.longValue();
        sum.longValue();
    }
    return tmp;
}


****** Cluster 576 ******
public static Integer func_303b95fef6854026bada0ba6ce9217a2$20503c5a(Integer n, Long sum, Integer x2, Long[] a2) {
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        if ((tmp += a2[i].longValue()) * 3L <= sum) {
            x2 = i;
        }
        if (tmp * 3L > sum * 2L)
            continue;
        Integer.valueOf(i);
    }
    return x2;
}
public static Integer func_8a4ad1e756154b78ae8ce2d1643a5f72$20503c5a(Integer n, Long sum, Integer y, Long[] a2) {
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        if ((tmp += a2[i].longValue()) * 3L <= sum) {
            Integer.valueOf(i);
        }
        if (tmp * 3L > sum * 2L)
            continue;
        y = i;
    }
    return y;
}
public static Integer func_65c69bea53354897bbe7cce53c8fab2f$20503c5a(Integer n, Long sum, Integer x2, Long[] a2) {
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        if ((tmp += a2[i].longValue()) * 3L <= sum) {
            x2 = i;
        }
        if (tmp * 3L > sum * 2L)
            continue;
        Integer.valueOf(i);
    }
    return x2;
}
public static Integer func_24fb26dea79d4f0db99a46879b8e2827$20503c5a(Integer n, Long sum, Integer y, Long[] a2) {
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        if ((tmp += a2[i].longValue()) * 3L <= sum) {
            Integer.valueOf(i);
        }
        if (tmp * 3L > sum * 2L)
            continue;
        y = i;
    }
    return y;
}


****** Cluster 577 ******
public static Integer func_7ab2b43d43e146e081693565cb063588$45ad8b05(Integer n, Long sum, Long tmp, Integer x2, Long[] a2) {
    for (int i = 0; i < n; ++i) {
        if ((tmp = Long.valueOf(tmp + a2[i])) * 3L <= sum) {
            x2 = i;
        }
        if (tmp * 3L > sum * 2L)
            continue;
        Integer.valueOf(i);
    }
    return x2;
}
public static Integer func_cb8038431b06456d8ab240057434528b$45ad8b05(Integer n, Long sum, Long tmp, Integer y, Long[] a2) {
    for (int i = 0; i < n; ++i) {
        if ((tmp = Long.valueOf(tmp + a2[i])) * 3L <= sum) {
            Integer.valueOf(i);
        }
        if (tmp * 3L > sum * 2L)
            continue;
        y = i;
    }
    return y;
}


****** Cluster 578 ******
public static Long func_036a9e03178f4a9fb11c9913992dc039(Integer s, Integer r, Integer n, Integer q, Integer p) {
    long[] a2 = new long[n.intValue()];
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i];
    }
    return sum;
}
public static Long func_8137e5fdbe3f44b2b783c405ac2dca33(Integer s, Integer r, Integer n, Integer q, Integer p) {
    long[] a2 = new long[n.intValue()];
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i];
    }
    return sum;
}
public static Long func_6528e2b47cd443b1b723c3e6228eec00(Integer s, Integer r, Integer n, Integer q, Integer p) {
    long[] a2 = new long[n.intValue()];
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i];
    }
    return sum;
}
public static Long func_df13229038ef43a28c62da2f7fad115f(Integer s, Integer r, Integer n, Integer q, Integer p) {
    long[] a2 = new long[n.intValue()];
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i];
    }
    for (int i = 0; i < n; ++i) {
    }
    return sum;
}
public static Long func_3955cd32a0864903a0b94b4c9a7a9989(Integer s, Integer r, Integer n, Integer q, Integer p) {
    long[] a2 = new long[n.intValue()];
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
    }
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        tmp += a2[i];
    }
    return tmp;
}
public static Long func_9ed67f80fb654b69b4d6ec2ddaecc37f(Integer s, Integer r, Integer n, Integer q, Integer p) {
    long[] a2 = new long[n.intValue()];
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i];
    }
    for (int i = 0; i < n; ++i) {
    }
    return sum;
}
public static Long func_4cfd4a2f7c9548239c76f769826f248c(Integer s, Integer r, Integer n, Integer q, Integer p) {
    long[] a2 = new long[n.intValue()];
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
    }
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        tmp += a2[i];
    }
    return tmp;
}
public static Long func_73b7cc30d9bb4469bb390c368c80bbcb(Integer s, Integer r, Integer n, Integer q, Integer p) {
    long[] a2 = new long[n.intValue()];
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i];
    }
    int x2 = 0;
    int y = 0;
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        if ((tmp += a2[i]) * 3L <= sum) {
            x2 = i;
        }
        if (tmp * 3L > sum * 2L)
            continue;
        y = i;
    }
    for (int dx = -3; dx <= 3; ++dx) {
        for (int dy = -3; dy <= 3; ++dy) {
            int rx = x2 + dx;
            int ry = y + dy;
            if (rx < 0 || rx >= n || ry < 0 || ry >= n)
                continue;
            long sum1 = 0L;
            long sum2 = 0L;
            long sum3 = 0L;
            for (int i = 0; i < n; ++i) {
                if (i < rx) {
                    sum1 += a2[i];
                    continue;
                }
                if (i <= ry) {
                    sum2 += a2[i];
                    continue;
                }
                sum3 += a2[i];
            }
            Math.max(sum1, Math.max(sum2, sum3));
        }
    }
    return sum;
}
public static Long func_c31f4987fd2444f9995769e3056d36af(Integer s, Integer r, Integer n, Integer q, Integer p) {
    long[] a2 = new long[n.intValue()];
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i];
    }
    int x2 = 0;
    int y = 0;
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        if ((tmp += a2[i]) * 3L <= sum) {
            x2 = i;
        }
        if (tmp * 3L > sum * 2L)
            continue;
        y = i;
    }
    for (int dx = -3; dx <= 3; ++dx) {
        for (int dy = -3; dy <= 3; ++dy) {
            int rx = x2 + dx;
            int ry = y + dy;
            if (rx < 0 || rx >= n || ry < 0 || ry >= n)
                continue;
            long sum1 = 0L;
            long sum2 = 0L;
            long sum3 = 0L;
            for (int i = 0; i < n; ++i) {
                if (i < rx) {
                    sum1 += a2[i];
                    continue;
                }
                if (i <= ry) {
                    sum2 += a2[i];
                    continue;
                }
                sum3 += a2[i];
            }
            Math.max(sum1, Math.max(sum2, sum3));
        }
    }
    return tmp;
}


****** Cluster 579 ******
public static Long func_8034e1ffef42436c999ed51ab9d82b8f(Integer s, Integer n, Integer r, Integer q, Long[] a2, Integer p) {
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i].longValue();
    }
    return sum;
}
public static Long func_16a620f80f334d9c9068b5502f9df073(Integer s, Integer n, Integer r, Integer q, Long[] a2, Integer p) {
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i].longValue();
    }
    return sum;
}
public static Long func_9fe66059c2cb439090b296a07b891bd1(Integer s, Integer n, Integer r, Integer q, Long[] a2, Integer p) {
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i].longValue();
    }
    for (int i = 0; i < n; ++i) {
        a2[i].longValue();
    }
    return sum;
}
public static Long func_f5b0a6f43ee44966bc4717fcc7b409d7(Integer s, Integer n, Integer r, Integer q, Long[] a2, Integer p) {
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        a2[i].longValue();
    }
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        tmp += a2[i].longValue();
    }
    return tmp;
}
public static Long func_bcedabdf21f741909d7373485d0c6fd8(Integer s, Integer n, Integer r, Integer q, Long[] a2, Integer p) {
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i].longValue();
    }
    return sum;
}
public static Long func_7ddad2b59c7e47539ff3a67faed0ab07(Integer s, Integer n, Integer r, Integer q, Long[] a2, Integer p) {
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i].longValue();
    }
    for (int i = 0; i < n; ++i) {
        a2[i].longValue();
    }
    return sum;
}
public static Long func_82cead4f46ae4ce0b3dd272f8bac928d(Integer s, Integer n, Integer r, Integer q, Long[] a2, Integer p) {
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        a2[i].longValue();
    }
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        tmp += a2[i].longValue();
    }
    return tmp;
}
public static Long func_35647b495bd242de89b5a5528ec8c433(Integer s, Integer n, Integer r, Integer q, Long[] a2, Integer p) {
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i].longValue();
    }
    int x2 = 0;
    int y = 0;
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        if ((tmp += a2[i].longValue()) * 3L <= sum) {
            x2 = i;
        }
        if (tmp * 3L > sum * 2L)
            continue;
        y = i;
    }
    for (int dx = -3; dx <= 3; ++dx) {
        for (int dy = -3; dy <= 3; ++dy) {
            int rx = x2 + dx;
            int ry = y + dy;
            if (rx < 0 || rx >= n || ry < 0 || ry >= n)
                continue;
            long sum1 = 0L;
            long sum2 = 0L;
            long sum3 = 0L;
            for (int i = 0; i < n; ++i) {
                if (i < rx) {
                    sum1 += a2[i].longValue();
                    continue;
                }
                if (i <= ry) {
                    sum2 += a2[i].longValue();
                    continue;
                }
                sum3 += a2[i].longValue();
            }
            Math.max(sum1, Math.max(sum2, sum3));
        }
    }
    return sum;
}
public static Long func_2cb6ac24aa63487ca94d790e47e65b38(Integer s, Integer n, Integer r, Integer q, Long[] a2, Integer p) {
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i].longValue();
    }
    int x2 = 0;
    int y = 0;
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        if ((tmp += a2[i].longValue()) * 3L <= sum) {
            x2 = i;
        }
        if (tmp * 3L > sum * 2L)
            continue;
        y = i;
    }
    for (int dx = -3; dx <= 3; ++dx) {
        for (int dy = -3; dy <= 3; ++dy) {
            int rx = x2 + dx;
            int ry = y + dy;
            if (rx < 0 || rx >= n || ry < 0 || ry >= n)
                continue;
            long sum1 = 0L;
            long sum2 = 0L;
            long sum3 = 0L;
            for (int i = 0; i < n; ++i) {
                if (i < rx) {
                    sum1 += a2[i].longValue();
                    continue;
                }
                if (i <= ry) {
                    sum2 += a2[i].longValue();
                    continue;
                }
                sum3 += a2[i].longValue();
            }
            Math.max(sum1, Math.max(sum2, sum3));
        }
    }
    return tmp;
}


****** Cluster 580 ******
public static Long func_4ccf58453e0f40279ce00f22c690e00a(Integer s, Integer n, Integer r, Long sum, Integer q, Long[] a2, Integer p) {
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum = sum + a2[i];
    }
    return sum;
}
public static Long func_299fa9fbe05c48eeb67b338db711b821(Integer s, Integer n, Integer r, Long sum, Integer q, Long[] a2, Integer p) {
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum = sum + a2[i];
    }
    for (int i = 0; i < n; ++i) {
        a2[i].longValue();
        sum.longValue();
        sum.longValue();
    }
    return sum;
}
public static Long func_839b9bbcbe4d42838ab0207189d54d0f(Integer s, Integer n, Integer r, Long sum, Integer q, Long[] a2, Integer p) {
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum = sum + a2[i];
    }
    for (int i = 0; i < n; ++i) {
        a2[i].longValue();
        sum.longValue();
        sum.longValue();
    }
    return sum;
}
public static Long func_a847931c9e684c78bdaec1aea0a2e6d2(Integer s, Integer n, Integer r, Long sum, Integer q, Long[] a2, Integer p) {
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum = sum + a2[i];
    }
    return sum;
}
public static Long func_60045e6a11824ae3951dc2a02259d6c9(Integer s, Integer n, Integer r, Long sum, Integer q, Long[] a2, Integer p) {
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum = sum + a2[i];
    }
    int x2 = 0;
    int y = 0;
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        if ((tmp += a2[i].longValue()) * 3L <= sum) {
            x2 = i;
        }
        if (tmp * 3L > sum * 2L)
            continue;
        y = i;
    }
    for (int dx = -3; dx <= 3; ++dx) {
        for (int dy = -3; dy <= 3; ++dy) {
            int rx = x2 + dx;
            int ry = y + dy;
            if (rx < 0 || rx >= n || ry < 0 || ry >= n)
                continue;
            long sum1 = 0L;
            long sum2 = 0L;
            long sum3 = 0L;
            for (int i = 0; i < n; ++i) {
                if (i < rx) {
                    sum1 += a2[i].longValue();
                    continue;
                }
                if (i <= ry) {
                    sum2 += a2[i].longValue();
                    continue;
                }
                sum3 += a2[i].longValue();
            }
            Math.max(sum1, Math.max(sum2, sum3));
            sum.longValue();
            sum.longValue();
        }
    }
    return sum;
}


****** Cluster 581 ******
public static Integer func_a84415df1f724aad95eec0f5c3b94c12(Integer n, Long sum, Long[] a2) {
    int x2 = 0;
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        if ((tmp += a2[i].longValue()) * 3L <= sum) {
            x2 = i;
        }
        sum.longValue();
    }
    return x2;
}
public static Integer func_221b495a173649c3bc41b507a0fcc2c5(Integer n, Long sum, Long[] a2) {
    int y = 0;
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        sum.longValue();
        if ((tmp += a2[i].longValue()) * 3L > sum * 2L)
            continue;
        y = i;
    }
    return y;
}
public static Integer func_7d926d07d392442b990daf2a296c88e4(Integer n, Long sum, Long[] a2) {
    int x2 = 0;
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        if ((tmp += a2[i].longValue()) * 3L <= sum) {
            x2 = i;
        }
        sum.longValue();
    }
    return x2;
}
public static Integer func_b5be12a4402845a5ae282c6c71572ad6(Integer n, Long sum, Long[] a2) {
    int y = 0;
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        sum.longValue();
        if ((tmp += a2[i].longValue()) * 3L > sum * 2L)
            continue;
        y = i;
    }
    return y;
}


****** Cluster 582 ******
public static Long func_b8d4f717416843faa170f7e9cd44db31(Integer s, Integer n, Integer r, Long sum, Integer q, Long[] a2, Integer p) {
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum = sum + a2[i];
    }
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        tmp += a2[i].longValue();
        sum.longValue();
        sum.longValue();
    }
    return tmp;
}
public static Long func_59c590ec38184987bf1099a0692af437(Integer s, Integer n, Integer r, Long sum, Integer q, Long[] a2, Integer p) {
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum = sum + a2[i];
    }
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        tmp += a2[i].longValue();
        sum.longValue();
        sum.longValue();
    }
    return tmp;
}
public static Long func_1a5e6c98ac0a4ccd9a4f45dc056bc9ff(Integer s, Integer n, Integer r, Long sum, Integer q, Long[] a2, Integer p) {
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum = sum + a2[i];
    }
    int x2 = 0;
    int y = 0;
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        if ((tmp += a2[i].longValue()) * 3L <= sum) {
            x2 = i;
        }
        if (tmp * 3L > sum * 2L)
            continue;
        y = i;
    }
    for (int dx = -3; dx <= 3; ++dx) {
        for (int dy = -3; dy <= 3; ++dy) {
            int rx = x2 + dx;
            int ry = y + dy;
            if (rx < 0 || rx >= n || ry < 0 || ry >= n)
                continue;
            long sum1 = 0L;
            long sum2 = 0L;
            long sum3 = 0L;
            for (int i = 0; i < n; ++i) {
                if (i < rx) {
                    sum1 += a2[i].longValue();
                    continue;
                }
                if (i <= ry) {
                    sum2 += a2[i].longValue();
                    continue;
                }
                sum3 += a2[i].longValue();
            }
            Math.max(sum1, Math.max(sum2, sum3));
            sum.longValue();
            sum.longValue();
        }
    }
    return tmp;
}


****** Cluster 583 ******
public static Integer func_1736119141c74f6a86cc63806af0ead3(Integer s, Integer n, Integer r, Long sum, Integer q, Long[] a2, Integer p) {
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum = sum + a2[i];
    }
    int x2 = 0;
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        if ((tmp += a2[i].longValue()) * 3L <= sum) {
            x2 = i;
        }
        sum.longValue();
    }
    return x2;
}
public static Integer func_d9843db39386403cb572a34ff5bd2da7(Integer s, Integer n, Integer r, Long sum, Integer q, Long[] a2, Integer p) {
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum = sum + a2[i];
    }
    int x2 = 0;
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        if ((tmp += a2[i].longValue()) * 3L <= sum) {
            x2 = i;
        }
        sum.longValue();
    }
    return x2;
}
public static Integer func_340bf5b33cdb468eb50451f29351fce5(Integer s, Integer n, Integer r, Long sum, Integer q, Long[] a2, Integer p) {
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum = sum + a2[i];
    }
    int x2 = 0;
    int y = 0;
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        if ((tmp += a2[i].longValue()) * 3L <= sum) {
            x2 = i;
        }
        if (tmp * 3L > sum * 2L)
            continue;
        y = i;
    }
    for (int dx = -3; dx <= 3; ++dx) {
        for (int dy = -3; dy <= 3; ++dy) {
            int rx = x2 + dx;
            int ry = y + dy;
            if (rx < 0 || rx >= n || ry < 0 || ry >= n)
                continue;
            long sum1 = 0L;
            long sum2 = 0L;
            long sum3 = 0L;
            for (int i = 0; i < n; ++i) {
                if (i < rx) {
                    sum1 += a2[i].longValue();
                    continue;
                }
                if (i <= ry) {
                    sum2 += a2[i].longValue();
                    continue;
                }
                sum3 += a2[i].longValue();
            }
            Math.max(sum1, Math.max(sum2, sum3));
            sum.longValue();
            sum.longValue();
        }
    }
    return x2;
}


****** Cluster 584 ******
public static Integer func_e1885a9027c140c0984f39b8cc8fa2ff(Integer s, Integer n, Integer r, Long sum, Integer q, Long[] a2, Integer p) {
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum = sum + a2[i];
    }
    int y = 0;
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        sum.longValue();
        if ((tmp += a2[i].longValue()) * 3L > sum * 2L)
            continue;
        y = i;
    }
    return y;
}
public static Integer func_c95062e0254549e8bf9420ba40d865a5(Integer s, Integer n, Integer r, Long sum, Integer q, Long[] a2, Integer p) {
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum = sum + a2[i];
    }
    int y = 0;
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        sum.longValue();
        if ((tmp += a2[i].longValue()) * 3L > sum * 2L)
            continue;
        y = i;
    }
    return y;
}
public static Integer func_c0576b0cbd344da6928a5afa203cc9ba(Integer s, Integer n, Integer r, Long sum, Integer q, Long[] a2, Integer p) {
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum = sum + a2[i];
    }
    int x2 = 0;
    int y = 0;
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        if ((tmp += a2[i].longValue()) * 3L <= sum) {
            x2 = i;
        }
        if (tmp * 3L > sum * 2L)
            continue;
        y = i;
    }
    for (int dx = -3; dx <= 3; ++dx) {
        for (int dy = -3; dy <= 3; ++dy) {
            int rx = x2 + dx;
            int ry = y + dy;
            if (rx < 0 || rx >= n || ry < 0 || ry >= n)
                continue;
            long sum1 = 0L;
            long sum2 = 0L;
            long sum3 = 0L;
            for (int i = 0; i < n; ++i) {
                if (i < rx) {
                    sum1 += a2[i].longValue();
                    continue;
                }
                if (i <= ry) {
                    sum2 += a2[i].longValue();
                    continue;
                }
                sum3 += a2[i].longValue();
            }
            Math.max(sum1, Math.max(sum2, sum3));
            sum.longValue();
            sum.longValue();
        }
    }
    return y;
}


****** Cluster 585 ******
public static Integer func_9c09f6a042a84a4994863e210c9a0974(Integer s, Integer n, Integer r, Integer q, Long[] a2, Integer p) {
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i].longValue();
    }
    int x2 = 0;
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        if ((tmp += a2[i].longValue()) * 3L > sum)
            continue;
        x2 = i;
    }
    return x2;
}
public static Integer func_2d9036b1a8814320a8c5f37b060a310b(Integer s, Integer n, Integer r, Integer q, Long[] a2, Integer p) {
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i].longValue();
    }
    int x2 = 0;
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        if ((tmp += a2[i].longValue()) * 3L > sum)
            continue;
        x2 = i;
    }
    return x2;
}
public static Integer func_93173640da7742a08be21a9169765b75(Integer s, Integer n, Integer r, Integer q, Long[] a2, Integer p) {
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i].longValue();
    }
    int x2 = 0;
    int y = 0;
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        if ((tmp += a2[i].longValue()) * 3L <= sum) {
            x2 = i;
        }
        if (tmp * 3L > sum * 2L)
            continue;
        y = i;
    }
    for (int dx = -3; dx <= 3; ++dx) {
        for (int dy = -3; dy <= 3; ++dy) {
            int rx = x2 + dx;
            int ry = y + dy;
            if (rx < 0 || rx >= n || ry < 0 || ry >= n)
                continue;
            long sum1 = 0L;
            long sum2 = 0L;
            long sum3 = 0L;
            for (int i = 0; i < n; ++i) {
                if (i < rx) {
                    sum1 += a2[i].longValue();
                    continue;
                }
                if (i <= ry) {
                    sum2 += a2[i].longValue();
                    continue;
                }
                sum3 += a2[i].longValue();
            }
            Math.max(sum1, Math.max(sum2, sum3));
        }
    }
    return x2;
}


****** Cluster 586 ******
public static Integer func_59ddcd76aeb84e20a9a84d70affc3952(Integer s, Integer n, Integer r, Integer q, Long[] a2, Integer p) {
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i].longValue();
    }
    int y = 0;
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        if ((tmp += a2[i].longValue()) * 3L > sum * 2L)
            continue;
        y = i;
    }
    return y;
}
public static Integer func_98e75f23e04146a3b747b1eb4500d573(Integer s, Integer n, Integer r, Integer q, Long[] a2, Integer p) {
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i].longValue();
    }
    int y = 0;
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        if ((tmp += a2[i].longValue()) * 3L > sum * 2L)
            continue;
        y = i;
    }
    return y;
}
public static Integer func_a05db62c323940358b3be3c4bfd8554c(Integer s, Integer n, Integer r, Integer q, Long[] a2, Integer p) {
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i].longValue();
    }
    int x2 = 0;
    int y = 0;
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        if ((tmp += a2[i].longValue()) * 3L <= sum) {
            x2 = i;
        }
        if (tmp * 3L > sum * 2L)
            continue;
        y = i;
    }
    for (int dx = -3; dx <= 3; ++dx) {
        for (int dy = -3; dy <= 3; ++dy) {
            int rx = x2 + dx;
            int ry = y + dy;
            if (rx < 0 || rx >= n || ry < 0 || ry >= n)
                continue;
            long sum1 = 0L;
            long sum2 = 0L;
            long sum3 = 0L;
            for (int i = 0; i < n; ++i) {
                if (i < rx) {
                    sum1 += a2[i].longValue();
                    continue;
                }
                if (i <= ry) {
                    sum2 += a2[i].longValue();
                    continue;
                }
                sum3 += a2[i].longValue();
            }
            Math.max(sum1, Math.max(sum2, sum3));
        }
    }
    return y;
}


****** Cluster 587 ******
public static Long func_42c22cd4e6794cf49e41a879d858d164$1858098a(Long sum, Integer i, Long tmp, Long[] a2) {
    tmp = tmp + a2[i];
    tmp.longValue();
    sum.longValue();
    return tmp;
}
public static Long func_94b158b55d0e4bb6b4c842828cb09f78$62723d63(Long sum, Integer i, Long tmp, Long[] a2) {
    tmp = tmp + a2[i];
    tmp.longValue();
    sum.longValue();
    tmp.longValue();
    sum.longValue();
    return tmp;
}


****** Cluster 588 ******
public static Integer func_c32a227015a5418eb1546f7b30149e58(Long sum, Integer i, Long tmp, Integer x2, Long[] a2) {
    if ((tmp = Long.valueOf(tmp + a2[i])) * 3L <= sum) {
        x2 = i;
    }
    return x2;
}
public static Integer func_0345df49e08744b5a0a1c0eec73d84a6$161dafe7(Long sum, Integer i, Long tmp, Integer x2, Long[] a2) {
    if ((tmp = Long.valueOf(tmp + a2[i])) * 3L <= sum) {
        x2 = i;
    }
    tmp.longValue();
    sum.longValue();
    return x2;
}
public static Integer func_a6992cda1e614b159bb008d82e69dfaf$161dafe7(Long sum, Integer i, Long tmp, Integer y, Long[] a2) {
    tmp = tmp + a2[i];
    tmp.longValue();
    sum.longValue();
    if (tmp * 3L <= sum * 2L) {
        y = i;
    }
    return y;
}


****** Cluster 589 ******
public static Long func_0e8c9da1d2c944e1bdb1b031a40b4862(Integer n, Long[] a2, Integer ry, Integer rx) {
    long sum1 = 0L;
    for (int i = 0; i < n; ++i) {
        if (i < rx) {
            sum1 += a2[i].longValue();
            continue;
        }
        if (i <= ry) {
            a2[i].longValue();
            continue;
        }
        a2[i].longValue();
    }
    return sum1;
}
public static Long func_1e40a1ac30994c2a88c37d57c9624475(Integer n, Long[] a2, Integer ry, Integer rx) {
    long sum1 = 0L;
    long sum2 = 0L;
    long sum3 = 0L;
    for (int i = 0; i < n; ++i) {
        if (i < rx) {
            sum1 += a2[i].longValue();
            continue;
        }
        if (i <= ry) {
            sum2 += a2[i].longValue();
            continue;
        }
        sum3 += a2[i].longValue();
    }
    Math.max(sum1, Math.max(sum2, sum3));
    return sum1;
}


****** Cluster 590 ******
public static Long func_16f833d56bce4a92ac8d7029ec05a805(Integer n, Long[] a2, Integer ry, Integer rx) {
    long sum2 = 0L;
    for (int i = 0; i < n; ++i) {
        if (i < rx) {
            a2[i].longValue();
            continue;
        }
        if (i <= ry) {
            sum2 += a2[i].longValue();
            continue;
        }
        a2[i].longValue();
    }
    return sum2;
}
public static Long func_c3ecdef47a704884a59299c5970af85e(Integer n, Long[] a2, Integer ry, Integer rx) {
    long sum1 = 0L;
    long sum2 = 0L;
    long sum3 = 0L;
    for (int i = 0; i < n; ++i) {
        if (i < rx) {
            sum1 += a2[i].longValue();
            continue;
        }
        if (i <= ry) {
            sum2 += a2[i].longValue();
            continue;
        }
        sum3 += a2[i].longValue();
    }
    Math.max(sum1, Math.max(sum2, sum3));
    return sum2;
}


****** Cluster 591 ******
public static Long func_66f4a54904a2441692048f223da4749b(Integer n, Long[] a2, Integer ry, Integer rx) {
    long sum3 = 0L;
    for (int i = 0; i < n; ++i) {
        if (i < rx) {
            a2[i].longValue();
            continue;
        }
        if (i <= ry) {
            a2[i].longValue();
            continue;
        }
        sum3 += a2[i].longValue();
    }
    return sum3;
}
public static Long func_8aef0aaa40bf44859e5d82b8aea2d0d5(Integer n, Long[] a2, Integer ry, Integer rx) {
    long sum1 = 0L;
    long sum2 = 0L;
    long sum3 = 0L;
    for (int i = 0; i < n; ++i) {
        if (i < rx) {
            sum1 += a2[i].longValue();
            continue;
        }
        if (i <= ry) {
            sum2 += a2[i].longValue();
            continue;
        }
        sum3 += a2[i].longValue();
    }
    Math.max(sum1, Math.max(sum2, sum3));
    return sum3;
}


****** Cluster 592 ******
public static Integer func_983525a280824d209f0daa20374d2e6b(Integer s, Integer r, Integer n, Integer q, Integer p) {
    long[] a2 = new long[n.intValue()];
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i];
    }
    int x2 = 0;
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        if ((tmp += a2[i]) * 3L > sum)
            continue;
        x2 = i;
    }
    return x2;
}
public static Integer func_8e4d8cff31404b0480771851895ae38e(Integer s, Integer r, Integer n, Integer q, Integer p) {
    long[] a2 = new long[n.intValue()];
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i];
    }
    int x2 = 0;
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        if ((tmp += a2[i]) * 3L > sum)
            continue;
        x2 = i;
    }
    return x2;
}
public static Integer func_1ff8f38c6f9548a79756c4e42b8a9a90(Integer s, Integer r, Integer n, Integer q, Integer p) {
    long[] a2 = new long[n.intValue()];
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i];
    }
    int x2 = 0;
    int y = 0;
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        if ((tmp += a2[i]) * 3L <= sum) {
            x2 = i;
        }
        if (tmp * 3L > sum * 2L)
            continue;
        y = i;
    }
    for (int dx = -3; dx <= 3; ++dx) {
        for (int dy = -3; dy <= 3; ++dy) {
            int rx = x2 + dx;
            int ry = y + dy;
            if (rx < 0 || rx >= n || ry < 0 || ry >= n)
                continue;
            long sum1 = 0L;
            long sum2 = 0L;
            long sum3 = 0L;
            for (int i = 0; i < n; ++i) {
                if (i < rx) {
                    sum1 += a2[i];
                    continue;
                }
                if (i <= ry) {
                    sum2 += a2[i];
                    continue;
                }
                sum3 += a2[i];
            }
            Math.max(sum1, Math.max(sum2, sum3));
        }
    }
    return x2;
}


****** Cluster 593 ******
public static Integer func_7e5c9af2a79a42aba17fe92d4c915663(Integer s, Integer r, Integer n, Integer q, Integer p) {
    long[] a2 = new long[n.intValue()];
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i];
    }
    int y = 0;
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        if ((tmp += a2[i]) * 3L > sum * 2L)
            continue;
        y = i;
    }
    return y;
}
public static Integer func_22e817ab07bb4099add60b67560f5fd8(Integer s, Integer r, Integer n, Integer q, Integer p) {
    long[] a2 = new long[n.intValue()];
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i];
    }
    int y = 0;
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        if ((tmp += a2[i]) * 3L > sum * 2L)
            continue;
        y = i;
    }
    return y;
}
public static Integer func_e2e3101867e546c79673214b35c1993c(Integer s, Integer r, Integer n, Integer q, Integer p) {
    long[] a2 = new long[n.intValue()];
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        a2[i] = ((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue();
        sum += a2[i];
    }
    int x2 = 0;
    int y = 0;
    long tmp = 0L;
    for (int i = 0; i < n; ++i) {
        if ((tmp += a2[i]) * 3L <= sum) {
            x2 = i;
        }
        if (tmp * 3L > sum * 2L)
            continue;
        y = i;
    }
    for (int dx = -3; dx <= 3; ++dx) {
        for (int dy = -3; dy <= 3; ++dy) {
            int rx = x2 + dx;
            int ry = y + dy;
            if (rx < 0 || rx >= n || ry < 0 || ry >= n)
                continue;
            long sum1 = 0L;
            long sum2 = 0L;
            long sum3 = 0L;
            for (int i = 0; i < n; ++i) {
                if (i < rx) {
                    sum1 += a2[i];
                    continue;
                }
                if (i <= ry) {
                    sum2 += a2[i];
                    continue;
                }
                sum3 += a2[i];
            }
            Math.max(sum1, Math.max(sum2, sum3));
        }
    }
    return y;
}


****** Cluster 594 ******
public static Integer func_1baf79c956994af092484f9a8ddf62df(Integer n, Long[] sum) {
    long ans = sum[n];
    int l = 1;
    for (int i = 2; i <= n; ++i) {
        while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
            ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
            ++l;
        }
        ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
    }
    return l;
}
public static Integer func_54072f0309e44237a4b01ca673d7c99e(Integer n, Long[] sum) {
    long ans = sum[n];
    int l = 1;
    for (int i = 2; i <= n; ++i) {
        while (l + 1 < i && Math.max(sum[i] - sum[l], sum[l]) > Math.max(sum[i] - sum[l + 1], sum[l + 1])) {
            ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
            ++l;
        }
        ans = Math.min(ans, Math.max(sum[n] - sum[i], Math.max(sum[i] - sum[l], sum[l])));
    }
    sum[n].longValue();
    return l;
}


****** Cluster 595 ******
public static Long func_e3169779ef4a43a994c9016669a352ea(Long q, Long[] arr, Long[] cum, Long p, Integer N, Long r, Long s) {
    long tot = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        cum[i] = i > 0 ? Long.valueOf(cum[i - 1] + arr[i]) : arr[i];
        tot += arr[i].longValue();
    }
    return tot;
}
public static Long func_30dd7f2d18614e2bb50f573a3bc43ff6(Long q, Long[] arr, Long[] cum, Long p, Integer N, Long r, Long s) {
    long tot = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        cum[i] = i > 0 ? Long.valueOf(cum[i - 1] + arr[i]) : arr[i];
        tot += arr[i].longValue();
    }
    return tot;
}
public static Long func_563fde6421eb49f8b84b73ec5b780717(Long q, Long[] arr, Long[] cum, Long p, Integer N, Long r, Long s) {
    long tot = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        cum[i] = i > 0 ? Long.valueOf(cum[i - 1] + arr[i]) : arr[i];
        tot += arr[i].longValue();
    }
    return tot;
}


****** Cluster 596 ******
public static Long func_d7a0ce9744ed4a72ac3e7f3398150012(Long q, Long[] arr, Long[] cum, Long p, Integer N, Long r, Long tot, Long s) {
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        cum[i] = i > 0 ? Long.valueOf(cum[i - 1] + arr[i]) : arr[i];
        tot = tot + arr[i];
    }
    return tot;
}
public static Long func_e11a0eceab7349379efdd01ac7ddb06d(Long q, Long[] arr, Long[] cum, Long p, Integer N, Long r, Long tot, Long s) {
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        cum[i] = i > 0 ? Long.valueOf(cum[i - 1] + arr[i]) : arr[i];
        tot = tot + arr[i];
    }
    tot.longValue();
    return tot;
}


****** Cluster 597 ******
public static Long func_97c3ce3e775145bd8302b13a5f675685(Long q, Long[] arr, Long p, Integer N, Long r, Long s) {
    long[] cum = new long[N.intValue()];
    long tot = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        cum[i] = i > 0 ? cum[i - 1] + arr[i] : arr[i];
        tot += arr[i].longValue();
    }
    return tot;
}
public static Long func_ad3524c3d85043328703473a932e1d7b(Long q, Long[] arr, Long p, Integer N, Long r, Long s) {
    long[] cum = new long[N.intValue()];
    long tot = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        cum[i] = i > 0 ? cum[i - 1] + arr[i] : arr[i];
        tot += arr[i].longValue();
    }
    return tot;
}
public static Long func_ad804978b4254cccbcf26adbbb85002d(Long q, Long[] arr, Long p, Integer N, Long r, Long s) {
    long[] cum = new long[N.intValue()];
    long tot = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        cum[i] = i > 0 ? cum[i - 1] + arr[i] : arr[i];
        tot += arr[i].longValue();
    }
    return tot;
}


****** Cluster 598 ******
public static Long func_32b3bb0dd5224377a488061c7caace22(Long q, Long p, Integer N, Long r, Long s) {
    long[] arr = new long[N.intValue()];
    long[] cum = new long[N.intValue()];
    long tot = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        cum[i] = i > 0 ? cum[i - 1] + arr[i] : arr[i];
        tot += arr[i];
    }
    return tot;
}
public static Long func_9901728549b44d85a8787004b2d5f761(Long q, Long p, Integer N, Long r, Long s) {
    long[] arr = new long[N.intValue()];
    long[] cum = new long[N.intValue()];
    long tot = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        cum[i] = i > 0 ? cum[i - 1] + arr[i] : arr[i];
        tot += arr[i];
    }
    return tot;
}
public static Long func_ad605ba71da0476eacb5c4cc26a815d5(Long q, Long p, Integer N, Long r, Long s) {
    long[] arr = new long[N.intValue()];
    long[] cum = new long[N.intValue()];
    long tot = 0L;
    for (int i = 0; i < N; ++i) {
        arr[i] = ((long) i * p + q) % r + s;
        cum[i] = i > 0 ? cum[i - 1] + arr[i] : arr[i];
        tot += arr[i];
    }
    return tot;
}


****** Cluster 599 ******
public static Long func_1e3bcbab02174c97926e6fa4b3726342(Integer n, Integer r, Integer p, Integer q, Integer s) {
    int[] values = new int[n.intValue()];
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        values[i] = (int) (((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue());
        sum += (long) values[i];
    }
    long res = Integer.MIN_VALUE;
    long leftSum = 0L;
    long middle = values[0];
    long rightSum = sum - middle;
    int b = 0;
    for (int a2 = 0; a2 < n; ++a2) {
        while (b + 1 != n && (b < a2 || middle + (long) values[b + 1] <= rightSum - (long) values[b + 1])) {
            middle += (long) values[b + 1];
            rightSum -= (long) values[b + 1];
            ++b;
        }
        res = Math.max(res, sum - Math.max(leftSum, Math.max(rightSum, middle)));
        if (b + 1 < n) {
            res = Math.max(res, sum - Math.max(leftSum, Math.max(rightSum - (long) values[b + 1], middle + (long) values[b + 1])));
        }
        leftSum += (long) values[a2];
        middle -= (long) values[a2];
    }
    return sum;
}
public static Long func_4e6f1212db214ab09908422f122e33fd(Integer n, Integer r, Integer p, Integer q, Integer s) {
    int[] values = new int[n.intValue()];
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        values[i] = (int) (((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue());
        sum += (long) values[i];
    }
    long res = Integer.MIN_VALUE;
    long leftSum = 0L;
    long middle = values[0];
    long rightSum = sum - middle;
    int b = 0;
    for (int a2 = 0; a2 < n; ++a2) {
        while (b + 1 != n && (b < a2 || middle + (long) values[b + 1] <= rightSum - (long) values[b + 1])) {
            middle += (long) values[b + 1];
            rightSum -= (long) values[b + 1];
            ++b;
        }
        res = Math.max(res, sum - Math.max(leftSum, Math.max(rightSum, middle)));
        if (b + 1 < n) {
            res = Math.max(res, sum - Math.max(leftSum, Math.max(rightSum - (long) values[b + 1], middle + (long) values[b + 1])));
        }
        leftSum += (long) values[a2];
        middle -= (long) values[a2];
    }
    return leftSum;
}
public static Long func_8e1c0dd66db144beba105c196da3f8c3(Integer n, Integer r, Integer p, Integer q, Integer s) {
    int[] values = new int[n.intValue()];
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        values[i] = (int) (((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue());
        sum += (long) values[i];
    }
    return sum;
}
public static Long func_c9df6a29354146b2884e60d942e2a34a(Integer n, Integer r, Integer p, Integer q, Integer s) {
    int[] values = new int[n.intValue()];
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        values[i] = (int) (((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue());
        sum += (long) values[i];
    }
    return sum;
}


****** Cluster 600 ******
public static Long func_8d454893a6b1411fb82962cfb9a111ef(Long sum, Integer n, Integer r, Integer p, Integer[] values, Integer q, Integer s) {
    for (int i = 0; i < n; ++i) {
        values[i] = (int) (((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue());
        sum = sum + (long) values[i].intValue();
    }
    return sum;
}
public static Long func_70244aea080341b3b63cb44d9ea9517e(Long sum, Integer n, Integer r, Integer p, Integer[] values, Integer q, Integer s) {
    for (int i = 0; i < n; ++i) {
        values[i] = (int) (((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue());
        sum = sum + (long) values[i].intValue();
    }
    values[0].intValue();
    sum.longValue();
    return sum;
}
public static Long func_6c23419b24e042f8932eb874ceca3c5d(Long sum, Integer n, Integer r, Integer p, Integer[] values, Integer q, Integer s) {
    for (int i = 0; i < n; ++i) {
        values[i] = (int) (((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue());
        sum = sum + (long) values[i].intValue();
    }
    long res = Integer.MIN_VALUE;
    long leftSum = 0L;
    long middle = values[0].intValue();
    long rightSum = sum - middle;
    int b = 0;
    for (int a2 = 0; a2 < n; ++a2) {
        while (b + 1 != n && (b < a2 || middle + (long) values[b + 1].intValue() <= rightSum - (long) values[b + 1].intValue())) {
            middle += (long) values[b + 1].intValue();
            rightSum -= (long) values[b + 1].intValue();
            ++b;
        }
        res = Math.max(res, sum - Math.max(leftSum, Math.max(rightSum, middle)));
        if (b + 1 < n) {
            res = Math.max(res, sum - Math.max(leftSum, Math.max(rightSum - (long) values[b + 1].intValue(), middle + (long) values[b + 1].intValue())));
        }
        leftSum += (long) values[a2].intValue();
        middle -= (long) values[a2].intValue();
    }
    return sum;
}


****** Cluster 601 ******
public static Long func_333c7b71042b46a593250a3fc199d83d(Long middle, Integer[] values, Long rightSum, Integer b) {
    middle = middle + (long) values[b + 1].intValue();
    Long.valueOf(rightSum - (long) values[b + 1].intValue());
    return middle;
}
public static Long func_2debe9aa46f6439fbe2c9147bcd931ff(Long middle, Integer[] values, Long rightSum, Integer b) {
    middle = middle + (long) values[b + 1].intValue();
    Long.valueOf(rightSum - (long) values[b + 1].intValue());
    Integer.valueOf(b + 1);
    return middle;
}


****** Cluster 602 ******
public static Long func_fba75c4f1aa24c0193c2dedc34305e8c(Long middle, Integer[] values, Long rightSum, Integer b) {
    Long.valueOf(middle + (long) values[b + 1].intValue());
    rightSum = rightSum - (long) values[b + 1].intValue();
    return rightSum;
}
public static Long func_5261d6739d474a3c96678ccda70a2fb8(Long middle, Integer[] values, Long rightSum, Integer b) {
    Long.valueOf(middle + (long) values[b + 1].intValue());
    rightSum = rightSum - (long) values[b + 1].intValue();
    Integer.valueOf(b + 1);
    return rightSum;
}


****** Cluster 603 ******
public static Long func_1d65fd7774af452c9ff317fcd40e3665(Long res, Long sum, Integer n, Long middle, Long leftSum, Integer a2, Integer[] values, Long rightSum, Integer b) {
    while (b + 1 != n && (b < a2 || middle + (long) values[b + 1].intValue() <= rightSum - (long) values[b + 1].intValue())) {
        middle = middle + (long) values[b + 1].intValue();
        rightSum = rightSum - (long) values[b + 1].intValue();
        b = b + 1;
    }
    res = Math.max(res, sum - Math.max(leftSum, Math.max(rightSum, middle)));
    return res;
}
public static Long func_ca6dde2ea20345a7b35ad83c02812cce(Long res, Long sum, Integer n, Long middle, Long leftSum, Integer a2, Integer[] values, Long rightSum, Integer b) {
    while (b + 1 != n && (b < a2 || middle + (long) values[b + 1].intValue() <= rightSum - (long) values[b + 1].intValue())) {
        middle = middle + (long) values[b + 1].intValue();
        rightSum = rightSum - (long) values[b + 1].intValue();
        b = b + 1;
    }
    res = Math.max(res, sum - Math.max(leftSum, Math.max(rightSum, middle)));
    if (b + 1 < n) {
        res = Math.max(res, sum - Math.max(leftSum, Math.max(rightSum - (long) values[b + 1].intValue(), middle + (long) values[b + 1].intValue())));
    }
    return res;
}


****** Cluster 604 ******
public static Long func_0e8eab2c6c8644bf9b50ef3fedf4ff5c(Long res, Long sum, Integer n, Long middle, Long leftSum, Integer a2, Integer[] values, Long rightSum, Integer b) {
    while (b + 1 != n && (b < a2 || middle + (long) values[b + 1].intValue() <= rightSum - (long) values[b + 1].intValue())) {
        middle = middle + (long) values[b + 1].intValue();
        rightSum = rightSum - (long) values[b + 1].intValue();
        b = b + 1;
    }
    Long.valueOf(Math.max(res, sum - Math.max(leftSum, Math.max(rightSum, middle))));
    return middle;
}
public static Long func_6b00ae513e7848c4a699cd282749325b(Long res, Long sum, Integer n, Long middle, Long leftSum, Integer a2, Integer[] values, Long rightSum, Integer b) {
    while (b + 1 != n && (b < a2 || middle + (long) values[b + 1].intValue() <= rightSum - (long) values[b + 1].intValue())) {
        middle = middle + (long) values[b + 1].intValue();
        rightSum = rightSum - (long) values[b + 1].intValue();
        b = b + 1;
    }
    res = Math.max(res, sum - Math.max(leftSum, Math.max(rightSum, middle)));
    if (b + 1 < n) {
        Long.valueOf(Math.max(res, sum - Math.max(leftSum, Math.max(rightSum - (long) values[b + 1].intValue(), middle + (long) values[b + 1].intValue()))));
    }
    return middle;
}


****** Cluster 605 ******
public static Long func_128d966d3cb94688b97bccf94592b656(Long res, Long sum, Integer n, Long middle, Long leftSum, Integer a2, Integer[] values, Long rightSum, Integer b) {
    while (b + 1 != n && (b < a2 || middle + (long) values[b + 1].intValue() <= rightSum - (long) values[b + 1].intValue())) {
        middle = middle + (long) values[b + 1].intValue();
        rightSum = rightSum - (long) values[b + 1].intValue();
        b = b + 1;
    }
    Long.valueOf(Math.max(res, sum - Math.max(leftSum, Math.max(rightSum, middle))));
    return rightSum;
}
public static Long func_a4d170875a554944acb15cbda4f9afb1(Long res, Long sum, Integer n, Long middle, Long leftSum, Integer a2, Integer[] values, Long rightSum, Integer b) {
    while (b + 1 != n && (b < a2 || middle + (long) values[b + 1].intValue() <= rightSum - (long) values[b + 1].intValue())) {
        middle = middle + (long) values[b + 1].intValue();
        rightSum = rightSum - (long) values[b + 1].intValue();
        b = b + 1;
    }
    res = Math.max(res, sum - Math.max(leftSum, Math.max(rightSum, middle)));
    if (b + 1 < n) {
        Long.valueOf(Math.max(res, sum - Math.max(leftSum, Math.max(rightSum - (long) values[b + 1].intValue(), middle + (long) values[b + 1].intValue()))));
    }
    return rightSum;
}


****** Cluster 606 ******
public static Long func_ca5cedf6e95e43699ca95c45ff47e2db(Long res, Long sum, Integer n, Long middle, Long leftSum, Integer[] values, Integer a2, Long rightSum, Integer b) {
    if (b + 1 < n) {
        res = Math.max(res, sum - Math.max(leftSum, Math.max(rightSum - (long) values[b + 1].intValue(), middle + (long) values[b + 1].intValue())));
    }
    Long.valueOf(leftSum + (long) values[a2].intValue());
    return res;
}
public static Long func_a9e87a19384542199228bab08d8be02d(Long res, Long sum, Integer n, Long middle, Long leftSum, Integer[] values, Integer a2, Long rightSum, Integer b) {
    res = Math.max(res, sum - Math.max(leftSum, Math.max(rightSum, middle)));
    if (b + 1 < n) {
        res = Math.max(res, sum - Math.max(leftSum, Math.max(rightSum - (long) values[b + 1].intValue(), middle + (long) values[b + 1].intValue())));
    }
    Long.valueOf(leftSum + (long) values[a2].intValue());
    return res;
}
public static Long func_9b7fcfca225440b3b9492bbeaa7091cf(Long res, Long sum, Integer n, Long middle, Long leftSum, Integer[] values, Integer a2, Long rightSum, Integer b) {
    if (b + 1 < n) {
        res = Math.max(res, sum - Math.max(leftSum, Math.max(rightSum - (long) values[b + 1].intValue(), middle + (long) values[b + 1].intValue())));
    }
    Long.valueOf(leftSum + (long) values[a2].intValue());
    Long.valueOf(middle - (long) values[a2].intValue());
    return res;
}
public static Long func_35b6c9ca2a314bc69c6a698beba775d9(Long res, Long sum, Integer n, Long middle, Long leftSum, Integer[] values, Integer a2, Long rightSum, Integer b) {
    res = Math.max(res, sum - Math.max(leftSum, Math.max(rightSum, middle)));
    if (b + 1 < n) {
        res = Math.max(res, sum - Math.max(leftSum, Math.max(rightSum - (long) values[b + 1].intValue(), middle + (long) values[b + 1].intValue())));
    }
    Long.valueOf(leftSum + (long) values[a2].intValue());
    Long.valueOf(middle - (long) values[a2].intValue());
    return res;
}


****** Cluster 607 ******
public static Long func_cbb9dcc2dd5f499fa46d4ea5589d4b6a(Long res, Long sum, Integer n, Long middle, Long leftSum, Integer[] values, Integer a2, Long rightSum, Integer b) {
    if (b + 1 < n) {
        Long.valueOf(Math.max(res, sum - Math.max(leftSum, Math.max(rightSum - (long) values[b + 1].intValue(), middle + (long) values[b + 1].intValue()))));
    }
    leftSum = leftSum + (long) values[a2].intValue();
    return leftSum;
}
public static Long func_e0cb06ca441f422faf2b4bcc150809df(Long res, Long sum, Integer n, Long middle, Long leftSum, Integer[] values, Integer a2, Long rightSum, Integer b) {
    res = Math.max(res, sum - Math.max(leftSum, Math.max(rightSum, middle)));
    if (b + 1 < n) {
        Long.valueOf(Math.max(res, sum - Math.max(leftSum, Math.max(rightSum - (long) values[b + 1].intValue(), middle + (long) values[b + 1].intValue()))));
    }
    leftSum = leftSum + (long) values[a2].intValue();
    return leftSum;
}
public static Long func_85310f59e6b54ea78ab08d5a07913bc8(Long res, Long sum, Integer n, Long middle, Long leftSum, Integer[] values, Integer a2, Long rightSum, Integer b) {
    if (b + 1 < n) {
        Long.valueOf(Math.max(res, sum - Math.max(leftSum, Math.max(rightSum - (long) values[b + 1].intValue(), middle + (long) values[b + 1].intValue()))));
    }
    leftSum = leftSum + (long) values[a2].intValue();
    Long.valueOf(middle - (long) values[a2].intValue());
    return leftSum;
}
public static Long func_41faea8f86a54f1c93994b56006bb520(Long res, Long sum, Integer n, Long middle, Long leftSum, Integer[] values, Integer a2, Long rightSum, Integer b) {
    res = Math.max(res, sum - Math.max(leftSum, Math.max(rightSum, middle)));
    if (b + 1 < n) {
        Long.valueOf(Math.max(res, sum - Math.max(leftSum, Math.max(rightSum - (long) values[b + 1].intValue(), middle + (long) values[b + 1].intValue()))));
    }
    leftSum = leftSum + (long) values[a2].intValue();
    Long.valueOf(middle - (long) values[a2].intValue());
    return leftSum;
}


****** Cluster 608 ******
public static Long func_3043ec39849f4b95b80f5211ff32052b(Long res, Long sum, Integer n, Long middle, Long leftSum, Integer[] values, Integer a2, Long rightSum, Integer b) {
    if (b + 1 < n) {
        Long.valueOf(Math.max(res, sum - Math.max(leftSum, Math.max(rightSum - (long) values[b + 1].intValue(), middle + (long) values[b + 1].intValue()))));
    }
    Long.valueOf(leftSum + (long) values[a2].intValue());
    middle = middle - (long) values[a2].intValue();
    return middle;
}
public static Long func_5ac124d6a0314276b24bcb6dcb0c60e1(Long res, Long sum, Integer n, Long middle, Long leftSum, Integer[] values, Integer a2, Long rightSum, Integer b) {
    res = Math.max(res, sum - Math.max(leftSum, Math.max(rightSum, middle)));
    if (b + 1 < n) {
        Long.valueOf(Math.max(res, sum - Math.max(leftSum, Math.max(rightSum - (long) values[b + 1].intValue(), middle + (long) values[b + 1].intValue()))));
    }
    Long.valueOf(leftSum + (long) values[a2].intValue());
    middle = middle - (long) values[a2].intValue();
    return middle;
}


****** Cluster 609 ******
public static Long func_1f04590b76c744f5a31dc2afe880e1d2(Integer n, Integer r, Integer p, Integer[] values, Integer q, Integer s) {
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        values[i] = (int) (((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue());
        sum += (long) values[i].intValue();
    }
    return sum;
}
public static Long func_6fe1be1fdea94430b62d4b4a6d043c8a(Integer n, Integer r, Integer p, Integer[] values, Integer q, Integer s) {
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        values[i] = (int) (((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue());
        sum += (long) values[i].intValue();
    }
    values[0].intValue();
    return sum;
}
public static Long func_e19cd2a2b6b943ffbc3cb7369cb50a0f(Integer n, Integer r, Integer p, Integer[] values, Integer q, Integer s) {
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        values[i] = (int) (((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue());
        sum += (long) values[i].intValue();
    }
    long res = Integer.MIN_VALUE;
    long leftSum = 0L;
    long middle = values[0].intValue();
    long rightSum = sum - middle;
    int b = 0;
    for (int a2 = 0; a2 < n; ++a2) {
        while (b + 1 != n && (b < a2 || middle + (long) values[b + 1].intValue() <= rightSum - (long) values[b + 1].intValue())) {
            middle += (long) values[b + 1].intValue();
            rightSum -= (long) values[b + 1].intValue();
            ++b;
        }
        res = Math.max(res, sum - Math.max(leftSum, Math.max(rightSum, middle)));
        if (b + 1 < n) {
            res = Math.max(res, sum - Math.max(leftSum, Math.max(rightSum - (long) values[b + 1].intValue(), middle + (long) values[b + 1].intValue())));
        }
        leftSum += (long) values[a2].intValue();
        middle -= (long) values[a2].intValue();
    }
    return sum;
}
public static Long func_03086c960e8d41ab8783853c888b0d36(Integer n, Integer r, Integer p, Integer[] values, Integer q, Integer s) {
    long sum = 0L;
    for (int i = 0; i < n; ++i) {
        values[i] = (int) (((long) i * (long) p.intValue() + (long) q.intValue()) % (long) r.intValue() + (long) s.intValue());
        sum += (long) values[i].intValue();
    }
    long res = Integer.MIN_VALUE;
    long leftSum = 0L;
    long middle = values[0].intValue();
    long rightSum = sum - middle;
    int b = 0;
    for (int a2 = 0; a2 < n; ++a2) {
        while (b + 1 != n && (b < a2 || middle + (long) values[b + 1].intValue() <= rightSum - (long) values[b + 1].intValue())) {
            middle += (long) values[b + 1].intValue();
            rightSum -= (long) values[b + 1].intValue();
            ++b;
        }
        res = Math.max(res, sum - Math.max(leftSum, Math.max(rightSum, middle)));
        if (b + 1 < n) {
            res = Math.max(res, sum - Math.max(leftSum, Math.max(rightSum - (long) values[b + 1].intValue(), middle + (long) values[b + 1].intValue())));
        }
        leftSum += (long) values[a2].intValue();
        middle -= (long) values[a2].intValue();
    }
    return leftSum;
}


****** Cluster 610 ******
public static double func_e9618ddbc34c47cb9a4d3707e510897c(Double res, Double d1, Double want, Double k) {
    double temp = (d1 + (d1 + k * res)) * 0.5 * res;
    if (Math.abs(temp - want) > 1.0E-5) {
        System.err.println("WTF ");
        System.err.println(temp + " = " + want + " " + res);
    }
    return res;
}
def func_71637a6ffb12471fbd846d119b4e9e7f(h1, width, h2, area_from_left):
    qa = (h2 - h1) / (2 * width)
    qb = h1
    qc = -area_from_left
    return qb



****** Cluster 611 ******
public static Double func_e26e706f834b423b8547368e05ae6e42(Double res, Double d1, Double want, Double k, Double t, Double dx) {
    while (res < -1.0E-6 || res > dx + 1.0E-6) {
        res = (-t.doubleValue() - d1) / k;
        System.err.println("ASDSAD");
    }
    double temp = (d1 + (d1 + k * res)) * 0.5 * res;
    if (Math.abs(temp - want) > 1.0E-5) {
        System.err.println("WTF ");
        System.err.println(temp + " = " + want + " " + res);
    }
    return temp;
}
public static double func_21fb3143319c4e84b3a8f036fd1d9f6b(Double res, Double d1, Double want, Double k, Double t, Double dx) {
    while (res < -1.0E-6 || res > dx + 1.0E-6) {
        res = (-t.doubleValue() - d1) / k;
        System.err.println("ASDSAD");
    }
    double temp = (d1 + (d1 + k * res)) * 0.5 * res;
    if (Math.abs(temp - want) > 1.0E-5) {
        System.err.println("WTF ");
        System.err.println(temp + " = " + want + " " + res);
    }
    return res;
}


****** Cluster 612 ******
public static Double func_9a90bdabaaa64cdf875589a70c134cc1(Double d1, Double want, Double k, Double t, Double dx) {
    double res = (t - d1) / k;
    while (res < -1.0E-6 || res > dx + 1.0E-6) {
        res = (-t.doubleValue() - d1) / k;
        System.err.println("ASDSAD");
    }
    double temp = (d1 + (d1 + k * res)) * 0.5 * res;
    if (Math.abs(temp - want) > 1.0E-5) {
        System.err.println("WTF ");
        System.err.println(temp + " = " + want + " " + res);
    }
    return res;
}
public static Double func_9f5e3a0c9dda441dbc81d69ec26adafe(Double d1, Double want, Double k, Double t, Double dx) {
    double res = (t - d1) / k;
    while (res < -1.0E-6 || res > dx + 1.0E-6) {
        res = (-t.doubleValue() - d1) / k;
        System.err.println("ASDSAD");
    }
    double temp = (d1 + (d1 + k * res)) * 0.5 * res;
    if (Math.abs(temp - want) > 1.0E-5) {
        System.err.println("WTF ");
        System.err.println(temp + " = " + want + " " + res);
    }
    return temp;
}
public static double func_e311e5619d1d482db4914cbfb981cd76(Double d1, Double want, Double k, Double t, Double dx) {
    double res = (t - d1) / k;
    while (res < -1.0E-6 || res > dx + 1.0E-6) {
        res = (-t.doubleValue() - d1) / k;
        System.err.println("ASDSAD");
    }
    double temp = (d1 + (d1 + k * res)) * 0.5 * res;
    if (Math.abs(temp - want) > 1.0E-5) {
        System.err.println("WTF ");
        System.err.println(temp + " = " + want + " " + res);
    }
    return res;
}


****** Cluster 613 ******
public static Double func_e74d55992d9240e4bc754a575f091e48(Double d1, Double want, Double k, Double dx) {
    double t = Math.sqrt(Math.max(d1 * d1 + 2.0 * k * want, 0.0));
    double res = (t - d1) / k;
    while (res < -1.0E-6 || res > dx + 1.0E-6) {
        res = (-t - d1) / k;
        System.err.println("ASDSAD");
    }
    double temp = (d1 + (d1 + k * res)) * 0.5 * res;
    if (Math.abs(temp - want) > 1.0E-5) {
        System.err.println("WTF ");
        System.err.println(temp + " = " + want + " " + res);
    }
    return res;
}
public static Double func_eb71195be30543d4b740438069374f9d(Double d1, Double want, Double k, Double dx) {
    double t = Math.sqrt(Math.max(d1 * d1 + 2.0 * k * want, 0.0));
    double res = (t - d1) / k;
    while (res < -1.0E-6 || res > dx + 1.0E-6) {
        res = (-t - d1) / k;
        System.err.println("ASDSAD");
    }
    double temp = (d1 + (d1 + k * res)) * 0.5 * res;
    if (Math.abs(temp - want) > 1.0E-5) {
        System.err.println("WTF ");
        System.err.println(temp + " = " + want + " " + res);
    }
    return temp;
}
public static Double func_71883e264f8a4e0f8bf3b1b0e6d2fb9d(Double d1, Double want, Double k, Double dx) {
    double t = Math.sqrt(Math.max(d1 * d1 + 2.0 * k * want, 0.0));
    double res = (t - d1) / k;
    while (res < -1.0E-6 || res > dx + 1.0E-6) {
        res = (-t - d1) / k;
        System.err.println("ASDSAD");
    }
    double temp = (d1 + (d1 + k * res)) * 0.5 * res;
    if (Math.abs(temp - want) > 1.0E-5) {
        System.err.println("WTF ");
        System.err.println(temp + " = " + want + " " + res);
    }
    return t;
}
public static double func_acf0b080b22f49eb8c1bdc81564a8f3c(Double d1, Double want, Double k, Double dx) {
    double t = Math.sqrt(Math.max(d1 * d1 + 2.0 * k * want, 0.0));
    double res = (t - d1) / k;
    while (res < -1.0E-6 || res > dx + 1.0E-6) {
        res = (-t - d1) / k;
        System.err.println("ASDSAD");
    }
    double temp = (d1 + (d1 + k * res)) * 0.5 * res;
    if (Math.abs(temp - want) > 1.0E-5) {
        System.err.println("WTF ");
        System.err.println(temp + " = " + want + " " + res);
    }
    return res;
}


****** Cluster 614 ******
public static Double func_9f7540f54d0e46c7b3d34abb1c246185(Double y0, Double total, Double xx, Double yy, Double x0) {
    total = total + (x0 + xx) * (y0 - yy);
    return total;
}
public static Double func_5df00def6ee343a194b43ac35515cf28(Double y0, Double total, Double xx, Double yy, Double x0) {
    total = total + (x0 + xx) * (y0 - yy);
    return total;
}


****** Cluster 615 ******
public static Double func_ec5ed55b2e9c4d7fb76e78ad1f20bb21(Double y0, Double total, Double xx, Double yy, Double x0) {
    Double.valueOf(total + (x0 + xx) * (y0 - yy));
    x0 = xx;
    return x0;
}
public static Double func_5cb3495770244a0790ba59bcb8ded511(Double y0, Double total, Double xx, Double yy, Double x0) {
    Double.valueOf(total + (x0 + xx) * (y0 - yy));
    x0 = xx;
    return x0;
}


****** Cluster 616 ******
public static Double func_261ef4ddd3244d7aab60834d57d87582(Integer y, Integer x0, Integer y0, Integer x2, Double[] low) {
    double k = 1.0 * (double) (y - y0) / (double) (x2 - x0);
    for (int j = x0.intValue() + 1; j <= x2; ++j) {
        low[j] = k * (double) (j - x0) + (double) y0.intValue();
    }
    return k;
}
public static Double func_68e7cda3999947309d7d04c60f74074e(Integer y, Integer x0, Integer y0, Integer x2, Double[] low) {
    double k = 1.0 * (double) (y - y0) / (double) (x2 - x0);
    for (int j = x0.intValue() + 1; j <= x2; ++j) {
        low[j] = k * (double) (j - x0) + (double) y0.intValue();
    }
    return k;
}
public static Double func_874bbff1b88146b0b1aa647e2fe05914(Integer y, Integer x0, Integer y0, Integer x2, Double[] low) {
    double k = 1.0 * (double) (y - y0) / (double) (x2 - x0);
    for (int j = x0.intValue() + 1; j <= x2; ++j) {
        low[j] = k * (double) (j - x0) + (double) y0.intValue();
    }
    return k;
}


****** Cluster 617 ******
public static Integer func_e19152c276de4117a93a8b3644185d14(Double k, Integer x0, Integer y0, Integer x2, Double[] low) {
    for (int j = x0.intValue() + 1; j <= x2; ++j) {
        low[j] = k * (double) (j - x0) + (double) y0.intValue();
    }
    x0 = x2;
    return x0;
}
public static Integer func_14b0374466e84adf9af5720beb19dd66$6e2b3ad9(Double k, Integer x0, Integer y0, Integer x2, Double[] low) {
    for (int j = x0.intValue() + 1; j <= x2; ++j) {
        low[j] = k * (double) (j - x0) + (double) y0.intValue();
    }
    x0 = x2;
    return x0;
}


****** Cluster 618 ******
public static Integer func_020f9c702aec4f11910423ccd69ca730(Integer y, Integer x0, Integer y0, Integer x2, Double[] low) {
    double k = 1.0 * (double) (y - y0) / (double) (x2 - x0);
    for (int j = x0.intValue() + 1; j <= x2; ++j) {
        low[j] = k * (double) (j - x0) + (double) y0.intValue();
    }
    x0 = x2;
    return x0;
}
public static Integer func_28d8963a361748a19eea9d7b105fc59f(Integer y, Integer x0, Integer y0, Integer x2, Double[] low) {
    double k = 1.0 * (double) (y - y0) / (double) (x2 - x0);
    for (int j = x0.intValue() + 1; j <= x2; ++j) {
        low[j] = k * (double) (j - x0) + (double) y0.intValue();
    }
    x0 = x2;
    return x0;
}


****** Cluster 619 ******
public static Double func_1a3c428bffea49a583b0b031bc467b67(Double[] upper, Integer x0, Integer y0, Integer x2, Integer y) {
    double k = 1.0 * (double) (y - y0) / (double) (x2 - x0);
    for (int j = x0.intValue() + 1; j <= x2; ++j) {
        upper[j] = k * (double) (j - x0) + (double) y0.intValue();
    }
    return k;
}
public static Double func_de2f3b2874a643e8aac32de4e561ea87(Double[] upper, Integer x0, Integer y0, Integer x2, Integer y) {
    double k = 1.0 * (double) (y - y0) / (double) (x2 - x0);
    for (int j = x0.intValue() + 1; j <= x2; ++j) {
        upper[j] = k * (double) (j - x0) + (double) y0.intValue();
    }
    return k;
}
public static Double func_bb09a290344e4df9a3a8baa052836b1a(Double[] upper, Integer x0, Integer y0, Integer x2, Integer y) {
    double k = 1.0 * (double) (y - y0) / (double) (x2 - x0);
    for (int j = x0.intValue() + 1; j <= x2; ++j) {
        upper[j] = k * (double) (j - x0) + (double) y0.intValue();
    }
    return k;
}


****** Cluster 620 ******
public static Integer func_823023a0c250413687cf581434044610(Double[] upper, Integer x0, Double k, Integer y0, Integer x2) {
    for (int j = x0.intValue() + 1; j <= x2; ++j) {
        upper[j] = k * (double) (j - x0) + (double) y0.intValue();
    }
    x0 = x2;
    return x0;
}
public static Integer func_e70e9328766248b888b299f5ab600ef0$5fe92059(Double[] upper, Integer x0, Double k, Integer y0, Integer x2) {
    for (int j = x0.intValue() + 1; j <= x2; ++j) {
        upper[j] = k * (double) (j - x0) + (double) y0.intValue();
    }
    x0 = x2;
    return x0;
}


****** Cluster 621 ******
public static Integer func_ace0a2e908fc4c998a5bdd8318adf728(Double[] upper, Integer x0, Integer y0, Integer x2, Integer y) {
    double k = 1.0 * (double) (y - y0) / (double) (x2 - x0);
    for (int j = x0.intValue() + 1; j <= x2; ++j) {
        upper[j] = k * (double) (j - x0) + (double) y0.intValue();
    }
    x0 = x2;
    return x0;
}
public static Integer func_6ab73d2975554f81983b9037a1cf1ca9(Double[] upper, Integer x0, Integer y0, Integer x2, Integer y) {
    double k = 1.0 * (double) (y - y0) / (double) (x2 - x0);
    for (int j = x0.intValue() + 1; j <= x2; ++j) {
        upper[j] = k * (double) (j - x0) + (double) y0.intValue();
    }
    x0 = x2;
    return x0;
}


****** Cluster 622 ******
public static Double func_b21856c4ddd049b5881aacb0e98a9499$18c4ea30(Integer x0, Double[] len) {
    Integer x1 = x0 + 1;
    Double k = 1.0 * (len[x1] - len[x0]);
    return k;
}
public static Double func_1cc2cf4c2edb4836b80754b4847d926f(Integer x0, Double[] len) {
    int x1 = x0 + 1;
    double k = 1.0 * (len[x1] - len[x0]);
    return k;
}


****** Cluster 623 ******
public static Integer func_04e2c956df9d4e20991500a52d9e7528$2ee587c9(Integer x0, Double[] len) {
    Integer x1 = x0 + 1;
    Double.valueOf(1.0 * (len[x1] - len[x0]));
    return x1;
}
public static Integer func_038a273c1c584908856db3f5a089dcfa(Integer x0, Double[] len) {
    int x1 = x0 + 1;
    len[x1].doubleValue();
    len[x0].doubleValue();
    return x1;
}


****** Cluster 624 ******
public static Double func_76d7f9fed38b45fea30eca4967d1ffff$15d03cb0(Integer x0, Double x2, Double[] len, Integer x1) {
    Double k = 1.0 * (len[x1] - len[x0]);
    Double y = k * (x2 - (double) x0.intValue()) + len[x0];
    return y;
}
public static Double func_bbe5c499ccf44f9da34dab853a88b9b6(Integer x0, Double x2, Double[] len, Integer x1) {
    double k = 1.0 * (len[x1] - len[x0]);
    double y = k * (x2 - (double) x0.intValue()) + len[x0];
    return y;
}


****** Cluster 625 ******
public static Double func_bbafd159dd3d4f3dba32a7a60e4580ca$15d03cb0(Integer x0, Double x2, Double[] len, Integer x1) {
    Double k = 1.0 * (len[x1] - len[x0]);
    Double.valueOf(k * (x2 - (double) x0.intValue()) + len[x0]);
    return k;
}
public static Double func_0b9ca4e2dcf74a47ae96b034da39a383(Integer x0, Double x2, Double[] len, Integer x1) {
    double k = 1.0 * (len[x1] - len[x0]);
    x2.doubleValue();
    x0.intValue();
    len[x0].doubleValue();
    return k;
}


****** Cluster 626 ******
public static Double func_3756d77b7fa74a5881277d7f904a9024$15d03cb0(Integer x0, Double x2, Double[] len) {
    Integer x1 = x0 + 1;
    Double k = 1.0 * (len[x1] - len[x0]);
    Double y = k * (x2 - (double) x0.intValue()) + len[x0];
    return y;
}
public static Double func_9a698ebc6f0a48a0ac187975079acf38(Integer x0, Double x2, Double[] len) {
    int x1 = x0 + 1;
    double k = 1.0 * (len[x1] - len[x0]);
    double y = k * (x2 - (double) x0.intValue()) + len[x0];
    return y;
}


****** Cluster 627 ******
public static Double func_e02ebcfd5b144a5591dead782eafe7ac$15d03cb0(Integer x0, Double x2, Double[] len) {
    Integer x1 = x0 + 1;
    Double k = 1.0 * (len[x1] - len[x0]);
    Double.valueOf(k * (x2 - (double) x0.intValue()) + len[x0]);
    return k;
}
public static Double func_d5ac970fe05b4762afa5f4e1a6a84721(Integer x0, Double x2, Double[] len) {
    int x1 = x0 + 1;
    double k = 1.0 * (len[x1] - len[x0]);
    x2.doubleValue();
    x0.intValue();
    len[x0].doubleValue();
    return k;
}


****** Cluster 628 ******
public static Integer func_2bb2e5f2f26e439bbcfe720cfff64b05$2cbb7ab7(Integer x0, Double x2, Double[] len) {
    Integer x1 = x0 + 1;
    Double k = 1.0 * (len[x1] - len[x0]);
    Double.valueOf(k * (x2 - (double) x0.intValue()) + len[x0]);
    return x1;
}
public static Integer func_4e4e479824f54d0294ceaaca6dd7abfd(Integer x0, Double x2, Double[] len) {
    int x1 = x0 + 1;
    len[x1].doubleValue();
    len[x0].doubleValue();
    x2.doubleValue();
    x0.intValue();
    len[x0].doubleValue();
    return x1;
}


****** Cluster 629 ******
public static Double func_5c691318bb794a6bb5342e5c5f046c5b(Double x2, Double y, Double k) {
    double a2 = k;
    y.doubleValue();
    k.doubleValue();
    x2.doubleValue();
    return a2;
}
def func_c5da77925dd242139ac66d95285e49b9(uppslope, lowslope, area):
    slope = uppslope - lowslope
    oldarea = area
    return oldarea



****** Cluster 630 ******
public static Double func_378971c3152f405b96ba93b7987da85c(Double x2, Double a2, Double k, Double y, Double b, Double remain) {
    double c = k * x2 * x2 - 2.0 * x2 * y - 2.0 * remain;
    Math.sqrt(b * b - 4.0 * a2 * c);
    return c;
}
public static Double func_c928c27702074af48090d90130a4de82(Double x2, Double a2, Double k, Double y, Double b, Double remain) {
    double c = k * x2 * x2 - 2.0 * x2 * y - 2.0 * remain;
    Math.sqrt(b * b - 4.0 * a2 * c);
    b.doubleValue();
    a2.doubleValue();
    return c;
}
public static Double func_ff8a2bcde29441c39c67f1708fd121b0(Double x2, Double a2, Double k, Double y, Double b, Double remain) {
    double c = k * x2 * x2 - 2.0 * x2 * y - 2.0 * remain;
    Math.sqrt(b * b - 4.0 * a2 * c);
    b.doubleValue();
    a2.doubleValue();
    b.doubleValue();
    a2.doubleValue();
    return c;
}


****** Cluster 631 ******
public static Double func_b1791c2fcdff49819dc715d967edfdf0(Double x2, Double y, Double k, Double remain) {
    k.doubleValue();
    y.doubleValue();
    k.doubleValue();
    x2.doubleValue();
    double c = k * x2 * x2 - 2.0 * x2 * y - 2.0 * remain;
    return c;
}
public static Double func_d56fb7393b1e4ea1866414f99c482b53(Double x2, Double y, Double k, Double remain) {
    double a2 = k;
    double b = 2.0 * (y - k * x2);
    double c = k * x2 * x2 - 2.0 * x2 * y - 2.0 * remain;
    Math.sqrt(b * b - 4.0 * a2 * c);
    return c;
}
public static Double func_91c9204cbd764086ac8c1b8f3edc4987(Double x2, Double y, Double k, Double remain) {
    double a2 = k;
    double b = 2.0 * (y - k * x2);
    double c = k * x2 * x2 - 2.0 * x2 * y - 2.0 * remain;
    Math.sqrt(b * b - 4.0 * a2 * c);
    return c;
}
public static Double func_cfa8e96185ac4c0881dac75ffe462fcf(Double x2, Double y, Double k, Double remain) {
    double a2 = k;
    double b = 2.0 * (y - k * x2);
    double c = k * x2 * x2 - 2.0 * x2 * y - 2.0 * remain;
    Math.sqrt(b * b - 4.0 * a2 * c);
    return c;
}


****** Cluster 632 ******
public static Double func_255378e534a24c98a15cc88ec97ae42c(Double x2, Double y, Double k, Double remain) {
    double a2 = k;
    y.doubleValue();
    k.doubleValue();
    x2.doubleValue();
    k.doubleValue();
    x2.doubleValue();
    x2.doubleValue();
    x2.doubleValue();
    y.doubleValue();
    remain.doubleValue();
    return a2;
}
public static Double func_4839bc7b798d41e98dc7d946a2529ff8(Double x2, Double y, Double k, Double remain) {
    double a2 = k;
    double b = 2.0 * (y - k * x2);
    double c = k * x2 * x2 - 2.0 * x2 * y - 2.0 * remain;
    Math.sqrt(b * b - 4.0 * a2 * c);
    return a2;
}
public static Double func_69579be2dc954ef984caba64e063c4bb(Double x2, Double y, Double k, Double remain) {
    double a2 = k;
    double b = 2.0 * (y - k * x2);
    double c = k * x2 * x2 - 2.0 * x2 * y - 2.0 * remain;
    Math.sqrt(b * b - 4.0 * a2 * c);
    return a2;
}
public static Double func_65e453a62ccf4651a3e6905387a323f5(Double x2, Double y, Double k, Double remain) {
    double a2 = k;
    double b = 2.0 * (y - k * x2);
    double c = k * x2 * x2 - 2.0 * x2 * y - 2.0 * remain;
    Math.sqrt(b * b - 4.0 * a2 * c);
    return a2;
}


****** Cluster 633 ******
public static Double func_50444991fd0e4188b431c06011d1ac09(Double x2, Double y, Double k, Double remain) {
    k.doubleValue();
    double b = 2.0 * (y - k * x2);
    k.doubleValue();
    x2.doubleValue();
    x2.doubleValue();
    x2.doubleValue();
    y.doubleValue();
    remain.doubleValue();
    return b;
}
public static Double func_e04c6968d0d449ea914fff4f0238d2ef(Double x2, Double y, Double k, Double remain) {
    double a2 = k;
    double b = 2.0 * (y - k * x2);
    double c = k * x2 * x2 - 2.0 * x2 * y - 2.0 * remain;
    Math.sqrt(b * b - 4.0 * a2 * c);
    return b;
}
public static Double func_fe863098274644649908869896d1d224(Double x2, Double y, Double k, Double remain) {
    double a2 = k;
    double b = 2.0 * (y - k * x2);
    double c = k * x2 * x2 - 2.0 * x2 * y - 2.0 * remain;
    Math.sqrt(b * b - 4.0 * a2 * c);
    return b;
}
public static Double func_4ed9cafc83cd409b8218dabf11788114(Double x2, Double y, Double k, Double remain) {
    double a2 = k;
    double b = 2.0 * (y - k * x2);
    double c = k * x2 * x2 - 2.0 * x2 * y - 2.0 * remain;
    Math.sqrt(b * b - 4.0 * a2 * c);
    return b;
}


****** Cluster 634 ******
public static Double func_8d7892cc665746faaee6e00969b1b0e3(Double x2, Double a2, Double k, Double y, Double remain) {
    double b = 2.0 * (y - k * x2);
    double c = k * x2 * x2 - 2.0 * x2 * y - 2.0 * remain;
    Math.sqrt(b * b - 4.0 * a2 * c);
    return c;
}
public static Double func_a906119e14854819ae2c9a8cae9b4b3d(Double x2, Double a2, Double k, Double y, Double remain) {
    double b = 2.0 * (y - k * x2);
    double c = k * x2 * x2 - 2.0 * x2 * y - 2.0 * remain;
    Math.sqrt(b * b - 4.0 * a2 * c);
    a2.doubleValue();
    return c;
}
public static Double func_02b59a0a306f45fcac3833e7181e1ab9(Double x2, Double a2, Double k, Double y, Double remain) {
    double b = 2.0 * (y - k * x2);
    double c = k * x2 * x2 - 2.0 * x2 * y - 2.0 * remain;
    Math.sqrt(b * b - 4.0 * a2 * c);
    a2.doubleValue();
    a2.doubleValue();
    return c;
}


****** Cluster 635 ******
public static Double func_c650638efa0c4292b6f2fdc5305cbd50(Double x2, Double a2, Double k, Double y, Double remain) {
    double b = 2.0 * (y - k * x2);
    double c = k * x2 * x2 - 2.0 * x2 * y - 2.0 * remain;
    Math.sqrt(b * b - 4.0 * a2 * c);
    return b;
}
public static Double func_c07ef04b831842c980eebd70a618759d(Double x2, Double a2, Double k, Double y, Double remain) {
    double b = 2.0 * (y - k * x2);
    double c = k * x2 * x2 - 2.0 * x2 * y - 2.0 * remain;
    Math.sqrt(b * b - 4.0 * a2 * c);
    a2.doubleValue();
    return b;
}
public static Double func_0b485d5cd672413fbb87d16df707cb55(Double x2, Double a2, Double k, Double y, Double remain) {
    double b = 2.0 * (y - k * x2);
    double c = k * x2 * x2 - 2.0 * x2 * y - 2.0 * remain;
    Math.sqrt(b * b - 4.0 * a2 * c);
    a2.doubleValue();
    a2.doubleValue();
    return b;
}


****** Cluster 636 ******
public static Double func_84b35a5f6a754c4e81afa4df32121cbc(Double c1, Double b1, Double a1, Double nx, Double cx) {
    double mx = (nx + cx) * 0.5;
    c1.doubleValue();
    a1.doubleValue();
    cx.doubleValue();
    b1.doubleValue();
    c1.doubleValue();
    a1.doubleValue();
    b1.doubleValue();
    return mx;
}
public static Double func_cadfc383d3284e15a9a723dc7c4139d3(Double c1, Double b1, Double a1, Double nx, Double cx) {
    double mx = (nx + cx) * 0.5;
    c1.doubleValue();
    a1.doubleValue();
    cx.doubleValue();
    b1.doubleValue();
    return mx;
}
public static Double func_3ea1a8b6648946cc9d32ce626ec8b95d(Double a2, Double used, Double b, Double hi, Double lo) {
    double mi = (hi + lo) / 2.0;
    b.doubleValue();
    a2.doubleValue();
    used.doubleValue();
    a2.doubleValue();
    b.doubleValue();
    a2.doubleValue();
    a2.doubleValue();
    used.doubleValue();
    return mi;
}


****** Cluster 637 ******
public static Double func_b11908510cfb4ce4a8cccf90d5d0163f(Double c1, Double b1, Double a1, Double nx, Double cx) {
    nx.doubleValue();
    cx.doubleValue();
    double cy1 = (c1 - a1 * cx) / b1;
    c1.doubleValue();
    a1.doubleValue();
    b1.doubleValue();
    return cy1;
}
public static Double func_a16b6f55711945d9828131c85bcb3020(Double c1, Double b1, Double a1, Double nx, Double cx) {
    nx.doubleValue();
    cx.doubleValue();
    double cy1 = (c1 - a1 * cx) / b1;
    return cy1;
}


****** Cluster 638 ******
public static Double func_1765d585089a49248e6f2acfd91a2550$3982e163(Double mx, Double c1, Double b1, Double c2, Double a1, Double a2, Double b2, Double cx) {
    Double.valueOf((c1 - a1 * cx) / b1);
    Double.valueOf((c1 - a1 * mx) / b1);
    Double cy2 = (c2 - a2 * cx) / b2;
    return cy2;
}
public static Double func_b61ba329b45f45c29a7def83f1208ff5$3982e163(Double mx, Double c1, Double b1, Double c2, Double a1, Double a2, Double b2, Double cx) {
    Double.valueOf((c1 - a1 * mx) / b1);
    Double cy2 = (c2 - a2 * cx) / b2;
    Double.valueOf((c2 - a2 * mx) / b2);
    return cy2;
}
public static Double func_9ff67058410244bfa469cdd8c76961bc$106f6327(Double mx, Double c1, Double b1, Double c2, Double a1, Double a2, Double b2, Double cx) {
    Double.valueOf((c1 - a1 * mx) / b1);
    Double cy2 = (c2 - a2 * cx) / b2;
    return cy2;
}
public static Double func_5766287d71f54b2ca6f695a77c4204d1$353b2893(Double mx, Double c1, Double b1, Double c2, Double a1, Double a2, Double b2, Double cx) {
    Double.valueOf((c1 - a1 * cx) / b1);
    Double.valueOf((c1 - a1 * mx) / b1);
    Double cy2 = (c2 - a2 * cx) / b2;
    Double.valueOf((c2 - a2 * mx) / b2);
    return cy2;
}
public static Double func_1ba808916c234455b811ce18d25ef526$353b2893(Double mx, Double c1, Double b1, Double c2, Double a1, Double a2, Double b2, Double cx) {
    Double cy1 = (c1 - a1 * cx) / b1;
    Double my1 = (c1 - a1 * mx) / b1;
    Double cy2 = (c2 - a2 * cx) / b2;
    Double my2 = (c2 - a2 * mx) / b2;
    cy2.doubleValue();
    cy1.doubleValue();
    my2.doubleValue();
    my1.doubleValue();
    mx.doubleValue();
    cx.doubleValue();
    return cy2;
}


****** Cluster 639 ******
public static Double func_ddbd827ab54449c08a006a7d391ea28e$3982e163(Double mx, Double c1, Double b1, Double c2, Double a1, Double a2, Double b2, Double cx) {
    Double.valueOf((c1 - a1 * cx) / b1);
    Double my1 = (c1 - a1 * mx) / b1;
    Double.valueOf((c2 - a2 * cx) / b2);
    return my1;
}
public static Double func_4ce2ecd8ba354147b742801d3a242c90$3982e163(Double mx, Double c1, Double b1, Double c2, Double a1, Double a2, Double b2, Double cx) {
    Double my1 = (c1 - a1 * mx) / b1;
    Double.valueOf((c2 - a2 * cx) / b2);
    Double.valueOf((c2 - a2 * mx) / b2);
    return my1;
}
public static Double func_7316d96549a04b0f889f625887953f42$106f6327(Double mx, Double c1, Double b1, Double c2, Double a1, Double a2, Double b2, Double cx) {
    Double my1 = (c1 - a1 * mx) / b1;
    Double.valueOf((c2 - a2 * cx) / b2);
    return my1;
}
public static Double func_8180b8220b0b4a85bc373b4f3418b846$353b2893(Double mx, Double c1, Double b1, Double c2, Double a1, Double a2, Double b2, Double cx) {
    Double.valueOf((c1 - a1 * cx) / b1);
    Double my1 = (c1 - a1 * mx) / b1;
    Double.valueOf((c2 - a2 * cx) / b2);
    Double.valueOf((c2 - a2 * mx) / b2);
    return my1;
}
public static Double func_5b33a665c0764c2d80166c956bcd4d6a$353b2893(Double mx, Double c1, Double b1, Double c2, Double a1, Double a2, Double b2, Double cx) {
    Double cy1 = (c1 - a1 * cx) / b1;
    Double my1 = (c1 - a1 * mx) / b1;
    Double cy2 = (c2 - a2 * cx) / b2;
    Double my2 = (c2 - a2 * mx) / b2;
    cy2.doubleValue();
    cy1.doubleValue();
    my2.doubleValue();
    my1.doubleValue();
    mx.doubleValue();
    cx.doubleValue();
    return my1;
}


****** Cluster 640 ******
public static Double func_cf6d8dd3f993467798305152067466b3$3982e163(Double mx, Double c1, Double b1, Double c2, Double a1, Double a2, Double b2, Double cx) {
    Double cy1 = (c1 - a1 * cx) / b1;
    Double.valueOf((c1 - a1 * mx) / b1);
    Double.valueOf((c2 - a2 * cx) / b2);
    return cy1;
}
public static Double func_a702c422f2054062b11cc1d312bf066e$353b2893(Double mx, Double c1, Double b1, Double c2, Double a1, Double a2, Double b2, Double cx) {
    Double cy1 = (c1 - a1 * cx) / b1;
    Double.valueOf((c1 - a1 * mx) / b1);
    Double.valueOf((c2 - a2 * cx) / b2);
    Double.valueOf((c2 - a2 * mx) / b2);
    return cy1;
}
public static Double func_5341bc29918d4f628e5626fbcd754937$353b2893(Double mx, Double c1, Double b1, Double c2, Double a1, Double a2, Double b2, Double cx) {
    Double cy1 = (c1 - a1 * cx) / b1;
    Double my1 = (c1 - a1 * mx) / b1;
    Double cy2 = (c2 - a2 * cx) / b2;
    Double my2 = (c2 - a2 * mx) / b2;
    cy2.doubleValue();
    cy1.doubleValue();
    my2.doubleValue();
    my1.doubleValue();
    mx.doubleValue();
    cx.doubleValue();
    return cy1;
}


****** Cluster 641 ******
public static Double func_fd2238993577439d81f3ecb227374fa1$3982e163(Double mx, Double c1, Double b1, Double c2, Double a1, Double a2, Double b2, Double cx) {
    Double.valueOf((c1 - a1 * mx) / b1);
    Double.valueOf((c2 - a2 * cx) / b2);
    Double my2 = (c2 - a2 * mx) / b2;
    return my2;
}
public static Double func_9521478733944d4c86e741cf1cd34e1d$353b2893(Double mx, Double c1, Double b1, Double c2, Double a1, Double a2, Double b2, Double cx) {
    Double.valueOf((c1 - a1 * cx) / b1);
    Double.valueOf((c1 - a1 * mx) / b1);
    Double.valueOf((c2 - a2 * cx) / b2);
    Double my2 = (c2 - a2 * mx) / b2;
    return my2;
}
public static Double func_9f5c3e182ba245c992eafb997381212d$353b2893(Double mx, Double c1, Double b1, Double c2, Double a1, Double a2, Double b2, Double cx) {
    Double cy1 = (c1 - a1 * cx) / b1;
    Double my1 = (c1 - a1 * mx) / b1;
    Double cy2 = (c2 - a2 * cx) / b2;
    Double my2 = (c2 - a2 * mx) / b2;
    cy2.doubleValue();
    cy1.doubleValue();
    my2.doubleValue();
    my1.doubleValue();
    mx.doubleValue();
    cx.doubleValue();
    return my2;
}


****** Cluster 642 ******
public static Double func_33730c09af774f5fa5f05e68f442a181$18c9911d(Double mx, Double la, Double ca) {
    Double cx = mx;
    Double.valueOf(ca - la);
    return cx;
}
def func_0f7e2b6cf7ed441ba38b83f395a6fdb0(h1, width, h2):
    qa = (h2 - h1) / (2 * width)
    qb = h1
    return qb



****** Cluster 643 ******
public static Double func_b2a2d56c361c45f9b585a372e0005ad8(Double c1, Double b1, Double c2, Double a1, Double nx, Double a2, Double b2, Double cx) {
    double mx = (nx + cx) * 0.5;
    c1.doubleValue();
    a1.doubleValue();
    cx.doubleValue();
    b1.doubleValue();
    c1.doubleValue();
    a1.doubleValue();
    b1.doubleValue();
    c2.doubleValue();
    a2.doubleValue();
    cx.doubleValue();
    b2.doubleValue();
    return mx;
}
public static Double func_d4ac420a7e2a43c8bb58129203995116(Double c1, Double b1, Double c2, Double a1, Double nx, Double a2, Double b2, Double cx) {
    double mx = (nx + cx) * 0.5;
    c1.doubleValue();
    a1.doubleValue();
    cx.doubleValue();
    b1.doubleValue();
    c1.doubleValue();
    a1.doubleValue();
    b1.doubleValue();
    c2.doubleValue();
    a2.doubleValue();
    cx.doubleValue();
    b2.doubleValue();
    c2.doubleValue();
    a2.doubleValue();
    b2.doubleValue();
    return mx;
}
public static Double func_4f4095d0a8bc4c5085f77ef9f33a477b(Double c1, Double b1, Double c2, Double a1, Double nx, Double a2, Double b2, Double cx) {
    double mx = (nx + cx) * 0.5;
    c1.doubleValue();
    a1.doubleValue();
    cx.doubleValue();
    b1.doubleValue();
    c1.doubleValue();
    a1.doubleValue();
    b1.doubleValue();
    c2.doubleValue();
    a2.doubleValue();
    cx.doubleValue();
    b2.doubleValue();
    c2.doubleValue();
    a2.doubleValue();
    b2.doubleValue();
    cx.doubleValue();
    return mx;
}


****** Cluster 644 ******
public static Double func_f8e129cbd14644cd8fdecd5bee9879d1(Double c1, Double b1, Double c2, Double a1, Double nx, Double a2, Double b2, Double cx) {
    nx.doubleValue();
    cx.doubleValue();
    c1.doubleValue();
    a1.doubleValue();
    cx.doubleValue();
    b1.doubleValue();
    c1.doubleValue();
    a1.doubleValue();
    b1.doubleValue();
    double cy2 = (c2 - a2 * cx) / b2;
    return cy2;
}
public static Double func_a4d3e95f5d1a43f08bbc11dee431e4b8(Double c1, Double b1, Double c2, Double a1, Double nx, Double a2, Double b2, Double cx) {
    nx.doubleValue();
    cx.doubleValue();
    c1.doubleValue();
    a1.doubleValue();
    cx.doubleValue();
    b1.doubleValue();
    c1.doubleValue();
    a1.doubleValue();
    b1.doubleValue();
    double cy2 = (c2 - a2 * cx) / b2;
    c2.doubleValue();
    a2.doubleValue();
    b2.doubleValue();
    return cy2;
}
public static Double func_7f6962edc943445b9ef60a154c6bb57a(Double c1, Double b1, Double c2, Double a1, Double nx, Double a2, Double b2, Double cx) {
    nx.doubleValue();
    cx.doubleValue();
    c1.doubleValue();
    a1.doubleValue();
    cx.doubleValue();
    b1.doubleValue();
    c1.doubleValue();
    a1.doubleValue();
    b1.doubleValue();
    double cy2 = (c2 - a2 * cx) / b2;
    c2.doubleValue();
    a2.doubleValue();
    b2.doubleValue();
    cx.doubleValue();
    return cy2;
}


****** Cluster 645 ******
public static Double func_d51de79b07f84cc68c83734144e7a350(Double c1, Double b1, Double c2, Double a1, Double nx, Double a2, Double b2, Double cx) {
    double mx = (nx + cx) * 0.5;
    c1.doubleValue();
    a1.doubleValue();
    cx.doubleValue();
    b1.doubleValue();
    double my1 = (c1 - a1 * mx) / b1;
    c2.doubleValue();
    a2.doubleValue();
    cx.doubleValue();
    b2.doubleValue();
    return my1;
}
public static Double func_d5dfb3a67e0a44139ba70ac052836acc(Double c1, Double b1, Double c2, Double a1, Double nx, Double a2, Double b2, Double cx) {
    double mx = (nx + cx) * 0.5;
    c1.doubleValue();
    a1.doubleValue();
    cx.doubleValue();
    b1.doubleValue();
    double my1 = (c1 - a1 * mx) / b1;
    c2.doubleValue();
    a2.doubleValue();
    cx.doubleValue();
    b2.doubleValue();
    c2.doubleValue();
    a2.doubleValue();
    b2.doubleValue();
    return my1;
}
public static Double func_81445e7713464ae3abe72cfdcea2962b(Double c1, Double b1, Double c2, Double a1, Double nx, Double a2, Double b2, Double cx) {
    double mx = (nx + cx) * 0.5;
    c1.doubleValue();
    a1.doubleValue();
    cx.doubleValue();
    b1.doubleValue();
    double my1 = (c1 - a1 * mx) / b1;
    c2.doubleValue();
    a2.doubleValue();
    cx.doubleValue();
    b2.doubleValue();
    c2.doubleValue();
    a2.doubleValue();
    b2.doubleValue();
    cx.doubleValue();
    return my1;
}


****** Cluster 646 ******
public static Double func_140860197af54948a2b1e374d8fd1bbb(Double c1, Double b1, Double c2, Double a1, Double nx, Double a2, Double b2, Double cx) {
    nx.doubleValue();
    cx.doubleValue();
    double cy1 = (c1 - a1 * cx) / b1;
    c1.doubleValue();
    a1.doubleValue();
    b1.doubleValue();
    c2.doubleValue();
    a2.doubleValue();
    cx.doubleValue();
    b2.doubleValue();
    return cy1;
}
public static Double func_f40aaaa8715e47d2935e4e97a6183c6b(Double c1, Double b1, Double c2, Double a1, Double nx, Double a2, Double b2, Double cx) {
    nx.doubleValue();
    cx.doubleValue();
    double cy1 = (c1 - a1 * cx) / b1;
    c1.doubleValue();
    a1.doubleValue();
    b1.doubleValue();
    c2.doubleValue();
    a2.doubleValue();
    cx.doubleValue();
    b2.doubleValue();
    c2.doubleValue();
    a2.doubleValue();
    b2.doubleValue();
    return cy1;
}
public static Double func_dee288c3fc134081b98962e47c3d47df(Double c1, Double b1, Double c2, Double a1, Double nx, Double a2, Double b2, Double cx) {
    nx.doubleValue();
    cx.doubleValue();
    double cy1 = (c1 - a1 * cx) / b1;
    c1.doubleValue();
    a1.doubleValue();
    b1.doubleValue();
    c2.doubleValue();
    a2.doubleValue();
    cx.doubleValue();
    b2.doubleValue();
    c2.doubleValue();
    a2.doubleValue();
    b2.doubleValue();
    cx.doubleValue();
    return cy1;
}


****** Cluster 647 ******
public static Double func_f9017c9067154ebeba8c4eb038622f1e$353b2893(Double mx, Double c1, Double b1, Double c2, Double a1, Double cy1, Double a2, Double b2, Double cx) {
    Double my1 = (c1 - a1 * mx) / b1;
    Double cy2 = (c2 - a2 * cx) / b2;
    Double my2 = (c2 - a2 * mx) / b2;
    cy2.doubleValue();
    cy1.doubleValue();
    my2.doubleValue();
    my1.doubleValue();
    mx.doubleValue();
    cx.doubleValue();
    return my1;
}
public static Double func_2f0c27bf76f3497b8fe3f43210f06317$7eea5801(Double mx, Double c1, Double b1, Double c2, Double a1, Double a2, Double b2, Double ca, Double cx) {
    Double cy1 = (c1 - a1 * cx) / b1;
    Double my1 = (c1 - a1 * mx) / b1;
    Double cy2 = (c2 - a2 * cx) / b2;
    Double my2 = (c2 - a2 * mx) / b2;
    double la = (cy2 - cy1 + my2 - my1) * (mx - cx);
    if (la < ca) {
        Double.valueOf(ca - la);
    }
    return my1;
}


****** Cluster 648 ******
public static Double func_6dd6d1fb59d04c54b2111c7903910e3a(Double c1, Double b1, Double c2, Double a1, Double nx, Double a2, Double b2, Double cx) {
    double mx = (nx + cx) * 0.5;
    c1.doubleValue();
    a1.doubleValue();
    cx.doubleValue();
    b1.doubleValue();
    c1.doubleValue();
    a1.doubleValue();
    b1.doubleValue();
    c2.doubleValue();
    a2.doubleValue();
    cx.doubleValue();
    b2.doubleValue();
    double my2 = (c2 - a2 * mx) / b2;
    return my2;
}
public static Double func_c0393742fd494babb63dad7a5ff36e23(Double c1, Double b1, Double c2, Double a1, Double nx, Double a2, Double b2, Double cx) {
    double mx = (nx + cx) * 0.5;
    c1.doubleValue();
    a1.doubleValue();
    cx.doubleValue();
    b1.doubleValue();
    c1.doubleValue();
    a1.doubleValue();
    b1.doubleValue();
    c2.doubleValue();
    a2.doubleValue();
    cx.doubleValue();
    b2.doubleValue();
    double my2 = (c2 - a2 * mx) / b2;
    cx.doubleValue();
    return my2;
}


****** Cluster 649 ******
public static Double func_24b07a8c9d75419cb0ac4a228f64eed2(Integer p1, Integer[] x2, Integer[] x1, Integer p2, Integer[] y1) {
    Math.min(x1[p1 + 1], x2[p2 + 1]);
    double a1 = y1[p1 + 1] - y1[p1];
    return a1;
}
public static Double func_a9c74010ebf6430495c3fbdac3f30654(Integer p1, Integer[] x2, Integer[] x1, Integer p2, Integer[] y1) {
    double nx = Math.min(x1[p1 + 1], x2[p2 + 1]);
    y1[p1 + 1].intValue();
    y1[p1].intValue();
    return nx;
}
public static Double func_d3dad5c77e2c464f9355a2393e11dcfe(Integer p1, Integer[] x2, Integer[] x1, Integer p2, Integer[] y1) {
    Math.min(x1[p1 + 1], x2[p2 + 1]);
    y1[p1 + 1].intValue();
    y1[p1].intValue();
    double b1 = x1[p1] - x1[p1 + 1];
    return b1;
}
public static Double func_13725bef66c14443ac7588301435924d(Integer p1, Integer[] x2, Integer[] x1, Integer p2, Integer[] y1) {
    Math.min(x1[p1 + 1], x2[p2 + 1]);
    double a1 = y1[p1 + 1] - y1[p1];
    x1[p1].intValue();
    x1[p1 + 1].intValue();
    return a1;
}
public static Double func_df2e32ede19c42a3b074b6818261aaa3(Integer p1, Integer[] x2, Integer[] x1, Integer p2, Integer[] y1) {
    double nx = Math.min(x1[p1 + 1], x2[p2 + 1]);
    y1[p1 + 1].intValue();
    y1[p1].intValue();
    x1[p1].intValue();
    x1[p1 + 1].intValue();
    return nx;
}
public static Double func_afc377e632884bc1b6494011c46edc48(Integer p1, Integer[] x2, Integer[] x1, Integer p2, Integer[] y1) {
    Math.min(x1[p1 + 1], x2[p2 + 1]);
    y1[p1 + 1].intValue();
    y1[p1].intValue();
    double b1 = x1[p1] - x1[p1 + 1];
    x1[p1].intValue();
    y1[p1].intValue();
    return b1;
}
public static Double func_8a299fea4e534d84b60e00db7b738f89(Integer p1, Integer[] x2, Integer[] x1, Integer p2, Integer[] y1) {
    Math.min(x1[p1 + 1], x2[p2 + 1]);
    double a1 = y1[p1 + 1] - y1[p1];
    double b1 = x1[p1] - x1[p1 + 1];
    double c1 = a1 * (double) x1[p1].intValue() + b1 * (double) y1[p1].intValue();
    return c1;
}
public static Double func_028302cf47484e428bdf210f96745a56(Integer p1, Integer[] x2, Integer[] x1, Integer p2, Integer[] y1) {
    Math.min(x1[p1 + 1], x2[p2 + 1]);
    double a1 = y1[p1 + 1] - y1[p1];
    x1[p1].intValue();
    x1[p1 + 1].intValue();
    x1[p1].intValue();
    y1[p1].intValue();
    return a1;
}
public static Double func_0dcec0b26c4d4f88b5b626b96bb79589(Integer p1, Integer[] x2, Integer[] x1, Integer p2, Integer[] y1) {
    double nx = Math.min(x1[p1 + 1], x2[p2 + 1]);
    y1[p1 + 1].intValue();
    y1[p1].intValue();
    x1[p1].intValue();
    x1[p1 + 1].intValue();
    x1[p1].intValue();
    y1[p1].intValue();
    return nx;
}


****** Cluster 650 ******
public static Double func_d38a2171fc53451abe6deea310063bee(Integer p1, Integer[] x1, Integer[] y1) {
    y1[p1 + 1].intValue();
    y1[p1].intValue();
    double b1 = x1[p1] - x1[p1 + 1];
    return b1;
}
public static Double func_3b85bd083de54f139f076102143f0114(Integer p1, Integer[] x1, Integer[] y1) {
    y1[p1 + 1].intValue();
    y1[p1].intValue();
    double b1 = x1[p1] - x1[p1 + 1];
    x1[p1].intValue();
    y1[p1].intValue();
    return b1;
}


****** Cluster 651 ******
public static Double func_67a8eb50f0734276ad112abf0455e13e(Integer p1, Integer[] x1, Integer[] y1) {
    double a1 = y1[p1 + 1] - y1[p1];
    x1[p1].intValue();
    x1[p1 + 1].intValue();
    return a1;
}
public static Double func_6841db14907542c0a3a77b88ab94c93a(Integer p1, Integer[] x1, Integer[] y1) {
    double a1 = y1[p1 + 1] - y1[p1];
    x1[p1].intValue();
    x1[p1 + 1].intValue();
    x1[p1].intValue();
    y1[p1].intValue();
    return a1;
}


****** Cluster 652 ******
public static Double func_93e4fc5f4fa8480eb69d1ed54e146ab6(Integer[] x2, Integer p2, Integer[] y2) {
    double a2 = y2[p2 + 1] - y2[p2];
    x2[p2].intValue();
    x2[p2 + 1].intValue();
    return a2;
}
public static Double func_9080310d486f4b5691d275cb4d302464(Integer[] x2, Integer p2, Integer[] y2) {
    double a2 = y2[p2 + 1] - y2[p2];
    x2[p2].intValue();
    x2[p2 + 1].intValue();
    x2[p2].intValue();
    y2[p2].intValue();
    return a2;
}


****** Cluster 653 ******
public static Double func_6d2bf50c6cf44d7a854a5563c505e940(Integer[] x2, Integer p2, Integer[] y2) {
    y2[p2 + 1].intValue();
    y2[p2].intValue();
    double b2 = x2[p2] - x2[p2 + 1];
    return b2;
}
public static Double func_f24c0bde57f34e0495308cce6925f78d(Integer[] x2, Integer p2, Integer[] y2) {
    y2[p2 + 1].intValue();
    y2[p2].intValue();
    double b2 = x2[p2] - x2[p2 + 1];
    x2[p2].intValue();
    y2[p2].intValue();
    return b2;
}


****** Cluster 654 ******
public static Double func_df6c3a88176f4979bf5b741ea2e9e44d(Integer p1, Double c1, Double b1, Integer[] x2, Integer[] x1, Integer p2, Double a1, Double nx, Double a2, Integer[] y2, Double ca, Double cx) {
    double b2 = x2[p2] - x2[p2 + 1];
    double c2 = a2 * (double) x2[p2].intValue() + b2 * (double) y2[p2].intValue();
    for (int j = 0; j < 100; ++j) {
        double my2;
        double mx = (nx + cx) * 0.5;
        double cy1 = (c1 - a1 * cx) / b1;
        double my1 = (c1 - a1 * mx) / b1;
        double cy2 = (c2 - a2 * cx) / b2;
        double la = (cy2 - cy1 + (my2 = (c2 - a2 * mx) / b2) - my1) * (mx - cx);
        if (la < ca) {
            cx = mx;
            ca = ca - la;
            continue;
        }
        nx = mx;
    }
    if (ca > 1.0E-9) {
        if (x1[p1 + 1] < x2[p2 + 1]) {
            Integer.valueOf(p1 + 1);
        } else if (x1[p1 + 1] > x2[p2 + 1]) {
            Integer.valueOf(p2 + 1);
        } else {
            Integer.valueOf(p1 + 1);
            Integer.valueOf(p2 + 1);
        }
    }
    return nx;
}
public static Double func_9f7fe5ab42df42579fb9abd7cca8c59a(Integer p1, Double c1, Double b1, Integer[] x2, Integer[] x1, Integer p2, Double a1, Double nx, Double a2, Integer[] y2, Double ca, Double cx) {
    double b2 = x2[p2] - x2[p2 + 1];
    double c2 = a2 * (double) x2[p2].intValue() + b2 * (double) y2[p2].intValue();
    for (int j = 0; j < 100; ++j) {
        double my2;
        double mx = (nx + cx) * 0.5;
        double cy1 = (c1 - a1 * cx) / b1;
        double my1 = (c1 - a1 * mx) / b1;
        double cy2 = (c2 - a2 * cx) / b2;
        double la = (cy2 - cy1 + (my2 = (c2 - a2 * mx) / b2) - my1) * (mx - cx);
        if (la < ca) {
            cx = mx;
            ca = ca - la;
            continue;
        }
        nx = mx;
    }
    if (ca > 1.0E-9) {
        if (x1[p1 + 1] < x2[p2 + 1]) {
            Integer.valueOf(p1 + 1);
        } else if (x1[p1 + 1] > x2[p2 + 1]) {
            Integer.valueOf(p2 + 1);
        } else {
            Integer.valueOf(p1 + 1);
            Integer.valueOf(p2 + 1);
        }
    }
    return cx;
}


****** Cluster 655 ******
public static Double func_c528ff1d1af24cefb43f1253968561e8(Integer p1, Integer[] x2, Integer[] x1, Integer p2, Double area, Integer[] y1, Integer[] y2, Double cx) {
    double ca = area;
    while (ca > 1.0E-9) {
        double nx = Math.min(x1[p1 + 1], x2[p2 + 1]);
        double a1 = y1[p1 + 1] - y1[p1];
        double b1 = x1[p1] - x1[p1 + 1];
        double c1 = a1 * (double) x1[p1].intValue() + b1 * (double) y1[p1].intValue();
        double a2 = y2[p2 + 1] - y2[p2];
        double b2 = x2[p2] - x2[p2 + 1];
        double c2 = a2 * (double) x2[p2].intValue() + b2 * (double) y2[p2].intValue();
        for (int j = 0; j < 100; ++j) {
            double my2;
            double mx = (nx + cx) * 0.5;
            double cy1 = (c1 - a1 * cx) / b1;
            double my1 = (c1 - a1 * mx) / b1;
            double cy2 = (c2 - a2 * cx) / b2;
            double la = (cy2 - cy1 + (my2 = (c2 - a2 * mx) / b2) - my1) * (mx - cx);
            if (la < ca) {
                cx = mx;
                ca -= la;
                continue;
            }
            nx = mx;
        }
        if (ca <= 1.0E-9)
            continue;
        if (x1[p1 + 1] < x2[p2 + 1]) {
            p1 = p1 + 1;
            continue;
        }
        if (x1[p1 + 1] > x2[p2 + 1]) {
            p2 = p2 + 1;
            continue;
        }
        p1 = p1 + 1;
        p2 = p2 + 1;
    }
    return ca;
}
public static Double func_6797a9a57eba4a04b87f0b1951029ffb(Integer p1, Integer[] x2, Integer[] x1, Integer p2, Double area, Integer[] y1, Integer[] y2, Double cx) {
    double ca = area;
    while (ca > 1.0E-9) {
        double nx = Math.min(x1[p1 + 1], x2[p2 + 1]);
        double a1 = y1[p1 + 1] - y1[p1];
        double b1 = x1[p1] - x1[p1 + 1];
        double c1 = a1 * (double) x1[p1].intValue() + b1 * (double) y1[p1].intValue();
        double a2 = y2[p2 + 1] - y2[p2];
        double b2 = x2[p2] - x2[p2 + 1];
        double c2 = a2 * (double) x2[p2].intValue() + b2 * (double) y2[p2].intValue();
        for (int j = 0; j < 100; ++j) {
            double my2;
            double mx = (nx + cx) * 0.5;
            double cy1 = (c1 - a1 * cx) / b1;
            double my1 = (c1 - a1 * mx) / b1;
            double cy2 = (c2 - a2 * cx) / b2;
            double la = (cy2 - cy1 + (my2 = (c2 - a2 * mx) / b2) - my1) * (mx - cx);
            if (la < ca) {
                cx = mx;
                ca -= la;
                continue;
            }
            nx = mx;
        }
        if (ca <= 1.0E-9)
            continue;
        if (x1[p1 + 1] < x2[p2 + 1]) {
            p1 = p1 + 1;
            continue;
        }
        if (x1[p1 + 1] > x2[p2 + 1]) {
            p2 = p2 + 1;
            continue;
        }
        p1 = p1 + 1;
        p2 = p2 + 1;
    }
    System.out.println(cx);
    return ca;
}


****** Cluster 656 ******
public static Double func_96bec2c32cea428dbecd312543f88244(Integer p1, Integer[] x2, Integer[] x1, Integer p2, Double area, Integer[] y1, Integer[] y2, Double cx) {
    double ca = area;
    while (ca > 1.0E-9) {
        double nx = Math.min(x1[p1 + 1], x2[p2 + 1]);
        double a1 = y1[p1 + 1] - y1[p1];
        double b1 = x1[p1] - x1[p1 + 1];
        double c1 = a1 * (double) x1[p1].intValue() + b1 * (double) y1[p1].intValue();
        double a2 = y2[p2 + 1] - y2[p2];
        double b2 = x2[p2] - x2[p2 + 1];
        double c2 = a2 * (double) x2[p2].intValue() + b2 * (double) y2[p2].intValue();
        for (int j = 0; j < 100; ++j) {
            double my2;
            double mx = (nx + cx) * 0.5;
            double cy1 = (c1 - a1 * cx) / b1;
            double my1 = (c1 - a1 * mx) / b1;
            double cy2 = (c2 - a2 * cx) / b2;
            double la = (cy2 - cy1 + (my2 = (c2 - a2 * mx) / b2) - my1) * (mx - cx);
            if (la < ca) {
                cx = mx;
                ca -= la;
                continue;
            }
            nx = mx;
        }
        if (ca <= 1.0E-9)
            continue;
        if (x1[p1 + 1] < x2[p2 + 1]) {
            p1 = p1 + 1;
            continue;
        }
        if (x1[p1 + 1] > x2[p2 + 1]) {
            p2 = p2 + 1;
            continue;
        }
        p1 = p1 + 1;
        p2 = p2 + 1;
    }
    return cx;
}
public static Double func_86142f41486448ec8952ea9437692a73(Integer p1, Integer[] x2, Integer[] x1, Integer p2, Double area, Integer[] y1, Integer[] y2, Double cx) {
    double ca = area;
    while (ca > 1.0E-9) {
        double nx = Math.min(x1[p1 + 1], x2[p2 + 1]);
        double a1 = y1[p1 + 1] - y1[p1];
        double b1 = x1[p1] - x1[p1 + 1];
        double c1 = a1 * (double) x1[p1].intValue() + b1 * (double) y1[p1].intValue();
        double a2 = y2[p2 + 1] - y2[p2];
        double b2 = x2[p2] - x2[p2 + 1];
        double c2 = a2 * (double) x2[p2].intValue() + b2 * (double) y2[p2].intValue();
        for (int j = 0; j < 100; ++j) {
            double my2;
            double mx = (nx + cx) * 0.5;
            double cy1 = (c1 - a1 * cx) / b1;
            double my1 = (c1 - a1 * mx) / b1;
            double cy2 = (c2 - a2 * cx) / b2;
            double la = (cy2 - cy1 + (my2 = (c2 - a2 * mx) / b2) - my1) * (mx - cx);
            if (la < ca) {
                cx = mx;
                ca -= la;
                continue;
            }
            nx = mx;
        }
        if (ca <= 1.0E-9)
            continue;
        if (x1[p1 + 1] < x2[p2 + 1]) {
            p1 = p1 + 1;
            continue;
        }
        if (x1[p1 + 1] > x2[p2 + 1]) {
            p2 = p2 + 1;
            continue;
        }
        p1 = p1 + 1;
        p2 = p2 + 1;
    }
    System.out.println(cx);
    return cx;
}


****** Cluster 657 ******
public static Double func_638768e906a44a83b59603c5ff9ff896(Integer[] x2, Integer[] x1, Double area, Integer[] y1, Integer l, Integer[] y2, Integer u) {
    for (int i = 0; i < l - 1; ++i) {
        area = area + (double) (x1[i] * y1[i + 1] - x1[i + 1] * y1[i]);
    }
    area = area + (double) (x1[l - 1] * y2[u - 1] - x2[u - 1] * y1[l - 1]);
    return area;
}
public static Double func_409fd46d2d4d4f37a5d9f518fd3bd2a7(Integer[] x2, Integer[] x1, Double area, Integer[] y1, Integer l, Integer[] y2, Integer u) {
    int i;
    for (i = 0; i < l - 1; ++i) {
        area = area + (double) (x1[i] * y1[i + 1] - x1[i + 1] * y1[i]);
    }
    area = area + (double) (x1[l - 1] * y2[u - 1] - x2[u - 1] * y1[l - 1]);
    for (i = u.intValue() - 1; i >= 1; --i) {
        area = area + (double) (x2[i] * y2[i - 1] - x2[i - 1] * y2[i]);
    }
    return area;
}
public static Double func_5f42fc2683204b9b84e6bd1dfa575653(Integer[] x2, Integer[] x1, Double area, Integer[] y1, Integer l, Integer[] y2, Integer u) {
    int i;
    for (i = 0; i < l - 1; ++i) {
        area = area + (double) (x1[i] * y1[i + 1] - x1[i + 1] * y1[i]);
    }
    area = area + (double) (x1[l - 1] * y2[u - 1] - x2[u - 1] * y1[l - 1]);
    for (i = u.intValue() - 1; i >= 1; --i) {
        area = area + (double) (x2[i] * y2[i - 1] - x2[i - 1] * y2[i]);
    }
    area = area + (double) (x2[0] * y1[0] - x1[0] * y2[0]);
    return area;
}


****** Cluster 658 ******
public static Double func_eb5d35aa89d243d380958b25ebc61136(Integer[] x2, Integer[] x1, Double area, Integer[] y1, Integer l, Integer[] y2, Integer u) {
    area = area + (double) (x1[l - 1] * y2[u - 1] - x2[u - 1] * y1[l - 1]);
    for (int i = u.intValue() - 1; i >= 1; --i) {
        area = area + (double) (x2[i] * y2[i - 1] - x2[i - 1] * y2[i]);
    }
    return area;
}
public static Double func_020c6b233aa14f6c8642622a88ba9c59(Integer[] x2, Integer[] x1, Double area, Integer[] y1, Integer l, Integer[] y2, Integer u) {
    area = area + (double) (x1[l - 1] * y2[u - 1] - x2[u - 1] * y1[l - 1]);
    for (int i = u.intValue() - 1; i >= 1; --i) {
        area = area + (double) (x2[i] * y2[i - 1] - x2[i - 1] * y2[i]);
    }
    area = area + (double) (x2[0] * y1[0] - x1[0] * y2[0]);
    return area;
}


****** Cluster 659 ******
public static Double func_1369d69e63da4996903947d4e3374c34(Integer g, Integer[] x2, Integer[] x1, Double area, Integer[] y1, Integer[] y2) {
    area = area + (double) (x2[0] * y1[0] - x1[0] * y2[0]);
    area = Math.abs(area) / (double) g.intValue();
    return area;
}
public static Double func_2216540a6f1644579725c69e4b81a8f8(Integer g, Integer[] x2, Integer[] x1, Double area, Integer[] y1, Integer[] y2) {
    area = area + (double) (x2[0] * y1[0] - x1[0] * y2[0]);
    area = Math.abs(area) / (double) g.intValue();
    return area;
}
public static Double func_766a243791cd49aabdb52a068fd66a45(Integer g, Integer[] x2, Integer[] x1, Double area, Integer[] y1, Integer[] y2) {
    area = area + (double) (x2[0] * y1[0] - x1[0] * y2[0]);
    area = Math.abs(area) / (double) g.intValue();
    return area;
}


****** Cluster 660 ******
public static Double func_cce5610f591f450a9aae427dcef869e2(Integer g, Double area) {
    area = Math.abs(area) / (double) g.intValue();
    return area;
}
public static Double func_44937df5c7694e51a251f0635025bed2(Integer g, Double area) {
    area = Math.abs(area) / (double) g.intValue();
    return area;
}


****** Cluster 661 ******
public static Double func_8d3c21e85d124c4c843e87d88cf44cb2(Integer[] x2, Integer[] x1, Integer[] y1, Integer l, Integer[] y2, Integer u) {
    double area = 0.0;
    for (int i = 0; i < l - 1; ++i) {
        area += (double) (x1[i] * y1[i + 1] - x1[i + 1] * y1[i]);
    }
    return area += (double) (x1[l - 1] * y2[u - 1] - x2[u - 1] * y1[l - 1]);
}
public static Double func_e65410bf6b394fce8286b1107d88186c(Integer[] x2, Integer[] x1, Integer[] y1, Integer l, Integer[] y2, Integer u) {
    int i;
    double area = 0.0;
    for (i = 0; i < l - 1; ++i) {
        area += (double) (x1[i] * y1[i + 1] - x1[i + 1] * y1[i]);
    }
    area += (double) (x1[l - 1] * y2[u - 1] - x2[u - 1] * y1[l - 1]);
    for (i = u.intValue() - 1; i >= 1; --i) {
        area += (double) (x2[i] * y2[i - 1] - x2[i - 1] * y2[i]);
    }
    return area;
}
public static Double func_8ab7444cadcb4103baadd607ff1aff58(Integer[] x2, Integer[] x1, Integer[] y1, Integer l, Integer[] y2, Integer u) {
    int i;
    double area = 0.0;
    for (i = 0; i < l - 1; ++i) {
        area += (double) (x1[i] * y1[i + 1] - x1[i + 1] * y1[i]);
    }
    area += (double) (x1[l - 1] * y2[u - 1] - x2[u - 1] * y1[l - 1]);
    for (i = u.intValue() - 1; i >= 1; --i) {
        area += (double) (x2[i] * y2[i - 1] - x2[i - 1] * y2[i]);
    }
    return area += (double) (x2[0] * y1[0] - x1[0] * y2[0]);
}


****** Cluster 662 ******
public static Double func_d31aa7403be14083aeb6ee19789fd52f(Integer g, Integer[] x2, Integer[] x1, Double area, Integer[] y1, Integer[] y2, Integer u) {
    for (int i = u.intValue() - 1; i >= 1; --i) {
        area = area + (double) (x2[i] * y2[i - 1] - x2[i - 1] * y2[i]);
    }
    area = area + (double) (x2[0] * y1[0] - x1[0] * y2[0]);
    area = Math.abs(area) / (double) g.intValue();
    return area;
}
public static Double func_027b33962b7a417180df7805f61b49b5(Integer g, Integer[] x2, Integer[] x1, Double area, Integer[] y1, Integer[] y2, Integer u) {
    for (int i = u.intValue() - 1; i >= 1; --i) {
        area = area + (double) (x2[i] * y2[i - 1] - x2[i - 1] * y2[i]);
    }
    area = area + (double) (x2[0] * y1[0] - x1[0] * y2[0]);
    area = Math.abs(area) / (double) g.intValue();
    return area;
}
public static Double func_305290407315432b8039f0d1ab479727(Integer g, Integer[] x2, Integer[] x1, Double area, Integer[] y1, Integer[] y2, Integer u) {
    for (int i = u.intValue() - 1; i >= 1; --i) {
        area = area + (double) (x2[i] * y2[i - 1] - x2[i - 1] * y2[i]);
    }
    area = area + (double) (x2[0] * y1[0] - x1[0] * y2[0]);
    area = Math.abs(area) / (double) g.intValue();
    return area;
}


****** Cluster 663 ******
public static Double func_8acc1e4eea2046b6b0e86ad8d0773303(Integer g, Integer[] x2, Integer[] x1, Integer[] y1, Integer l, Integer[] y2, Integer u) {
    int i;
    double area = 0.0;
    for (i = 0; i < l - 1; ++i) {
        area += (double) (x1[i] * y1[i + 1] - x1[i + 1] * y1[i]);
    }
    area += (double) (x1[l - 1] * y2[u - 1] - x2[u - 1] * y1[l - 1]);
    for (i = u.intValue() - 1; i >= 1; --i) {
        area += (double) (x2[i] * y2[i - 1] - x2[i - 1] * y2[i]);
    }
    area += (double) (x2[0] * y1[0] - x1[0] * y2[0]);
    area = Math.abs(area) / (double) g.intValue();
    return area;
}
public static Double func_4213b0287be5463099bd2ae92fc443ed(Integer g, Integer[] x2, Integer[] x1, Integer[] y1, Integer l, Integer[] y2, Integer u) {
    int i;
    double area = 0.0;
    for (i = 0; i < l - 1; ++i) {
        area += (double) (x1[i] * y1[i + 1] - x1[i + 1] * y1[i]);
    }
    area += (double) (x1[l - 1] * y2[u - 1] - x2[u - 1] * y1[l - 1]);
    for (i = u.intValue() - 1; i >= 1; --i) {
        area += (double) (x2[i] * y2[i - 1] - x2[i - 1] * y2[i]);
    }
    area += (double) (x2[0] * y1[0] - x1[0] * y2[0]);
    area = Math.abs(area) / (double) g.intValue();
    return area;
}
public static Double func_96c8c14a527f4d90ba3c2252d9ab0b3c(Integer g, Integer[] x2, Integer[] x1, Integer[] y1, Integer l, Integer[] y2, Integer u) {
    int i;
    double area = 0.0;
    for (i = 0; i < l - 1; ++i) {
        area += (double) (x1[i] * y1[i + 1] - x1[i + 1] * y1[i]);
    }
    area += (double) (x1[l - 1] * y2[u - 1] - x2[u - 1] * y1[l - 1]);
    for (i = u.intValue() - 1; i >= 1; --i) {
        area += (double) (x2[i] * y2[i - 1] - x2[i - 1] * y2[i]);
    }
    area += (double) (x2[0] * y1[0] - x1[0] * y2[0]);
    area = Math.abs(area) / (double) g.intValue();
    return area;
}


****** Cluster 664 ******
public static Double func_a735fc29041547478ac6b3f4bf548814(Double dy2, Double dy1, Double left, Double dx, Double right) {
    double mid = (left + right) / 2.0;
    dy2.doubleValue();
    dy1.doubleValue();
    dx.doubleValue();
    dy1.doubleValue();
    return mid;
}
public static Double func_632c252f27464910b2739732ce1b9190(Double dy2, Double dy1, Double left, Double dx, Double right) {
    double mid = (left + right) / 2.0;
    dy2.doubleValue();
    dy1.doubleValue();
    dx.doubleValue();
    dy1.doubleValue();
    dy1.doubleValue();
    return mid;
}


****** Cluster 665 ******
public static Double func_8c7f972a3794440d95065335da586a83(Double dy2, Double dy1, Double left, Double dx, Double right) {
    double mid = (left + right) / 2.0;
    double dy2_ = (dy2 - dy1) * (mid / dx) + dy1;
    return dy2_;
}
public static Double func_e4e0deb4cbdc4017b416bde128f99174(Double dy2, Double dy1, Double left, Double dx, Double right) {
    double mid = (left + right) / 2.0;
    double dy2_ = (dy2 - dy1) * (mid / dx) + dy1;
    dy1.doubleValue();
    return dy2_;
}


****** Cluster 666 ******
public static Double func_aded572bdfe74c038b741fb9e34ae753(Double dy2, Double dy1, Integer i, Integer[] xxx, Double left, Double S0, Integer j, Double dx, Double right, Double[] ans) {
    for (int k = 0; k < 60; ++k) {
        double mid = (left + right) / 2.0;
        double dy2_ = (dy2 - dy1) * (mid / dx) + dy1;
        double S2 = (dy1 + dy2_) * mid / 2.0;
        if (S2 < S0) {
            left = mid;
            continue;
        }
        right = mid;
    }
    ans[j.intValue() - 1] = (left + right) / 2.0 + (double) xxx[i].intValue();
    return left;
}
public static Double func_6487ac8609784cc5b8491aaaf0654fa6(Double dy2, Double dy1, Integer i, Integer[] xxx, Double left, Double S0, Integer j, Double dx, Double right, Double[] ans) {
    for (int k = 0; k < 60; ++k) {
        double mid = (left + right) / 2.0;
        double dy2_ = (dy2 - dy1) * (mid / dx) + dy1;
        double S2 = (dy1 + dy2_) * mid / 2.0;
        if (S2 < S0) {
            left = mid;
            continue;
        }
        right = mid;
    }
    ans[j.intValue() - 1] = (left + right) / 2.0 + (double) xxx[i].intValue();
    return right;
}
public static Double func_b8cd97cc91c64fb69d87fb41b1699538(Double dy2, Double dy1, Integer i, Integer[] xxx, Double left, Double S0, Integer j, Double dx, Double right, Double[] ans) {
    for (int k = 0; k < 60; ++k) {
        double mid = (left + right) / 2.0;
        double dy2_ = (dy2 - dy1) * (mid / dx) + dy1;
        double S2 = (dy1 + dy2_) * mid / 2.0;
        if (S2 < S0) {
            left = mid;
            continue;
        }
        right = mid;
    }
    ans[j.intValue() - 1] = (left + right) / 2.0 + (double) xxx[i].intValue();
    Integer.valueOf(j + 1);
    return right;
}


****** Cluster 667 ******
public static Double func_9c877226a93c42038de8630b19379200(Double S_left, Double S, Double dy1, Double dy2, Integer G, Integer i, Integer[] xxx, Integer j, Double dx, Double[] ans) {
    double S1 = (dy1 + dy2) * dx / 2.0;
    while (j < G) {
        double S0 = (double) j.intValue() * S / (double) G.intValue() - S_left;
        if (S0 < 0.0) {
            j = j + 1;
            continue;
        }
        if (S0 > S1)
            break;
        double left = 0.0;
        double right = dx;
        for (int k = 0; k < 60; ++k) {
            double mid = (left + right) / 2.0;
            double dy2_ = (dy2 - dy1) * (mid / dx) + dy1;
            double S2 = (dy1 + dy2_) * mid / 2.0;
            if (S2 < S0) {
                left = mid;
                continue;
            }
            right = mid;
        }
        ans[j.intValue() - 1] = (left + right) / 2.0 + (double) xxx[i].intValue();
        j = j + 1;
    }
    return S1;
}
public static Double func_a51f4d99edac4a83a770fc9e37436774(Double S_left, Double S, Double dy1, Double dy2, Integer G, Integer i, Integer[] xxx, Integer j, Double dx, Double[] ans) {
    double S1 = (dy1 + dy2) * dx / 2.0;
    while (j < G) {
        double S0 = (double) j.intValue() * S / (double) G.intValue() - S_left;
        if (S0 < 0.0) {
            j = j + 1;
            continue;
        }
        if (S0 > S1)
            break;
        double left = 0.0;
        double right = dx;
        for (int k = 0; k < 60; ++k) {
            double mid = (left + right) / 2.0;
            double dy2_ = (dy2 - dy1) * (mid / dx) + dy1;
            double S2 = (dy1 + dy2_) * mid / 2.0;
            if (S2 < S0) {
                left = mid;
                continue;
            }
            right = mid;
        }
        ans[j.intValue() - 1] = (left + right) / 2.0 + (double) xxx[i].intValue();
        j = j + 1;
    }
    Double.valueOf(S_left + S1);
    return S1;
}


****** Cluster 668 ******
public static Double func_1be74f4751ae49e2a7e7947cf03c90c1(Integer curX, Double totalArea, Integer lastX, Double curHeight, Double thisHeight) {
    totalArea = totalArea + (1.0 * curHeight + thisHeight) / 2.0 * (double) (curX - lastX);
    return totalArea;
}
public static Double func_2a7a2e99eac04f9fb7a36cf51b477ace(Integer curX, Double totalArea, Integer lastX, Double curHeight, Double thisHeight) {
    totalArea = totalArea + (1.0 * curHeight + thisHeight) / 2.0 * (double) (curX - lastX);
    return totalArea;
}


****** Cluster 669 ******
public static Double func_43d7df1f653044769bacaa0e7fb2a7da(Integer curX, Double totalArea, Integer lastX, Double curHeight, Double thisHeight) {
    Double.valueOf(totalArea + (1.0 * curHeight + thisHeight) / 2.0 * (double) (curX - lastX));
    curHeight = thisHeight;
    return curHeight;
}
public static Double func_aa58265a2fdf41b9a98a36ba61dc5364(Integer curX, Double totalArea, Integer lastX, Double curHeight, Double thisHeight) {
    Double.valueOf(totalArea + (1.0 * curHeight + thisHeight) / 2.0 * (double) (curX - lastX));
    curHeight = thisHeight;
    return curHeight;
}


****** Cluster 670 ******
public static Double func_1a4d61b53baa416e953af8b30db63a74(Integer curX, Double curHeight, Double totalArea, Double upHeight, Double lastX) {
    totalArea = totalArea + (1.0 * curHeight + upHeight) / 2.0 * ((double) curX.intValue() - lastX);
    return totalArea;
}
public static Double func_1d27d08b25a744698ca58fab770e1f6e(Integer curX, Double curHeight, Double totalArea, Double lowHeight, Double lastX) {
    totalArea = totalArea + (1.0 * curHeight + lowHeight) / 2.0 * ((double) curX.intValue() - lastX);
    return totalArea;
}


****** Cluster 671 ******
public static Double func_55d82982866d44eb96ec483c90b444a3(Integer curX, Double curHeight, Double totalArea, Double upHeight, Double lastX) {
    Double.valueOf(totalArea + (1.0 * curHeight + upHeight) / 2.0 * ((double) curX.intValue() - lastX));
    curHeight = upHeight;
    return curHeight;
}
public static Double func_a280ebc5c2b0400e950b675626a14362(Integer curX, Double curHeight, Double totalArea, Double lowHeight, Double lastX) {
    Double.valueOf(totalArea + (1.0 * curHeight + lowHeight) / 2.0 * ((double) curX.intValue() - lastX));
    curHeight = lowHeight;
    return curHeight;
}


****** Cluster 672 ******
public static Double func_25f788c1a2d5466ab382703f102f4900(Integer curX, Double upHeight, Double totalArea, Integer lastX, Double curHeight) {
    Double.valueOf(totalArea + (1.0 * curHeight + upHeight) / 2.0 * (double) (curX - lastX));
    curHeight = upHeight;
    return curHeight;
}
public static Double func_2a1113d38b8a463b8f40f7378ae0fc7a(Integer curX, Double upHeight, Double totalArea, Integer lastX, Double curHeight) {
    Double.valueOf(totalArea + (1.0 * curHeight + upHeight) / 2.0 * (double) (curX - lastX));
    curHeight = upHeight;
    return curHeight;
}


****** Cluster 673 ******
public static Double func_a26968aee7884b6ca52079dfbd494ff2(Integer curX, Double upHeight, Double totalArea, Integer lastX, Double curHeight) {
    totalArea = totalArea + (1.0 * curHeight + upHeight) / 2.0 * (double) (curX - lastX);
    return totalArea;
}
public static Double func_81089d108ee9445a8c85a6518fb1366e(Integer curX, Double upHeight, Double totalArea, Integer lastX, Double curHeight) {
    totalArea = totalArea + (1.0 * curHeight + upHeight) / 2.0 * (double) (curX - lastX);
    return totalArea;
}


****** Cluster 674 ******
public static Integer func_5362ca13796b4260ac6cad72444dbaca(Integer curX, Double upHeight, Double totalArea, Integer lastX, Double curHeight) {
    Double.valueOf(totalArea + (1.0 * curHeight + upHeight) / 2.0 * (double) (curX - lastX));
    lastX = curX;
    return lastX;
}
public static Integer func_5735c81470ad4b5a8c35a440b9f2f3ce(Integer curX, Double totalArea, Double lowHeight, Integer lastX, Double curHeight) {
    Double.valueOf(totalArea + (1.0 * curHeight + lowHeight) / 2.0 * (double) (curX - lastX));
    lastX = curX;
    return lastX;
}


****** Cluster 675 ******
public static Double func_3ec39202df4d4278bb96cb42245cc8d7$5c8d048a$1c5227b5(Double upHeight, Integer curL) {
    Double curHeight = upHeight;
    Integer.valueOf(curL + 1);
    return curHeight;
}
public static Double func_3beff949a98e4efcbb57e828c78dfc13$6917baae(Double hi, Integer g) {
    Double used = hi;
    Integer.valueOf(g - 1);
    return used;
}
public static Double func_4e380baa41484de3916dfa841007de37$6b2013f8(Double hi, Integer g) {
    Double.valueOf(0.0);
    Double used = hi;
    Integer.valueOf(g - 1);
    return used;
}


****** Cluster 676 ******
public static Double func_695d7c5b4915404f9bec439821f0a309(Integer curX, Double totalArea, Double lowHeight, Integer lastX, Double curHeight) {
    totalArea = totalArea + (1.0 * curHeight + lowHeight) / 2.0 * (double) (curX - lastX);
    return totalArea;
}
public static Double func_f0970fd2e4754b4aaf90dc13773f8125(Integer curX, Double totalArea, Double lowHeight, Integer lastX, Double curHeight) {
    totalArea = totalArea + (1.0 * curHeight + lowHeight) / 2.0 * (double) (curX - lastX);
    return totalArea;
}


****** Cluster 677 ******
public static Double func_d5de6b5d742f44259f704a50342f55be(Integer curX, Double totalArea, Double lowHeight, Integer lastX, Double curHeight) {
    Double.valueOf(totalArea + (1.0 * curHeight + lowHeight) / 2.0 * (double) (curX - lastX));
    curHeight = lowHeight;
    return curHeight;
}
public static Double func_1e39662e5f4345598cdfc314f9a13a3b(Integer curX, Double totalArea, Double lowHeight, Integer lastX, Double curHeight) {
    Double.valueOf(totalArea + (1.0 * curHeight + lowHeight) / 2.0 * (double) (curX - lastX));
    curHeight = lowHeight;
    return curHeight;
}


****** Cluster 678 ******
public static Double func_35f0b98f119744959a02910610157d13(Double curHeight, Double lowerHeight, Double totalArea, Double curX, Double upperHeight, Double lastX) {
    upperHeight.doubleValue();
    lowerHeight.doubleValue();
    totalArea = totalArea + (upperHeight - lowerHeight + curHeight) / 2.0 * (curX - lastX);
    return totalArea;
}
public static double func_66708a22f45c4e19a833369d5c9b5036(Double curHeight, Double lowerHeight, Double totalArea, Double curX, Double upperHeight, Double lastX) {
    upperHeight.doubleValue();
    lowerHeight.doubleValue();
    totalArea = totalArea + (upperHeight - lowerHeight + curHeight) / 2.0 * (curX - lastX);
    return totalArea;
}


****** Cluster 679 ******
public static Double func_c022f230d67547f786071bb3924997a9(Double max, Double min, Double lastKnown) {
    double mid = (min + max) / 2.0;
    double[] poly = new double[8];
    poly[0] = mid;
    poly[1] = 1001.0;
    poly[2] = mid;
    poly[3] = -1001.0;
    poly[4] = lastKnown;
    return mid;
}
public static Double func_65bc4719ef254c58ab208ac032436003(Double max, Double min, Double lastKnown) {
    double mid = (min + max) / 2.0;
    double[] poly = new double[8];
    poly[0] = mid;
    poly[1] = 1001.0;
    poly[2] = mid;
    poly[3] = -1001.0;
    poly[4] = lastKnown;
    poly[5] = -1001.0;
    return mid;
}
public static Double func_07a7b6a7cf004275b556e825670834d2(Double max, Double min, Double lastKnown) {
    double mid = (min + max) / 2.0;
    double[] poly = new double[8];
    poly[0] = mid;
    poly[1] = 1001.0;
    poly[2] = mid;
    poly[3] = -1001.0;
    poly[4] = lastKnown;
    poly[5] = -1001.0;
    poly[6] = lastKnown;
    return mid;
}
public static Double func_b5a55801169f49a1b797739739709998(Double max, Double min, Double lastKnown) {
    double mid = (min + max) / 2.0;
    double[] poly = new double[] { mid, 1001.0, mid, -1001.0, lastKnown, -1001.0, lastKnown, 1001.0 };
    return mid;
}


****** Cluster 680 ******
public static Double func_8daed4a641f14b849876b2630ae32ea2(Integer p, Double req, Double a2, Double used, Double b, Double hi, Double lo, Double cur) {
    for (int j = 0; j < 100; ++j) {
        double mi = (hi + lo) / 2.0;
        double cand = ((b - a2) * used + a2 + (b - a2) * mi + a2) * (mi - used) / 2.0;
        if (cur + cand >= req) {
            hi = mi;
            continue;
        }
        lo = mi;
    }
    System.out.println((double) p.intValue() + hi);
    Double.valueOf(0.0);
    used = hi;
    return used;
}
public static Double func_5d21dfaa25f94a76bae5d35420818567(Integer p, Double req, Double a2, Double used, Double b, Double hi, Double lo, Double cur) {
    for (int j = 0; j < 100; ++j) {
        double mi = (hi + lo) / 2.0;
        double cand = ((b - a2) * used + a2 + (b - a2) * mi + a2) * (mi - used) / 2.0;
        if (cur + cand >= req) {
            hi = mi;
            continue;
        }
        lo = mi;
    }
    System.out.println((double) p.intValue() + hi);
    Double.valueOf(0.0);
    return hi;
}
public static Double func_3940d8f2c85a4d519dfd7a58b86ca075(Integer p, Double req, Double a2, Double used, Double b, Double hi, Double lo, Double cur) {
    for (int j = 0; j < 100; ++j) {
        double mi = (hi + lo) / 2.0;
        double cand = ((b - a2) * used + a2 + (b - a2) * mi + a2) * (mi - used) / 2.0;
        if (cur + cand >= req) {
            hi = mi;
            continue;
        }
        lo = mi;
    }
    System.out.println((double) p.intValue() + hi);
    Double.valueOf(0.0);
    return hi;
}
public static Double func_fc6277b4544e4a46908418caf3dbdf78(Integer p, Double req, Double a2, Double used, Double b, Double hi, Double lo, Double cur) {
    for (int j = 0; j < 100; ++j) {
        double mi = (hi + lo) / 2.0;
        double cand = ((b - a2) * used + a2 + (b - a2) * mi + a2) * (mi - used) / 2.0;
        if (cur + cand >= req) {
            hi = mi;
            continue;
        }
        lo = mi;
    }
    System.out.println((double) p.intValue() + hi);
    return hi;
}


****** Cluster 681 ******
public static Double func_9ebe16a0e1d74851b9c6366158129689(Integer p, Double req, Double a2, Double used, Double b, Double hi, Double lo, Double cur) {
    for (int j = 0; j < 100; ++j) {
        double mi = (hi + lo) / 2.0;
        double cand = ((b - a2) * used + a2 + (b - a2) * mi + a2) * (mi - used) / 2.0;
        if (cur + cand >= req) {
            hi = mi;
            continue;
        }
        lo = mi;
    }
    System.out.println((double) p.intValue() + hi);
    Double.valueOf(0.0);
    return lo;
}
public static Double func_94f1a99140044e4bb964b5ee56b3ca90(Integer p, Double req, Double a2, Double used, Double b, Double hi, Double lo, Double cur) {
    for (int j = 0; j < 100; ++j) {
        double mi = (hi + lo) / 2.0;
        double cand = ((b - a2) * used + a2 + (b - a2) * mi + a2) * (mi - used) / 2.0;
        if (cur + cand >= req) {
            hi = mi;
            continue;
        }
        lo = mi;
    }
    System.out.println((double) p.intValue() + hi);
    return lo;
}
public static Double func_f17ee9e8fcd14031a59fef104751b019(Integer p, Double req, Double a2, Double used, Double b, Double hi, Double lo, Double cur) {
    for (int j = 0; j < 100; ++j) {
        double mi = (hi + lo) / 2.0;
        double cand = ((b - a2) * used + a2 + (b - a2) * mi + a2) * (mi - used) / 2.0;
        if (cur + cand >= req) {
            hi = mi;
            continue;
        }
        lo = mi;
    }
    System.out.println((double) p.intValue() + hi);
    Double.valueOf(0.0);
    return lo;
}


****** Cluster 682 ******
public static Double func_b71f3a0c928844e7afc0302684ee652d(Integer p, Double req, Double a2, Double used, Double b, Double cur) {
    double hi = 1.0;
    double lo = used;
    for (int j = 0; j < 100; ++j) {
        double mi = (hi + lo) / 2.0;
        double cand = ((b - a2) * used + a2 + (b - a2) * mi + a2) * (mi - used) / 2.0;
        if (cur + cand >= req) {
            hi = mi;
            continue;
        }
        lo = mi;
    }
    System.out.println((double) p.intValue() + hi);
    Double.valueOf(0.0);
    return hi;
}
public static Double func_7d61e3b02a0446e9a2fa569f8765085a(Integer p, Double req, Double a2, Double used, Double b, Double cur) {
    double hi = 1.0;
    double lo = used;
    for (int j = 0; j < 100; ++j) {
        double mi = (hi + lo) / 2.0;
        double cand = ((b - a2) * used + a2 + (b - a2) * mi + a2) * (mi - used) / 2.0;
        if (cur + cand >= req) {
            hi = mi;
            continue;
        }
        lo = mi;
    }
    System.out.println((double) p.intValue() + hi);
    Double.valueOf(0.0);
    used = hi;
    return used;
}
public static Double func_a16ae840899f4e7d97643b3b36e823bf(Integer p, Double req, Double a2, Double used, Double b, Double cur) {
    double hi = 1.0;
    double lo = used;
    for (int j = 0; j < 100; ++j) {
        double mi = (hi + lo) / 2.0;
        double cand = ((b - a2) * used + a2 + (b - a2) * mi + a2) * (mi - used) / 2.0;
        if (cur + cand >= req) {
            hi = mi;
            continue;
        }
        lo = mi;
    }
    System.out.println((double) p.intValue() + hi);
    Double.valueOf(0.0);
    Double.valueOf(hi);
    return hi;
}
public static Double func_e22297a3f22a4724bdc733f542095a95(Integer p, Double req, Double a2, Double used, Double b, Double cur) {
    double hi = 1.0;
    double lo = used;
    for (int j = 0; j < 100; ++j) {
        double mi = (hi + lo) / 2.0;
        double cand = ((b - a2) * used + a2 + (b - a2) * mi + a2) * (mi - used) / 2.0;
        if (cur + cand >= req) {
            hi = mi;
            continue;
        }
        lo = mi;
    }
    System.out.println((double) p.intValue() + hi);
    return hi;
}


****** Cluster 683 ******
public static Double func_d433ae78b3764e2f98bcb07b21ec2500(Integer p, Double req, Double a2, Double used, Double b, Double cur) {
    double hi = 1.0;
    double lo = used;
    for (int j = 0; j < 100; ++j) {
        double mi = (hi + lo) / 2.0;
        double cand = ((b - a2) * used + a2 + (b - a2) * mi + a2) * (mi - used) / 2.0;
        if (cur + cand >= req) {
            hi = mi;
            continue;
        }
        lo = mi;
    }
    System.out.println((double) p.intValue() + hi);
    Double.valueOf(0.0);
    return lo;
}
public static Double func_c9335e12df984eeea0645007b954d6de(Integer p, Double req, Double a2, Double used, Double b, Double cur) {
    double hi = 1.0;
    double lo = used;
    for (int j = 0; j < 100; ++j) {
        double mi = (hi + lo) / 2.0;
        double cand = ((b - a2) * used + a2 + (b - a2) * mi + a2) * (mi - used) / 2.0;
        if (cur + cand >= req) {
            hi = mi;
            continue;
        }
        lo = mi;
    }
    System.out.println((double) p.intValue() + hi);
    Double.valueOf(0.0);
    Double.valueOf(hi);
    return lo;
}
public static Double func_33f0b424d2564f99b929be3f05413b85(Integer p, Double req, Double a2, Double used, Double b, Double cur) {
    double hi = 1.0;
    double lo = used;
    for (int j = 0; j < 100; ++j) {
        double mi = (hi + lo) / 2.0;
        double cand = ((b - a2) * used + a2 + (b - a2) * mi + a2) * (mi - used) / 2.0;
        if (cur + cand >= req) {
            hi = mi;
            continue;
        }
        lo = mi;
    }
    System.out.println((double) p.intValue() + hi);
    return lo;
}


****** Cluster 684 ******
public static Double func_e0119a8ce2ea4dc89ec6905127827814(Integer p, Double req, Double a2, Double used, Double b, Double hi, Double cur) {
    double lo = used;
    for (int j = 0; j < 100; ++j) {
        double mi = (hi + lo) / 2.0;
        double cand = ((b - a2) * used + a2 + (b - a2) * mi + a2) * (mi - used) / 2.0;
        if (cur + cand >= req) {
            hi = mi;
            continue;
        }
        lo = mi;
    }
    System.out.println((double) p.intValue() + hi);
    Double.valueOf(0.0);
    used = hi;
    return used;
}
public static Double func_f573fef0985f4d5ca98480cdbb7e2228(Integer p, Double req, Double a2, Double used, Double b, Double hi, Double cur) {
    double lo = used;
    for (int j = 0; j < 100; ++j) {
        double mi = (hi + lo) / 2.0;
        double cand = ((b - a2) * used + a2 + (b - a2) * mi + a2) * (mi - used) / 2.0;
        if (cur + cand >= req) {
            hi = mi;
            continue;
        }
        lo = mi;
    }
    System.out.println((double) p.intValue() + hi);
    Double.valueOf(0.0);
    return hi;
}
public static Double func_3b9d61c057ae4ad29a69ba151f893f5c(Integer p, Double req, Double a2, Double used, Double b, Double hi, Double cur) {
    double lo = used;
    for (int j = 0; j < 100; ++j) {
        double mi = (hi + lo) / 2.0;
        double cand = ((b - a2) * used + a2 + (b - a2) * mi + a2) * (mi - used) / 2.0;
        if (cur + cand >= req) {
            hi = mi;
            continue;
        }
        lo = mi;
    }
    System.out.println((double) p.intValue() + hi);
    return hi;
}
public static Double func_55c016c021ad4749be33744949016f4c(Integer p, Double req, Double a2, Double used, Double b, Double hi, Double cur) {
    double lo = used;
    for (int j = 0; j < 100; ++j) {
        double mi = (hi + lo) / 2.0;
        double cand = ((b - a2) * used + a2 + (b - a2) * mi + a2) * (mi - used) / 2.0;
        if (cur + cand >= req) {
            hi = mi;
            continue;
        }
        lo = mi;
    }
    System.out.println((double) p.intValue() + hi);
    Double.valueOf(0.0);
    return hi;
}


****** Cluster 685 ******
public static Double func_2eaa7b34db4f48a1b957fcf68906682d(Integer p, Double req, Double a2, Double used, Double b, Double hi, Double cur) {
    double lo = used;
    for (int j = 0; j < 100; ++j) {
        double mi = (hi + lo) / 2.0;
        double cand = ((b - a2) * used + a2 + (b - a2) * mi + a2) * (mi - used) / 2.0;
        if (cur + cand >= req) {
            hi = mi;
            continue;
        }
        lo = mi;
    }
    System.out.println((double) p.intValue() + hi);
    Double.valueOf(0.0);
    return lo;
}
public static Double func_5a8454ebad5d4faea16bc5cc6a189353(Integer p, Double req, Double a2, Double used, Double b, Double hi, Double cur) {
    double lo = used;
    for (int j = 0; j < 100; ++j) {
        double mi = (hi + lo) / 2.0;
        double cand = ((b - a2) * used + a2 + (b - a2) * mi + a2) * (mi - used) / 2.0;
        if (cur + cand >= req) {
            hi = mi;
            continue;
        }
        lo = mi;
    }
    System.out.println((double) p.intValue() + hi);
    return lo;
}
public static Double func_8762f51e9a6f49979ea28fe0c241dac5(Integer p, Double req, Double a2, Double used, Double b, Double hi, Double cur) {
    double lo = used;
    for (int j = 0; j < 100; ++j) {
        double mi = (hi + lo) / 2.0;
        double cand = ((b - a2) * used + a2 + (b - a2) * mi + a2) * (mi - used) / 2.0;
        if (cur + cand >= req) {
            hi = mi;
            continue;
        }
        lo = mi;
    }
    System.out.println((double) p.intValue() + hi);
    Double.valueOf(0.0);
    return lo;
}


****** Cluster 686 ******
public static Double func_680edcb1f4ad43bb99aefa1a1c33c340(Integer p, Double req, Double a2, Double used, Double b, Double hi, Integer g, Double lo, Double cur) {
    for (int j = 0; j < 100; ++j) {
        double mi = (hi + lo) / 2.0;
        double cand = ((b - a2) * used + a2 + (b - a2) * mi + a2) * (mi - used) / 2.0;
        if (cur + cand >= req) {
            hi = mi;
            continue;
        }
        lo = mi;
    }
    System.out.println((double) p.intValue() + hi);
    Double.valueOf(0.0);
    used = hi;
    Integer.valueOf(g - 1);
    return used;
}
public static Double func_e70000358ac34ed5b358992fb96cdb05(Integer p, Double req, Double a2, Double used, Double b, Double hi, Integer g, Double lo, Double cur) {
    for (int j = 0; j < 100; ++j) {
        double mi = (hi + lo) / 2.0;
        double cand = ((b - a2) * used + a2 + (b - a2) * mi + a2) * (mi - used) / 2.0;
        if (cur + cand >= req) {
            hi = mi;
            continue;
        }
        lo = mi;
    }
    System.out.println((double) p.intValue() + hi);
    Double.valueOf(0.0);
    Integer.valueOf(g - 1);
    return hi;
}


****** Cluster 687 ******
public static Double func_a118315836924e88b0dc3788fa74b8ad(Integer p, Double req, Double a2, Double used, Double b, Double hi, Integer g, Double cur) {
    double lo = used;
    for (int j = 0; j < 100; ++j) {
        double mi = (hi + lo) / 2.0;
        double cand = ((b - a2) * used + a2 + (b - a2) * mi + a2) * (mi - used) / 2.0;
        if (cur + cand >= req) {
            hi = mi;
            continue;
        }
        lo = mi;
    }
    System.out.println((double) p.intValue() + hi);
    Double.valueOf(0.0);
    used = hi;
    Integer.valueOf(g - 1);
    return used;
}
public static Double func_589cfe75230441938806ccc1a8d0e67e(Integer p, Double req, Double a2, Double used, Double b, Double hi, Integer g, Double cur) {
    double lo = used;
    for (int j = 0; j < 100; ++j) {
        double mi = (hi + lo) / 2.0;
        double cand = ((b - a2) * used + a2 + (b - a2) * mi + a2) * (mi - used) / 2.0;
        if (cur + cand >= req) {
            hi = mi;
            continue;
        }
        lo = mi;
    }
    System.out.println((double) p.intValue() + hi);
    Double.valueOf(0.0);
    Integer.valueOf(g - 1);
    return hi;
}


****** Cluster 688 ******
public static Double func_d1fe8ee9305f4db4ae36f7a6d77dcd5e(Integer p, Double req, Double a2, Double used, Double b, Integer g, Double cur) {
    double hi = 1.0;
    double lo = used;
    for (int j = 0; j < 100; ++j) {
        double mi = (hi + lo) / 2.0;
        double cand = ((b - a2) * used + a2 + (b - a2) * mi + a2) * (mi - used) / 2.0;
        if (cur + cand >= req) {
            hi = mi;
            continue;
        }
        lo = mi;
    }
    System.out.println((double) p.intValue() + hi);
    Double.valueOf(0.0);
    used = hi;
    Integer.valueOf(g - 1);
    return used;
}
public static Double func_8e793ba5ba4e4c698b22913be8c4dda5(Integer p, Double req, Double a2, Double used, Double b, Integer g, Double cur) {
    double hi = 1.0;
    double lo = used;
    for (int j = 0; j < 100; ++j) {
        double mi = (hi + lo) / 2.0;
        double cand = ((b - a2) * used + a2 + (b - a2) * mi + a2) * (mi - used) / 2.0;
        if (cur + cand >= req) {
            hi = mi;
            continue;
        }
        lo = mi;
    }
    System.out.println((double) p.intValue() + hi);
    Double.valueOf(0.0);
    Double.valueOf(hi);
    Integer.valueOf(g - 1);
    return hi;
}


****** Cluster 689 ******
public static Double func_7660a95585454dadbf09893fd1c8a665(Integer p, Double cur, Double add) {
    cur = cur + add;
    Integer.valueOf(p + 1);
    return cur;
}
public static Double func_e14b8b380949411286be66685415653f$7108c120(Integer p, Double cur, Double add) {
    cur = cur + add;
    Integer.valueOf(p + 1);
    Double.valueOf(0.0);
    return cur;
}


****** Cluster 690 ******
public static Double func_e21b011ee36c433181ad7c67039da35a(Integer[] lay, Integer[] uay) {
    lay[0].intValue();
    double uy = uay[0].intValue();
    return uy;
}
public static Double func_9c92d0cbe3c444aab7ac3f2690a75d71(Integer[] lay, Integer[] uay) {
    lay[0].intValue();
    double uy = uay[0].intValue();
    return uy;
}


****** Cluster 691 ******
public static Double func_40eaf4a388f947688bde8ec587153de6(Integer[] lay, Integer[] uay) {
    double ly = lay[0].intValue();
    uay[0].intValue();
    return ly;
}
public static Double func_c70f10849e4a4f0593486c073057f9ba(Integer[] lay, Integer[] uay) {
    double ly = lay[0].intValue();
    uay[0].intValue();
    return ly;
}


****** Cluster 692 ******
public static Integer func_40f5c4fc1d5f48e4936c96cbdae96060(Integer[] xs, Integer[] xl, Integer[] xu, Integer l, Integer u, Integer i) {
    int il;
    int iu = 0;
    for (il = 0; il < l && xl[il] <= xs[i]; ++il) {
    }
    --il;
    while (iu < u && xu[iu] <= xs[i]) {
        ++iu;
    }
    return il;
}
public static Integer func_d74a11711cca4da18482bf4e4be665ed(Integer[] xs, Integer[] xl, Integer[] xu, Integer l, Integer u, Integer i) {
    int il;
    int iu = 0;
    for (il = 0; il < l && xl[il] <= xs[i]; ++il) {
    }
    --il;
    while (iu < u && xu[iu] <= xs[i]) {
        ++iu;
    }
    return il;
}
public static Integer func_0798562ba30a4ab4a4b59ba9bcd3e5ca(Integer[] xs, Integer[] xl, Integer[] xu, Integer l, Integer u, Integer i) {
    int il;
    int iu = 0;
    for (il = 0; il < l && xl[il] <= xs[i]; ++il) {
    }
    --il;
    while (iu < u && xu[iu] <= xs[i]) {
        ++iu;
    }
    return il;
}


****** Cluster 693 ******
public static Integer func_edd040e2587545d5a9e79940fdfdac14(Integer[] xs, Integer[] xl, Integer il, Integer[] xu, Integer l, Integer u, Integer i) {
    int iu = 0;
    while (il < l && xl[il] <= xs[i]) {
        il = il + 1;
    }
    Integer.valueOf(il - 1);
    while (iu < u && xu[iu] <= xs[i]) {
        ++iu;
    }
    return --iu;
}
public static Integer func_f049fac1b70242179fd3f506de359837(Integer[] xs, Integer[] xl, Integer il, Integer[] xu, Integer l, Integer u, Integer i) {
    int iu = 0;
    while (il < l && xl[il] <= xs[i]) {
        il = il + 1;
    }
    Integer.valueOf(il - 1);
    while (iu < u && xu[iu] <= xs[i]) {
        ++iu;
    }
    return --iu;
}


****** Cluster 694 ******
public static Integer func_542c3cc83f194afca2cabea6c1e72153(Integer[] xs, Integer[] xl, Integer[] xu, Integer l, Integer u, Integer i) {
    int iu = 0;
    for (int il = 0; il < l && xl[il] <= xs[i]; ++il) {
    }
    while (iu < u && xu[iu] <= xs[i]) {
        ++iu;
    }
    return --iu;
}
public static Integer func_ccec46b31caf498f89487a97dc265c8f(Integer[] xs, Integer[] xl, Integer[] xu, Integer l, Integer u, Integer i) {
    int iu = 0;
    for (int il = 0; il < l && xl[il] <= xs[i]; ++il) {
    }
    while (iu < u && xu[iu] <= xs[i]) {
        ++iu;
    }
    return --iu;
}


****** Cluster 695 ******
public static Integer func_a84b5361bc8a4ba2ac7ac79783e16708(Integer[] areau, Integer[] xs, Integer[] xl, Double[] areas, Integer[] areal, Integer[] yu, Integer[] xu, Integer l, Integer[] yl, Integer u, Integer i) {
    int il;
    double lambda;
    int iu = 0;
    for (il = 0; il < l && xl[il] <= xs[i]; ++il) {
    }
    --il;
    while (iu < u && xu[iu] <= xs[i]) {
        ++iu;
    }
    double a2 = 0.0;
    if (xu[--iu] == xs[i]) {
        a2 += (double) areau[iu].intValue();
    } else {
        lambda = (double) (xs[i] - xu[iu]) / (double) (xu[iu + 1] - xu[iu]);
        a2 += (double) areau[iu].intValue() + (double) (xs[i] - xu[iu]) * ((double) (2 * yu[iu]) + lambda * (double) (yu[iu + 1] - yu[iu]));
    }
    if (xl[il] == xs[i]) {
        a2 -= (double) areal[il].intValue();
    } else {
        lambda = (double) (xs[i] - xl[il]) / (double) (xl[il + 1] - xl[il]);
        a2 -= (double) areal[il].intValue() + (double) (xs[i] - xl[il]) * ((double) (2 * yl[il]) + lambda * (double) (yl[il + 1] - yl[il]));
    }
    areas[i.intValue()] = a2;
    return il;
}
public static Double func_ff402c3d51764137987857c206ec887e(Integer[] areau, Integer[] xs, Integer[] xl, Double[] areas, Integer[] areal, Integer[] yu, Integer[] xu, Integer l, Integer[] yl, Integer u, Integer i) {
    int il;
    double lambda;
    int iu = 0;
    for (il = 0; il < l && xl[il] <= xs[i]; ++il) {
    }
    --il;
    while (iu < u && xu[iu] <= xs[i]) {
        ++iu;
    }
    double a2 = 0.0;
    if (xu[--iu] == xs[i]) {
        a2 += (double) areau[iu].intValue();
    } else {
        lambda = (double) (xs[i] - xu[iu]) / (double) (xu[iu + 1] - xu[iu]);
        a2 += (double) areau[iu].intValue() + (double) (xs[i] - xu[iu]) * ((double) (2 * yu[iu]) + lambda * (double) (yu[iu + 1] - yu[iu]));
    }
    if (xl[il] == xs[i]) {
        a2 -= (double) areal[il].intValue();
    } else {
        lambda = (double) (xs[i] - xl[il]) / (double) (xl[il + 1] - xl[il]);
        a2 -= (double) areal[il].intValue() + (double) (xs[i] - xl[il]) * ((double) (2 * yl[il]) + lambda * (double) (yl[il + 1] - yl[il]));
    }
    areas[i.intValue()] = a2;
    return a2;
}
public static Integer func_4c148b1f18394bdbacdfeb4dde107f8b(Integer[] areau, Integer[] xs, Integer[] xl, Double[] areas, Integer[] areal, Integer[] yu, Integer[] xu, Integer l, Integer[] yl, Integer u, Integer i) {
    int il;
    double lambda;
    int iu = 0;
    for (il = 0; il < l && xl[il] <= xs[i]; ++il) {
    }
    --il;
    while (iu < u && xu[iu] <= xs[i]) {
        ++iu;
    }
    double a2 = 0.0;
    if (xu[--iu] == xs[i]) {
        a2 += (double) areau[iu].intValue();
    } else {
        lambda = (double) (xs[i] - xu[iu]) / (double) (xu[iu + 1] - xu[iu]);
        a2 += (double) areau[iu].intValue() + (double) (xs[i] - xu[iu]) * ((double) (2 * yu[iu]) + lambda * (double) (yu[iu + 1] - yu[iu]));
    }
    if (xl[il] == xs[i]) {
        a2 -= (double) areal[il].intValue();
    } else {
        lambda = (double) (xs[i] - xl[il]) / (double) (xl[il + 1] - xl[il]);
        a2 -= (double) areal[il].intValue() + (double) (xs[i] - xl[il]) * ((double) (2 * yl[il]) + lambda * (double) (yl[il + 1] - yl[il]));
    }
    areas[i.intValue()] = a2;
    return iu;
}


****** Cluster 696 ******
public static Double func_93fe3e56189e4d50b7c994f95accdeaf(Double[] areas, Integer g, Double area, Integer l, Integer i, Integer u) {
    double na = area * (double) i.intValue() / (double) g.intValue();
    for (int j = 0; j < l + u && areas[j] <= na; ++j) {
    }
    return na;
}
public static Double func_82695f494a0a4a4394a6f17c684eec54(Double[] areas, Integer g, Double area, Integer l, Integer i, Integer u) {
    double na = area * (double) i.intValue() / (double) g.intValue();
    for (int j = 0; j < l + u && areas[j] <= na; ++j) {
    }
    return na;
}
public static Double func_0a7dd0b315d6430f9de0a9148dc269aa(Double[] areas, Integer g, Double area, Integer l, Integer i, Integer u) {
    double na = area * (double) i.intValue() / (double) g.intValue();
    for (int j = 0; j < l + u && areas[j] <= na; ++j) {
    }
    return na;
}


****** Cluster 697 ******
public static Integer func_e405fd40194a4b93ab4a324d092f50bc(Double[] areas, Double na, Integer l, Integer u) {
    int j;
    for (j = 0; j < l + u && areas[j] <= na; ++j) {
    }
    return --j;
}
public static Integer func_df35f025ac474118bd532b31dec601ab(Double[] areas, Double na, Integer l, Integer u) {
    int j;
    for (j = 0; j < l + u && areas[j] <= na; ++j) {
    }
    return --j;
}


****** Cluster 698 ******
public static Integer func_e95fa214bd774193a665b87b2072c315(Double[] areas, Integer g, Double area, Integer l, Integer i, Integer u) {
    int j;
    double na = area * (double) i.intValue() / (double) g.intValue();
    for (j = 0; j < l + u && areas[j] <= na; ++j) {
    }
    return --j;
}
public static Integer func_98142b34869d4b7d93fbd236d9e869ee(Double[] areas, Integer g, Double area, Integer l, Integer i, Integer u) {
    int j;
    double na = area * (double) i.intValue() / (double) g.intValue();
    for (j = 0; j < l + u && areas[j] <= na; ++j) {
    }
    return --j;
}


****** Cluster 699 ******
public static Integer func_3fa7bb495f6e495a923285385cfecec4(Integer[] xs, Double[] areas, Double na, Double[] widths, Integer l, Double[] ss, Integer u) {
    int j;
    for (j = 0; j < l + u && areas[j] <= na; ++j) {
    }
    if (Math.abs(na - areas[--j]) < 1.0E-9) {
        xs[j].intValue();
    } else if (Math.abs(ss[j]) < 1.0E-9) {
        xs[j].intValue();
        na.doubleValue();
        areas[j].doubleValue();
        widths[j].doubleValue();
    } else {
        xs[j].intValue();
        widths[j].doubleValue();
        Math.sqrt(widths[j] * widths[j] + (na - areas[j]) * ss[j]);
        ss[j].doubleValue();
    }
    return j;
}
public static Integer func_a2041ea262ac41a99facafc030f8de4a(Integer[] xs, Double[] areas, Double na, Double[] widths, Integer l, Double[] ss, Integer u) {
    int j;
    for (j = 0; j < l + u && areas[j] <= na; ++j) {
    }
    double ans = Math.abs(na - areas[--j]) < 1.0E-9 ? (double) xs[j].intValue() : (Math.abs(ss[j]) < 1.0E-9 ? (double) xs[j].intValue() + (na - areas[j]) / (2.0 * widths[j]) : (double) xs[j].intValue() + (-widths[j].doubleValue() + Math.sqrt(widths[j] * widths[j] + (na - areas[j]) * ss[j])) / ss[j]);
    System.out.format("%.6f%n", ans);
    return j;
}


****** Cluster 700 ******
public static Integer func_8aeb9e317ded4d178fa001948e60bf10(Integer[] xs, Double[] areas, Integer g, Double[] widths, Double area, Integer l, Double[] ss, Integer i, Integer u) {
    int j;
    double na = area * (double) i.intValue() / (double) g.intValue();
    for (j = 0; j < l + u && areas[j] <= na; ++j) {
    }
    if (Math.abs(na - areas[--j]) < 1.0E-9) {
        xs[j].intValue();
    } else if (Math.abs(ss[j]) < 1.0E-9) {
        xs[j].intValue();
        areas[j].doubleValue();
        widths[j].doubleValue();
    } else {
        xs[j].intValue();
        widths[j].doubleValue();
        Math.sqrt(widths[j] * widths[j] + (na - areas[j]) * ss[j]);
        ss[j].doubleValue();
    }
    return j;
}
public static Integer func_9da8d39dcf4f48819e3b417147138793(Integer[] xs, Double[] areas, Integer g, Double[] widths, Double area, Integer l, Double[] ss, Integer i, Integer u) {
    int j;
    double na = area * (double) i.intValue() / (double) g.intValue();
    for (j = 0; j < l + u && areas[j] <= na; ++j) {
    }
    double ans = Math.abs(na - areas[--j]) < 1.0E-9 ? (double) xs[j].intValue() : (Math.abs(ss[j]) < 1.0E-9 ? (double) xs[j].intValue() + (na - areas[j]) / (2.0 * widths[j]) : (double) xs[j].intValue() + (-widths[j].doubleValue() + Math.sqrt(widths[j] * widths[j] + (na - areas[j]) * ss[j])) / ss[j]);
    System.out.format("%.6f%n", ans);
    return j;
}


****** Cluster 701 ******
public static Double func_a9ab5ddbc19a401ca5ff129701c348a7(Integer[] xs, Double[] areas, Integer g, Double[] widths, Double area, Integer l, Double[] ss, Integer i, Integer u) {
    int j;
    double na = area * (double) i.intValue() / (double) g.intValue();
    for (j = 0; j < l + u && areas[j] <= na; ++j) {
    }
    if (Math.abs(na - areas[--j]) < 1.0E-9) {
        xs[j].intValue();
    } else if (Math.abs(ss[j]) < 1.0E-9) {
        xs[j].intValue();
        areas[j].doubleValue();
        widths[j].doubleValue();
    } else {
        xs[j].intValue();
        widths[j].doubleValue();
        Math.sqrt(widths[j] * widths[j] + (na - areas[j]) * ss[j]);
        ss[j].doubleValue();
    }
    return na;
}
public static Double func_11ea711ffb484787a470001e203a4e9a(Integer[] xs, Double[] areas, Integer g, Double[] widths, Double area, Integer l, Double[] ss, Integer i, Integer u) {
    int j;
    double na = area * (double) i.intValue() / (double) g.intValue();
    for (j = 0; j < l + u && areas[j] <= na; ++j) {
    }
    double ans = Math.abs(na - areas[--j]) < 1.0E-9 ? (double) xs[j].intValue() : (Math.abs(ss[j]) < 1.0E-9 ? (double) xs[j].intValue() + (na - areas[j]) / (2.0 * widths[j]) : (double) xs[j].intValue() + (-widths[j].doubleValue() + Math.sqrt(widths[j] * widths[j] + (na - areas[j]) * ss[j])) / ss[j]);
    System.out.format("%.6f%n", ans);
    return na;
}


****** Cluster 702 ******
public static Double func_9103faa4d90c4d26858f15d72582e03c(Double su, Double sl, Integer g) {
    double s = su - sl;
    g.intValue();
    return s;
}
public static Double func_7e1817cd8ab3460a903604ac7b308feb(Double st, Double scrt, Integer x0) {
    double area = st - scrt;
    x0.intValue();
    return area;
}


****** Cluster 703 ******
public static Double func_1ff0653fc16948b6967767fdeaba2d4c(Double xmax, Double xmin, Double dy1, Double dy0, Integer x0, Integer x1) {
    double xh = (xmin + xmax) / 2.0;
    dy0.doubleValue();
    dy1.doubleValue();
    dy0.doubleValue();
    x0.intValue();
    x1.intValue();
    x0.intValue();
    return xh;
}
public static Double func_c856356bf61c4b5d8ec1fb3d1065ed60(Double xmax, Double xmin, Double dy1, Double dy0, Integer x0, Integer x1) {
    double xh = (xmin + xmax) / 2.0;
    dy0.doubleValue();
    dy1.doubleValue();
    dy0.doubleValue();
    x0.intValue();
    x1.intValue();
    x0.intValue();
    dy0.doubleValue();
    x0.intValue();
    return xh;
}


****** Cluster 704 ******
public static Double func_2e9844197a884813917ba009b66267b9(Double xmax, Double xmin, Double dy1, Double dy0, Integer x0, Integer x1) {
    double xh = (xmin + xmax) / 2.0;
    double yh = dy0 + (dy1 - dy0) * (xh - (double) x0.intValue()) / (double) (x1 - x0);
    return yh;
}
public static Double func_c5c3d8460e7b4800b2c462560875005b(Double xmax, Double xmin, Double dy1, Double dy0, Integer x0, Integer x1) {
    double xh = (xmin + xmax) / 2.0;
    double yh = dy0 + (dy1 - dy0) * (xh - (double) x0.intValue()) / (double) (x1 - x0);
    dy0.doubleValue();
    x0.intValue();
    return yh;
}


****** Cluster 705 ******
public static Double func_255ca852c766486aa81ce1728490e9ff(Integer i, Integer G, Double s) {
    double st = (double) i.intValue() / (double) G.intValue() * s;
    return st;
}
public static Double func_06d063f194244d2fbd86ea8c8a5ee416(Integer i, Integer G, Double s) {
    double st = (double) i.intValue() / (double) G.intValue() * s;
    return st;
}


****** Cluster 706 ******
def func_02289a1092c441cab97369551b9e0572(p, n):
    result = 0
    m = []
    for j in range(n):
        m.append([100 - p[j], j])
    m.sort()
    return j

def func_489d072fadd641119ccbafadb42884a7(p, n):
    m = []
    for j in range(n):
        m.append([100 - p[j], j])
    return j

def func_ec55e15e8ad54867997f02a9a642d0f2(p, n):
    result = 0
    m = []
    for j in range(n):
        m.append([100 - p[j], j])
    return j

def func_ed5097de2b654dccb83d999c7d4554ba(p, n):
    m = []
    for j in range(n):
        m.append([100 - p[j], j])
    m.sort()
    return j



****** Cluster 707 ******
def func_133bad5211cc44b580c0c898f305fd8e(p, n):
    m = []
    for j in range(n):
        m.append([100 - p[j], j])
    m.sort()
    result = str(m[0][1])
    return m

def func_2d78dd960fc94b55a09960ff3ca6cf1c(p, n):
    m = []
    for j in range(n):
        m.append([100 - p[j], j])
    m.sort()
    result = str(m[0][1])
    for j in range(1, n):
        result = result + ' ' + str(m[j][1])
    return m

def func_e48b243c12264038a683a053593be248(p, n):
    result = 0
    m = []
    for j in range(n):
        m.append([100 - p[j], j])
    m.sort()
    result = str(m[0][1])
    for j in range(1, n):
        result = result + ' ' + str(m[j][1])
    return m

def func_ff749b71f40a4fa4b6c3456c3b4ec97a(p, n):
    result = 0
    m = []
    for j in range(n):
        m.append([100 - p[j], j])
    m.sort()
    result = str(m[0][1])
    return m



****** Cluster 708 ******
def func_0463d41ccda64e11bfcdb5fb1e75b948(transistors, N):
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    return last

def func_08ac3ce8c43442b9812597b1f20725a9(transistors, N):
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    return last

def func_8606ab3b22b24a2f8b61e586d8d72ca0(transistors, N):
    transistorsum = sum(transistors)
    first = 0
    last = N
    return last

def func_fad41b6a91bf473ba643d0152304ceeb(transistors, N):
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    return last



****** Cluster 709 ******
def func_2adbff2afda648fe92cd3cd680d3df0d(i, p, n):
    result = 0
    m = []
    for j in range(n):
        m.append([100 - p[j], j])
    m.sort()
    result = str(m[0][1])
    for j in range(1, n):
        result = result + ' ' + str(m[j][1])
    string = 'Case #' + str(i) + ': ' + str(result) + '\n'
    return m

def func_6e711e9bb8ce41138df700790bb1722c(i, p, n):
    m = []
    for j in range(n):
        m.append([100 - p[j], j])
    m.sort()
    result = str(m[0][1])
    for j in range(1, n):
        result = result + ' ' + str(m[j][1])
    string = 'Case #' + str(i) + ': ' + str(result) + '\n'
    return m



****** Cluster 710 ******
def func_0708dedf4a904750bd27b30da05cd0b6(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    return transistorsum

def func_83b4145d393e4061834679466d175ad3(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    return transistorsum

def func_9216eb769a454f47a0ce6101415b5bdd(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    return transistorsum

def func_a77996279abc4bffae107eb011e34fa2(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    return minimax

def func_abfa506c305740b29c71739788d908ec(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    return transistorsum

def func_b25f2c22870744a09f2ca75ac633d73e(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    return transistorsum

def func_cfaa4fa06f6b411a9a0bbd5079a38ebf(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    return transistorsum



****** Cluster 711 ******
def func_2fc5c0686c9a4020b44adb355f074a50(p, n):
    m = []
    for j in range(n):
        m.append([100 - p[j], j])
    m.sort()
    result = str(m[0][1])
    for j in range(1, n):
        result = result + ' ' + str(m[j][1])
    return j

def func_786b545f125b4b5986f9bdb7065db968(p, n):
    result = 0
    m = []
    for j in range(n):
        m.append([100 - p[j], j])
    m.sort()
    result = str(m[0][1])
    return j

def func_a42e862d38ca4534927a74f23db202c3(p, n):
    result = 0
    m = []
    for j in range(n):
        m.append([100 - p[j], j])
    m.sort()
    result = str(m[0][1])
    for j in range(1, n):
        result = result + ' ' + str(m[j][1])
    return j

def func_a53adc8ceda74dcf9f06a8ad221eafd0(p, n):
    m = []
    for j in range(n):
        m.append([100 - p[j], j])
    m.sort()
    result = str(m[0][1])
    return j



****** Cluster 712 ******
def func_3b0e952b4a5e4ab5b99e5877a9440252(p, n):
    result = 0
    m = []
    for j in range(n):
        m.append([100 - p[j], j])
    m.sort()
    return m

def func_57ab1f41e14f47b9959867f98de570f0(p, n):
    m = []
    for j in range(n):
        m.append([100 - p[j], j])
    m.sort()
    return m



****** Cluster 713 ******
def func_65a27ed9c6f84fa792c7d3d9d79a9941(p, n):
    result = 0
    m = []
    for j in range(n):
        m.append([100 - p[j], j])
    return m

def func_cae81718fc584172b9ae96d7b87da79d(p, n):
    m = []
    for j in range(n):
        m.append([100 - p[j], j])
    return m



****** Cluster 714 ******
def func_10f88c8b4605459ab181dfd9a206062d(transistors, N):
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    answer = float(transistorsum - minimax) / float(transistorsum)
    return lastsum

def func_8927b81f19374bf88d400b3f04d57cf7(transistors, N):
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    return lastsum



****** Cluster 715 ******
def func_6ca96e714cfa4f1799365003b18012be(i, p, n):
    m = []
    for j in range(n):
        m.append([100 - p[j], j])
    m.sort()
    result = str(m[0][1])
    for j in range(1, n):
        result = result + ' ' + str(m[j][1])
    string = 'Case #' + str(i) + ': ' + str(result) + '\n'
    return result

def func_a4ba1e20818a429fa75c9da977747271(i, p, n):
    result = 0
    m = []
    for j in range(n):
        m.append([100 - p[j], j])
    m.sort()
    result = str(m[0][1])
    for j in range(1, n):
        result = result + ' ' + str(m[j][1])
    string = 'Case #' + str(i) + ': ' + str(result) + '\n'
    return result



****** Cluster 716 ******
def func_1303250ed0d742e3ab2d9105331455d9(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    return i

def func_2d293e19051d402ab75b090785adb7b6(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    return i

def func_61d3671003534e56903158aba2074282(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    return i

def func_81c6540f09114f0996d78e50fc86edfc(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    return i

def func_9b9be35c92b14e9da0d2db0ad55f4ebd(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    return i

def func_f6839618800f4d2985392903792d71bc(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    return i



****** Cluster 717 ******
def func_7d86518920e442e0ae6118af47e1f23e(p, n):
    m = []
    for j in range(n):
        m.append([100 - p[j], j])
    m.sort()
    result = str(m[0][1])
    for j in range(1, n):
        result = result + ' ' + str(m[j][1])
    return result

def func_c3b3ca428a5442048fa586ad46cc6407(p, n):
    result = 0
    m = []
    for j in range(n):
        m.append([100 - p[j], j])
    m.sort()
    result = str(m[0][1])
    for j in range(1, n):
        result = result + ' ' + str(m[j][1])
    return result



****** Cluster 718 ******
def func_861588e454874697938d1dfb7b313e78(i, p, n):
    result = 0
    m = []
    for j in range(n):
        m.append([100 - p[j], j])
    m.sort()
    result = str(m[0][1])
    for j in range(1, n):
        result = result + ' ' + str(m[j][1])
    string = 'Case #' + str(i) + ': ' + str(result) + '\n'
    return j

def func_aabda56c0e744f4cba32a88968a3e261(i, p, n):
    m = []
    for j in range(n):
        m.append([100 - p[j], j])
    m.sort()
    result = str(m[0][1])
    for j in range(1, n):
        result = result + ' ' + str(m[j][1])
    string = 'Case #' + str(i) + ': ' + str(result) + '\n'
    return j



****** Cluster 719 ******
def func_9c6e426200cf4e75a8b503299bdd5e67(i, p, n):
    result = 0
    m = []
    for j in range(n):
        m.append([100 - p[j], j])
    m.sort()
    result = str(m[0][1])
    for j in range(1, n):
        result = result + ' ' + str(m[j][1])
    string = 'Case #' + str(i) + ': ' + str(result) + '\n'
    return string

def func_f50102dac5d64aa4a5a99a67e7df6637(i, p, n):
    m = []
    for j in range(n):
        m.append([100 - p[j], j])
    m.sort()
    result = str(m[0][1])
    for j in range(1, n):
        result = result + ' ' + str(m[j][1])
    string = 'Case #' + str(i) + ': ' + str(result) + '\n'
    return string



****** Cluster 720 ******
def func_14bcfe285b1d4aaeb944704be7ef5216(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    answer = float(transistorsum - minimax) / float(transistorsum)
    return transistors

def func_cce0749682594f85a8ecb9903064edd8(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    return transistors



****** Cluster 721 ******
def func_1632eb5ebf1c4f2682820d9a0c77992b(transistors, transistorsum, N):
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    answer = float(transistorsum - minimax) / float(transistorsum)
    return nextlastsum

def func_3cebe53dce314d208e988611bb2cfbfa(transistors, transistorsum, N):
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    return nextlastsum



****** Cluster 722 ******
def func_167accf58c40442284e3a382085a8a82(transistors, N):
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    answer = float(transistorsum - minimax) / float(transistorsum)
    return firstsum

def func_c038ff38dcd44f6d9261d8a28cc02245(transistors, N):
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    return firstsum



****** Cluster 723 ******
def func_ba0ece9cf692498fb6a14b374707baa6(p, n):
    m = []
    for j in range(n):
        m.append([100 - p[j], j])
    m.sort()
    result = str(m[0][1])
    return result

def func_c0ea7d103b1646eaabf39bec47bc17cc(p, n):
    result = 0
    m = []
    for j in range(n):
        m.append([100 - p[j], j])
    m.sort()
    result = str(m[0][1])
    return result



****** Cluster 724 ******
def func_7b65d97fa3534bcdbedbcad451839552(Y, X, ax):
    px = 0
    py = 0
    area = 0
    for x, y in zip(X, Y):
        if x == px:
            px, py = x, y
            continue
        if ax < x:
            y = py + (y - py) / (x - px) * (ax - px)
            x = ax
        area += (x - px) * (y + py) / 2
        px, py = x, y
        if x == ax:
            break
    return x

def func_f36584730d6b46698e631ec2eaf1e0f6(Y, X, ax):
    px = 0
    py = 0
    area = 0
    for x, y in zip(X, Y):
        if x == px:
            px, py = x, y
            continue
        if ax < x:
            y = py + (y - py) / (x - px) * (ax - px)
            x = ax
        area += (x - px) * (y + py) / 2
        px, py = x, y
        if x == ax:
            break
    return px



****** Cluster 725 ******
def func_1d1b5187edd5444dbc127023abbe4b3a(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    answer = float(transistorsum - minimax) / float(transistorsum)
    return i

def func_1f3e75fabecc4e988efff6ecec1684c0(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    return i



****** Cluster 726 ******
def func_9796002a7e484de685cf089d82775124(Y, X, ax):
    px = 0
    py = 0
    area = 0
    for x, y in zip(X, Y):
        if x == px:
            px, py = x, y
            continue
        if ax < x:
            y = py + (y - py) / (x - px) * (ax - px)
            x = ax
        area += (x - px) * (y + py) / 2
        px, py = x, y
        if x == ax:
            break
    return y

def func_b00db3e3d55f476597b206c0f54ca686(Y, X, ax):
    px = 0
    py = 0
    area = 0
    for x, y in zip(X, Y):
        if x == px:
            px, py = x, y
            continue
        if ax < x:
            y = py + (y - py) / (x - px) * (ax - px)
            x = ax
        area += (x - px) * (y + py) / 2
        px, py = x, y
        if x == ax:
            break
    return py



****** Cluster 727 ******
def func_04c3a59705a44d41afcbe6617ed601d7(B, X, N):
    X += [0] * (37 - N)
    X.sort()
    best_profit = 0.0
    for najmensich in range(1, 37):
        if X[-1] == X[najmensich - 1]:
            continue
        mintreba = 0
        for i in range(najmensich):
            mintreba += X[najmensich - 1] - X[i]
        for i in range(najmensich, 37):
            if X[i] == X[najmensich - 1]:
                mintreba += 1
        if mintreba > B:
            continue
        minvyska = X[najmensich - 1]
        if True:
            vyska = minvyska
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            pp = 1.0 / najmensich
            best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
        maxvyska = X[-1]
        while maxvyska - minvyska > 1:
            vyska = (maxvyska + minvyska) // 2
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            if treba <= B:
                pp = 1.0 / najmensich
                best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
                minvyska = vyska
            else:
                maxvyska = vyska
    treba = 0
    vyhra = 0
    vyska = X[-1]
    return pp

def func_4e11e83b31404e40a816aa8345f25e91(B, X, N):
    X += [0] * (37 - N)
    X.sort()
    best_profit = 0.0
    for najmensich in range(1, 37):
        if X[-1] == X[najmensich - 1]:
            continue
        mintreba = 0
        for i in range(najmensich):
            mintreba += X[najmensich - 1] - X[i]
        for i in range(najmensich, 37):
            if X[i] == X[najmensich - 1]:
                mintreba += 1
        if mintreba > B:
            continue
        minvyska = X[najmensich - 1]
        if True:
            vyska = minvyska
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            pp = 1.0 / najmensich
            best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
        maxvyska = X[-1]
        while maxvyska - minvyska > 1:
            vyska = (maxvyska + minvyska) // 2
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            if treba <= B:
                pp = 1.0 / najmensich
                best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
                minvyska = vyska
            else:
                maxvyska = vyska
    return pp

def func_71fbb026f5dc4cafa63c5e38291999c8(B, X, N):
    X += [0] * (37 - N)
    X.sort()
    best_profit = 0.0
    for najmensich in range(1, 37):
        if X[-1] == X[najmensich - 1]:
            continue
        mintreba = 0
        for i in range(najmensich):
            mintreba += X[najmensich - 1] - X[i]
        for i in range(najmensich, 37):
            if X[i] == X[najmensich - 1]:
                mintreba += 1
        if mintreba > B:
            continue
        minvyska = X[najmensich - 1]
        if True:
            vyska = minvyska
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            pp = 1.0 / najmensich
            best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
        maxvyska = X[-1]
        while maxvyska - minvyska > 1:
            vyska = (maxvyska + minvyska) // 2
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            if treba <= B:
                pp = 1.0 / najmensich
                best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
                minvyska = vyska
            else:
                maxvyska = vyska
    treba = 0
    vyhra = 0
    vyska = X[-1]
    for i in range(37):
        treba += vyska - X[i]
        vyhra += vyska - X[i]
    return pp

def func_a0783248b2a74b0e838ae680ea086e23(B, X, N):
    X += [0] * (37 - N)
    X.sort()
    best_profit = 0.0
    for najmensich in range(1, 37):
        if X[-1] == X[najmensich - 1]:
            continue
        mintreba = 0
        for i in range(najmensich):
            mintreba += X[najmensich - 1] - X[i]
        for i in range(najmensich, 37):
            if X[i] == X[najmensich - 1]:
                mintreba += 1
        if mintreba > B:
            continue
        minvyska = X[najmensich - 1]
        if True:
            vyska = minvyska
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            pp = 1.0 / najmensich
            best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
        maxvyska = X[-1]
        while maxvyska - minvyska > 1:
            vyska = (maxvyska + minvyska) // 2
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            if treba <= B:
                pp = 1.0 / najmensich
                best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
                minvyska = vyska
            else:
                maxvyska = vyska
    treba = 0
    vyhra = 0
    return pp

def func_d486744f99d048b9afb205a1a202de22(B, X, N):
    X += [0] * (37 - N)
    X.sort()
    best_profit = 0.0
    for najmensich in range(1, 37):
        if X[-1] == X[najmensich - 1]:
            continue
        mintreba = 0
        for i in range(najmensich):
            mintreba += X[najmensich - 1] - X[i]
        for i in range(najmensich, 37):
            if X[i] == X[najmensich - 1]:
                mintreba += 1
        if mintreba > B:
            continue
        minvyska = X[najmensich - 1]
        if True:
            vyska = minvyska
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            pp = 1.0 / najmensich
            best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
        maxvyska = X[-1]
        while maxvyska - minvyska > 1:
            vyska = (maxvyska + minvyska) // 2
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            if treba <= B:
                pp = 1.0 / najmensich
                best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
                minvyska = vyska
            else:
                maxvyska = vyska
    treba = 0
    return pp



****** Cluster 728 ******
def func_1dbca95474be419392403b7d1f0997a1(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    answer = float(transistorsum - minimax) / float(transistorsum)
    return first

def func_7fbb397fefb746068778184061bf30b1(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    return first



****** Cluster 729 ******
def func_1dee943d48424ffc98db83c86ecfcf0a(transistors, transistorsum, N):
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    answer = float(transistorsum - minimax) / float(transistorsum)
    return firstsum

def func_dcc527219629417e9c994e84cb2bd811(transistors, transistorsum, N):
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    return firstsum



****** Cluster 730 ******
def func_2201689a6d794442b0b0da4d520ad728(transistors, N):
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    return transistorsum

def func_80eee299c0b44c5eb3237eecdbc9b650(transistors, N):
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    return transistorsum

def func_867df46333b24d9abafd2de57661f8ba(transistors, N):
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    return minimax

def func_8fc2ce8c320b44749f9674704a2fd943(transistors, N):
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    return transistorsum

def func_e18153ab8dec41508aa3778028616108(transistors, N):
    transistorsum = sum(transistors)
    first = 0
    last = N
    return transistorsum

def func_17b13622532340d3a3e4b327d4245417(dev, n):
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    return mtot

def func_278708de0eec4a6c84123a22f3083ecf(dev, n):
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    return mtot

def func_30da14cb41ce4108bd481f98050174cd(dev, n):
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    return tot

def func_5e0b9d5f06a94a4cb3e0801b45ea7a2f(dev, n):
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    return tot

def func_c837eabe85494e979afb028fef0fca25(dev, n):
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    return tot

def func_daa752527cf8448eb3537efc6bf3265a(dev, n):
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    return mtot

def func_e87238d7f4aa4aa5aea5bfeee63a94b2(dev, n):
    tot = sum(dev)
    i = 0
    j = n - 1
    return tot

def func_f663968d50b9494e8564f5e9c768cd33(dev, n):
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    return tot

def func_2c65a4249cc740608076eb67687a7c14(x, n):
    x += [0] * (37 - n)
    x.sort()
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    return sx

def func_e20fbbb51f4647e982bb75c033662527(x, n):
    x += [0] * (37 - n)
    x.sort()
    cx = list(x)
    sx = sum(x)
    return sx



****** Cluster 731 ******
def func_0826a7cfaafe405286530b2c75eb31a6(B, X, N):
    X += [0] * (37 - N)
    X.sort()
    best_profit = 0.0
    for najmensich in range(1, 37):
        if X[-1] == X[najmensich - 1]:
            continue
        mintreba = 0
        for i in range(najmensich):
            mintreba += X[najmensich - 1] - X[i]
        for i in range(najmensich, 37):
            if X[i] == X[najmensich - 1]:
                mintreba += 1
        if mintreba > B:
            continue
        minvyska = X[najmensich - 1]
        if True:
            vyska = minvyska
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            pp = 1.0 / najmensich
            best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
        maxvyska = X[-1]
        while maxvyska - minvyska > 1:
            vyska = (maxvyska + minvyska) // 2
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            if treba <= B:
                pp = 1.0 / najmensich
                best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
                minvyska = vyska
            else:
                maxvyska = vyska
    treba = 0
    return vyhra

def func_418ff80b11f04d908cc38faeecc04d53(B, X, N):
    X += [0] * (37 - N)
    X.sort()
    best_profit = 0.0
    for najmensich in range(1, 37):
        if X[-1] == X[najmensich - 1]:
            continue
        mintreba = 0
        for i in range(najmensich):
            mintreba += X[najmensich - 1] - X[i]
        for i in range(najmensich, 37):
            if X[i] == X[najmensich - 1]:
                mintreba += 1
        if mintreba > B:
            continue
        minvyska = X[najmensich - 1]
        if True:
            vyska = minvyska
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            pp = 1.0 / najmensich
            best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
        maxvyska = X[-1]
        while maxvyska - minvyska > 1:
            vyska = (maxvyska + minvyska) // 2
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            if treba <= B:
                pp = 1.0 / najmensich
                best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
                minvyska = vyska
            else:
                maxvyska = vyska
    return vyhra



****** Cluster 732 ******
def func_3327659bf25e4755b5658ce9b27ae070(L, P):
    l = []
    for i, p in enumerate(P):
        if p != 0:
            l.append((float(L[i]) / p, i))
        else:
            l.append((1e+30, i))
    l.sort()
    return p

def func_339654e3293a47228342311cc2c05258(L, P):
    l = []
    for i, p in enumerate(P):
        if p != 0:
            l.append((float(L[i]) / p, i))
        else:
            l.append((1e+30, i))
    return p



****** Cluster 733 ******
def func_085e800ca946464b8da8c86f6ae95b37(X, najmensich, i, vyska):
    if X[i] == X[najmensich - 1]:
        mintreba += 1
    if X[i] <= vyska:
        treba += vyska + 1 - X[i]
    return i

def func_ae5a145ee7d04b7aa007566e6f24839c(X, najmensich, i, vyska):
    if X[i] == X[najmensich - 1]:
        mintreba += 1
    if X[i] <= vyska:
        treba += vyska + 1 - X[i]
    if X[i] <= vyska:
        treba += vyska + 1 - X[i]
    return i



****** Cluster 734 ******
def func_273139ff11084a54b9a4b6ee102458a2(transistors, N):
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    return first

def func_dcacc3e348ef4c6fb0a378c6d9797b66(transistors, N):
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    answer = float(transistorsum - minimax) / float(transistorsum)
    return first



****** Cluster 735 ******
def func_27d6e74dc742451b918adca81cb0a1f0(transistors, transistorsum, N):
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    return last

def func_6c5177bb4a554478894070d3f77c1bfa(transistors, transistorsum, N):
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    answer = float(transistorsum - minimax) / float(transistorsum)
    return last



****** Cluster 736 ******
def func_47f3ffeb54ab43c285156db77e443722(L, P):
    l = []
    for i, p in enumerate(P):
        if p != 0:
            l.append((float(L[i]) / p, i))
        else:
            l.append((1e+30, i))
    return i

def func_629b3ba1a7a34dd7b85b98ecc24ed97c(L, P):
    l = []
    for i, p in enumerate(P):
        if p != 0:
            l.append((float(L[i]) / p, i))
        else:
            l.append((1e+30, i))
    l.sort()
    return i

def func_130a4bfaf5764448902a575f6e8b0601(P, L):
    x = [(i, L[i], 100 - P[i]) for i in xrange(len(L))]
    x = sorted(x, cmp=cmp_fn)
    return i



****** Cluster 737 ******
def func_0b8085b4564f48bea196565dc34d7e5a(B, X, N):
    X += [0] * (37 - N)
    X.sort()
    best_profit = 0.0
    for najmensich in range(1, 37):
        if X[-1] == X[najmensich - 1]:
            continue
        mintreba = 0
        for i in range(najmensich):
            mintreba += X[najmensich - 1] - X[i]
        for i in range(najmensich, 37):
            if X[i] == X[najmensich - 1]:
                mintreba += 1
        if mintreba > B:
            continue
        minvyska = X[najmensich - 1]
        if True:
            vyska = minvyska
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            pp = 1.0 / najmensich
            best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
        maxvyska = X[-1]
        while maxvyska - minvyska > 1:
            vyska = (maxvyska + minvyska) // 2
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            if treba <= B:
                pp = 1.0 / najmensich
                best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
                minvyska = vyska
            else:
                maxvyska = vyska
    treba = 0
    vyhra = 0
    vyska = X[-1]
    for i in range(37):
        treba += vyska - X[i]
        vyhra += vyska - X[i]
    pp = 1.0 / 37
    return treba

def func_5228522a285a4ddabbf52f894e1c8854(B, X, N):
    X += [0] * (37 - N)
    X.sort()
    best_profit = 0.0
    for najmensich in range(1, 37):
        if X[-1] == X[najmensich - 1]:
            continue
        mintreba = 0
        for i in range(najmensich):
            mintreba += X[najmensich - 1] - X[i]
        for i in range(najmensich, 37):
            if X[i] == X[najmensich - 1]:
                mintreba += 1
        if mintreba > B:
            continue
        minvyska = X[najmensich - 1]
        if True:
            vyska = minvyska
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            pp = 1.0 / najmensich
            best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
        maxvyska = X[-1]
        while maxvyska - minvyska > 1:
            vyska = (maxvyska + minvyska) // 2
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            if treba <= B:
                pp = 1.0 / najmensich
                best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
                minvyska = vyska
            else:
                maxvyska = vyska
    treba = 0
    vyhra = 0
    vyska = X[-1]
    for i in range(37):
        treba += vyska - X[i]
        vyhra += vyska - X[i]
    return vyhra

def func_ae0dd1f92cfa4892960682144f360dde(B, X, N):
    X += [0] * (37 - N)
    X.sort()
    best_profit = 0.0
    for najmensich in range(1, 37):
        if X[-1] == X[najmensich - 1]:
            continue
        mintreba = 0
        for i in range(najmensich):
            mintreba += X[najmensich - 1] - X[i]
        for i in range(najmensich, 37):
            if X[i] == X[najmensich - 1]:
                mintreba += 1
        if mintreba > B:
            continue
        minvyska = X[najmensich - 1]
        if True:
            vyska = minvyska
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            pp = 1.0 / najmensich
            best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
        maxvyska = X[-1]
        while maxvyska - minvyska > 1:
            vyska = (maxvyska + minvyska) // 2
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            if treba <= B:
                pp = 1.0 / najmensich
                best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
                minvyska = vyska
            else:
                maxvyska = vyska
    treba = 0
    vyhra = 0
    vyska = X[-1]
    for i in range(37):
        treba += vyska - X[i]
        vyhra += vyska - X[i]
    pp = 1.0 / 37
    return vyhra

def func_d4938a50b9884e8aa268d554bb0d18df(B, X, N):
    X += [0] * (37 - N)
    X.sort()
    best_profit = 0.0
    for najmensich in range(1, 37):
        if X[-1] == X[najmensich - 1]:
            continue
        mintreba = 0
        for i in range(najmensich):
            mintreba += X[najmensich - 1] - X[i]
        for i in range(najmensich, 37):
            if X[i] == X[najmensich - 1]:
                mintreba += 1
        if mintreba > B:
            continue
        minvyska = X[najmensich - 1]
        if True:
            vyska = minvyska
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            pp = 1.0 / najmensich
            best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
        maxvyska = X[-1]
        while maxvyska - minvyska > 1:
            vyska = (maxvyska + minvyska) // 2
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            if treba <= B:
                pp = 1.0 / najmensich
                best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
                minvyska = vyska
            else:
                maxvyska = vyska
    treba = 0
    vyhra = 0
    vyska = X[-1]
    for i in range(37):
        treba += vyska - X[i]
        vyhra += vyska - X[i]
    return treba



****** Cluster 738 ******
def func_2c423fbde4ab4e689421c40864f79630(transistors, transistorsum, N):
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    return first

def func_d35d7add277b4ed09a1667375d8fea3e(transistors, transistorsum, N):
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    answer = float(transistorsum - minimax) / float(transistorsum)
    return first



****** Cluster 739 ******
def func_2dab683c89974af0bcbf31c439275849(transistors, N):
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    answer = float(transistorsum - minimax) / float(transistorsum)
    return currentmax

def func_8924210257114b38b9870330046fea5a(transistors, N):
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    return currentmax



****** Cluster 740 ******
def func_2b4e2cf235704be391477148a2f41ca6(cur2, x2):
    x, cur = x2, cur2
    getNext = True
    return x

def func_d3f7f227d68f43a0a1fef21f15cb2ba2(xnext, h2):
    x = xnext
    h1 = h2
    return h1



****** Cluster 741 ******
def func_136c032e1bcd43d38f3b5c5fcb68c0b1(B, X, N):
    X += [0] * (37 - N)
    X.sort()
    best_profit = 0.0
    for najmensich in range(1, 37):
        if X[-1] == X[najmensich - 1]:
            continue
        mintreba = 0
        for i in range(najmensich):
            mintreba += X[najmensich - 1] - X[i]
        for i in range(najmensich, 37):
            if X[i] == X[najmensich - 1]:
                mintreba += 1
        if mintreba > B:
            continue
        minvyska = X[najmensich - 1]
        if True:
            vyska = minvyska
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            pp = 1.0 / najmensich
            best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
        maxvyska = X[-1]
        while maxvyska - minvyska > 1:
            vyska = (maxvyska + minvyska) // 2
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            if treba <= B:
                pp = 1.0 / najmensich
                best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
                minvyska = vyska
            else:
                maxvyska = vyska
    treba = 0
    vyhra = 0
    vyska = X[-1]
    for i in range(37):
        treba += vyska - X[i]
        vyhra += vyska - X[i]
    return vyska

def func_94a85f9b1c7947efa12b786a159edc99(B, X, N):
    X += [0] * (37 - N)
    X.sort()
    best_profit = 0.0
    for najmensich in range(1, 37):
        if X[-1] == X[najmensich - 1]:
            continue
        mintreba = 0
        for i in range(najmensich):
            mintreba += X[najmensich - 1] - X[i]
        for i in range(najmensich, 37):
            if X[i] == X[najmensich - 1]:
                mintreba += 1
        if mintreba > B:
            continue
        minvyska = X[najmensich - 1]
        if True:
            vyska = minvyska
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            pp = 1.0 / najmensich
            best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
        maxvyska = X[-1]
        while maxvyska - minvyska > 1:
            vyska = (maxvyska + minvyska) // 2
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            if treba <= B:
                pp = 1.0 / najmensich
                best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
                minvyska = vyska
            else:
                maxvyska = vyska
    treba = 0
    vyhra = 0
    vyska = X[-1]
    for i in range(37):
        treba += vyska - X[i]
        vyhra += vyska - X[i]
    pp = 1.0 / 37
    return vyska

def func_dff3a426063d4e9eb31a9e1b196d44ea(B, X, N):
    X += [0] * (37 - N)
    X.sort()
    best_profit = 0.0
    for najmensich in range(1, 37):
        if X[-1] == X[najmensich - 1]:
            continue
        mintreba = 0
        for i in range(najmensich):
            mintreba += X[najmensich - 1] - X[i]
        for i in range(najmensich, 37):
            if X[i] == X[najmensich - 1]:
                mintreba += 1
        if mintreba > B:
            continue
        minvyska = X[najmensich - 1]
        if True:
            vyska = minvyska
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            pp = 1.0 / najmensich
            best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
        maxvyska = X[-1]
        while maxvyska - minvyska > 1:
            vyska = (maxvyska + minvyska) // 2
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            if treba <= B:
                pp = 1.0 / najmensich
                best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
                minvyska = vyska
            else:
                maxvyska = vyska
    treba = 0
    vyhra = 0
    vyska = X[-1]
    return vyska



****** Cluster 742 ******
def func_3983636710444f88a09808601f21d6ec(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    answer = float(transistorsum - minimax) / float(transistorsum)
    return nextfirstsum

def func_77394f7e114246978b61acd927f1f33b(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    return nextfirstsum



****** Cluster 743 ******
def func_3db1b7bd9ccf43ee838ab30cfb60fc33(transistors, N):
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    return transistorsum

def func_8b7476934cf5446d9a7865594ffaf28e(transistors, N):
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    answer = float(transistorsum - minimax) / float(transistorsum)
    return minimax

def func_ece17c63372b407e8b48625bc1dd0cab(transistors, N):
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    answer = float(transistorsum - minimax) / float(transistorsum)
    return transistorsum

def func_edfaf2280fe44923996860d9561e5904(transistors, N):
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    return minimax



****** Cluster 744 ******
def func_3e89f5863b6c4ade918278afcce212c1(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    return transistors

def func_42c9830ed5e74ee1977384abd1c05f1a(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    return transistors

def func_48b4a6b983e74443830a11c72016f84f(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    return transistors

def func_5712da9d59aa4be7bef9b247c52329df(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    return transistors

def func_5a59bb82667f4850936289f8d2f5ad37(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    return transistors

def func_fe462b250e3b4878b264345263390eb3(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    return transistors



****** Cluster 745 ******
def func_3fce5bdec431465db9f4bfb831cfe81e(transistors, N):
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    return last

def func_ea6faecd7db74656bc27981437b7e2e0(transistors, N):
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    answer = float(transistorsum - minimax) / float(transistorsum)
    return last



****** Cluster 746 ******
def func_187c3c61845f4588bb18f7cb50f9a857(X, najmensich):
    mintreba = 0
    for i in range(najmensich):
        mintreba += X[najmensich - 1] - X[i]
    return i

def func_9d84685c67c64a27a19686416deada6f(p, n):
    v = []
    for i in xrange(n):
        v.append((-p[i], i))
    v.sort()
    return i

def func_aae8406440a9469092c2c047bf70d1d8(p, n):
    v = []
    for i in xrange(n):
        v.append((-p[i], i))
    return i

def func_f8b212bf25b4488e816e17bd28bdc9a6(v, n):
    sums = [0] * (n + 1)
    for i in xrange(n):
        sums[i + 1] = sums[i] + v[i]
    return i



****** Cluster 747 ******
def func_43746edb56584cb3a4459747e64e17e3(transistors, transistorsum, N):
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    answer = float(transistorsum - minimax) / float(transistorsum)
    return nextfirstsum

def func_fd65cb7f587a4cceae454b9bdd5d8363(transistors, transistorsum, N):
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    return nextfirstsum



****** Cluster 748 ******
def func_4479bc58930848009429850853e907b6(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    answer = float(transistorsum - minimax) / float(transistorsum)
    return currentmax

def func_5953016e9f984774b4c530d24529d3d5(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    return currentmax



****** Cluster 749 ******
def func_1e131982dd484d0199d591fe89a7b337(B, X, N):
    X += [0] * (37 - N)
    X.sort()
    best_profit = 0.0
    for najmensich in range(1, 37):
        if X[-1] == X[najmensich - 1]:
            continue
        mintreba = 0
        for i in range(najmensich):
            mintreba += X[najmensich - 1] - X[i]
        for i in range(najmensich, 37):
            if X[i] == X[najmensich - 1]:
                mintreba += 1
        if mintreba > B:
            continue
        minvyska = X[najmensich - 1]
        if True:
            vyska = minvyska
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            pp = 1.0 / najmensich
            best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
        maxvyska = X[-1]
        while maxvyska - minvyska > 1:
            vyska = (maxvyska + minvyska) // 2
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            if treba <= B:
                pp = 1.0 / najmensich
                best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
                minvyska = vyska
            else:
                maxvyska = vyska
    treba = 0
    vyhra = 0
    return maxvyska

def func_a265558c3ecc4b14abeb41a779cc0b63(B, X, N):
    X += [0] * (37 - N)
    X.sort()
    best_profit = 0.0
    for najmensich in range(1, 37):
        if X[-1] == X[najmensich - 1]:
            continue
        mintreba = 0
        for i in range(najmensich):
            mintreba += X[najmensich - 1] - X[i]
        for i in range(najmensich, 37):
            if X[i] == X[najmensich - 1]:
                mintreba += 1
        if mintreba > B:
            continue
        minvyska = X[najmensich - 1]
        if True:
            vyska = minvyska
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            pp = 1.0 / najmensich
            best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
        maxvyska = X[-1]
        while maxvyska - minvyska > 1:
            vyska = (maxvyska + minvyska) // 2
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            if treba <= B:
                pp = 1.0 / najmensich
                best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
                minvyska = vyska
            else:
                maxvyska = vyska
    treba = 0
    return maxvyska

def func_c5ec0c0bb9dc41e18583d37a113ec9cb(B, X, N):
    X += [0] * (37 - N)
    X.sort()
    best_profit = 0.0
    for najmensich in range(1, 37):
        if X[-1] == X[najmensich - 1]:
            continue
        mintreba = 0
        for i in range(najmensich):
            mintreba += X[najmensich - 1] - X[i]
        for i in range(najmensich, 37):
            if X[i] == X[najmensich - 1]:
                mintreba += 1
        if mintreba > B:
            continue
        minvyska = X[najmensich - 1]
        if True:
            vyska = minvyska
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            pp = 1.0 / najmensich
            best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
        maxvyska = X[-1]
        while maxvyska - minvyska > 1:
            vyska = (maxvyska + minvyska) // 2
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            if treba <= B:
                pp = 1.0 / najmensich
                best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
                minvyska = vyska
            else:
                maxvyska = vyska
    return maxvyska

def func_e1a0c8cd230a43cd87c141b635bb4c3d(B, X, N):
    X += [0] * (37 - N)
    X.sort()
    best_profit = 0.0
    for najmensich in range(1, 37):
        if X[-1] == X[najmensich - 1]:
            continue
        mintreba = 0
        for i in range(najmensich):
            mintreba += X[najmensich - 1] - X[i]
        for i in range(najmensich, 37):
            if X[i] == X[najmensich - 1]:
                mintreba += 1
        if mintreba > B:
            continue
        minvyska = X[najmensich - 1]
        if True:
            vyska = minvyska
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            pp = 1.0 / najmensich
            best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
        maxvyska = X[-1]
        while maxvyska - minvyska > 1:
            vyska = (maxvyska + minvyska) // 2
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            if treba <= B:
                pp = 1.0 / najmensich
                best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
                minvyska = vyska
            else:
                maxvyska = vyska
    treba = 0
    vyhra = 0
    vyska = X[-1]
    return maxvyska

def func_f5fd19a00879413dacb7fba5a087f130(B, X, N):
    X += [0] * (37 - N)
    X.sort()
    best_profit = 0.0
    for najmensich in range(1, 37):
        if X[-1] == X[najmensich - 1]:
            continue
        mintreba = 0
        for i in range(najmensich):
            mintreba += X[najmensich - 1] - X[i]
        for i in range(najmensich, 37):
            if X[i] == X[najmensich - 1]:
                mintreba += 1
        if mintreba > B:
            continue
        minvyska = X[najmensich - 1]
        if True:
            vyska = minvyska
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            pp = 1.0 / najmensich
            best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
        maxvyska = X[-1]
        while maxvyska - minvyska > 1:
            vyska = (maxvyska + minvyska) // 2
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            if treba <= B:
                pp = 1.0 / najmensich
                best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
                minvyska = vyska
            else:
                maxvyska = vyska
    treba = 0
    vyhra = 0
    vyska = X[-1]
    for i in range(37):
        treba += vyska - X[i]
        vyhra += vyska - X[i]
    return maxvyska

def func_ff1edf71170146fe9a811253210efbc0(B, X, N):
    X += [0] * (37 - N)
    X.sort()
    best_profit = 0.0
    for najmensich in range(1, 37):
        if X[-1] == X[najmensich - 1]:
            continue
        mintreba = 0
        for i in range(najmensich):
            mintreba += X[najmensich - 1] - X[i]
        for i in range(najmensich, 37):
            if X[i] == X[najmensich - 1]:
                mintreba += 1
        if mintreba > B:
            continue
        minvyska = X[najmensich - 1]
        if True:
            vyska = minvyska
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            pp = 1.0 / najmensich
            best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
        maxvyska = X[-1]
        while maxvyska - minvyska > 1:
            vyska = (maxvyska + minvyska) // 2
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            if treba <= B:
                pp = 1.0 / najmensich
                best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
                minvyska = vyska
            else:
                maxvyska = vyska
    treba = 0
    vyhra = 0
    vyska = X[-1]
    for i in range(37):
        treba += vyska - X[i]
        vyhra += vyska - X[i]
    pp = 1.0 / 37
    return maxvyska



****** Cluster 750 ******
def func_505f06252e34418fa773b4b4c7fc4ac0(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    return last

def func_7797c73eb5194341860ee7884913273f(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    return last

def func_8a663759203b4f179152ef13b000f0b7(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    return last

def func_adfc08e034c14d5cb9b6943eed5f02e5(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    return last



****** Cluster 751 ******
def func_51f4f6cc8d5a4186aa10a0bef3406bc9(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    answer = float(transistorsum - minimax) / float(transistorsum)
    return last

def func_c70fd6956ae8475fab037fc5c616969c(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    return last



****** Cluster 752 ******
def func_2d28f675b6a44757a430bc2c0880d9b8(X, najmensich, vyska):
    treba = 0
    vyhra = 0
    for i in range(najmensich):
        treba += vyska - X[i]
        vyhra += vyska - X[i]
    return treba

def func_5cc3597afca842b59cb272a0896b91e4(X, najmensich, vyska):
    treba = 0
    vyhra = 0
    for i in range(najmensich):
        treba += vyska - X[i]
        vyhra += vyska - X[i]
    return vyhra

def func_a09133c8988646c98a9e35c503131461(X, najmensich, vyska):
    treba = 0
    vyhra = 0
    for i in range(najmensich):
        treba += vyska - X[i]
        vyhra += vyska - X[i]
    return vyhra

def func_bca6de1db5b34aaea933d414af64e6c9(X, najmensich, minvyska):
    vyska = minvyska
    treba = 0
    vyhra = 0
    for i in range(najmensich):
        treba += vyska - X[i]
        vyhra += vyska - X[i]
    return treba

def func_de8ee70bad624fee8944264cc960cf84(X, najmensich, vyska):
    treba = 0
    vyhra = 0
    for i in range(najmensich):
        treba += vyska - X[i]
        vyhra += vyska - X[i]
    return treba

def func_e2c5707bf85d4632a4de9a740abce7c7(X, najmensich, minvyska):
    vyska = minvyska
    treba = 0
    vyhra = 0
    for i in range(najmensich):
        treba += vyska - X[i]
        vyhra += vyska - X[i]
    return vyhra



****** Cluster 753 ******
def func_a284722d2d664b14afc0bc26a05d78fe(cur2, x2):
    x, cur = x2, cur2
    getNext = True
    return cur

def func_641693850ad746c38c54a3aff9f17b57(h1, area_from_left):
    qb = h1
    qc = -area_from_left
    return qb

def func_8e7011861ed44719ab51fd7370623b3a(xnext, h2):
    x = xnext
    h1 = h2
    return x



****** Cluster 754 ******
def func_552b906686a4455594551419c05440e5(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    answer = float(transistorsum - minimax) / float(transistorsum)
    return lastsum

def func_e77961c93d7b487ea604b849ed47a2b9(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    return lastsum



****** Cluster 755 ******
def func_2feb7506982d46aaaf4e63cb0e741969(B, X, N):
    X += [0] * (37 - N)
    X.sort()
    best_profit = 0.0
    for najmensich in range(1, 37):
        if X[-1] == X[najmensich - 1]:
            continue
        mintreba = 0
        for i in range(najmensich):
            mintreba += X[najmensich - 1] - X[i]
        for i in range(najmensich, 37):
            if X[i] == X[najmensich - 1]:
                mintreba += 1
        if mintreba > B:
            continue
        minvyska = X[najmensich - 1]
        if True:
            vyska = minvyska
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            pp = 1.0 / najmensich
            best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
        maxvyska = X[-1]
        while maxvyska - minvyska > 1:
            vyska = (maxvyska + minvyska) // 2
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            if treba <= B:
                pp = 1.0 / najmensich
                best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
                minvyska = vyska
            else:
                maxvyska = vyska
    treba = 0
    return minvyska

def func_350012bf0fdc4daeaf03cd7d93708cd9(B, X, N):
    X += [0] * (37 - N)
    X.sort()
    best_profit = 0.0
    for najmensich in range(1, 37):
        if X[-1] == X[najmensich - 1]:
            continue
        mintreba = 0
        for i in range(najmensich):
            mintreba += X[najmensich - 1] - X[i]
        for i in range(najmensich, 37):
            if X[i] == X[najmensich - 1]:
                mintreba += 1
        if mintreba > B:
            continue
        minvyska = X[najmensich - 1]
        if True:
            vyska = minvyska
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            pp = 1.0 / najmensich
            best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
        maxvyska = X[-1]
        while maxvyska - minvyska > 1:
            vyska = (maxvyska + minvyska) // 2
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            if treba <= B:
                pp = 1.0 / najmensich
                best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
                minvyska = vyska
            else:
                maxvyska = vyska
    treba = 0
    vyhra = 0
    vyska = X[-1]
    for i in range(37):
        treba += vyska - X[i]
        vyhra += vyska - X[i]
    return minvyska

def func_6d1d5a3b89c74d5ca7afff01a4801bce(B, X, N):
    X += [0] * (37 - N)
    X.sort()
    best_profit = 0.0
    for najmensich in range(1, 37):
        if X[-1] == X[najmensich - 1]:
            continue
        mintreba = 0
        for i in range(najmensich):
            mintreba += X[najmensich - 1] - X[i]
        for i in range(najmensich, 37):
            if X[i] == X[najmensich - 1]:
                mintreba += 1
        if mintreba > B:
            continue
        minvyska = X[najmensich - 1]
        if True:
            vyska = minvyska
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            pp = 1.0 / najmensich
            best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
        maxvyska = X[-1]
        while maxvyska - minvyska > 1:
            vyska = (maxvyska + minvyska) // 2
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            if treba <= B:
                pp = 1.0 / najmensich
                best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
                minvyska = vyska
            else:
                maxvyska = vyska
    treba = 0
    vyhra = 0
    vyska = X[-1]
    return minvyska

def func_c1b0bc4c96b14e99bf5eeaaa3d368bd8(B, X, N):
    X += [0] * (37 - N)
    X.sort()
    best_profit = 0.0
    for najmensich in range(1, 37):
        if X[-1] == X[najmensich - 1]:
            continue
        mintreba = 0
        for i in range(najmensich):
            mintreba += X[najmensich - 1] - X[i]
        for i in range(najmensich, 37):
            if X[i] == X[najmensich - 1]:
                mintreba += 1
        if mintreba > B:
            continue
        minvyska = X[najmensich - 1]
        if True:
            vyska = minvyska
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            pp = 1.0 / najmensich
            best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
        maxvyska = X[-1]
        while maxvyska - minvyska > 1:
            vyska = (maxvyska + minvyska) // 2
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            if treba <= B:
                pp = 1.0 / najmensich
                best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
                minvyska = vyska
            else:
                maxvyska = vyska
    treba = 0
    vyhra = 0
    vyska = X[-1]
    for i in range(37):
        treba += vyska - X[i]
        vyhra += vyska - X[i]
    pp = 1.0 / 37
    return minvyska

def func_c7eb7af45bc344acaab5f528f23669a8(B, X, N):
    X += [0] * (37 - N)
    X.sort()
    best_profit = 0.0
    for najmensich in range(1, 37):
        if X[-1] == X[najmensich - 1]:
            continue
        mintreba = 0
        for i in range(najmensich):
            mintreba += X[najmensich - 1] - X[i]
        for i in range(najmensich, 37):
            if X[i] == X[najmensich - 1]:
                mintreba += 1
        if mintreba > B:
            continue
        minvyska = X[najmensich - 1]
        if True:
            vyska = minvyska
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            pp = 1.0 / najmensich
            best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
        maxvyska = X[-1]
        while maxvyska - minvyska > 1:
            vyska = (maxvyska + minvyska) // 2
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            if treba <= B:
                pp = 1.0 / najmensich
                best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
                minvyska = vyska
            else:
                maxvyska = vyska
    treba = 0
    vyhra = 0
    return minvyska

def func_de53cc0fd2624e8d998a8af053454d9e(B, X, N):
    X += [0] * (37 - N)
    X.sort()
    best_profit = 0.0
    for najmensich in range(1, 37):
        if X[-1] == X[najmensich - 1]:
            continue
        mintreba = 0
        for i in range(najmensich):
            mintreba += X[najmensich - 1] - X[i]
        for i in range(najmensich, 37):
            if X[i] == X[najmensich - 1]:
                mintreba += 1
        if mintreba > B:
            continue
        minvyska = X[najmensich - 1]
        if True:
            vyska = minvyska
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            pp = 1.0 / najmensich
            best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
        maxvyska = X[-1]
        while maxvyska - minvyska > 1:
            vyska = (maxvyska + minvyska) // 2
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            if treba <= B:
                pp = 1.0 / najmensich
                best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
                minvyska = vyska
            else:
                maxvyska = vyska
    return minvyska



****** Cluster 756 ******
def func_5eeaf264944a4c98bebac0c95748f73b(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    return nextlastsum

def func_b9cdf189cdc64d32bd7df6a6f02bd231(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    answer = float(transistorsum - minimax) / float(transistorsum)
    return nextlastsum



****** Cluster 757 ******
def func_3a5f297b7d794c08aadf309f56e922a7(X, najmensich, maxvyska, minvyska):
    vyska = (maxvyska + minvyska) // 2
    treba = 0
    vyhra = 0
    for i in range(najmensich):
        treba += vyska - X[i]
        vyhra += vyska - X[i]
    return treba

def func_820d8d50852a464599be41502ac1fc93(X, najmensich, maxvyska, minvyska):
    vyska = (maxvyska + minvyska) // 2
    treba = 0
    vyhra = 0
    for i in range(najmensich):
        treba += vyska - X[i]
        vyhra += vyska - X[i]
    return vyhra



****** Cluster 758 ******
def func_64b5fa7d8b834974905ad77ead0fca36(transistors, N):
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    return nextlastsum

def func_b1b64750ae68437486903edcec5e205e(transistors, N):
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    answer = float(transistorsum - minimax) / float(transistorsum)
    return nextlastsum



****** Cluster 759 ******
def func_66c081e8d7b64e2fbaa56fb9443b4156(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    return transistorsum

def func_bf856959b7a44cf09c8af39cfbd9ddb2(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    answer = float(transistorsum - minimax) / float(transistorsum)
    return transistorsum



****** Cluster 760 ******
def func_6c18ece8233246bab68542bcfe8a81f7(transistors, transistorsum, N):
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    answer = float(transistorsum - minimax) / float(transistorsum)
    return lastsum

def func_6de74de42eb144b4b8291ebb0a3ca157(transistors, transistorsum, N):
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    return lastsum



****** Cluster 761 ******
def func_40f670dba4f645e98ad10536116c4824(B, X, N):
    X += [0] * (37 - N)
    X.sort()
    best_profit = 0.0
    for najmensich in range(1, 37):
        if X[-1] == X[najmensich - 1]:
            continue
        mintreba = 0
        for i in range(najmensich):
            mintreba += X[najmensich - 1] - X[i]
        for i in range(najmensich, 37):
            if X[i] == X[najmensich - 1]:
                mintreba += 1
        if mintreba > B:
            continue
        minvyska = X[najmensich - 1]
        if True:
            vyska = minvyska
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            pp = 1.0 / najmensich
            best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
        maxvyska = X[-1]
        while maxvyska - minvyska > 1:
            vyska = (maxvyska + minvyska) // 2
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            if treba <= B:
                pp = 1.0 / najmensich
                best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
                minvyska = vyska
            else:
                maxvyska = vyska
    return vyska

def func_b9fae29f7e67469ab925e6c660cc85a9(B, X, N):
    X += [0] * (37 - N)
    X.sort()
    best_profit = 0.0
    for najmensich in range(1, 37):
        if X[-1] == X[najmensich - 1]:
            continue
        mintreba = 0
        for i in range(najmensich):
            mintreba += X[najmensich - 1] - X[i]
        for i in range(najmensich, 37):
            if X[i] == X[najmensich - 1]:
                mintreba += 1
        if mintreba > B:
            continue
        minvyska = X[najmensich - 1]
        if True:
            vyska = minvyska
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            pp = 1.0 / najmensich
            best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
        maxvyska = X[-1]
        while maxvyska - minvyska > 1:
            vyska = (maxvyska + minvyska) // 2
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            if treba <= B:
                pp = 1.0 / najmensich
                best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
                minvyska = vyska
            else:
                maxvyska = vyska
    treba = 0
    vyhra = 0
    return vyska

def func_c21001a780d74e98b880094cd85ad360(B, X, N):
    X += [0] * (37 - N)
    X.sort()
    best_profit = 0.0
    for najmensich in range(1, 37):
        if X[-1] == X[najmensich - 1]:
            continue
        mintreba = 0
        for i in range(najmensich):
            mintreba += X[najmensich - 1] - X[i]
        for i in range(najmensich, 37):
            if X[i] == X[najmensich - 1]:
                mintreba += 1
        if mintreba > B:
            continue
        minvyska = X[najmensich - 1]
        if True:
            vyska = minvyska
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            pp = 1.0 / najmensich
            best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
        maxvyska = X[-1]
        while maxvyska - minvyska > 1:
            vyska = (maxvyska + minvyska) // 2
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            if treba <= B:
                pp = 1.0 / najmensich
                best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
                minvyska = vyska
            else:
                maxvyska = vyska
    treba = 0
    return vyska



****** Cluster 762 ******
def func_422a0328eae345e8893584759cf13b60(B, X, N):
    X += [0] * (37 - N)
    X.sort()
    best_profit = 0.0
    for najmensich in range(1, 37):
        if X[-1] == X[najmensich - 1]:
            continue
        mintreba = 0
        for i in range(najmensich):
            mintreba += X[najmensich - 1] - X[i]
        for i in range(najmensich, 37):
            if X[i] == X[najmensich - 1]:
                mintreba += 1
        if mintreba > B:
            continue
        minvyska = X[najmensich - 1]
        if True:
            vyska = minvyska
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            pp = 1.0 / najmensich
            best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
        maxvyska = X[-1]
        while maxvyska - minvyska > 1:
            vyska = (maxvyska + minvyska) // 2
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            if treba <= B:
                pp = 1.0 / najmensich
                best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
                minvyska = vyska
            else:
                maxvyska = vyska
    treba = 0
    return mintreba

def func_5e0687a6c95946fca5292053238f748a(B, X, N):
    X += [0] * (37 - N)
    X.sort()
    best_profit = 0.0
    for najmensich in range(1, 37):
        if X[-1] == X[najmensich - 1]:
            continue
        mintreba = 0
        for i in range(najmensich):
            mintreba += X[najmensich - 1] - X[i]
        for i in range(najmensich, 37):
            if X[i] == X[najmensich - 1]:
                mintreba += 1
        if mintreba > B:
            continue
        minvyska = X[najmensich - 1]
        if True:
            vyska = minvyska
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            pp = 1.0 / najmensich
            best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
        maxvyska = X[-1]
        while maxvyska - minvyska > 1:
            vyska = (maxvyska + minvyska) // 2
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            if treba <= B:
                pp = 1.0 / najmensich
                best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
                minvyska = vyska
            else:
                maxvyska = vyska
    treba = 0
    vyhra = 0
    vyska = X[-1]
    for i in range(37):
        treba += vyska - X[i]
        vyhra += vyska - X[i]
    pp = 1.0 / 37
    return mintreba

def func_5e417323d93e440ea4afd4078d5f4892(B, X, N):
    X += [0] * (37 - N)
    X.sort()
    best_profit = 0.0
    for najmensich in range(1, 37):
        if X[-1] == X[najmensich - 1]:
            continue
        mintreba = 0
        for i in range(najmensich):
            mintreba += X[najmensich - 1] - X[i]
        for i in range(najmensich, 37):
            if X[i] == X[najmensich - 1]:
                mintreba += 1
        if mintreba > B:
            continue
        minvyska = X[najmensich - 1]
        if True:
            vyska = minvyska
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            pp = 1.0 / najmensich
            best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
        maxvyska = X[-1]
        while maxvyska - minvyska > 1:
            vyska = (maxvyska + minvyska) // 2
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            if treba <= B:
                pp = 1.0 / najmensich
                best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
                minvyska = vyska
            else:
                maxvyska = vyska
    treba = 0
    vyhra = 0
    vyska = X[-1]
    return mintreba

def func_a19e4d422d874768b947a4060a85d0ef(B, X, N):
    X += [0] * (37 - N)
    X.sort()
    best_profit = 0.0
    for najmensich in range(1, 37):
        if X[-1] == X[najmensich - 1]:
            continue
        mintreba = 0
        for i in range(najmensich):
            mintreba += X[najmensich - 1] - X[i]
        for i in range(najmensich, 37):
            if X[i] == X[najmensich - 1]:
                mintreba += 1
        if mintreba > B:
            continue
        minvyska = X[najmensich - 1]
        if True:
            vyska = minvyska
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            pp = 1.0 / najmensich
            best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
        maxvyska = X[-1]
        while maxvyska - minvyska > 1:
            vyska = (maxvyska + minvyska) // 2
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            if treba <= B:
                pp = 1.0 / najmensich
                best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
                minvyska = vyska
            else:
                maxvyska = vyska
    treba = 0
    vyhra = 0
    return mintreba

def func_ae8c4684a4184c769819a465115f3ca3(B, X, N):
    X += [0] * (37 - N)
    X.sort()
    best_profit = 0.0
    for najmensich in range(1, 37):
        if X[-1] == X[najmensich - 1]:
            continue
        mintreba = 0
        for i in range(najmensich):
            mintreba += X[najmensich - 1] - X[i]
        for i in range(najmensich, 37):
            if X[i] == X[najmensich - 1]:
                mintreba += 1
        if mintreba > B:
            continue
        minvyska = X[najmensich - 1]
        if True:
            vyska = minvyska
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            pp = 1.0 / najmensich
            best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
        maxvyska = X[-1]
        while maxvyska - minvyska > 1:
            vyska = (maxvyska + minvyska) // 2
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            if treba <= B:
                pp = 1.0 / najmensich
                best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
                minvyska = vyska
            else:
                maxvyska = vyska
    treba = 0
    vyhra = 0
    vyska = X[-1]
    for i in range(37):
        treba += vyska - X[i]
        vyhra += vyska - X[i]
    return mintreba

def func_df633bdf19d84cb0826bc7901ff4abc4(B, X, N):
    X += [0] * (37 - N)
    X.sort()
    best_profit = 0.0
    for najmensich in range(1, 37):
        if X[-1] == X[najmensich - 1]:
            continue
        mintreba = 0
        for i in range(najmensich):
            mintreba += X[najmensich - 1] - X[i]
        for i in range(najmensich, 37):
            if X[i] == X[najmensich - 1]:
                mintreba += 1
        if mintreba > B:
            continue
        minvyska = X[najmensich - 1]
        if True:
            vyska = minvyska
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            pp = 1.0 / najmensich
            best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
        maxvyska = X[-1]
        while maxvyska - minvyska > 1:
            vyska = (maxvyska + minvyska) // 2
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            if treba <= B:
                pp = 1.0 / najmensich
                best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
                minvyska = vyska
            else:
                maxvyska = vyska
    return mintreba



****** Cluster 763 ******
def func_70f12371a3884bf0b9629a4a3791a40b(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    answer = float(transistorsum - minimax) / float(transistorsum)
    return firstsum

def func_f32b183e207047b094c45de830942481(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    return firstsum



****** Cluster 764 ******
def func_76e4279924b44de29e4d8483a24ae030(transistors, transistorsum, N):
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    return minimax

def func_83747f1ac778494087062aa2ee29fe7c(transistors, transistorsum, N):
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    answer = float(transistorsum - minimax) / float(transistorsum)
    return minimax



****** Cluster 765 ******
def func_5050f307e2174dd99985237c3f1d363f(maxvyska, minvyska):
    vyska = (maxvyska + minvyska) // 2
    treba = 0
    vyhra = 0
    return vyska

def func_5d0329e3f6f7406e9b4b015fa39d6bf6(maxvyska, minvyska):
    vyska = (maxvyska + minvyska) // 2
    treba = 0
    return vyska



****** Cluster 766 ******
def func_5ccab04c96e94a69b1fcedc8e964ae22(B, X, N):
    X += [0] * (37 - N)
    X.sort()
    best_profit = 0.0
    for najmensich in range(1, 37):
        if X[-1] == X[najmensich - 1]:
            continue
        mintreba = 0
        for i in range(najmensich):
            mintreba += X[najmensich - 1] - X[i]
        for i in range(najmensich, 37):
            if X[i] == X[najmensich - 1]:
                mintreba += 1
        if mintreba > B:
            continue
        minvyska = X[najmensich - 1]
        if True:
            vyska = minvyska
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            pp = 1.0 / najmensich
            best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
        maxvyska = X[-1]
        while maxvyska - minvyska > 1:
            vyska = (maxvyska + minvyska) // 2
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            if treba <= B:
                pp = 1.0 / najmensich
                best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
                minvyska = vyska
            else:
                maxvyska = vyska
    treba = 0
    vyhra = 0
    return best_profit

def func_add06fe79a32421385d20db1b3cf9b01(B, X, N):
    X += [0] * (37 - N)
    X.sort()
    best_profit = 0.0
    for najmensich in range(1, 37):
        if X[-1] == X[najmensich - 1]:
            continue
        mintreba = 0
        for i in range(najmensich):
            mintreba += X[najmensich - 1] - X[i]
        for i in range(najmensich, 37):
            if X[i] == X[najmensich - 1]:
                mintreba += 1
        if mintreba > B:
            continue
        minvyska = X[najmensich - 1]
        if True:
            vyska = minvyska
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            pp = 1.0 / najmensich
            best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
        maxvyska = X[-1]
        while maxvyska - minvyska > 1:
            vyska = (maxvyska + minvyska) // 2
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            if treba <= B:
                pp = 1.0 / najmensich
                best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
                minvyska = vyska
            else:
                maxvyska = vyska
    treba = 0
    vyhra = 0
    vyska = X[-1]
    for i in range(37):
        treba += vyska - X[i]
        vyhra += vyska - X[i]
    pp = 1.0 / 37
    return best_profit

def func_bc081a2e0f3746439aed4d03a9c51ca9(B, X, N):
    X += [0] * (37 - N)
    X.sort()
    best_profit = 0.0
    for najmensich in range(1, 37):
        if X[-1] == X[najmensich - 1]:
            continue
        mintreba = 0
        for i in range(najmensich):
            mintreba += X[najmensich - 1] - X[i]
        for i in range(najmensich, 37):
            if X[i] == X[najmensich - 1]:
                mintreba += 1
        if mintreba > B:
            continue
        minvyska = X[najmensich - 1]
        if True:
            vyska = minvyska
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            pp = 1.0 / najmensich
            best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
        maxvyska = X[-1]
        while maxvyska - minvyska > 1:
            vyska = (maxvyska + minvyska) // 2
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            if treba <= B:
                pp = 1.0 / najmensich
                best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
                minvyska = vyska
            else:
                maxvyska = vyska
    treba = 0
    vyhra = 0
    vyska = X[-1]
    for i in range(37):
        treba += vyska - X[i]
        vyhra += vyska - X[i]
    return best_profit

def func_cd9094e767f645cda4bfd423a02bb306(B, X, N):
    X += [0] * (37 - N)
    X.sort()
    best_profit = 0.0
    for najmensich in range(1, 37):
        if X[-1] == X[najmensich - 1]:
            continue
        mintreba = 0
        for i in range(najmensich):
            mintreba += X[najmensich - 1] - X[i]
        for i in range(najmensich, 37):
            if X[i] == X[najmensich - 1]:
                mintreba += 1
        if mintreba > B:
            continue
        minvyska = X[najmensich - 1]
        if True:
            vyska = minvyska
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            pp = 1.0 / najmensich
            best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
        maxvyska = X[-1]
        while maxvyska - minvyska > 1:
            vyska = (maxvyska + minvyska) // 2
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            if treba <= B:
                pp = 1.0 / najmensich
                best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
                minvyska = vyska
            else:
                maxvyska = vyska
    treba = 0
    vyhra = 0
    vyska = X[-1]
    return best_profit

def func_e506f7dfe8fe4ab9a864b887e36ed163(B, X, N):
    X += [0] * (37 - N)
    X.sort()
    best_profit = 0.0
    for najmensich in range(1, 37):
        if X[-1] == X[najmensich - 1]:
            continue
        mintreba = 0
        for i in range(najmensich):
            mintreba += X[najmensich - 1] - X[i]
        for i in range(najmensich, 37):
            if X[i] == X[najmensich - 1]:
                mintreba += 1
        if mintreba > B:
            continue
        minvyska = X[najmensich - 1]
        if True:
            vyska = minvyska
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            pp = 1.0 / najmensich
            best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
        maxvyska = X[-1]
        while maxvyska - minvyska > 1:
            vyska = (maxvyska + minvyska) // 2
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            if treba <= B:
                pp = 1.0 / najmensich
                best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
                minvyska = vyska
            else:
                maxvyska = vyska
    return best_profit

def func_fbaf9978d9e447558b68bf32f5745675(B, X, N):
    X += [0] * (37 - N)
    X.sort()
    best_profit = 0.0
    for najmensich in range(1, 37):
        if X[-1] == X[najmensich - 1]:
            continue
        mintreba = 0
        for i in range(najmensich):
            mintreba += X[najmensich - 1] - X[i]
        for i in range(najmensich, 37):
            if X[i] == X[najmensich - 1]:
                mintreba += 1
        if mintreba > B:
            continue
        minvyska = X[najmensich - 1]
        if True:
            vyska = minvyska
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            pp = 1.0 / najmensich
            best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
        maxvyska = X[-1]
        while maxvyska - minvyska > 1:
            vyska = (maxvyska + minvyska) // 2
            treba = 0
            vyhra = 0
            for i in range(najmensich):
                treba += vyska - X[i]
                vyhra += vyska - X[i]
            for i in range(najmensich, 37):
                if X[i] <= vyska:
                    treba += vyska + 1 - X[i]
            if treba <= B:
                pp = 1.0 / najmensich
                best_profit = max(best_profit, 36.0 * pp * vyhra - treba)
                minvyska = vyska
            else:
                maxvyska = vyska
    treba = 0
    return best_profit



****** Cluster 767 ******
def func_60aea58211904e9392b7caf229534f96(X):
    treba = 0
    vyhra = 0
    vyska = X[-1]
    return vyska

def func_c3583d4c65f44876b182dbe66be9c61c(X):
    vyhra = 0
    vyska = X[-1]
    return vyska

def func_94aff88d4b4848d3bd7c9da2849f2741(A):
    total = sum(A)
    totalsum = [a for a in A]
    return a

def func_3c30d1bc92b24f2a98c62479ac1b7918(t):
    total = sum(t)
    c = [0]
    for x in t:
        c.append(c[-1] + x)
    a = b = 0
    best = 0
    return x

def func_48fff3f7b29b40cdb17e537cc8764bbc(t):
    c = [0]
    for x in t:
        c.append(c[-1] + x)
    return x

def func_6c252ca9523b49c199d63982cefaa0c6(t):
    c = [0]
    for x in t:
        c.append(c[-1] + x)
    a = b = 0
    return x

def func_b6c3f619862c47e88654e1cbe99f50c3(t):
    c = [0]
    for x in t:
        c.append(c[-1] + x)
    a = b = 0
    best = 0
    return x

def func_b9d3bd1b42c7436399d47ff3442d4a8c(t):
    total = sum(t)
    c = [0]
    for x in t:
        c.append(c[-1] + x)
    a = b = 0
    return x

def func_f0c341a89cd24da7a7ffa1ffb840ad02(t):
    total = sum(t)
    c = [0]
    for x in t:
        c.append(c[-1] + x)
    return x

def func_32ff8cf9e1cc490d86f83d63f67111ce(sum0):
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    return bestAnswer

def func_72932eac3f1c4bfd9ea8f7acfa887a21(sum0):
    allv = sum0[-1]
    bestAnswer = allv
    return allv

def func_7b752419f2cb467bb14bb825f5a1cc94(sum0):
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    return allv

def func_efbd1ded4bf34b89929bd98ef823c5d1(sum0):
    allv = sum0[-1]
    bestAnswer = allv
    return bestAnswer

def func_1533683bfba64c4ebdb3a89f9b818002(l):
    cum = [0]
    for x in l:
        cum.append(cum[-1] + x)
    best = 0.0
    return x

def func_501c9d54cd14420481de1285888dd06d(l):
    vsota = sum(l)
    cum = [0]
    for x in l:
        cum.append(cum[-1] + x)
    best = 0.0
    return x

def func_66487c945fa14da3989a2fd33276a580(l):
    cum = [0]
    for x in l:
        cum.append(cum[-1] + x)
    return x

def func_684b933c52eb404b88eee1fdf8486a71(l):
    vsota = sum(l)
    cum = [0]
    for x in l:
        cum.append(cum[-1] + x)
    return x

def func_024786bb17704b50afeed4c0be4abf3d(placed):
    queue = [1] + placed + [(p - 1) for p in placed] + [(p + 1) for p in placed
        ]
    queue = sorted(set(queue))
    seen = set(queue)
    return p

def func_265673fa1dd840d7aa17bb82706d27b9(placed):
    ret = 0.0
    queue = [1] + placed + [(p - 1) for p in placed] + [(p + 1) for p in placed
        ]
    queue = sorted(set(queue))
    seen = set(queue)
    return p

def func_46d8aef8af3a4db38f56975d1aefd163(placed):
    ret = 0.0
    queue = [1] + placed + [(p - 1) for p in placed] + [(p + 1) for p in placed
        ]
    queue = sorted(set(queue))
    return p

def func_6ef8e71e217a4110bac33d08a52272ad(placed):
    queue = [1] + placed + [(p - 1) for p in placed] + [(p + 1) for p in placed
        ]
    queue = sorted(set(queue))
    return p

def func_7d4ef7b2dd064ef093c471ba71ceeb2f(placed):
    ret = 0.0
    queue = [1] + placed + [(p - 1) for p in placed] + [(p + 1) for p in placed
        ]
    return p

def func_228d60d145a24a3facdc0d44a0bb1497(x):
    sx = sum(x)
    mx = x[-1]
    return mx

def func_ed56b8cfd6ac4ee7862e4b790e24e948(x):
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    return mx



****** Cluster 768 ******
def func_680b2c83df2d414f8c787d1043d8b638(X, najmensich, vyska):
    treba = 0
    vyhra = 0
    for i in range(najmensich):
        treba += vyska - X[i]
        vyhra += vyska - X[i]
    return i

def func_bed69502163e498e82c5432a3bd97cec(X, najmensich, minvyska):
    vyska = minvyska
    treba = 0
    vyhra = 0
    for i in range(najmensich):
        treba += vyska - X[i]
        vyhra += vyska - X[i]
    return i

def func_fb844fe5c9574c978056e3a6a047928f(X, najmensich, vyska):
    treba = 0
    vyhra = 0
    for i in range(najmensich):
        treba += vyska - X[i]
        vyhra += vyska - X[i]
    return i



****** Cluster 769 ******
def func_a2a41d8a273d4675aea5c3c7db8f415d(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    return minimax

def func_b08f5108882746628d53b7e953a8ee79(s, q, N, p, r):
    transistors = [((i * p + q) % r + s) for i in range(N)]
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    answer = float(transistorsum - minimax) / float(transistorsum)
    return minimax



****** Cluster 770 ******
def func_6e60f02053f44c3a9302899270ad6f33(X, najmensich, i, vyska):
    if X[i] == X[najmensich - 1]:
        mintreba += 1
    if X[i] <= vyska:
        treba += vyska + 1 - X[i]
    return vyska

def func_f47fe6603abe4a14961b94975faa871c(X, najmensich, i, vyska):
    if X[i] == X[najmensich - 1]:
        mintreba += 1
    if X[i] <= vyska:
        treba += vyska + 1 - X[i]
    if X[i] <= vyska:
        treba += vyska + 1 - X[i]
    return vyska



****** Cluster 771 ******
def func_a99a8f25cf6744e19363a105df48f095(transistors, transistorsum, N):
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    answer = float(transistorsum - minimax) / float(transistorsum)
    return currentmax

def func_ed0635e005f049b19b1f100d7556319d(transistors, transistorsum, N):
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    return currentmax



****** Cluster 772 ******
def func_ca6001b21b4d427dade15672dbd33f5f(transistors, N):
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    return nextfirstsum

def func_f11e30f20ccd4703b1f46890d3b5bad2(transistors, N):
    transistorsum = sum(transistors)
    first = 0
    last = N
    firstsum = 0
    lastsum = 0
    minimax = transistorsum
    while last - first != 1:
        nextfirstsum = firstsum + transistors[first]
        nextlastsum = lastsum + transistors[last - 1]
        if nextfirstsum < nextlastsum:
            firstsum += transistors[first]
            first += 1
        else:
            last -= 1
            lastsum += transistors[last]
        currentmax = max([firstsum, lastsum, transistorsum - firstsum -
            lastsum])
        minimax = min(currentmax, minimax)
    answer = float(transistorsum - minimax) / float(transistorsum)
    return nextfirstsum



****** Cluster 773 ******
def func_016dfbfebd444e53b2f148aff80505dc(N, A, q, p, r, s):
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    for i in range(N):
        j = hpi
        while j <= i:
            pgain = max(S[j], S[i] - S[j])
            gain = max(S[j], S[i] - S[j], psum - S[i])
            mingain = min(mingain, gain)
            if 2 * S[j] > S[i]:
                break
            if pgain <= minpgain:
                hpi = j
            j = j + 1
    return i

def func_1439a4d9e7c64cdd9bd7077ac3a59089(N, A, q, p, r, s):
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    return i

def func_163d112482f546ac8b79335b3e42388d(N, A, q, p, r, s):
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    return i

def func_1ce5638f9bdd4f8aba7b70dc06e5b47f(N, A, q, p, r, s):
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    return i

def func_ac51824063474411834cf9cbce6da70c(N, A, q, p, r, s):
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    return i

def func_e1eb75ae65ec4a39af2292add3aa0f16(N, A, q, p, r, s):
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    return i



****** Cluster 774 ******
def func_023b1282d89b4658a884376e64c37278(N, q, p, r, s):
    A = []
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    return minpgain

def func_22ad3aae2a344fa497050d0a3edd8b84(N, q, p, r, s):
    A = []
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    return mingain

def func_59a299a5ebcf4967a956d9d122584dba(N, q, p, r, s):
    A = []
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    return minpgain

def func_6f530fbee79943b1941bd8d51128f7ad(N, q, p, r, s):
    A = []
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    return mingain

def func_714d2f270e304256a669a737f70b05ec(N, q, p, r, s):
    A = []
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    return mingain

def func_9ef3de985828496ea61225cb3a168cab(N, q, p, r, s):
    A = []
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    for i in range(N):
        j = hpi
        while j <= i:
            pgain = max(S[j], S[i] - S[j])
            gain = max(S[j], S[i] - S[j], psum - S[i])
            mingain = min(mingain, gain)
            if 2 * S[j] > S[i]:
                break
            if pgain <= minpgain:
                hpi = j
            j = j + 1
    return psum

def func_a1219e3a67b64b6c84d15b38f19bdc0f(N, q, p, r, s):
    A = []
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    return psum

def func_b6e4ba192f3348439b1b3727df1968a1(N, q, p, r, s):
    A = []
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    for i in range(N):
        j = hpi
        while j <= i:
            pgain = max(S[j], S[i] - S[j])
            gain = max(S[j], S[i] - S[j], psum - S[i])
            mingain = min(mingain, gain)
            if 2 * S[j] > S[i]:
                break
            if pgain <= minpgain:
                hpi = j
            j = j + 1
    return minpgain

def func_b709b84b68824f22ba16b7ec98ff8702(N, q, p, r, s):
    A = []
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    return psum

def func_c08cef70440541c4b5d7325f9778ff67(N, q, p, r, s):
    A = []
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    return psum

def func_f1a3569dd8924799be146a79bee1a0d5(N, q, p, r, s):
    A = []
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    return psum

def func_f266123b0c4846998dd359ed4bdb5b84(N, q, p, r, s):
    A = []
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    return psum



****** Cluster 775 ******
def func_02d871b3726d4e88b940c88e61b44ff7(N, q, p, r, s):
    A = []
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    return i

def func_14b40d2d5796402bb55efe34c514758d(N, q, p, r, s):
    A = []
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    return i

def func_2af9cbec022e44c89e114a5ce4b48ef0(N, q, p, r, s):
    A = []
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    return i

def func_5002d93c3ef046ffb9a973244d8c3e32(N, q, p, r, s):
    A = []
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    return i

def func_6f5ad5fb2e174f73bb4c951cc96c585d(N, q, p, r, s):
    A = []
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    for i in range(N):
        j = hpi
        while j <= i:
            pgain = max(S[j], S[i] - S[j])
            gain = max(S[j], S[i] - S[j], psum - S[i])
            mingain = min(mingain, gain)
            if 2 * S[j] > S[i]:
                break
            if pgain <= minpgain:
                hpi = j
            j = j + 1
    return i

def func_b47615c3c44b4e7b8e8b79bf9b340fe7(N, q, p, r, s):
    A = []
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    return i



****** Cluster 776 ******
def func_03347800e1b44621be7ac99d75e51117(N, A, q, p, r, s):
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    return minpgain

def func_0db2f7f158824d4696913c2298349c87(N, A, q, p, r, s):
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    return minpgain

def func_0eb884871b7246b5b153eae1c91876e0(N, A, q, p, r, s):
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    return psum

def func_2693877005bc425bb5d10d50ba184b66(N, A, q, p, r, s):
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    return mingain

def func_2eafe3a7702d46ee88136df8edf45be5(N, A, q, p, r, s):
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    return psum

def func_4ffd2cd609444843856cca8538fac343(N, A, q, p, r, s):
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    return mingain

def func_6579940ed29f481794db86541902a629(N, A, q, p, r, s):
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    for i in range(N):
        j = hpi
        while j <= i:
            pgain = max(S[j], S[i] - S[j])
            gain = max(S[j], S[i] - S[j], psum - S[i])
            mingain = min(mingain, gain)
            if 2 * S[j] > S[i]:
                break
            if pgain <= minpgain:
                hpi = j
            j = j + 1
    return minpgain

def func_66e6367549a14b1ea1af5a9fdf4a18f2(N, A, q, p, r, s):
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    return psum

def func_7152470275014f658fa59b4cdaeaea92(N, A, q, p, r, s):
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    return psum

def func_7d23a97a960e4b70ab90c416cb5dc552(N, A, q, p, r, s):
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    for i in range(N):
        j = hpi
        while j <= i:
            pgain = max(S[j], S[i] - S[j])
            gain = max(S[j], S[i] - S[j], psum - S[i])
            mingain = min(mingain, gain)
            if 2 * S[j] > S[i]:
                break
            if pgain <= minpgain:
                hpi = j
            j = j + 1
    return psum

def func_802d188bb9dd4f0fa2e896e30ac6940f(N, A, q, p, r, s):
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    return psum

def func_f44bff9274064b568f97c4d9cb7c22a2(N, A, q, p, r, s):
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    return mingain



****** Cluster 777 ******
def func_03d3eac3541d4b5690de20bf0848fcc2(N, S, psum):
    mingain = psum
    minpgain = psum
    hpi = 0
    for i in range(N):
        j = hpi
        while j <= i:
            pgain = max(S[j], S[i] - S[j])
            gain = max(S[j], S[i] - S[j], psum - S[i])
            mingain = min(mingain, gain)
            if 2 * S[j] > S[i]:
                break
            if pgain <= minpgain:
                hpi = j
            j = j + 1
    return minpgain

def func_9d91769de67448d2906e79d06cb05b55(N, S, psum):
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    for i in range(N):
        j = hpi
        while j <= i:
            pgain = max(S[j], S[i] - S[j])
            gain = max(S[j], S[i] - S[j], psum - S[i])
            mingain = min(mingain, gain)
            if 2 * S[j] > S[i]:
                break
            if pgain <= minpgain:
                hpi = j
            j = j + 1
    return minpgain



****** Cluster 778 ******
def func_04266cae184b41ba86d02095dd29f6a2(N, A, q, p, r, s):
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    return S

def func_10bb7af27bbd4273ac65078cfb075a37(N, A, q, p, r, s):
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    return S

def func_426213315ea7410a94fb09ec4513b86e(N, A, q, p, r, s):
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    for i in range(N):
        j = hpi
        while j <= i:
            pgain = max(S[j], S[i] - S[j])
            gain = max(S[j], S[i] - S[j], psum - S[i])
            mingain = min(mingain, gain)
            if 2 * S[j] > S[i]:
                break
            if pgain <= minpgain:
                hpi = j
            j = j + 1
    return S

def func_89520863509241c6938cc799077e71ed(N, A, q, p, r, s):
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    return S

def func_89ea100f3f1d4d37bdcc86501d628aa5(N, A, q, p, r, s):
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    return S

def func_d91c9a4c0a9a496989efba0bda01db50(N, A, q, p, r, s):
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    return S



****** Cluster 779 ******
def func_0cfb74f92a4e4baf8f392b0dd53a8708(N, S, A, q, p, r, s):
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    return psum

def func_38244230e4e1401b95efbb92e53bda2e(N, S, A, q, p, r, s):
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    return psum

def func_4e43a58b6a98411a9807218eef1737ea(N, S, A, q, p, r, s):
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    return mingain

def func_5daf051d00124fd0a639fc7f54b08a09(N, S, A, q, p, r, s):
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    return minpgain

def func_719669b4b6bd47ca87a107ad08579a7b(N, S, A, q, p, r, s):
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    return psum

def func_88933903641a4219bfcd3fe481eccb77(N, S, A, q, p, r, s):
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    for i in range(N):
        j = hpi
        while j <= i:
            pgain = max(S[j], S[i] - S[j])
            gain = max(S[j], S[i] - S[j], psum - S[i])
            mingain = min(mingain, gain)
            if 2 * S[j] > S[i]:
                break
            if pgain <= minpgain:
                hpi = j
            j = j + 1
    return minpgain

def func_a23f31349fff479da49c4318b8638a1e(N, S, A, q, p, r, s):
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    return mingain

def func_b5e47067f352460981a68e75ac3b488a(N, S, A, q, p, r, s):
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    return psum

def func_c028c7ad92004fe2b2372c862cb6ab5d(N, S, A, q, p, r, s):
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    return mingain

def func_c449ec15464342e791ff3eacdb9abe1c(N, S, A, q, p, r, s):
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    return psum

def func_d6685b452db2449f808a44b0134871c2(N, S, A, q, p, r, s):
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    return minpgain

def func_ec4a1bd36c564bdab45625216eddba75(N, S, A, q, p, r, s):
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    for i in range(N):
        j = hpi
        while j <= i:
            pgain = max(S[j], S[i] - S[j])
            gain = max(S[j], S[i] - S[j], psum - S[i])
            mingain = min(mingain, gain)
            if 2 * S[j] > S[i]:
                break
            if pgain <= minpgain:
                hpi = j
            j = j + 1
    return psum



****** Cluster 780 ******
def func_f0721f05951b40dbb0e4d52fdc356f7d(answer):
    for x in answer:
        print x
    sys.stdout.flush()
    return x

def func_73ac5beb55904f7b9bd2e8c926ff3769(PS):
    S = PS[-1]
    minmax = S
    return minmax

def func_bec09dea836d41b0a8aa465864e4535c(PS):
    S = PS[-1]
    minmax = S
    return S



****** Cluster 781 ******
def func_1354288ccba84eed8ae92c512dac9a21(N, S, A, q, p, r, s):
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    return a

def func_36afc1157b3a4d98973283c89e551c95(N, S, A, q, p, r, s):
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    for i in range(N):
        j = hpi
        while j <= i:
            pgain = max(S[j], S[i] - S[j])
            gain = max(S[j], S[i] - S[j], psum - S[i])
            mingain = min(mingain, gain)
            if 2 * S[j] > S[i]:
                break
            if pgain <= minpgain:
                hpi = j
            j = j + 1
    return a

def func_3f712eb9fb00484188a1911dd770f454(N, S, A, q, p, r, s):
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    return a

def func_87d5f065e44c43d5a92d0865ce67b846(N, S, A, q, p, r, s):
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    return a

def func_9b97e855cb174e73aee12347d68e4f27(N, S, A, q, p, r, s):
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    return a

def func_a497461c9b7c4268bd5ff98afa1a682d(N, S, A, q, p, r, s):
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    return a



****** Cluster 782 ******
def func_1830a3211fcf43318b039339a80d9ac0(N, q, p, r, s):
    A = []
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    return A

def func_2c4be757d97e49a59bfaa1fc43c50a27(N, q, p, r, s):
    A = []
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    return A

def func_5baf0148fdbc41c5a0884af3c8b9488b(N, q, p, r, s):
    A = []
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    return A

def func_925a3ebc9fd440a482fdf727841ae576(N, q, p, r, s):
    A = []
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    return A

def func_e3780b0a05cc4fb8b8ffdc236f22954f(N, q, p, r, s):
    A = []
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    for i in range(N):
        j = hpi
        while j <= i:
            pgain = max(S[j], S[i] - S[j])
            gain = max(S[j], S[i] - S[j], psum - S[i])
            mingain = min(mingain, gain)
            if 2 * S[j] > S[i]:
                break
            if pgain <= minpgain:
                hpi = j
            j = j + 1
    return A

def func_f25ec8382d17431a933c4425dbad69a6(N, q, p, r, s):
    A = []
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    return A



****** Cluster 783 ******
def func_2217146b87934627b2d3ed27e7420c84(N, S, A, q, p, r, s):
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    return i

def func_31c61452d8d042e5987f7c997a9e82fd(N, S, A, q, p, r, s):
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    return i

def func_34db1e8092a14fa8bb6106c1aead6c2d(N, S, A, q, p, r, s):
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    for i in range(N):
        j = hpi
        while j <= i:
            pgain = max(S[j], S[i] - S[j])
            gain = max(S[j], S[i] - S[j], psum - S[i])
            mingain = min(mingain, gain)
            if 2 * S[j] > S[i]:
                break
            if pgain <= minpgain:
                hpi = j
            j = j + 1
    return i

def func_b4990af39135459d96c62595ee20b9ab(N, S, A, q, p, r, s):
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    return i

def func_ef7c8b79e2c845a18f0fee457574ebd2(N, S, A, q, p, r, s):
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    return i

def func_f7ecc06fdbc64a7592ff48fbf217c363(N, S, A, q, p, r, s):
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    return i



****** Cluster 784 ******
def func_238f1c452ea24086bd8c32190fffacf9(N, S, psum):
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    for i in range(N):
        j = hpi
        while j <= i:
            pgain = max(S[j], S[i] - S[j])
            gain = max(S[j], S[i] - S[j], psum - S[i])
            mingain = min(mingain, gain)
            if 2 * S[j] > S[i]:
                break
            if pgain <= minpgain:
                hpi = j
            j = j + 1
    return i

def func_8231678d745d4f19b9761387a05eebce(N, S, psum):
    mingain = psum
    minpgain = psum
    hpi = 0
    for i in range(N):
        j = hpi
        while j <= i:
            pgain = max(S[j], S[i] - S[j])
            gain = max(S[j], S[i] - S[j], psum - S[i])
            mingain = min(mingain, gain)
            if 2 * S[j] > S[i]:
                break
            if pgain <= minpgain:
                hpi = j
            j = j + 1
    return i



****** Cluster 785 ******
def func_2cc3e049fe7a4969a68a4b3008c96377(N, S, psum):
    mingain = psum
    minpgain = psum
    hpi = 0
    for i in range(N):
        j = hpi
        while j <= i:
            pgain = max(S[j], S[i] - S[j])
            gain = max(S[j], S[i] - S[j], psum - S[i])
            mingain = min(mingain, gain)
            if 2 * S[j] > S[i]:
                break
            if pgain <= minpgain:
                hpi = j
            j = j + 1
    return j

def func_b3241811d60546289bdf7ee6fc9e20c7(N, S, psum):
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    for i in range(N):
        j = hpi
        while j <= i:
            pgain = max(S[j], S[i] - S[j])
            gain = max(S[j], S[i] - S[j], psum - S[i])
            mingain = min(mingain, gain)
            if 2 * S[j] > S[i]:
                break
            if pgain <= minpgain:
                hpi = j
            j = j + 1
    return j



****** Cluster 786 ******
def func_2f109fa61b7546c6856d48d9e2769ffc(N, q, p, r, s):
    A = []
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    return a

def func_46b38e1011024e409327e7f6b5ff25a9(N, q, p, r, s):
    A = []
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    return a

def func_5fb2311d68394da088bbb77042ae3f39(N, q, p, r, s):
    A = []
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    return a

def func_8f3714cfe25f4fdf991d5f2e8c5b24d4(N, q, p, r, s):
    A = []
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    return a

def func_f175bba566a549b8ab301ca384863ec3(N, q, p, r, s):
    A = []
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    for i in range(N):
        j = hpi
        while j <= i:
            pgain = max(S[j], S[i] - S[j])
            gain = max(S[j], S[i] - S[j], psum - S[i])
            mingain = min(mingain, gain)
            if 2 * S[j] > S[i]:
                break
            if pgain <= minpgain:
                hpi = j
            j = j + 1
    return a

def func_f5962c052a794db48324e97566dfb89c(N, q, p, r, s):
    A = []
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    return a



****** Cluster 787 ******
def func_383d4bcf3d164e2797ac6d9e6de1741e(N, S, psum):
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    for i in range(N):
        j = hpi
        while j <= i:
            pgain = max(S[j], S[i] - S[j])
            gain = max(S[j], S[i] - S[j], psum - S[i])
            mingain = min(mingain, gain)
            if 2 * S[j] > S[i]:
                break
            if pgain <= minpgain:
                hpi = j
            j = j + 1
    return mingain

def func_aa2da8ae23014a5a9eb08730f0af5440(N, S, psum):
    mingain = psum
    minpgain = psum
    hpi = 0
    for i in range(N):
        j = hpi
        while j <= i:
            pgain = max(S[j], S[i] - S[j])
            gain = max(S[j], S[i] - S[j], psum - S[i])
            mingain = min(mingain, gain)
            if 2 * S[j] > S[i]:
                break
            if pgain <= minpgain:
                hpi = j
            j = j + 1
    return mingain

def func_c4475b735e064052b789831142a23b9f(N, D, S):
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    while b < N - 1:
        b += 1
        C -= D[b]
        B += D[b]
        p = max(A, B, C)
        while a < b:
            B -= D[a]
            A += D[a]
            a += 1
            t = max(A, B, C)
            if t >= p:
                a -= 1
                B += D[a]
                A -= D[a]
                break
            p = t
        ans = min(ans, p)
    return ans



****** Cluster 788 ******
def func_4efbaf10483540bc969bfa12fc937ea4(N, S, psum):
    mingain = psum
    minpgain = psum
    hpi = 0
    for i in range(N):
        j = hpi
        while j <= i:
            pgain = max(S[j], S[i] - S[j])
            gain = max(S[j], S[i] - S[j], psum - S[i])
            mingain = min(mingain, gain)
            if 2 * S[j] > S[i]:
                break
            if pgain <= minpgain:
                hpi = j
            j = j + 1
    return hpi

def func_75109454bd8a45a283aca541cd94e2ba(N, S, psum):
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    for i in range(N):
        j = hpi
        while j <= i:
            pgain = max(S[j], S[i] - S[j])
            gain = max(S[j], S[i] - S[j], psum - S[i])
            mingain = min(mingain, gain)
            if 2 * S[j] > S[i]:
                break
            if pgain <= minpgain:
                hpi = j
            j = j + 1
    return hpi



****** Cluster 789 ******
def func_52f1bb55fd0a4989b6ae8428f0bfd465(N, A, q, p, r, s):
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    return a

def func_a233020961ec4e3eae425a094fe17764(N, A, q, p, r, s):
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    return a

def func_b48c882d8e85448c958300c276cfa67e(N, A, q, p, r, s):
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    return a

def func_ca17dd55efb041c7a2849793e25916ab(N, A, q, p, r, s):
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    for i in range(N):
        j = hpi
        while j <= i:
            pgain = max(S[j], S[i] - S[j])
            gain = max(S[j], S[i] - S[j], psum - S[i])
            mingain = min(mingain, gain)
            if 2 * S[j] > S[i]:
                break
            if pgain <= minpgain:
                hpi = j
            j = j + 1
    return a

def func_e304ea182c4b42999a07238ef4fc8a44(N, A, q, p, r, s):
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    return a

def func_edec0b6f897941cabcea81d590e0c42d(N, A, q, p, r, s):
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    return a



****** Cluster 790 ******
def func_5abf7ed201f04c6f9ab63dfd863a3624(S, i, j, psum):
    pgain = max(S[j], S[i] - S[j])
    gain = max(S[j], S[i] - S[j], psum - S[i])
    return gain

def func_9c5c57414433474fb461d57fbba6e671(S, i, j, psum):
    pgain = max(S[j], S[i] - S[j])
    gain = max(S[j], S[i] - S[j], psum - S[i])
    return pgain



****** Cluster 791 ******
def func_68bead40c66f48fdb5a670a3f2750593(N, S, psum):
    mingain = psum
    minpgain = psum
    hpi = 0
    for i in range(N):
        j = hpi
        while j <= i:
            pgain = max(S[j], S[i] - S[j])
            gain = max(S[j], S[i] - S[j], psum - S[i])
            mingain = min(mingain, gain)
            if 2 * S[j] > S[i]:
                break
            if pgain <= minpgain:
                hpi = j
            j = j + 1
    return float(psum - mingain) / psum

def func_bfca667e3c6c48a0856c692d8a707e80(N, S, psum):
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    for i in range(N):
        j = hpi
        while j <= i:
            pgain = max(S[j], S[i] - S[j])
            gain = max(S[j], S[i] - S[j], psum - S[i])
            mingain = min(mingain, gain)
            if 2 * S[j] > S[i]:
                break
            if pgain <= minpgain:
                hpi = j
            j = j + 1
    return float(psum - mingain) / psum

def func_68d29b3b887841e3afad74f5b725f2fc(N, D, S):
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    while b < N - 1:
        b += 1
        C -= D[b]
        B += D[b]
        p = max(A, B, C)
        while a < b:
            B -= D[a]
            A += D[a]
            a += 1
            t = max(A, B, C)
            if t >= p:
                a -= 1
                B += D[a]
                A -= D[a]
                break
            p = t
        ans = min(ans, p)
    ans = float(S - ans) / S
    return ans



****** Cluster 792 ******
def func_69794909e1c34da5972885ad766e0c8c(N, S, psum):
    mingain = psum
    minpgain = psum
    hpi = 0
    for i in range(N):
        j = hpi
        while j <= i:
            pgain = max(S[j], S[i] - S[j])
            gain = max(S[j], S[i] - S[j], psum - S[i])
            mingain = min(mingain, gain)
            if 2 * S[j] > S[i]:
                break
            if pgain <= minpgain:
                hpi = j
            j = j + 1
    return gain

def func_d78fe9e4de30454cb8414e541a287f97(N, S, psum):
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    for i in range(N):
        j = hpi
        while j <= i:
            pgain = max(S[j], S[i] - S[j])
            gain = max(S[j], S[i] - S[j], psum - S[i])
            mingain = min(mingain, gain)
            if 2 * S[j] > S[i]:
                break
            if pgain <= minpgain:
                hpi = j
            j = j + 1
    return gain



****** Cluster 793 ******
def func_7f91a1185a474a76bfdb5d8a16e3b9ae(N, q, p, r, s):
    A = []
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    return S

def func_92a7c17153554f5a8b888f0c99ccc908(N, q, p, r, s):
    A = []
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    return S

def func_969a285cfd9042ab88335e7ed7b4df66(N, q, p, r, s):
    A = []
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    return S

def func_adbbf3b510fd40d4b4e6214ec6b2e658(N, q, p, r, s):
    A = []
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    return S

def func_d0a08a9821a64712bb2ced4e603e702f(N, q, p, r, s):
    A = []
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    return S

def func_e1a3b33b2d3f42e8b8ff9694a796ae7b(N, q, p, r, s):
    A = []
    S = []
    psum = 0
    for i in range(N):
        a = s + (i * p + q) % r
        A.append(a)
        psum = psum + a
        S.append(psum)
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    for i in range(N):
        j = hpi
        while j <= i:
            pgain = max(S[j], S[i] - S[j])
            gain = max(S[j], S[i] - S[j], psum - S[i])
            mingain = min(mingain, gain)
            if 2 * S[j] > S[i]:
                break
            if pgain <= minpgain:
                hpi = j
            j = j + 1
    return S



****** Cluster 794 ******
def func_a7a0219037b94fe0b320520dcd8e4466(N, S, psum):
    mingain = psum
    minpgain = psum
    hpi = 0
    for i in range(N):
        j = hpi
        while j <= i:
            pgain = max(S[j], S[i] - S[j])
            gain = max(S[j], S[i] - S[j], psum - S[i])
            mingain = min(mingain, gain)
            if 2 * S[j] > S[i]:
                break
            if pgain <= minpgain:
                hpi = j
            j = j + 1
    return pgain

def func_f937227ddfbc44dfa4dfe19838e3412c(N, S, psum):
    """mingain = psum
	for i in range(N):
		for j in range(i+1):
			gain = max(S[j],S[i]-S[j],psum-S[i])
			mingain = min(mingain,gain)
	return float(psum-mingain)/psum"""
    mingain = psum
    minpgain = psum
    hpi = 0
    for i in range(N):
        j = hpi
        while j <= i:
            pgain = max(S[j], S[i] - S[j])
            gain = max(S[j], S[i] - S[j], psum - S[i])
            mingain = min(mingain, gain)
            if 2 * S[j] > S[i]:
                break
            if pgain <= minpgain:
                hpi = j
            j = j + 1
    return pgain



****** Cluster 795 ******
def func_0b9266c1019a4ef1990c54b8513f3bef(snm, s, t):
    m = s + t >> 1
    i, j = getpt(snm, 0, m)
    return i

def func_3500fc892cdf4b6a863de49de049d1e0(snm, s, t):
    m = s + t >> 1
    i, j = getpt(snm, 0, m)
    k, l = getpt(snm, i, m + j)
    return i

def func_5d57166f1426447781ca88495798d809(snm, s, t):
    m = s + t >> 1
    i, j = getpt(snm, 0, m)
    k, l = getpt(snm, i, m + j)
    l -= j
    return i



****** Cluster 796 ******
def func_0ffe932d741c4d3da92e10c7bcf2dec5(snm, m):
    i, j = getpt(snm, 0, m)
    k, l = getpt(snm, i, m + j)
    return i

def func_7ac0c62f509a4a9490a8b2219a1ae89d(snm, m):
    i, j = getpt(snm, 0, m)
    k, l = getpt(snm, i, m + j)
    l -= j
    return i



****** Cluster 797 ******
def func_154d7a37a37145d99f9c292395adb00d(snm, n):
    s, t = 0, snm[n]
    while s != t:
        m = s + t >> 1
        i, j = getpt(snm, 0, m)
        k, l = getpt(snm, i, m + j)
        l -= j
        if snm[n] - l - j <= m:
            t = m
        else:
            s = m + 1
    return m

def func_bea5d8362336445cb5d526e0d11f49eb(snm, n):
    s, t = 0, snm[n]
    while s != t:
        m = s + t >> 1
        i, j = getpt(snm, 0, m)
        k, l = getpt(snm, i, m + j)
        l -= j
        if snm[n] - l - j <= m:
            t = m
        else:
            s = m + 1
    res = (snm[n] - s) / float(snm[n])
    return m



****** Cluster 798 ******
def func_17f56b74191641d0a9e6cdee9a28c804(snm, m):
    i, j = getpt(snm, 0, m)
    k, l = getpt(snm, i, m + j)
    l -= j
    return j

def func_dfb4c678e27442b78c38c20d18803797(snm, m):
    i, j = getpt(snm, 0, m)
    k, l = getpt(snm, i, m + j)
    return j



****** Cluster 799 ******
def func_240a3585e4bc4be9a481417b6964d1dc(snm, m):
    i, j = getpt(snm, 0, m)
    k, l = getpt(snm, i, m + j)
    return k

def func_c45864eccfa1458ca1c4986307304ad8(snm, m):
    i, j = getpt(snm, 0, m)
    k, l = getpt(snm, i, m + j)
    l -= j
    return k



****** Cluster 800 ******
def func_26046892dcc74f5e971411bb271582a3(snm, n):
    s, t = 0, snm[n]
    while s != t:
        m = s + t >> 1
        i, j = getpt(snm, 0, m)
        k, l = getpt(snm, i, m + j)
        l -= j
        if snm[n] - l - j <= m:
            t = m
        else:
            s = m + 1
    return s

def func_2721823961284feb848559f525cb3aca(snm, n):
    s, t = 0, snm[n]
    while s != t:
        m = s + t >> 1
        i, j = getpt(snm, 0, m)
        k, l = getpt(snm, i, m + j)
        l -= j
        if snm[n] - l - j <= m:
            t = m
        else:
            s = m + 1
    res = (snm[n] - s) / float(snm[n])
    return t

def func_9caf0c5885164560aa876a1e3f0be488(snm, n):
    s, t = 0, snm[n]
    while s != t:
        m = s + t >> 1
        i, j = getpt(snm, 0, m)
        k, l = getpt(snm, i, m + j)
        l -= j
        if snm[n] - l - j <= m:
            t = m
        else:
            s = m + 1
    return t

def func_9e9a0d49d06d46e8beec067f7e423b5b(snm, n):
    s, t = 0, snm[n]
    while s != t:
        m = s + t >> 1
        i, j = getpt(snm, 0, m)
        k, l = getpt(snm, i, m + j)
        l -= j
        if snm[n] - l - j <= m:
            t = m
        else:
            s = m + 1
    res = (snm[n] - s) / float(snm[n])
    return s



****** Cluster 801 ******
def func_27f0cb399fc9400ab85da8506d923547(s, d, m):
    s, t = s, len(d) - 1
    while s != t:
        v = s + t + 1 >> 1
        if d[v] <= m:
            s = v
        else:
            t = v - 1
    return s

def func_7f4c598e2edb4b0591146cec5e1bf5d7(s, d, m):
    s, t = s, len(d) - 1
    while s != t:
        v = s + t + 1 >> 1
        if d[v] <= m:
            s = v
        else:
            t = v - 1
    return t



****** Cluster 802 ******
def func_338968fb5e5c40a0a600b46167113722(snm, s, t):
    m = s + t >> 1
    i, j = getpt(snm, 0, m)
    k, l = getpt(snm, i, m + j)
    return j

def func_60631e941b16404f988d7023c51824ef(snm, s, t):
    m = s + t >> 1
    i, j = getpt(snm, 0, m)
    return j

def func_944c839025b94fc38fd49b99413d0ac8(snm, s, t):
    m = s + t >> 1
    i, j = getpt(snm, 0, m)
    k, l = getpt(snm, i, m + j)
    l -= j
    return j



****** Cluster 803 ******
def func_479e40073c224d5cb8e06d75ade8b81d(snm, s, t):
    m = s + t >> 1
    i, j = getpt(snm, 0, m)
    k, l = getpt(snm, i, m + j)
    l -= j
    return m

def func_896cd5d6badf417996e5eb4bec1df821(snm, s, t):
    m = s + t >> 1
    i, j = getpt(snm, 0, m)
    return m

def func_b7e2b1d8aa304d32a89d9fa8d2dd6bf8(snm, s, t):
    m = s + t >> 1
    i, j = getpt(snm, 0, m)
    k, l = getpt(snm, i, m + j)
    return m



****** Cluster 804 ******
def func_307d36495a62413cb9c2f92ab5768db3(p):
    pr = p / 100.0
    re = 1
    running = pr
    return running

def func_41000a635d0a48e3baeaf1c7b7ae7042(p):
    pr = p / 100.0
    re = 1
    running = pr
    multiplier = 2
    return running

def func_45d839ec0e7245d59ed6359beb420907(p):
    pr = p / 100.0
    re = 1
    running = pr
    return pr

def func_6bb1eec3b71a4a19b8910cfaa36eebab(p):
    pr = p / 100.0
    re = 1
    return pr

def func_8a76a3e3589f40bba7387d951b9dbdf5(p):
    pr = p / 100.0
    re = 1
    running = pr
    multiplier = 2
    return pr



****** Cluster 805 ******
def func_47a51a311d8a4ed0929085b7d129ca29(snm, n):
    s, t = 0, snm[n]
    while s != t:
        m = s + t >> 1
        i, j = getpt(snm, 0, m)
        k, l = getpt(snm, i, m + j)
        l -= j
        if snm[n] - l - j <= m:
            t = m
        else:
            s = m + 1
    res = (snm[n] - s) / float(snm[n])
    return j

def func_88cbd437dc7849faa81a10cefb42712a(snm, n):
    s, t = 0, snm[n]
    while s != t:
        m = s + t >> 1
        i, j = getpt(snm, 0, m)
        k, l = getpt(snm, i, m + j)
        l -= j
        if snm[n] - l - j <= m:
            t = m
        else:
            s = m + 1
    return j



****** Cluster 806 ******
def func_5070313317f845b387d3fc90781c39ba(snm, n):
    s, t = 0, snm[n]
    while s != t:
        m = s + t >> 1
        i, j = getpt(snm, 0, m)
        k, l = getpt(snm, i, m + j)
        l -= j
        if snm[n] - l - j <= m:
            t = m
        else:
            s = m + 1
    return i

def func_98c525cabba041cd926f16a93a7ac91b(snm, n):
    s, t = 0, snm[n]
    while s != t:
        m = s + t >> 1
        i, j = getpt(snm, 0, m)
        k, l = getpt(snm, i, m + j)
        l -= j
        if snm[n] - l - j <= m:
            t = m
        else:
            s = m + 1
    res = (snm[n] - s) / float(snm[n])
    return i



****** Cluster 807 ******
def func_5f73b947f5f54009a253a6c55a1ec97a(snm, n):
    s, t = 0, snm[n]
    while s != t:
        m = s + t >> 1
        i, j = getpt(snm, 0, m)
        k, l = getpt(snm, i, m + j)
        l -= j
        if snm[n] - l - j <= m:
            t = m
        else:
            s = m + 1
    return l

def func_7975c742337f4228b7b2b5a519e37257(snm, n):
    s, t = 0, snm[n]
    while s != t:
        m = s + t >> 1
        i, j = getpt(snm, 0, m)
        k, l = getpt(snm, i, m + j)
        l -= j
        if snm[n] - l - j <= m:
            t = m
        else:
            s = m + 1
    res = (snm[n] - s) / float(snm[n])
    return l



****** Cluster 808 ******
def func_b650e8a958274076bfe53e5f7666f3b7(snm, n):
    s, t = 0, snm[n]
    while s != t:
        m = s + t >> 1
        i, j = getpt(snm, 0, m)
        k, l = getpt(snm, i, m + j)
        l -= j
        if snm[n] - l - j <= m:
            t = m
        else:
            s = m + 1
    res = (snm[n] - s) / float(snm[n])
    return k

def func_e14147de9fd14145b217949ac0191eba(snm, n):
    s, t = 0, snm[n]
    while s != t:
        m = s + t >> 1
        i, j = getpt(snm, 0, m)
        k, l = getpt(snm, i, m + j)
        l -= j
        if snm[n] - l - j <= m:
            t = m
        else:
            s = m + 1
    return k



****** Cluster 809 ******
def func_beda2559937845ecb28552c7d7aac990(snm, s, t):
    m = s + t >> 1
    i, j = getpt(snm, 0, m)
    k, l = getpt(snm, i, m + j)
    l -= j
    return k

def func_e959c45417db4b339f8fc8229e2b26b0(snm, s, t):
    m = s + t >> 1
    i, j = getpt(snm, 0, m)
    k, l = getpt(snm, i, m + j)
    return k



****** Cluster 810 ******
def func_18f4193f2aa7413babc658d3568fbf55(seq):
    hs, sm, mx = has_bound_3_split(seq, 1)
    if hs:
        return float(sm - mx) / sm
    L = 1
    return hs

def func_bb4347bd4c7e4af3a3a047671efc381f(seq):
    hs, sm, mx = has_bound_3_split(seq, 1)
    if hs:
        return float(sm - mx) / sm
    L = 1
    U = 10 ** 15
    return hs

def func_edd6508b40944f0aa7955a2642788700(seq):
    hs, sm, mx = has_bound_3_split(seq, 1)
    if hs:
        return float(sm - mx) / sm
    return hs



****** Cluster 811 ******
def func_198663561eb84e1ea0519a20089add0d(seq):
    hs, sm, mx = has_bound_3_split(seq, 1)
    if hs:
        return float(sm - mx) / sm
    L = 1
    U = 10 ** 15
    while L + 1 < U:
        M = (L + U) / 2
        hs, sm, mx = has_bound_3_split(seq, M)
        if hs:
            U = M
        else:
            L = M
    hs, sm, mx = has_bound_3_split(seq, U)
    return L

def func_73e3bdb9e609419baa2390f288bf154c(seq):
    hs, sm, mx = has_bound_3_split(seq, 1)
    if hs:
        return float(sm - mx) / sm
    L = 1
    U = 10 ** 15
    while L + 1 < U:
        M = (L + U) / 2
        hs, sm, mx = has_bound_3_split(seq, M)
        if hs:
            U = M
        else:
            L = M
    return L



****** Cluster 812 ******
def func_1ac00bbf78dc452c97535907f0145211(seq):
    hs, sm, mx = has_bound_3_split(seq, 1)
    if hs:
        return float(sm - mx) / sm
    L = 1
    U = 10 ** 15
    while L + 1 < U:
        M = (L + U) / 2
        hs, sm, mx = has_bound_3_split(seq, M)
        if hs:
            U = M
        else:
            L = M
    hs, sm, mx = has_bound_3_split(seq, U)
    return hs

def func_6a242cc8d31040ffad38871e46141c4a(seq):
    hs, sm, mx = has_bound_3_split(seq, 1)
    if hs:
        return float(sm - mx) / sm
    L = 1
    return L

def func_8b5546b144ce42a0a3b57828b97bcf67(seq):
    hs, sm, mx = has_bound_3_split(seq, 1)
    if hs:
        return float(sm - mx) / sm
    L = 1
    U = 10 ** 15
    return L



****** Cluster 813 ******
def func_2051dc906766408b867c1cb240f99552(seq):
    hs, sm, mx = has_bound_3_split(seq, 1)
    if hs:
        return float(sm - mx) / sm
    return sm

def func_3fe79e7eca4448a9b7237ce01f316f4f(seq):
    hs, sm, mx = has_bound_3_split(seq, 1)
    if hs:
        return float(sm - mx) / sm
    L = 1
    return sm

def func_5b6578a93da34850bd9c728d130e620b(seq):
    hs, sm, mx = has_bound_3_split(seq, 1)
    if hs:
        return float(sm - mx) / sm
    L = 1
    U = 10 ** 15
    return sm

def func_9ca631b4e8194a7a9f82f75246b53c93(seq):
    hs, sm, mx = has_bound_3_split(seq, 1)
    if hs:
        return float(sm - mx) / sm
    L = 1
    U = 10 ** 15
    while L + 1 < U:
        M = (L + U) / 2
        hs, sm, mx = has_bound_3_split(seq, M)
        if hs:
            U = M
        else:
            L = M
    return sm

def func_deae9e002cc74229b6561c55140104d4(seq):
    hs, sm, mx = has_bound_3_split(seq, 1)
    if hs:
        return float(sm - mx) / sm
    L = 1
    U = 10 ** 15
    while L + 1 < U:
        M = (L + U) / 2
        hs, sm, mx = has_bound_3_split(seq, M)
        if hs:
            U = M
        else:
            L = M
    hs, sm, mx = has_bound_3_split(seq, U)
    return sm



****** Cluster 814 ******
def func_31fd12bbd453429d8be5ad94ad4d0a45(sm, seq):
    L = 1
    U = 10 ** 15
    while L + 1 < U:
        M = (L + U) / 2
        hs, sm, mx = has_bound_3_split(seq, M)
        if hs:
            U = M
        else:
            L = M
    hs, sm, mx = has_bound_3_split(seq, U)
    return M

def func_60308a2af217420584f9f7cd34d8c51b(sm, seq):
    L = 1
    U = 10 ** 15
    while L + 1 < U:
        M = (L + U) / 2
        hs, sm, mx = has_bound_3_split(seq, M)
        if hs:
            U = M
        else:
            L = M
    return M



****** Cluster 815 ******
def func_3372a697df484321aa10f1242147d25f(seq):
    hs, sm, mx = has_bound_3_split(seq, 1)
    if hs:
        return float(sm - mx) / sm
    L = 1
    U = 10 ** 15
    return mx

def func_9f2ef24dd70b4665ba68db0c35534d65(seq):
    hs, sm, mx = has_bound_3_split(seq, 1)
    if hs:
        return float(sm - mx) / sm
    L = 1
    return mx

def func_a37251439488432aab05dee63e3b5f84(seq):
    hs, sm, mx = has_bound_3_split(seq, 1)
    if hs:
        return float(sm - mx) / sm
    return mx



****** Cluster 816 ******
def func_60a3e0b26b844e37bcc6ae43dc56a11e(seq):
    hs, sm, mx = has_bound_3_split(seq, 1)
    if hs:
        return float(sm - mx) / sm
    L = 1
    U = 10 ** 15
    while L + 1 < U:
        M = (L + U) / 2
        hs, sm, mx = has_bound_3_split(seq, M)
        if hs:
            U = M
        else:
            L = M
    return M

def func_cce20f7966ef4d27b3c1bda09708a195(seq):
    hs, sm, mx = has_bound_3_split(seq, 1)
    if hs:
        return float(sm - mx) / sm
    L = 1
    U = 10 ** 15
    while L + 1 < U:
        M = (L + U) / 2
        hs, sm, mx = has_bound_3_split(seq, M)
        if hs:
            U = M
        else:
            L = M
    hs, sm, mx = has_bound_3_split(seq, U)
    return M



****** Cluster 817 ******
def func_6d6762536dbc43488e306657d2cac0a1(sm, seq):
    L = 1
    U = 10 ** 15
    while L + 1 < U:
        M = (L + U) / 2
        hs, sm, mx = has_bound_3_split(seq, M)
        if hs:
            U = M
        else:
            L = M
    return U

def func_a8a526f94d604fa29bae69fd92522859(sm, seq):
    L = 1
    U = 10 ** 15
    while L + 1 < U:
        M = (L + U) / 2
        hs, sm, mx = has_bound_3_split(seq, M)
        if hs:
            U = M
        else:
            L = M
    hs, sm, mx = has_bound_3_split(seq, U)
    return U



****** Cluster 818 ******
def func_71ac23ff1da04fe58bf0ac8dff24f065(sm, seq):
    L = 1
    U = 10 ** 15
    while L + 1 < U:
        M = (L + U) / 2
        hs, sm, mx = has_bound_3_split(seq, M)
        if hs:
            U = M
        else:
            L = M
    return L

def func_ca605fe1f2cc404ba26d21dc35cc2835(sm, seq):
    L = 1
    U = 10 ** 15
    while L + 1 < U:
        M = (L + U) / 2
        hs, sm, mx = has_bound_3_split(seq, M)
        if hs:
            U = M
        else:
            L = M
    hs, sm, mx = has_bound_3_split(seq, U)
    return L



****** Cluster 819 ******
def func_72034a75318e44169339d01f71fe1911(seq):
    hs, sm, mx = has_bound_3_split(seq, 1)
    if hs:
        return float(sm - mx) / sm
    L = 1
    U = 10 ** 15
    while L + 1 < U:
        M = (L + U) / 2
        hs, sm, mx = has_bound_3_split(seq, M)
        if hs:
            U = M
        else:
            L = M
    hs, sm, mx = has_bound_3_split(seq, U)
    return U

def func_d7c239d79324446bbc2210d2666ffddd(seq):
    hs, sm, mx = has_bound_3_split(seq, 1)
    if hs:
        return float(sm - mx) / sm
    L = 1
    U = 10 ** 15
    while L + 1 < U:
        M = (L + U) / 2
        hs, sm, mx = has_bound_3_split(seq, M)
        if hs:
            U = M
        else:
            L = M
    return U



****** Cluster 820 ******
def func_a9b125358c0d4f9cb5b377fd0fcd0eb9(seq, bound):
    lsum = 0
    lend = 0
    for i in range(len(seq)):
        if lsum + seq[i] <= bound and i < len(seq) - 1:
            lsum += seq[i]
            lend = i + 1
        else:
            break
    return lend

def func_cb286d57c650443d9647a007ce1d2a3d(seq, bound):
    lsum = 0
    lend = 0
    for i in range(len(seq)):
        if lsum + seq[i] <= bound and i < len(seq) - 1:
            lsum += seq[i]
            lend = i + 1
        else:
            break
    return i



****** Cluster 821 ******
def func_0287b13dbc004259bde8be86e46d338a(N, A):
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    return i

def func_9dc316eb090e414098169c7abcf13cb7(N, A):
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    return i

def func_aeff768c0ff849b28f22b3666805f417(N, A):
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    return i

def func_c952a48a25e247f8be18eabaf023cdfd(N, A):
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    best = total - best
    return i

def func_deacbfabc9ed40e0a33ec1637bf3430d(N, A):
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    return i

def func_f9479ff289a948be8c2d7a7b0f2dfa83(N, A):
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    return i

def func_5e53ce5c3c074d23ae3fdee5ad1a589d(n, a):
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    return i

def func_7246b94dceeb4f9389c27e8e798b621d(N, transistors):
    sums = []
    t = 0
    for i in xrange(N):
        sums.append(t)
        t += transistors[i]
    return i

def func_a113c897af1c443da8e82033c7a92260(N, transistors):
    total = sum(transistors)
    sums = []
    t = 0
    for i in xrange(N):
        sums.append(t)
        t += transistors[i]
    sums.append(t)
    return i

def func_f156e89054104feb91656d213897198e(N, transistors):
    total = sum(transistors)
    sums = []
    t = 0
    for i in xrange(N):
        sums.append(t)
        t += transistors[i]
    return i

def func_f2f3f2508f2f4f88ba2314fc4df88fff(N, transistors):
    sums = []
    t = 0
    for i in xrange(N):
        sums.append(t)
        t += transistors[i]
    sums.append(t)
    return i



****** Cluster 822 ******
def func_03d2f890a2c949a89793ecdc37f01f8f(N, A):
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    return totalsum

def func_3644d4881d65454a8b0e9d0510e38422(N, A):
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    return totalsum

def func_80d4864700ce4dd0ad11216a8af20a43(N, A):
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    return totalsum

def func_88aabe94e6764b318ca15090dd04797b(N, A):
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    return totalsum

def func_8c742d967969486fb7cf47965a68ccad(N, A):
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    return totalsum

def func_d28aa504c42b4e95a31d5ecc209cc372(N, A):
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    best = total - best
    return totalsum



****** Cluster 823 ******
def func_0932f865260643f1a109fb1ae90c5edf(N, total, totalsum):
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    best = total - best
    return i

def func_1f03d84bfae0482f9aa5f9d61a1da0c7(N, total, totalsum):
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    return i

def func_5427bae4642e4fdeb8cc62f7b3113952(N, total, A):
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    return i

def func_6193114b510e409fbb3ed2fb52bd8b7d(N, total, totalsum):
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    return i

def func_652d5bbc2211491288de6c3066a45dce(N, total, totalsum):
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    return i

def func_6e165c549d7349069dcad42585d4381a(N, total, A):
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    return i

def func_9bd6ec8d36d940eeb9c65f5f0fee09bd(N, total, A):
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    best = total - best
    return i

def func_df07ccb748a54e528df29cc926af1ee4(N, total, A):
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    return i



****** Cluster 824 ******
def func_099d62d420a14be2af61d0eef35882cc(N, total, A):
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    return totalsum

def func_533c9fcc8ae8408a928cf5db36ca6bab(N, total, A):
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    best = total - best
    return totalsum

def func_d398a0b3c1c94fae9678823ece240fea(N, total, A):
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    return totalsum

def func_f5e3925197d94712bb243ebda63886d0(N, total, A):
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    return totalsum



****** Cluster 825 ******
def func_0eb21573e19d44e0904f29a1a176a7b4(N, total, A):
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    return a

def func_c6ebc6f32ada46b89d186717cd7f078e(N, total, A):
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    best = total - best
    return a



****** Cluster 826 ******
def func_1031ea5561494143b4f27b3c582366d1(N, A):
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    return total

def func_68e5b2a66f5a4bddae385b8336308872(N, A):
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    return total

def func_721f8e105ea84f1eac5263bbeb281074(N, A):
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    return total

def func_9d95579b9fda4f26b88e39b79c5059d5(N, A):
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    return best

def func_a0601ae8aa534f048cb6098f9f85db51(N, A):
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    best = total - best
    return total

def func_ac8b92c83ce248479046b3d1191f9935(N, A):
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    return total

def func_b3feac9ec0694c90b19b8e431568b51d(N, A):
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    return best

def func_185eefb746f742679e04ba34753568f0(N, D):
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    while b < N - 1:
        b += 1
        C -= D[b]
        B += D[b]
        p = max(A, B, C)
        while a < b:
            B -= D[a]
            A += D[a]
            a += 1
            t = max(A, B, C)
            if t >= p:
                a -= 1
                B += D[a]
                A -= D[a]
                break
            p = t
        ans = min(ans, p)
    return S

def func_78ded00109c14957aa3d3ec9c29786d9(N, D):
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    while b < N - 1:
        b += 1
        C -= D[b]
        B += D[b]
        p = max(A, B, C)
        while a < b:
            B -= D[a]
            A += D[a]
            a += 1
            t = max(A, B, C)
            if t >= p:
                a -= 1
                B += D[a]
                A -= D[a]
                break
            p = t
        ans = min(ans, p)
    ans = float(S - ans) / S
    return S

def func_3200f747c9314d98b86fc2f04df551b5(N, transistors):
    total = sum(transistors)
    sums = []
    t = 0
    for i in xrange(N):
        sums.append(t)
        t += transistors[i]
    return total

def func_88e3e7bedc9f437ca0fd41b24d959edb(N, transistors):
    total = sum(transistors)
    sums = []
    t = 0
    for i in xrange(N):
        sums.append(t)
        t += transistors[i]
    sums.append(t)
    return total



****** Cluster 827 ******
def func_10c189a3fd28494689725a3fdc8f9891(p, N, q, s, r):
    A = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    best = total - best
    return A

def func_1d7d2382410e4afbad6e132229e3df25(p, N, q, s, r):
    A = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    return A

def func_6a89344f1c3c4b8da1b282d31691fa98(p, N, q, s, r):
    A = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(A)
    totalsum = [a for a in A]
    return totalsum

def func_8fb52450fc054702b35b62053f47b93d(p, N, q, s, r):
    A = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(A)
    totalsum = [a for a in A]
    return A

def func_954d03bde7054130aab706fa6da97018(p, N, q, s, r):
    A = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(A)
    return A

def func_95540fe1d5db495a96297feb9ab821b2(p, N, q, s, r):
    A = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    return A

def func_a5c7bc28811e4fd1ac02c08c235801d5(p, N, q, s, r):
    A = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    return A

def func_e05db95d4c7a47b89133877c29283d4e(p, N, q, s, r):
    A = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    return A



****** Cluster 828 ******
def func_1390dd1047e146e1b1a6cf7838cfb5c2(N, total, totalsum):
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    best = total - best
    return best

def func_fff41eaa356b426abbec77e0ae7cc499(N, total, A):
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    best = total - best
    return best



****** Cluster 829 ******
def func_1b4eba326d7447e585ef56ee6461ac8f(p, N, q, s, r):
    A = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    return i

def func_4df52d7b70ad4a37810abf46330a3aa3(p, N, q, s, r):
    A = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    best = total - best
    return i

def func_7248f802060a4e7794c8959d6107aced(p, N, q, s, r):
    A = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    return i

def func_82ac2147bb5d453ca2588da6a7904c95(p, N, q, s, r):
    A = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(A)
    return i

def func_8ab2527b70af452baf1cf9779d1cbcaf(p, N, q, s, r):
    A = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    return i

def func_a019d6d9f147401e9081f89d7dbe4bba(p, N, q, s, r):
    A = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    return i

def func_a5faeb40726d4e7287b8837bc707874f(p, N, q, s, r):
    A = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(A)
    totalsum = [a for a in A]
    return i

def func_334cfd2c0d744fd48932c75de413bfc9(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    return i

def func_37ae2229a57946409839fa0da55147b2(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    return i

def func_46caa039e878463bbab05be393888140(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    return i

def func_4dfe060f69fd4520bb5b7514c51e0328(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    return i

def func_91937802611c407487440725b3678972(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    return i

def func_94c63e26ed824fac9a044d2e8a67152b(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    return i

def func_a296bc9fa6f541ce89f821464999f1dd(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    return i

def func_a89142595f554c28842a5d7a0521abde(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    return i

def func_b7e31548b4874b628547650919148089(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    return i

def func_dd498b8f055e4577abf2e4ac42a9756c(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    return i

def func_e8bdc86d1359404bbfb878306ec0e90c(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    return i



****** Cluster 830 ******
def func_2174296acb144810a55351d88c5dcce7(N, total, totalsum):
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    return b

def func_5833337ca69a40a181bf8c1cc7d68ff7(N, total, totalsum):
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    best = total - best
    return b

def func_75b310ced29e4f85b6ffa5be84905f4e(N, total, totalsum):
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    best = total - best
    return b

def func_76d4ce7de8cd4ebdaea20dfb1d396722(N, total, A):
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    best = total - best
    return b

def func_bd4c2269f3a444c580534180fd56666c(N, total, A):
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    return b

def func_d016d8debeab484193fc6070b396464f(N, total, totalsum):
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    return b



****** Cluster 831 ******
def func_31a999361e184b9b8d1f149a051ddcc1(N, total, A):
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    return best

def func_412aa6909aca4e2f958cf37202da9dd7(N, total, A):
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    return best

def func_bc6e0ffb677a4a67b1ba826848706e9a(N, total, totalsum):
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    return best

def func_e35f043e8aa84ecc8b3e0393dfd707bc(N, total, totalsum):
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    return best



****** Cluster 832 ******
def func_3e88384849a9496ba926be882060713b(p, N, q, s, r):
    A = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    return total

def func_6dd4a037ee1c41ed8bdf11451d7e1266(p, N, q, s, r):
    A = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(A)
    return total

def func_771e4fdad22c419e80e2672653ef8ad7(p, N, q, s, r):
    A = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    return total

def func_818782be43824fbabb7740c3f72462ce(p, N, q, s, r):
    A = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    return total

def func_b47f7a892dd2437bbb253b9fb787f688(p, N, q, s, r):
    A = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(A)
    totalsum = [a for a in A]
    return total

def func_bb3e4b971f22470da676c5b725207f07(p, N, q, s, r):
    A = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    return best

def func_c5d31a6eb622455b9f7c863026b5eada(p, N, q, s, r):
    A = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    best = total - best
    return total

def func_ed345658196c43768f6c38d1cd4015d4(p, N, q, s, r):
    A = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    return best

def func_ed829d76cfdd4b59a9adc102aa0fbaa5(p, N, q, s, r):
    A = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    return total



****** Cluster 833 ******
def func_41a16dbe9ef949c3a0325a4933038f16(N, A):
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    best = total - best
    return b

def func_bed0aeae57e14a26a98754c47d037921(N, A):
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    return b



****** Cluster 834 ******
def func_47d3b72343c94709985a4ec5a9754219(p, N, q, s, r):
    A = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    best = total - best
    return a

def func_893929db04274d1f82a7d73563096ef6(p, N, q, s, r):
    A = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    return a



****** Cluster 835 ******
def func_4875af921b0c4977ba51da4e664ab59b(N, A):
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    return a

def func_785e8ebf3c9146ce952803401103dabe(N, A):
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    return a

def func_8007080568044eaaa1129ad105693aaf(N, A):
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    return a

def func_9d5cfc4a34764e4f867da51ac2811b37(N, A):
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    return a



****** Cluster 836 ******
def func_5139fada504242c281e3dfaf4c5444b6(p, N, q, s, r):
    A = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    best = total - best
    return totalsum

def func_6d4fff6f763647ea8f0e9dd103679f30(p, N, q, s, r):
    A = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    return totalsum

def func_a8cd2d6b156e44b2ad0e6504ac6bbed1(p, N, q, s, r):
    A = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    return totalsum

def func_cd51604d70bb4ef5933fa927221116fa(p, N, q, s, r):
    A = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    return totalsum

def func_f4ad26e4e8b4430daaf801ac9274191c(p, N, q, s, r):
    A = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    return totalsum



****** Cluster 837 ******
def func_53561c5d176f45759894a733267b6035(N, A):
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    return a

def func_835332840fcf4d8e917feeca658aec77(N, A):
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    best = total - best
    return a



****** Cluster 838 ******
def func_5c936034506c47c5bd14033a6b953f6a(p, N, q, s, r):
    A = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    return a

def func_6e414cd37558425f9ae245e0f4b7c937(p, N, q, s, r):
    A = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    return a

def func_bb60e94bb9a14c1bae93b1a33d441eef(p, N, q, s, r):
    A = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(A)
    totalsum = [a for a in A]
    return a

def func_d06f6698c2a846998ba7071fd9458b55(p, N, q, s, r):
    A = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    return a



****** Cluster 839 ******
def func_5fa8c3c70c6b4c4d824ad7d14417620a(A):
    total = sum(A)
    totalsum = [a for a in A]
    return totalsum

def func_13dce60177384d378844ce30351d3460(x):
    rmax = 0.0
    y = [x[i] for i in xrange(len(x))]
    r = calc(x, y, 0)
    if r > rmax:
        rmax = r
    return y

def func_25a42da4c7ac498983fde86d706e11f7(x):
    y = [x[i] for i in xrange(len(x))]
    r = calc(x, y, 0)
    return y

def func_9b542b1e51124b7eaf552e7c9e236097(x):
    rmax = 0.0
    y = [x[i] for i in xrange(len(x))]
    r = calc(x, y, 0)
    return y

def func_d2ff0f992d6f4bd7a80bc98f4d875427(x):
    rmax = 0.0
    y = [x[i] for i in xrange(len(x))]
    return y

def func_555f3d3ae8a34bb5b184e236dddd8190(x):
    cx = list(x)
    sx = sum(x)
    return cx

def func_dcd8b40c2f7846f9891ebc1b8fa37b72(x):
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    return cx



****** Cluster 840 ******
def func_668cfa2fae264d36867d27ffd2ae1e2b(N, total, totalsum):
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    return best

def func_b64703189512463e9ee70d7dc83fc375(N, total, A):
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    return best



****** Cluster 841 ******
def func_6d0a581ab9084400bc2ad4509dd962e0(p, N, q, s, r):
    A = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    best = total - best
    return b

def func_d9e3392f603c479ca85259bc0c7b34b2(p, N, q, s, r):
    A = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    return b



****** Cluster 842 ******
def func_7f27c39d96914c7ca3021ab236623286(N, A):
    total = sum(A)
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    return best

def func_fa6ae7351c00497f9c59d65516a0cfa6(N, D):
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    while b < N - 1:
        b += 1
        C -= D[b]
        B += D[b]
        p = max(A, B, C)
        while a < b:
            B -= D[a]
            A += D[a]
            a += 1
            t = max(A, B, C)
            if t >= p:
                a -= 1
                B += D[a]
                A -= D[a]
                break
            p = t
        ans = min(ans, p)
    return ans



****** Cluster 843 ******
def func_cba549662da849b58feff5076242d903(N, total, A):
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    return a

def func_faff262f409e4f248fa54d003c00fefb(N, total, A):
    totalsum = [a for a in A]
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    return a



****** Cluster 844 ******
def func_cdd19a5dbfc643abaeaec08464a05c9d(N, total, totalsum):
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    return a

def func_d184302c4fe64cde800c5118ad0b7f31(N, total, totalsum):
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    return a

def func_e19d5aceda4d42708e3d55d1748c2237(N, total, totalsum):
    for i in xrange(1, N):
        totalsum[i] += totalsum[i - 1]
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    best = total - best
    return a

def func_fe7110a853a64080b6fbd23084718eaa(N, total, totalsum):
    best = total
    b = 0
    for a in xrange(N):
        if b < a:
            b += 1
        while b < N - 1 and getsum(a, b, total, totalsum) >= getsum(a, b + 
            1, total, totalsum):
            b += 1
        best = min(best, getsum(a, b, total, totalsum))
    best = total - best
    return a



****** Cluster 845 ******
def func_03a111b9b67b44d0ad98d843ba0dcbb1(v, n):
    sums = [0] * (n + 1)
    for i in xrange(n):
        sums[i + 1] = sums[i] + v[i]
    ans = sums[n]
    return ans

def func_be812ed82fec4989bfeed751ff83ceb5(v, n):
    sums = [0] * (n + 1)
    for i in xrange(n):
        sums[i + 1] = sums[i] + v[i]
    ans = sums[n]
    for i in xrange(1, n):
        L = 0
        R = i
        while R - L > 1:
            M = L + R >> 1
            ta = sums[M]
            tb = sums[i] - sums[M]
            if ta < tb:
                L = M
            else:
                R = M
        ans = min(ans, max(sums[L], sums[i] - sums[L], sums[n] - sums[i]),
            max(sums[R], sums[i] - sums[R], sums[n] - sums[i]))
    return ans



****** Cluster 846 ******
def func_0a559bb8b840483c9feda75632667cb7(p, r, s, n, q):
    v = [((i * p + q) % r + s) for i in xrange(n)]
    sums = [0] * (n + 1)
    for i in xrange(n):
        sums[i + 1] = sums[i] + v[i]
    ans = sums[n]
    for i in xrange(1, n):
        L = 0
        R = i
        while R - L > 1:
            M = L + R >> 1
            ta = sums[M]
            tb = sums[i] - sums[M]
            if ta < tb:
                L = M
            else:
                R = M
        ans = min(ans, max(sums[L], sums[i] - sums[L], sums[n] - sums[i]),
            max(sums[R], sums[i] - sums[R], sums[n] - sums[i]))
    return i

def func_d5448f701eba4a87b25646a66d500c8e(p, r, s, n, q):
    v = [((i * p + q) % r + s) for i in xrange(n)]
    sums = [0] * (n + 1)
    for i in xrange(n):
        sums[i + 1] = sums[i] + v[i]
    ans = sums[n]
    return i



****** Cluster 847 ******
def func_1b8d6bc3d9b24458bbe6d496755ddc0f(sums, M, i):
    ta = sums[M]
    tb = sums[i] - sums[M]
    return ta

def func_f0a46599871c40caa485ff52fc6ea379(sums, M, i):
    ta = sums[M]
    tb = sums[i] - sums[M]
    if ta < tb:
        L = M
    else:
        R = M
    return ta

def func_1ad4fb9a676f4952867d44daa778ddd8(cum, amid, b):
    left = cum[amid]
    right = cum[b] - cum[amid]
    if left > right:
        ar = amid
    else:
        al = amid
    return left

def func_d5d4c3663d48447494b8a8cdaf4e232d(cum, amid, b):
    left = cum[amid]
    right = cum[b] - cum[amid]
    return left



****** Cluster 848 ******
def func_2372420de96347fea3bea2f480eb1261(p, r, s, n, q):
    v = [((i * p + q) % r + s) for i in xrange(n)]
    sums = [0] * (n + 1)
    return i

def func_2ea9849bb3bb495989e2d88e2e6613fc(p, r, s, n, q):
    v = [((i * p + q) % r + s) for i in xrange(n)]
    sums = [0] * (n + 1)
    for i in xrange(n):
        sums[i + 1] = sums[i] + v[i]
    return i



****** Cluster 849 ******
def func_39106dda214a40febd1084d0a0c3943b(v, n, sums):
    for i in xrange(n):
        sums[i + 1] = sums[i] + v[i]
    ans = sums[n]
    for i in xrange(1, n):
        L = 0
        R = i
        while R - L > 1:
            M = L + R >> 1
            ta = sums[M]
            tb = sums[i] - sums[M]
            if ta < tb:
                L = M
            else:
                R = M
        ans = min(ans, max(sums[L], sums[i] - sums[L], sums[n] - sums[i]),
            max(sums[R], sums[i] - sums[R], sums[n] - sums[i]))
    return i

def func_61ae8df8d2754869be621b980c83e11c(v, n, sums):
    for i in xrange(n):
        sums[i + 1] = sums[i] + v[i]
    ans = sums[n]
    return i



****** Cluster 850 ******
def func_5b5aa7ab1eb24ee48e4b6b96ac96ee01(p, r, s, n, q):
    v = [((i * p + q) % r + s) for i in xrange(n)]
    sums = [0] * (n + 1)
    for i in xrange(n):
        sums[i + 1] = sums[i] + v[i]
    ans = sums[n]
    return v

def func_7d9cbd7fb67e49b7a2f7f203d1dc7876(p, r, s, n, q):
    v = [((i * p + q) % r + s) for i in xrange(n)]
    sums = [0] * (n + 1)
    for i in xrange(n):
        sums[i + 1] = sums[i] + v[i]
    ans = sums[n]
    for i in xrange(1, n):
        L = 0
        R = i
        while R - L > 1:
            M = L + R >> 1
            ta = sums[M]
            tb = sums[i] - sums[M]
            if ta < tb:
                L = M
            else:
                R = M
        ans = min(ans, max(sums[L], sums[i] - sums[L], sums[n] - sums[i]),
            max(sums[R], sums[i] - sums[R], sums[n] - sums[i]))
    return v



****** Cluster 851 ******
def func_5b859fa9af3740b9bbf15fea098b6757(ta, sums, M, i):
    tb = sums[i] - sums[M]
    if ta < tb:
        L = M
    else:
        R = M
    return R

def func_2b0c152a009a4655a2da10197fe560ca(vsota, cum, b, n):
    rem = vsota - (cum[n] - cum[b])
    al = 0
    ar = b
    return ar

def func_535cf2767e3f443b892d9d2d1fa55389(vsota, cum, b, n):
    rem = vsota - (cum[n] - cum[b])
    al = 0
    ar = b
    while al + 1 < ar:
        amid = (al + ar) // 2
        left = cum[amid]
        right = cum[b] - cum[amid]
        if left > right:
            ar = amid
        else:
            al = amid
    return ar



****** Cluster 852 ******
def func_75ac5fe5924442e397738b65a94f4394(sums, M, i):
    ta = sums[M]
    tb = sums[i] - sums[M]
    return tb

def func_cba17a23ae2b479484d90f715992139a(sums, M, i):
    ta = sums[M]
    tb = sums[i] - sums[M]
    if ta < tb:
        L = M
    else:
        R = M
    return tb

def func_363fa4131bca4c56a7ac090593e893fc(cum, amid, b):
    left = cum[amid]
    right = cum[b] - cum[amid]
    return right

def func_97ed03ac8d0c4d27808250ddf19042e5(cum, amid, b):
    left = cum[amid]
    right = cum[b] - cum[amid]
    if left > right:
        ar = amid
    else:
        al = amid
    return right



****** Cluster 853 ******
def func_75b282ee54ba4cbfb0084aa77185c3ba(p, r, s, n, q):
    v = [((i * p + q) % r + s) for i in xrange(n)]
    sums = [0] * (n + 1)
    return v

def func_7632e75c12784964b5426a90ae0e558a(p, r, s, n, q):
    v = [((i * p + q) % r + s) for i in xrange(n)]
    sums = [0] * (n + 1)
    for i in xrange(n):
        sums[i + 1] = sums[i] + v[i]
    return v



****** Cluster 854 ******
def func_85000b9f03f3483dab4663f6b7e20a19(p, r, s, n, q):
    v = [((i * p + q) % r + s) for i in xrange(n)]
    sums = [0] * (n + 1)
    for i in xrange(n):
        sums[i + 1] = sums[i] + v[i]
    ans = sums[n]
    return sums

def func_f3ddf63b31534d6bb4d1964ada5f0c43(p, r, s, n, q):
    v = [((i * p + q) % r + s) for i in xrange(n)]
    sums = [0] * (n + 1)
    for i in xrange(n):
        sums[i + 1] = sums[i] + v[i]
    ans = sums[n]
    for i in xrange(1, n):
        L = 0
        R = i
        while R - L > 1:
            M = L + R >> 1
            ta = sums[M]
            tb = sums[i] - sums[M]
            if ta < tb:
                L = M
            else:
                R = M
        ans = min(ans, max(sums[L], sums[i] - sums[L], sums[n] - sums[i]),
            max(sums[R], sums[i] - sums[R], sums[n] - sums[i]))
    return sums



****** Cluster 855 ******
def func_868775c1f9474d42b5a115f3b30e5e5c(v, n):
    sums = [0] * (n + 1)
    for i in xrange(n):
        sums[i + 1] = sums[i] + v[i]
    ans = sums[n]
    return sums

def func_dc38e51c6edf4aff99ad18128d4d67af(v, n):
    sums = [0] * (n + 1)
    for i in xrange(n):
        sums[i + 1] = sums[i] + v[i]
    ans = sums[n]
    for i in xrange(1, n):
        L = 0
        R = i
        while R - L > 1:
            M = L + R >> 1
            ta = sums[M]
            tb = sums[i] - sums[M]
            if ta < tb:
                L = M
            else:
                R = M
        ans = min(ans, max(sums[L], sums[i] - sums[L], sums[n] - sums[i]),
            max(sums[R], sums[i] - sums[R], sums[n] - sums[i]))
    return sums



****** Cluster 856 ******
def func_95273be675bf4d8e9cdc2ed1d7ef3e83(sums, i):
    L = 0
    R = i
    while R - L > 1:
        M = L + R >> 1
        ta = sums[M]
        tb = sums[i] - sums[M]
        if ta < tb:
            L = M
        else:
            R = M
    return R

def func_416ceb9c18e74625a45d645bfbca37b8(cum, b):
    al = 0
    ar = b
    while al + 1 < ar:
        amid = (al + ar) // 2
        left = cum[amid]
        right = cum[b] - cum[amid]
        if left > right:
            ar = amid
        else:
            al = amid
    return ar



****** Cluster 857 ******
def func_9690aff9db284bc9b0ce33ee1640a9a6(sums, i):
    L = 0
    R = i
    while R - L > 1:
        M = L + R >> 1
        ta = sums[M]
        tb = sums[i] - sums[M]
        if ta < tb:
            L = M
        else:
            R = M
    return L

def func_64bc4a1e98d14a63ba77a4c3b4dcdb98(cum, b):
    al = 0
    ar = b
    while al + 1 < ar:
        amid = (al + ar) // 2
        left = cum[amid]
        right = cum[b] - cum[amid]
        if left > right:
            ar = amid
        else:
            al = amid
    return al



****** Cluster 858 ******
def func_a12326c5267a43d0a923427eda2b8373(n, sums):
    ans = sums[n]
    for i in xrange(1, n):
        L = 0
        R = i
        while R - L > 1:
            M = L + R >> 1
            ta = sums[M]
            tb = sums[i] - sums[M]
            if ta < tb:
                L = M
            else:
                R = M
        ans = min(ans, max(sums[L], sums[i] - sums[L], sums[n] - sums[i]),
            max(sums[R], sums[i] - sums[R], sums[n] - sums[i]))
    return ans

def func_fd335c1d46fa4ce59090cbe0e35b9f1c(a_try, S):
    lo_range = S[a_try]
    b_lo = a_try
    return lo_range



****** Cluster 859 ******
def func_c0decd3effff409a8766df590212ab19(v, n):
    sums = [0] * (n + 1)
    for i in xrange(n):
        sums[i + 1] = sums[i] + v[i]
    ans = sums[n]
    return i

def func_c5a74235b7954d46a598512699ae0b0c(v, n):
    sums = [0] * (n + 1)
    for i in xrange(n):
        sums[i + 1] = sums[i] + v[i]
    ans = sums[n]
    for i in xrange(1, n):
        L = 0
        R = i
        while R - L > 1:
            M = L + R >> 1
            ta = sums[M]
            tb = sums[i] - sums[M]
            if ta < tb:
                L = M
            else:
                R = M
        ans = min(ans, max(sums[L], sums[i] - sums[L], sums[n] - sums[i]),
            max(sums[R], sums[i] - sums[R], sums[n] - sums[i]))
    return i



****** Cluster 860 ******
def func_fa4385aa7f6b4dad888fea59fade840a(sums, M, i):
    ta = sums[M]
    tb = sums[i] - sums[M]
    if ta < tb:
        L = M
    else:
        R = M
    return L

def func_17d2f2e187844d84bb9dcc0913caa8f8(cum, amid, b):
    left = cum[amid]
    right = cum[b] - cum[amid]
    if left > right:
        ar = amid
    else:
        al = amid
    return al



****** Cluster 861 ******
def func_0685c590e52c4c19bb531e512e870f3a(N, D):
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    while b < N - 1:
        b += 1
        C -= D[b]
        B += D[b]
        p = max(A, B, C)
        while a < b:
            B -= D[a]
            A += D[a]
            a += 1
            t = max(A, B, C)
            if t >= p:
                a -= 1
                B += D[a]
                A -= D[a]
                break
            p = t
        ans = min(ans, p)
    ans = float(S - ans) / S
    return B

def func_a4fc32284ac341fe8b4af3375eec63b0(N, D):
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    while b < N - 1:
        b += 1
        C -= D[b]
        B += D[b]
        p = max(A, B, C)
        while a < b:
            B -= D[a]
            A += D[a]
            a += 1
            t = max(A, B, C)
            if t >= p:
                a -= 1
                B += D[a]
                A -= D[a]
                break
            p = t
        ans = min(ans, p)
    return B



****** Cluster 862 ******
def func_13f512c18572474eb65c4e2f3331086d(r, p, s, q, N):
    D = [((i * p + q) % r + s) for i in range(N)]
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    a = 0
    return C

def func_483d2a7799c84fd6b3350e18d10ebd23(r, p, s, q, N):
    D = [((i * p + q) % r + s) for i in range(N)]
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    return S

def func_64bc378fa31742589cc65125b8a36e54(r, p, s, q, N):
    D = [((i * p + q) % r + s) for i in range(N)]
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    return ans

def func_68091c835c2f4b618cc6029e490a64e9(r, p, s, q, N):
    D = [((i * p + q) % r + s) for i in range(N)]
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    return ans

def func_891a64f840ba4ec1b327ee0a946ade85(r, p, s, q, N):
    D = [((i * p + q) % r + s) for i in range(N)]
    S = sum(D)
    ans = S
    return S

def func_89cdb493506a4ec5bf3768f7ada202c1(r, p, s, q, N):
    D = [((i * p + q) % r + s) for i in range(N)]
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    a = 0
    return ans

def func_a6a50c339ad84d6b8c7f15eff824876e(r, p, s, q, N):
    D = [((i * p + q) % r + s) for i in range(N)]
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    return C

def func_aa1f8b1e4c6744cd87f013d94f092ed5(r, p, s, q, N):
    D = [((i * p + q) % r + s) for i in range(N)]
    S = sum(D)
    return S

def func_bff3d15956c64112ab9ab56e0b7133e8(r, p, s, q, N):
    D = [((i * p + q) % r + s) for i in range(N)]
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    return S

def func_db5ce9a299d34d9fbc488da52739bb9a(r, p, s, q, N):
    D = [((i * p + q) % r + s) for i in range(N)]
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    a = 0
    return S

def func_f44f33e103f543419a1dcb8c9bab2103(r, p, s, q, N):
    D = [((i * p + q) % r + s) for i in range(N)]
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    return C

def func_fd016bfdf1b949e98586e07fb34cc552(r, p, s, q, N):
    D = [((i * p + q) % r + s) for i in range(N)]
    S = sum(D)
    ans = S
    return ans



****** Cluster 863 ******
def func_182df9a32a7e41b687aaeb2b19f3296c(N, D, S):
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    while b < N - 1:
        b += 1
        C -= D[b]
        B += D[b]
        p = max(A, B, C)
        while a < b:
            B -= D[a]
            A += D[a]
            a += 1
            t = max(A, B, C)
            if t >= p:
                a -= 1
                B += D[a]
                A -= D[a]
                break
            p = t
        ans = min(ans, p)
    ans = float(S - ans) / S
    return b

def func_36d8baf3471f494c9ce526a9fac9bfd4(N, D, S):
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    while b < N - 1:
        b += 1
        C -= D[b]
        B += D[b]
        p = max(A, B, C)
        while a < b:
            B -= D[a]
            A += D[a]
            a += 1
            t = max(A, B, C)
            if t >= p:
                a -= 1
                B += D[a]
                A -= D[a]
                break
            p = t
        ans = min(ans, p)
    return b



****** Cluster 864 ******
def func_1ef869d3b1944dd985faa504aa34695d(N, D):
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    while b < N - 1:
        b += 1
        C -= D[b]
        B += D[b]
        p = max(A, B, C)
        while a < b:
            B -= D[a]
            A += D[a]
            a += 1
            t = max(A, B, C)
            if t >= p:
                a -= 1
                B += D[a]
                A -= D[a]
                break
            p = t
        ans = min(ans, p)
    ans = float(S - ans) / S
    return C

def func_873aa780e0234547a3d97c6677b466ec(N, D):
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    while b < N - 1:
        b += 1
        C -= D[b]
        B += D[b]
        p = max(A, B, C)
        while a < b:
            B -= D[a]
            A += D[a]
            a += 1
            t = max(A, B, C)
            if t >= p:
                a -= 1
                B += D[a]
                A -= D[a]
                break
            p = t
        ans = min(ans, p)
    return C



****** Cluster 865 ******
def func_2826a1642ae3445188411ae60524e689(N, D):
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    while b < N - 1:
        b += 1
        C -= D[b]
        B += D[b]
        p = max(A, B, C)
        while a < b:
            B -= D[a]
            A += D[a]
            a += 1
            t = max(A, B, C)
            if t >= p:
                a -= 1
                B += D[a]
                A -= D[a]
                break
            p = t
        ans = min(ans, p)
    ans = float(S - ans) / S
    return t

def func_59612589f617455a9b948b5f08cf1d14(N, D):
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    while b < N - 1:
        b += 1
        C -= D[b]
        B += D[b]
        p = max(A, B, C)
        while a < b:
            B -= D[a]
            A += D[a]
            a += 1
            t = max(A, B, C)
            if t >= p:
                a -= 1
                B += D[a]
                A -= D[a]
                break
            p = t
        ans = min(ans, p)
    return t



****** Cluster 866 ******
def func_2fa450e5301e40f59db6b6a5e4655da8(N, D):
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    while b < N - 1:
        b += 1
        C -= D[b]
        B += D[b]
        p = max(A, B, C)
        while a < b:
            B -= D[a]
            A += D[a]
            a += 1
            t = max(A, B, C)
            if t >= p:
                a -= 1
                B += D[a]
                A -= D[a]
                break
            p = t
        ans = min(ans, p)
    return p

def func_dcbcde6cb4e94757af869c3d53a52f39(N, D):
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    while b < N - 1:
        b += 1
        C -= D[b]
        B += D[b]
        p = max(A, B, C)
        while a < b:
            B -= D[a]
            A += D[a]
            a += 1
            t = max(A, B, C)
            if t >= p:
                a -= 1
                B += D[a]
                A -= D[a]
                break
            p = t
        ans = min(ans, p)
    ans = float(S - ans) / S
    return p



****** Cluster 867 ******
def func_3759cd1166764c2ead072e067dc11625(N, D, S):
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    while b < N - 1:
        b += 1
        C -= D[b]
        B += D[b]
        p = max(A, B, C)
        while a < b:
            B -= D[a]
            A += D[a]
            a += 1
            t = max(A, B, C)
            if t >= p:
                a -= 1
                B += D[a]
                A -= D[a]
                break
            p = t
        ans = min(ans, p)
    return A

def func_fc21a49efab3477f8e4e95b803166a2e(N, D, S):
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    while b < N - 1:
        b += 1
        C -= D[b]
        B += D[b]
        p = max(A, B, C)
        while a < b:
            B -= D[a]
            A += D[a]
            a += 1
            t = max(A, B, C)
            if t >= p:
                a -= 1
                B += D[a]
                A -= D[a]
                break
            p = t
        ans = min(ans, p)
    ans = float(S - ans) / S
    return A



****** Cluster 868 ******
def func_3d62a59161524034939a156d654b6ff6(r, p, s, q, N):
    D = [((i * p + q) % r + s) for i in range(N)]
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    a = 0
    return D

def func_51b005fbf8e74403aa64e1e560f4a121(r, p, s, q, N):
    D = [((i * p + q) % r + s) for i in range(N)]
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    return D

def func_59e368f6ae674b07a58de0d6c80c2266(r, p, s, q, N):
    D = [((i * p + q) % r + s) for i in range(N)]
    S = sum(D)
    return D

def func_5a0faebc7cc24999b8ef857c32f5b053(r, p, s, q, N):
    D = [((i * p + q) % r + s) for i in range(N)]
    S = sum(D)
    ans = S
    return D

def func_935086d1c7934bde95f80a8d29b1619c(r, p, s, q, N):
    D = [((i * p + q) % r + s) for i in range(N)]
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    return D



****** Cluster 869 ******
def func_402e686a05114d3f86c927c648241afe(r, p, s, q, N):
    D = [((i * p + q) % r + s) for i in range(N)]
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    return i

def func_52017bba51aa4828a9b21266f3df75f0(r, p, s, q, N):
    D = [((i * p + q) % r + s) for i in range(N)]
    S = sum(D)
    ans = S
    return i

def func_b016333e6bc84a69b16c1c6f97be72b5(r, p, s, q, N):
    D = [((i * p + q) % r + s) for i in range(N)]
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    a = 0
    return i

def func_b061b79e8ca94e44941abfc134747f71(r, p, s, q, N):
    D = [((i * p + q) % r + s) for i in range(N)]
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    return i

def func_f2d3668677a44defb7001061d31f75ed(r, p, s, q, N):
    D = [((i * p + q) % r + s) for i in range(N)]
    S = sum(D)
    return i

def func_2bfaafcf75474ea5b8bc0d00d4dbe54d(s, q, r, p, N):
    t = [((i * p + q) % r + s) for i in range(N)]
    total = sum(t)
    return i

def func_36f09aed72354da3ad1bc7f6d7fe20fc(s, q, r, p, N):
    t = [((i * p + q) % r + s) for i in range(N)]
    total = sum(t)
    c = [0]
    for x in t:
        c.append(c[-1] + x)
    a = b = 0
    best = 0
    while b <= N:
        if a == b or c[b] - c[a] <= total / 3:
            b += 1
            if b > N:
                break
        else:
            a += 1
        best = max(best, total - max((c[a], c[b] - c[a], total - c[b])))
    return i

def func_8b217b67e845416bbfac752909a3e70a(s, q, r, p, N):
    t = [((i * p + q) % r + s) for i in range(N)]
    total = sum(t)
    c = [0]
    for x in t:
        c.append(c[-1] + x)
    return i

def func_befc7d6945494a30ae1171c0ea93ad9a(s, q, r, p, N):
    t = [((i * p + q) % r + s) for i in range(N)]
    total = sum(t)
    c = [0]
    return i

def func_d5297eaab41943cb9ee1cbefe8756e2d(s, q, r, p, N):
    t = [((i * p + q) % r + s) for i in range(N)]
    total = sum(t)
    c = [0]
    for x in t:
        c.append(c[-1] + x)
    a = b = 0
    best = 0
    return i

def func_f7846e1f2fcc48929bb0aea15cdb7b88(s, q, r, p, N):
    t = [((i * p + q) % r + s) for i in range(N)]
    total = sum(t)
    c = [0]
    for x in t:
        c.append(c[-1] + x)
    a = b = 0
    return i



****** Cluster 870 ******
def func_4b09477054e7473280e82c17ebb2b8c2(N, D, S):
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    while b < N - 1:
        b += 1
        C -= D[b]
        B += D[b]
        p = max(A, B, C)
        while a < b:
            B -= D[a]
            A += D[a]
            a += 1
            t = max(A, B, C)
            if t >= p:
                a -= 1
                B += D[a]
                A -= D[a]
                break
            p = t
        ans = min(ans, p)
    return t

def func_fc60f2eeaf0d46edb7c44c24f213e1d5(N, D, S):
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    while b < N - 1:
        b += 1
        C -= D[b]
        B += D[b]
        p = max(A, B, C)
        while a < b:
            B -= D[a]
            A += D[a]
            a += 1
            t = max(A, B, C)
            if t >= p:
                a -= 1
                B += D[a]
                A -= D[a]
                break
            p = t
        ans = min(ans, p)
    ans = float(S - ans) / S
    return t



****** Cluster 871 ******
def func_5d80915e721946a797ad1b36d84398a6(N, D, S):
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    while b < N - 1:
        b += 1
        C -= D[b]
        B += D[b]
        p = max(A, B, C)
        while a < b:
            B -= D[a]
            A += D[a]
            a += 1
            t = max(A, B, C)
            if t >= p:
                a -= 1
                B += D[a]
                A -= D[a]
                break
            p = t
        ans = min(ans, p)
    return a

def func_8d91ef7bda574d67a7ee1de48e4e317b(N, D, S):
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    while b < N - 1:
        b += 1
        C -= D[b]
        B += D[b]
        p = max(A, B, C)
        while a < b:
            B -= D[a]
            A += D[a]
            a += 1
            t = max(A, B, C)
            if t >= p:
                a -= 1
                B += D[a]
                A -= D[a]
                break
            p = t
        ans = min(ans, p)
    ans = float(S - ans) / S
    return a



****** Cluster 872 ******
def func_7de2e01234b242b58913d87e03356a74(N, D, S):
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    while b < N - 1:
        b += 1
        C -= D[b]
        B += D[b]
        p = max(A, B, C)
        while a < b:
            B -= D[a]
            A += D[a]
            a += 1
            t = max(A, B, C)
            if t >= p:
                a -= 1
                B += D[a]
                A -= D[a]
                break
            p = t
        ans = min(ans, p)
    return C

def func_f7794097883c48a2a832357c547e0a74(N, D, S):
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    while b < N - 1:
        b += 1
        C -= D[b]
        B += D[b]
        p = max(A, B, C)
        while a < b:
            B -= D[a]
            A += D[a]
            a += 1
            t = max(A, B, C)
            if t >= p:
                a -= 1
                B += D[a]
                A -= D[a]
                break
            p = t
        ans = min(ans, p)
    ans = float(S - ans) / S
    return C



****** Cluster 873 ******
def func_8434807f302341d4821e7fe7ef8aaa9c(N, D):
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    while b < N - 1:
        b += 1
        C -= D[b]
        B += D[b]
        p = max(A, B, C)
        while a < b:
            B -= D[a]
            A += D[a]
            a += 1
            t = max(A, B, C)
            if t >= p:
                a -= 1
                B += D[a]
                A -= D[a]
                break
            p = t
        ans = min(ans, p)
    return b

def func_c40c5f2aa22646159ee1e151264fdc6d(N, D):
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    while b < N - 1:
        b += 1
        C -= D[b]
        B += D[b]
        p = max(A, B, C)
        while a < b:
            B -= D[a]
            A += D[a]
            a += 1
            t = max(A, B, C)
            if t >= p:
                a -= 1
                B += D[a]
                A -= D[a]
                break
            p = t
        ans = min(ans, p)
    ans = float(S - ans) / S
    return b



****** Cluster 874 ******
def func_891713351c9841cb9268514a5296b1c2(N, D):
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    while b < N - 1:
        b += 1
        C -= D[b]
        B += D[b]
        p = max(A, B, C)
        while a < b:
            B -= D[a]
            A += D[a]
            a += 1
            t = max(A, B, C)
            if t >= p:
                a -= 1
                B += D[a]
                A -= D[a]
                break
            p = t
        ans = min(ans, p)
    ans = float(S - ans) / S
    return A

def func_f9b24485fce54ac0b3504d3d90b51f21(N, D):
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    while b < N - 1:
        b += 1
        C -= D[b]
        B += D[b]
        p = max(A, B, C)
        while a < b:
            B -= D[a]
            A += D[a]
            a += 1
            t = max(A, B, C)
            if t >= p:
                a -= 1
                B += D[a]
                A -= D[a]
                break
            p = t
        ans = min(ans, p)
    return A



****** Cluster 875 ******
def func_8aeea14840a6415ab51f28c509c95a64(N, D):
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    while b < N - 1:
        b += 1
        C -= D[b]
        B += D[b]
        p = max(A, B, C)
        while a < b:
            B -= D[a]
            A += D[a]
            a += 1
            t = max(A, B, C)
            if t >= p:
                a -= 1
                B += D[a]
                A -= D[a]
                break
            p = t
        ans = min(ans, p)
    ans = float(S - ans) / S
    return a

def func_d077cd1976f74c5a96896cd4837ac29c(N, D):
    S = sum(D)
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    while b < N - 1:
        b += 1
        C -= D[b]
        B += D[b]
        p = max(A, B, C)
        while a < b:
            B -= D[a]
            A += D[a]
            a += 1
            t = max(A, B, C)
            if t >= p:
                a -= 1
                B += D[a]
                A -= D[a]
                break
            p = t
        ans = min(ans, p)
    return a



****** Cluster 876 ******
def func_960986d49672403cbee2ccacc3b04f71(N, D, S):
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    while b < N - 1:
        b += 1
        C -= D[b]
        B += D[b]
        p = max(A, B, C)
        while a < b:
            B -= D[a]
            A += D[a]
            a += 1
            t = max(A, B, C)
            if t >= p:
                a -= 1
                B += D[a]
                A -= D[a]
                break
            p = t
        ans = min(ans, p)
    ans = float(S - ans) / S
    return B

def func_b30c24e8a99a496a9a0fea5e6524d39c(N, D, S):
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    while b < N - 1:
        b += 1
        C -= D[b]
        B += D[b]
        p = max(A, B, C)
        while a < b:
            B -= D[a]
            A += D[a]
            a += 1
            t = max(A, B, C)
            if t >= p:
                a -= 1
                B += D[a]
                A -= D[a]
                break
            p = t
        ans = min(ans, p)
    return B



****** Cluster 877 ******
def func_9937d07bd06e4daead3ac43d97f96f34(N, D, S):
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    while b < N - 1:
        b += 1
        C -= D[b]
        B += D[b]
        p = max(A, B, C)
        while a < b:
            B -= D[a]
            A += D[a]
            a += 1
            t = max(A, B, C)
            if t >= p:
                a -= 1
                B += D[a]
                A -= D[a]
                break
            p = t
        ans = min(ans, p)
    ans = float(S - ans) / S
    return p

def func_dd305eb429ac4e1cb4e0e835c244c3d1(N, D, S):
    ans = S
    A, B, C = 0, 0, S
    a = 0
    b = -1
    while b < N - 1:
        b += 1
        C -= D[b]
        B += D[b]
        p = max(A, B, C)
        while a < b:
            B -= D[a]
            A += D[a]
            a += 1
            t = max(A, B, C)
            if t >= p:
                a -= 1
                B += D[a]
                A -= D[a]
                break
            p = t
        ans = min(ans, p)
    return p



****** Cluster 878 ******
def func_07e2845e58c84478bcb46b2c9fb53164(S, a_hi, N, a_lo):
    a_try = (a_lo + a_hi) // 2
    lo_range = S[a_try]
    b_lo = a_try
    b_hi = N - 1
    min_max_mid_hi = S[N] + 1
    return min_max_mid_hi

def func_be094c9e49ed428bb181244fc48d6075(S, a_hi, N, a_lo):
    a_try = (a_lo + a_hi) // 2
    lo_range = S[a_try]
    b_lo = a_try
    b_hi = N - 1
    min_max_mid_hi = S[N] + 1
    while b_lo <= b_hi:
        b_try = (b_lo + b_hi) // 2
        mid_range = S[b_try + 1] - S[a_try]
        hi_range = S[N] - S[b_try + 1]
        min_max_mid_hi = min(min_max_mid_hi, max(mid_range, hi_range))
        if mid_range > hi_range:
            b_hi = b_try - 1
        elif mid_range < hi_range:
            b_lo = b_try + 1
        else:
            break
    return min_max_mid_hi



****** Cluster 879 ******
def func_080aa1ec159a42c099fc0a89758fc5e4(q, p, s, r, N):
    S = [0] * (N + 1)
    S[0] = 0
    for i in range(0, N):
        S[i + 1] = (p * i + q) % r + s + S[i]
    a_lo = 0
    a_hi = N - 1
    return i

def func_4864ee7e27264f2da4e48b557c095da9(q, p, s, r, N):
    S = [0] * (N + 1)
    S[0] = 0
    for i in range(0, N):
        S[i + 1] = (p * i + q) % r + s + S[i]
    a_lo = 0
    a_hi = N - 1
    min_solveig_score = S[N] + 1
    return i

def func_6013880d778d4cdfb15365a3c254159c(q, p, s, r, N):
    S = [0] * (N + 1)
    S[0] = 0
    for i in range(0, N):
        S[i + 1] = (p * i + q) % r + s + S[i]
    return i

def func_9ebff96c28d549a4b441cf40bcc02fcd(q, p, s, r, N):
    S = [0] * (N + 1)
    S[0] = 0
    for i in range(0, N):
        S[i + 1] = (p * i + q) % r + s + S[i]
    a_lo = 0
    return i

def func_aeeaa23c5a3e4c86842a3993fd86510b(q, p, s, r, N):
    S = [0] * (N + 1)
    S[0] = 0
    for i in range(0, N):
        S[i + 1] = (p * i + q) % r + s + S[i]
    a_lo = 0
    a_hi = N - 1
    min_solveig_score = S[N] + 1
    while a_lo <= a_hi:
        a_try = (a_lo + a_hi) // 2
        lo_range = S[a_try]
        b_lo = a_try
        b_hi = N - 1
        min_max_mid_hi = S[N] + 1
        while b_lo <= b_hi:
            b_try = (b_lo + b_hi) // 2
            mid_range = S[b_try + 1] - S[a_try]
            hi_range = S[N] - S[b_try + 1]
            min_max_mid_hi = min(min_max_mid_hi, max(mid_range, hi_range))
            if mid_range > hi_range:
                b_hi = b_try - 1
            elif mid_range < hi_range:
                b_lo = b_try + 1
            else:
                break
        min_solveig_score = min(min_solveig_score, max(lo_range,
            min_max_mid_hi))
        if lo_range > min_max_mid_hi:
            a_hi = a_try - 1
        elif lo_range < min_max_mid_hi:
            a_lo = a_try + 1
        else:
            break
    return i



****** Cluster 880 ******
def func_1824da60cd914b268d3425020612ae74(q, p, s, S, r, N):
    S[0] = 0
    for i in range(0, N):
        S[i + 1] = (p * i + q) % r + s + S[i]
    a_lo = 0
    a_hi = N - 1
    min_solveig_score = S[N] + 1
    while a_lo <= a_hi:
        a_try = (a_lo + a_hi) // 2
        lo_range = S[a_try]
        b_lo = a_try
        b_hi = N - 1
        min_max_mid_hi = S[N] + 1
        while b_lo <= b_hi:
            b_try = (b_lo + b_hi) // 2
            mid_range = S[b_try + 1] - S[a_try]
            hi_range = S[N] - S[b_try + 1]
            min_max_mid_hi = min(min_max_mid_hi, max(mid_range, hi_range))
            if mid_range > hi_range:
                b_hi = b_try - 1
            elif mid_range < hi_range:
                b_lo = b_try + 1
            else:
                break
        min_solveig_score = min(min_solveig_score, max(lo_range,
            min_max_mid_hi))
        if lo_range > min_max_mid_hi:
            a_hi = a_try - 1
        elif lo_range < min_max_mid_hi:
            a_lo = a_try + 1
        else:
            break
    return b_hi

def func_9fe237c112954f0ba8d6ee384a133a00(q, p, s, S, r, N):
    for i in range(0, N):
        S[i + 1] = (p * i + q) % r + s + S[i]
    a_lo = 0
    a_hi = N - 1
    min_solveig_score = S[N] + 1
    while a_lo <= a_hi:
        a_try = (a_lo + a_hi) // 2
        lo_range = S[a_try]
        b_lo = a_try
        b_hi = N - 1
        min_max_mid_hi = S[N] + 1
        while b_lo <= b_hi:
            b_try = (b_lo + b_hi) // 2
            mid_range = S[b_try + 1] - S[a_try]
            hi_range = S[N] - S[b_try + 1]
            min_max_mid_hi = min(min_max_mid_hi, max(mid_range, hi_range))
            if mid_range > hi_range:
                b_hi = b_try - 1
            elif mid_range < hi_range:
                b_lo = b_try + 1
            else:
                break
        min_solveig_score = min(min_solveig_score, max(lo_range,
            min_max_mid_hi))
        if lo_range > min_max_mid_hi:
            a_hi = a_try - 1
        elif lo_range < min_max_mid_hi:
            a_lo = a_try + 1
        else:
            break
    return b_hi



****** Cluster 881 ******
def func_1ad708bf665341f1a2a6ff14c1b1f299(q, p, s, S, r, N):
    S[0] = 0
    for i in range(0, N):
        S[i + 1] = (p * i + q) % r + s + S[i]
    a_lo = 0
    a_hi = N - 1
    min_solveig_score = S[N] + 1
    while a_lo <= a_hi:
        a_try = (a_lo + a_hi) // 2
        lo_range = S[a_try]
        b_lo = a_try
        b_hi = N - 1
        min_max_mid_hi = S[N] + 1
        while b_lo <= b_hi:
            b_try = (b_lo + b_hi) // 2
            mid_range = S[b_try + 1] - S[a_try]
            hi_range = S[N] - S[b_try + 1]
            min_max_mid_hi = min(min_max_mid_hi, max(mid_range, hi_range))
            if mid_range > hi_range:
                b_hi = b_try - 1
            elif mid_range < hi_range:
                b_lo = b_try + 1
            else:
                break
        min_solveig_score = min(min_solveig_score, max(lo_range,
            min_max_mid_hi))
        if lo_range > min_max_mid_hi:
            a_hi = a_try - 1
        elif lo_range < min_max_mid_hi:
            a_lo = a_try + 1
        else:
            break
    return a_lo

def func_59e3aee2ee8941309180593a843fe77f(q, p, s, S, r, N):
    for i in range(0, N):
        S[i + 1] = (p * i + q) % r + s + S[i]
    a_lo = 0
    a_hi = N - 1
    min_solveig_score = S[N] + 1
    while a_lo <= a_hi:
        a_try = (a_lo + a_hi) // 2
        lo_range = S[a_try]
        b_lo = a_try
        b_hi = N - 1
        min_max_mid_hi = S[N] + 1
        while b_lo <= b_hi:
            b_try = (b_lo + b_hi) // 2
            mid_range = S[b_try + 1] - S[a_try]
            hi_range = S[N] - S[b_try + 1]
            min_max_mid_hi = min(min_max_mid_hi, max(mid_range, hi_range))
            if mid_range > hi_range:
                b_hi = b_try - 1
            elif mid_range < hi_range:
                b_lo = b_try + 1
            else:
                break
        min_solveig_score = min(min_solveig_score, max(lo_range,
            min_max_mid_hi))
        if lo_range > min_max_mid_hi:
            a_hi = a_try - 1
        elif lo_range < min_max_mid_hi:
            a_lo = a_try + 1
        else:
            break
    return a_lo



****** Cluster 882 ******
def func_1affa17eb0e14e94a1989780c72646be(a_try, S, N):
    lo_range = S[a_try]
    b_lo = a_try
    b_hi = N - 1
    min_max_mid_hi = S[N] + 1
    while b_lo <= b_hi:
        b_try = (b_lo + b_hi) // 2
        mid_range = S[b_try + 1] - S[a_try]
        hi_range = S[N] - S[b_try + 1]
        min_max_mid_hi = min(min_max_mid_hi, max(mid_range, hi_range))
        if mid_range > hi_range:
            b_hi = b_try - 1
        elif mid_range < hi_range:
            b_lo = b_try + 1
        else:
            break
    return b_lo

def func_bbf0c3b39f134b4f8106c7bf9d8b8e16(a_try, S, N):
    lo_range = S[a_try]
    b_lo = a_try
    b_hi = N - 1
    min_max_mid_hi = S[N] + 1
    return b_lo



****** Cluster 883 ******
def func_20e75bbb3031410583bb5df43273bcfa(q, p, s, S, r, N):
    S[0] = 0
    for i in range(0, N):
        S[i + 1] = (p * i + q) % r + s + S[i]
    a_lo = 0
    a_hi = N - 1
    return i

def func_7ace25aab5a14b5bbb528d5fe3e33121(q, p, s, S, r, N):
    S[0] = 0
    for i in range(0, N):
        S[i + 1] = (p * i + q) % r + s + S[i]
    return i

def func_aefc6f0513524baa946a9dcece18e824(q, p, s, S, r, N):
    for i in range(0, N):
        S[i + 1] = (p * i + q) % r + s + S[i]
    a_lo = 0
    return i

def func_b8783b623cd646d18561946ec10add2f(q, p, s, S, r, N):
    for i in range(0, N):
        S[i + 1] = (p * i + q) % r + s + S[i]
    a_lo = 0
    a_hi = N - 1
    return i

def func_f831ab17560c469992cf4abeb8afa4ab(q, p, s, S, r, N):
    S[0] = 0
    for i in range(0, N):
        S[i + 1] = (p * i + q) % r + s + S[i]
    a_lo = 0
    return i



****** Cluster 884 ******
def func_21ed0f6361524fa3a3d5adacfe72450f(q, p, s, r, N):
    S = [0] * (N + 1)
    S[0] = 0
    for i in range(0, N):
        S[i + 1] = (p * i + q) % r + s + S[i]
    a_lo = 0
    a_hi = N - 1
    return a_hi

def func_ec0be1694a56424abcc16cebcb039f4e(q, p, s, r, N):
    S = [0] * (N + 1)
    S[0] = 0
    for i in range(0, N):
        S[i + 1] = (p * i + q) % r + s + S[i]
    a_lo = 0
    a_hi = N - 1
    min_solveig_score = S[N] + 1
    return a_hi



****** Cluster 885 ******
def func_23d74cd510cf43778b866513aa0537d7(S, N):
    b_hi = N - 1
    min_max_mid_hi = S[N] + 1
    return b_hi

def func_59ac52388024424093bb036ce42dad05(S, N):
    a_lo = 0
    a_hi = N - 1
    min_solveig_score = S[N] + 1
    return a_hi

def func_7d6cc8c5e60b4796a6885fee822ccfab(S, N):
    a_hi = N - 1
    min_solveig_score = S[N] + 1
    return a_hi



****** Cluster 886 ******
def func_2df4239740db4729860e2d5efff82cf0(S, a_hi, a_lo):
    a_try = (a_lo + a_hi) // 2
    lo_range = S[a_try]
    return lo_range

def func_f13c38ca5e234fa5a5fcd9fbbd5eaf6d(S, a_hi, a_lo):
    a_try = (a_lo + a_hi) // 2
    lo_range = S[a_try]
    b_lo = a_try
    return lo_range

def func_717d246c1b9b4310ac153dec98d6567d(cum, ar, al):
    amid = (al + ar) // 2
    left = cum[amid]
    return left



****** Cluster 887 ******
def func_301e56287fb245bd8e0268280bc5f910(S, a_hi, N, a_lo):
    a_try = (a_lo + a_hi) // 2
    lo_range = S[a_try]
    b_lo = a_try
    b_hi = N - 1
    min_max_mid_hi = S[N] + 1
    return lo_range

def func_823178e5208b416b88802c7d8442d3d7(S, a_hi, N, a_lo):
    a_try = (a_lo + a_hi) // 2
    lo_range = S[a_try]
    b_lo = a_try
    b_hi = N - 1
    min_max_mid_hi = S[N] + 1
    while b_lo <= b_hi:
        b_try = (b_lo + b_hi) // 2
        mid_range = S[b_try + 1] - S[a_try]
        hi_range = S[N] - S[b_try + 1]
        min_max_mid_hi = min(min_max_mid_hi, max(mid_range, hi_range))
        if mid_range > hi_range:
            b_hi = b_try - 1
        elif mid_range < hi_range:
            b_lo = b_try + 1
        else:
            break
    return lo_range



****** Cluster 888 ******
def func_3a0847c1b82b4ed886159c22d4671679(S, N):
    b_hi = N - 1
    min_max_mid_hi = S[N] + 1
    return min_max_mid_hi

def func_aa53e1b496ab4e32bb6e242bb8abd9fc(S, N):
    a_hi = N - 1
    min_solveig_score = S[N] + 1
    return min_solveig_score

def func_b4dc8f19bd2845689ab8b02ec4a1ab20(S, N):
    a_lo = 0
    a_hi = N - 1
    min_solveig_score = S[N] + 1
    return min_solveig_score



****** Cluster 889 ******
def func_3cd3c2bc9d034ab1b8643cdb324c7462(q, p, s, S, r, N):
    for i in range(0, N):
        S[i + 1] = (p * i + q) % r + s + S[i]
    a_lo = 0
    a_hi = N - 1
    min_solveig_score = S[N] + 1
    while a_lo <= a_hi:
        a_try = (a_lo + a_hi) // 2
        lo_range = S[a_try]
        b_lo = a_try
        b_hi = N - 1
        min_max_mid_hi = S[N] + 1
        while b_lo <= b_hi:
            b_try = (b_lo + b_hi) // 2
            mid_range = S[b_try + 1] - S[a_try]
            hi_range = S[N] - S[b_try + 1]
            min_max_mid_hi = min(min_max_mid_hi, max(mid_range, hi_range))
            if mid_range > hi_range:
                b_hi = b_try - 1
            elif mid_range < hi_range:
                b_lo = b_try + 1
            else:
                break
        min_solveig_score = min(min_solveig_score, max(lo_range,
            min_max_mid_hi))
        if lo_range > min_max_mid_hi:
            a_hi = a_try - 1
        elif lo_range < min_max_mid_hi:
            a_lo = a_try + 1
        else:
            break
    return b_try

def func_e3f35d4ae5f24c779d90a6a019471c66(q, p, s, S, r, N):
    S[0] = 0
    for i in range(0, N):
        S[i + 1] = (p * i + q) % r + s + S[i]
    a_lo = 0
    a_hi = N - 1
    min_solveig_score = S[N] + 1
    while a_lo <= a_hi:
        a_try = (a_lo + a_hi) // 2
        lo_range = S[a_try]
        b_lo = a_try
        b_hi = N - 1
        min_max_mid_hi = S[N] + 1
        while b_lo <= b_hi:
            b_try = (b_lo + b_hi) // 2
            mid_range = S[b_try + 1] - S[a_try]
            hi_range = S[N] - S[b_try + 1]
            min_max_mid_hi = min(min_max_mid_hi, max(mid_range, hi_range))
            if mid_range > hi_range:
                b_hi = b_try - 1
            elif mid_range < hi_range:
                b_lo = b_try + 1
            else:
                break
        min_solveig_score = min(min_solveig_score, max(lo_range,
            min_max_mid_hi))
        if lo_range > min_max_mid_hi:
            a_hi = a_try - 1
        elif lo_range < min_max_mid_hi:
            a_lo = a_try + 1
        else:
            break
    return b_try



****** Cluster 890 ******
def func_41364de8811548ad97e82895796f72bc(q, p, s, S, r, N):
    for i in range(0, N):
        S[i + 1] = (p * i + q) % r + s + S[i]
    a_lo = 0
    a_hi = N - 1
    min_solveig_score = S[N] + 1
    while a_lo <= a_hi:
        a_try = (a_lo + a_hi) // 2
        lo_range = S[a_try]
        b_lo = a_try
        b_hi = N - 1
        min_max_mid_hi = S[N] + 1
        while b_lo <= b_hi:
            b_try = (b_lo + b_hi) // 2
            mid_range = S[b_try + 1] - S[a_try]
            hi_range = S[N] - S[b_try + 1]
            min_max_mid_hi = min(min_max_mid_hi, max(mid_range, hi_range))
            if mid_range > hi_range:
                b_hi = b_try - 1
            elif mid_range < hi_range:
                b_lo = b_try + 1
            else:
                break
        min_solveig_score = min(min_solveig_score, max(lo_range,
            min_max_mid_hi))
        if lo_range > min_max_mid_hi:
            a_hi = a_try - 1
        elif lo_range < min_max_mid_hi:
            a_lo = a_try + 1
        else:
            break
    return a_hi

def func_ef103847806843e89d79ebd846cf1201(q, p, s, S, r, N):
    S[0] = 0
    for i in range(0, N):
        S[i + 1] = (p * i + q) % r + s + S[i]
    a_lo = 0
    a_hi = N - 1
    min_solveig_score = S[N] + 1
    while a_lo <= a_hi:
        a_try = (a_lo + a_hi) // 2
        lo_range = S[a_try]
        b_lo = a_try
        b_hi = N - 1
        min_max_mid_hi = S[N] + 1
        while b_lo <= b_hi:
            b_try = (b_lo + b_hi) // 2
            mid_range = S[b_try + 1] - S[a_try]
            hi_range = S[N] - S[b_try + 1]
            min_max_mid_hi = min(min_max_mid_hi, max(mid_range, hi_range))
            if mid_range > hi_range:
                b_hi = b_try - 1
            elif mid_range < hi_range:
                b_lo = b_try + 1
            else:
                break
        min_solveig_score = min(min_solveig_score, max(lo_range,
            min_max_mid_hi))
        if lo_range > min_max_mid_hi:
            a_hi = a_try - 1
        elif lo_range < min_max_mid_hi:
            a_lo = a_try + 1
        else:
            break
    return a_hi



****** Cluster 891 ******
def func_4146bfc444b542b68f92baa0555bda23(a_try, S, N):
    lo_range = S[a_try]
    b_lo = a_try
    b_hi = N - 1
    min_max_mid_hi = S[N] + 1
    while b_lo <= b_hi:
        b_try = (b_lo + b_hi) // 2
        mid_range = S[b_try + 1] - S[a_try]
        hi_range = S[N] - S[b_try + 1]
        min_max_mid_hi = min(min_max_mid_hi, max(mid_range, hi_range))
        if mid_range > hi_range:
            b_hi = b_try - 1
        elif mid_range < hi_range:
            b_lo = b_try + 1
        else:
            break
    return min_max_mid_hi

def func_c5c5c8d5b4be41cc8855bf50fa7b78a3(a_try, S, N):
    lo_range = S[a_try]
    b_lo = a_try
    b_hi = N - 1
    min_max_mid_hi = S[N] + 1
    return min_max_mid_hi



****** Cluster 892 ******
def func_451284c7b0604760949372bc3df2283a(q, p, s, S, r, N):
    for i in range(0, N):
        S[i + 1] = (p * i + q) % r + s + S[i]
    a_lo = 0
    a_hi = N - 1
    min_solveig_score = S[N] + 1
    while a_lo <= a_hi:
        a_try = (a_lo + a_hi) // 2
        lo_range = S[a_try]
        b_lo = a_try
        b_hi = N - 1
        min_max_mid_hi = S[N] + 1
        while b_lo <= b_hi:
            b_try = (b_lo + b_hi) // 2
            mid_range = S[b_try + 1] - S[a_try]
            hi_range = S[N] - S[b_try + 1]
            min_max_mid_hi = min(min_max_mid_hi, max(mid_range, hi_range))
            if mid_range > hi_range:
                b_hi = b_try - 1
            elif mid_range < hi_range:
                b_lo = b_try + 1
            else:
                break
        min_solveig_score = min(min_solveig_score, max(lo_range,
            min_max_mid_hi))
        if lo_range > min_max_mid_hi:
            a_hi = a_try - 1
        elif lo_range < min_max_mid_hi:
            a_lo = a_try + 1
        else:
            break
    return mid_range

def func_e2ff827797264cb2bacd3db09dffc91e(q, p, s, S, r, N):
    S[0] = 0
    for i in range(0, N):
        S[i + 1] = (p * i + q) % r + s + S[i]
    a_lo = 0
    a_hi = N - 1
    min_solveig_score = S[N] + 1
    while a_lo <= a_hi:
        a_try = (a_lo + a_hi) // 2
        lo_range = S[a_try]
        b_lo = a_try
        b_hi = N - 1
        min_max_mid_hi = S[N] + 1
        while b_lo <= b_hi:
            b_try = (b_lo + b_hi) // 2
            mid_range = S[b_try + 1] - S[a_try]
            hi_range = S[N] - S[b_try + 1]
            min_max_mid_hi = min(min_max_mid_hi, max(mid_range, hi_range))
            if mid_range > hi_range:
                b_hi = b_try - 1
            elif mid_range < hi_range:
                b_lo = b_try + 1
            else:
                break
        min_solveig_score = min(min_solveig_score, max(lo_range,
            min_max_mid_hi))
        if lo_range > min_max_mid_hi:
            a_hi = a_try - 1
        elif lo_range < min_max_mid_hi:
            a_lo = a_try + 1
        else:
            break
    return mid_range



****** Cluster 893 ******
def func_45a41154796c4467997590f56c7add3b(q, p, s, S, r, N):
    S[0] = 0
    for i in range(0, N):
        S[i + 1] = (p * i + q) % r + s + S[i]
    a_lo = 0
    a_hi = N - 1
    min_solveig_score = S[N] + 1
    while a_lo <= a_hi:
        a_try = (a_lo + a_hi) // 2
        lo_range = S[a_try]
        b_lo = a_try
        b_hi = N - 1
        min_max_mid_hi = S[N] + 1
        while b_lo <= b_hi:
            b_try = (b_lo + b_hi) // 2
            mid_range = S[b_try + 1] - S[a_try]
            hi_range = S[N] - S[b_try + 1]
            min_max_mid_hi = min(min_max_mid_hi, max(mid_range, hi_range))
            if mid_range > hi_range:
                b_hi = b_try - 1
            elif mid_range < hi_range:
                b_lo = b_try + 1
            else:
                break
        min_solveig_score = min(min_solveig_score, max(lo_range,
            min_max_mid_hi))
        if lo_range > min_max_mid_hi:
            a_hi = a_try - 1
        elif lo_range < min_max_mid_hi:
            a_lo = a_try + 1
        else:
            break
    return hi_range

def func_4c79d85b90ec4041adbddad557d7aca6(q, p, s, S, r, N):
    for i in range(0, N):
        S[i + 1] = (p * i + q) % r + s + S[i]
    a_lo = 0
    a_hi = N - 1
    min_solveig_score = S[N] + 1
    while a_lo <= a_hi:
        a_try = (a_lo + a_hi) // 2
        lo_range = S[a_try]
        b_lo = a_try
        b_hi = N - 1
        min_max_mid_hi = S[N] + 1
        while b_lo <= b_hi:
            b_try = (b_lo + b_hi) // 2
            mid_range = S[b_try + 1] - S[a_try]
            hi_range = S[N] - S[b_try + 1]
            min_max_mid_hi = min(min_max_mid_hi, max(mid_range, hi_range))
            if mid_range > hi_range:
                b_hi = b_try - 1
            elif mid_range < hi_range:
                b_lo = b_try + 1
            else:
                break
        min_solveig_score = min(min_solveig_score, max(lo_range,
            min_max_mid_hi))
        if lo_range > min_max_mid_hi:
            a_hi = a_try - 1
        elif lo_range < min_max_mid_hi:
            a_lo = a_try + 1
        else:
            break
    return hi_range



****** Cluster 894 ******
def func_4a77226f5c9f4bd6b314c60638a915fe(q, p, s, S, r, N):
    for i in range(0, N):
        S[i + 1] = (p * i + q) % r + s + S[i]
    a_lo = 0
    a_hi = N - 1
    min_solveig_score = S[N] + 1
    return i

def func_837a5f1977144a76bf953650d52806ff(q, p, s, S, r, N):
    for i in range(0, N):
        S[i + 1] = (p * i + q) % r + s + S[i]
    a_lo = 0
    a_hi = N - 1
    min_solveig_score = S[N] + 1
    while a_lo <= a_hi:
        a_try = (a_lo + a_hi) // 2
        lo_range = S[a_try]
        b_lo = a_try
        b_hi = N - 1
        min_max_mid_hi = S[N] + 1
        while b_lo <= b_hi:
            b_try = (b_lo + b_hi) // 2
            mid_range = S[b_try + 1] - S[a_try]
            hi_range = S[N] - S[b_try + 1]
            min_max_mid_hi = min(min_max_mid_hi, max(mid_range, hi_range))
            if mid_range > hi_range:
                b_hi = b_try - 1
            elif mid_range < hi_range:
                b_lo = b_try + 1
            else:
                break
        min_solveig_score = min(min_solveig_score, max(lo_range,
            min_max_mid_hi))
        if lo_range > min_max_mid_hi:
            a_hi = a_try - 1
        elif lo_range < min_max_mid_hi:
            a_lo = a_try + 1
        else:
            break
    return i

def func_af09121e63234db6829b1d46f7462394(q, p, s, S, r, N):
    S[0] = 0
    for i in range(0, N):
        S[i + 1] = (p * i + q) % r + s + S[i]
    a_lo = 0
    a_hi = N - 1
    min_solveig_score = S[N] + 1
    return i

def func_c5042e3487094a30b8ede09f9f34d2c9(q, p, s, S, r, N):
    S[0] = 0
    for i in range(0, N):
        S[i + 1] = (p * i + q) % r + s + S[i]
    a_lo = 0
    a_hi = N - 1
    min_solveig_score = S[N] + 1
    while a_lo <= a_hi:
        a_try = (a_lo + a_hi) // 2
        lo_range = S[a_try]
        b_lo = a_try
        b_hi = N - 1
        min_max_mid_hi = S[N] + 1
        while b_lo <= b_hi:
            b_try = (b_lo + b_hi) // 2
            mid_range = S[b_try + 1] - S[a_try]
            hi_range = S[N] - S[b_try + 1]
            min_max_mid_hi = min(min_max_mid_hi, max(mid_range, hi_range))
            if mid_range > hi_range:
                b_hi = b_try - 1
            elif mid_range < hi_range:
                b_lo = b_try + 1
            else:
                break
        min_solveig_score = min(min_solveig_score, max(lo_range,
            min_max_mid_hi))
        if lo_range > min_max_mid_hi:
            a_hi = a_try - 1
        elif lo_range < min_max_mid_hi:
            a_lo = a_try + 1
        else:
            break
    return i



****** Cluster 895 ******
def func_4e3020b2761d45859d9be25ea99a9a5c(q, p, s, S, r, N):
    S[0] = 0
    for i in range(0, N):
        S[i + 1] = (p * i + q) % r + s + S[i]
    a_lo = 0
    a_hi = N - 1
    return a_hi

def func_718def6211cf47368883f23ea3a86715(q, p, s, S, r, N):
    for i in range(0, N):
        S[i + 1] = (p * i + q) % r + s + S[i]
    a_lo = 0
    a_hi = N - 1
    return a_hi



****** Cluster 896 ******
def func_54f246a5afff4390b08b480893aa54f9(q, p, s, r, N):
    S = [0] * (N + 1)
    S[0] = 0
    for i in range(0, N):
        S[i + 1] = (p * i + q) % r + s + S[i]
    a_lo = 0
    a_hi = N - 1
    min_solveig_score = S[N] + 1
    while a_lo <= a_hi:
        a_try = (a_lo + a_hi) // 2
        lo_range = S[a_try]
        b_lo = a_try
        b_hi = N - 1
        min_max_mid_hi = S[N] + 1
        while b_lo <= b_hi:
            b_try = (b_lo + b_hi) // 2
            mid_range = S[b_try + 1] - S[a_try]
            hi_range = S[N] - S[b_try + 1]
            min_max_mid_hi = min(min_max_mid_hi, max(mid_range, hi_range))
            if mid_range > hi_range:
                b_hi = b_try - 1
            elif mid_range < hi_range:
                b_lo = b_try + 1
            else:
                break
        min_solveig_score = min(min_solveig_score, max(lo_range,
            min_max_mid_hi))
        if lo_range > min_max_mid_hi:
            a_hi = a_try - 1
        elif lo_range < min_max_mid_hi:
            a_lo = a_try + 1
        else:
            break
    return S

def func_7b4e87013ec84bfab25ad2922b56f339(q, p, s, r, N):
    S = [0] * (N + 1)
    S[0] = 0
    for i in range(0, N):
        S[i + 1] = (p * i + q) % r + s + S[i]
    a_lo = 0
    return S

def func_bf4f7b0ba1b942d4b5a171c35c25d3ad(q, p, s, r, N):
    S = [0] * (N + 1)
    S[0] = 0
    for i in range(0, N):
        S[i + 1] = (p * i + q) % r + s + S[i]
    return S

def func_d73464ce5fb34b1a8bd4d900480eb533(q, p, s, r, N):
    S = [0] * (N + 1)
    S[0] = 0
    for i in range(0, N):
        S[i + 1] = (p * i + q) % r + s + S[i]
    a_lo = 0
    a_hi = N - 1
    return S

def func_fc609bdd35934603bf0988f924a19b81(q, p, s, r, N):
    S = [0] * (N + 1)
    S[0] = 0
    for i in range(0, N):
        S[i + 1] = (p * i + q) % r + s + S[i]
    a_lo = 0
    a_hi = N - 1
    min_solveig_score = S[N] + 1
    return S



****** Cluster 897 ******
def func_56d9e474f5fe407cbbb83cc9606d5edf(b_hi, a_try, S, N, b_lo):
    b_try = (b_lo + b_hi) // 2
    mid_range = S[b_try + 1] - S[a_try]
    hi_range = S[N] - S[b_try + 1]
    return b_try

def func_bb2258c21efb412085989c05c9e3ebc1(b_hi, a_try, S, N, b_lo):
    b_try = (b_lo + b_hi) // 2
    mid_range = S[b_try + 1] - S[a_try]
    hi_range = S[N] - S[b_try + 1]
    return mid_range

def func_e386206e9cb44059ba4b413f99c506c3(b_hi, a_try, S, N, b_lo):
    b_try = (b_lo + b_hi) // 2
    mid_range = S[b_try + 1] - S[a_try]
    hi_range = S[N] - S[b_try + 1]
    return hi_range



****** Cluster 898 ******
def func_589a4b8e09914ba1a16568f22afbf132(a_try, S, N):
    lo_range = S[a_try]
    b_lo = a_try
    b_hi = N - 1
    min_max_mid_hi = S[N] + 1
    while b_lo <= b_hi:
        b_try = (b_lo + b_hi) // 2
        mid_range = S[b_try + 1] - S[a_try]
        hi_range = S[N] - S[b_try + 1]
        min_max_mid_hi = min(min_max_mid_hi, max(mid_range, hi_range))
        if mid_range > hi_range:
            b_hi = b_try - 1
        elif mid_range < hi_range:
            b_lo = b_try + 1
        else:
            break
    return lo_range

def func_fbb54a438c7047b691684d1bf2b6a9c8(a_try, S, N):
    lo_range = S[a_try]
    b_lo = a_try
    b_hi = N - 1
    min_max_mid_hi = S[N] + 1
    return lo_range



****** Cluster 899 ******
def func_61c34787af994c9f9a19db14df6db676(q, p, s, S, r, N):
    S[0] = 0
    for i in range(0, N):
        S[i + 1] = (p * i + q) % r + s + S[i]
    a_lo = 0
    a_hi = N - 1
    min_solveig_score = S[N] + 1
    while a_lo <= a_hi:
        a_try = (a_lo + a_hi) // 2
        lo_range = S[a_try]
        b_lo = a_try
        b_hi = N - 1
        min_max_mid_hi = S[N] + 1
        while b_lo <= b_hi:
            b_try = (b_lo + b_hi) // 2
            mid_range = S[b_try + 1] - S[a_try]
            hi_range = S[N] - S[b_try + 1]
            min_max_mid_hi = min(min_max_mid_hi, max(mid_range, hi_range))
            if mid_range > hi_range:
                b_hi = b_try - 1
            elif mid_range < hi_range:
                b_lo = b_try + 1
            else:
                break
        min_solveig_score = min(min_solveig_score, max(lo_range,
            min_max_mid_hi))
        if lo_range > min_max_mid_hi:
            a_hi = a_try - 1
        elif lo_range < min_max_mid_hi:
            a_lo = a_try + 1
        else:
            break
    return a_try

def func_a92adb82e4aa4b06a1192f38b84f60a5(q, p, s, S, r, N):
    for i in range(0, N):
        S[i + 1] = (p * i + q) % r + s + S[i]
    a_lo = 0
    a_hi = N - 1
    min_solveig_score = S[N] + 1
    while a_lo <= a_hi:
        a_try = (a_lo + a_hi) // 2
        lo_range = S[a_try]
        b_lo = a_try
        b_hi = N - 1
        min_max_mid_hi = S[N] + 1
        while b_lo <= b_hi:
            b_try = (b_lo + b_hi) // 2
            mid_range = S[b_try + 1] - S[a_try]
            hi_range = S[N] - S[b_try + 1]
            min_max_mid_hi = min(min_max_mid_hi, max(mid_range, hi_range))
            if mid_range > hi_range:
                b_hi = b_try - 1
            elif mid_range < hi_range:
                b_lo = b_try + 1
            else:
                break
        min_solveig_score = min(min_solveig_score, max(lo_range,
            min_max_mid_hi))
        if lo_range > min_max_mid_hi:
            a_hi = a_try - 1
        elif lo_range < min_max_mid_hi:
            a_lo = a_try + 1
        else:
            break
    return a_try



****** Cluster 900 ******
def func_69f8d91035494b7b9b6d67f734d31685(q, p, s, S, r, N):
    S[0] = 0
    for i in range(0, N):
        S[i + 1] = (p * i + q) % r + s + S[i]
    a_lo = 0
    a_hi = N - 1
    min_solveig_score = S[N] + 1
    return a_hi

def func_ab102a4e7eb941a199a6e6e89494624b(q, p, s, S, r, N):
    for i in range(0, N):
        S[i + 1] = (p * i + q) % r + s + S[i]
    a_lo = 0
    a_hi = N - 1
    min_solveig_score = S[N] + 1
    return a_hi



****** Cluster 901 ******
def func_75ec0cfb932e400e9684c9d6f25f5b1a(q, p, s, S, r, N):
    S[0] = 0
    for i in range(0, N):
        S[i + 1] = (p * i + q) % r + s + S[i]
    a_lo = 0
    a_hi = N - 1
    min_solveig_score = S[N] + 1
    while a_lo <= a_hi:
        a_try = (a_lo + a_hi) // 2
        lo_range = S[a_try]
        b_lo = a_try
        b_hi = N - 1
        min_max_mid_hi = S[N] + 1
        while b_lo <= b_hi:
            b_try = (b_lo + b_hi) // 2
            mid_range = S[b_try + 1] - S[a_try]
            hi_range = S[N] - S[b_try + 1]
            min_max_mid_hi = min(min_max_mid_hi, max(mid_range, hi_range))
            if mid_range > hi_range:
                b_hi = b_try - 1
            elif mid_range < hi_range:
                b_lo = b_try + 1
            else:
                break
        min_solveig_score = min(min_solveig_score, max(lo_range,
            min_max_mid_hi))
        if lo_range > min_max_mid_hi:
            a_hi = a_try - 1
        elif lo_range < min_max_mid_hi:
            a_lo = a_try + 1
        else:
            break
    return b_lo

def func_a98a06b8732e41aa900ac468bd4b27ae(q, p, s, S, r, N):
    for i in range(0, N):
        S[i + 1] = (p * i + q) % r + s + S[i]
    a_lo = 0
    a_hi = N - 1
    min_solveig_score = S[N] + 1
    while a_lo <= a_hi:
        a_try = (a_lo + a_hi) // 2
        lo_range = S[a_try]
        b_lo = a_try
        b_hi = N - 1
        min_max_mid_hi = S[N] + 1
        while b_lo <= b_hi:
            b_try = (b_lo + b_hi) // 2
            mid_range = S[b_try + 1] - S[a_try]
            hi_range = S[N] - S[b_try + 1]
            min_max_mid_hi = min(min_max_mid_hi, max(mid_range, hi_range))
            if mid_range > hi_range:
                b_hi = b_try - 1
            elif mid_range < hi_range:
                b_lo = b_try + 1
            else:
                break
        min_solveig_score = min(min_solveig_score, max(lo_range,
            min_max_mid_hi))
        if lo_range > min_max_mid_hi:
            a_hi = a_try - 1
        elif lo_range < min_max_mid_hi:
            a_lo = a_try + 1
        else:
            break
    return b_lo



****** Cluster 902 ******
def func_7bf04fbf30e64148bd5e878051f7803a(S, a_hi, N, a_lo):
    a_try = (a_lo + a_hi) // 2
    lo_range = S[a_try]
    b_lo = a_try
    b_hi = N - 1
    min_max_mid_hi = S[N] + 1
    return b_lo

def func_8fde7227a6cb46549fdf543119fee28a(S, a_hi, N, a_lo):
    a_try = (a_lo + a_hi) // 2
    lo_range = S[a_try]
    b_lo = a_try
    b_hi = N - 1
    min_max_mid_hi = S[N] + 1
    while b_lo <= b_hi:
        b_try = (b_lo + b_hi) // 2
        mid_range = S[b_try + 1] - S[a_try]
        hi_range = S[N] - S[b_try + 1]
        min_max_mid_hi = min(min_max_mid_hi, max(mid_range, hi_range))
        if mid_range > hi_range:
            b_hi = b_try - 1
        elif mid_range < hi_range:
            b_lo = b_try + 1
        else:
            break
    return b_lo

def func_ac2b2b0b13aa4a38abf4d5c5cc421628(S, a_hi, N, a_lo):
    a_try = (a_lo + a_hi) // 2
    lo_range = S[a_try]
    b_lo = a_try
    b_hi = N - 1
    min_max_mid_hi = S[N] + 1
    return a_try

def func_f0e2e034ebb044ea933ea7b2f1621e56(S, a_hi, N, a_lo):
    a_try = (a_lo + a_hi) // 2
    lo_range = S[a_try]
    b_lo = a_try
    b_hi = N - 1
    min_max_mid_hi = S[N] + 1
    while b_lo <= b_hi:
        b_try = (b_lo + b_hi) // 2
        mid_range = S[b_try + 1] - S[a_try]
        hi_range = S[N] - S[b_try + 1]
        min_max_mid_hi = min(min_max_mid_hi, max(mid_range, hi_range))
        if mid_range > hi_range:
            b_hi = b_try - 1
        elif mid_range < hi_range:
            b_lo = b_try + 1
        else:
            break
    return a_try



****** Cluster 903 ******
def func_7bf13712c6c447409a792cb51cd119e7(S, a_hi, a_lo):
    a_try = (a_lo + a_hi) // 2
    lo_range = S[a_try]
    b_lo = a_try
    return b_lo

def func_cb1b419eb0644ad1a46d11ef7bbd589a(S, a_hi, a_lo):
    a_try = (a_lo + a_hi) // 2
    lo_range = S[a_try]
    b_lo = a_try
    return a_try

def func_fb107cba36d74414909c5f2d92df10b7(S, a_hi, a_lo):
    a_try = (a_lo + a_hi) // 2
    lo_range = S[a_try]
    return a_try

def func_45a8ae82050e4422b36fef97690207cf(cum, ar, al):
    amid = (al + ar) // 2
    left = cum[amid]
    return amid



****** Cluster 904 ******
def func_a28d1d23da654cac8109d67b7b2ebcf8(a_try, S, b_try, N):
    mid_range = S[b_try + 1] - S[a_try]
    hi_range = S[N] - S[b_try + 1]
    return mid_range

def func_bf672db1516c427ca86a9200179e4c67(a_try, S, b_try, N):
    mid_range = S[b_try + 1] - S[a_try]
    hi_range = S[N] - S[b_try + 1]
    return hi_range



****** Cluster 905 ******
def func_e2bf26cb08514b808a4e0f269140bd29(S, a_hi, N, a_lo):
    a_try = (a_lo + a_hi) // 2
    lo_range = S[a_try]
    b_lo = a_try
    b_hi = N - 1
    return b_lo

def func_e5a6aa58c69a457283c68865604369d2(S, a_hi, N, a_lo):
    a_try = (a_lo + a_hi) // 2
    lo_range = S[a_try]
    b_lo = a_try
    b_hi = N - 1
    return a_try



****** Cluster 906 ******
def func_e6ffd8c67cdc467485323c741b02d124(S, a_hi, N, a_lo):
    a_try = (a_lo + a_hi) // 2
    lo_range = S[a_try]
    b_lo = a_try
    b_hi = N - 1
    min_max_mid_hi = S[N] + 1
    return b_hi

def func_fb283a89539a4ab7bea6d1285b927d01(S, a_hi, N, a_lo):
    a_try = (a_lo + a_hi) // 2
    lo_range = S[a_try]
    b_lo = a_try
    b_hi = N - 1
    min_max_mid_hi = S[N] + 1
    while b_lo <= b_hi:
        b_try = (b_lo + b_hi) // 2
        mid_range = S[b_try + 1] - S[a_try]
        hi_range = S[N] - S[b_try + 1]
        min_max_mid_hi = min(min_max_mid_hi, max(mid_range, hi_range))
        if mid_range > hi_range:
            b_hi = b_try - 1
        elif mid_range < hi_range:
            b_lo = b_try + 1
        else:
            break
    return b_hi



****** Cluster 907 ******
def func_04031093a83c457aa220381fba0e6486(E, L, N):
    X = []
    for i in range(N):
        x = L[i] * E[i]
        if E[i] == 1:
            x = 0
        X.append([x, -i])
    X.sort(reverse=True)
    return x

def func_977d27b14ad84621a89fe433c8fba575(E, L, N):
    X = []
    for i in range(N):
        x = L[i] * E[i]
        if E[i] == 1:
            x = 0
        X.append([x, -i])
    return x



****** Cluster 908 ******
def func_0ede68f488284e8991a3ab23ac4ffe62(P, N):
    E = []
    for i in range(N):
        e = 1.0 / (1 - P[i])
        E.append(e)
    return i

def func_56551af7704340deb6c873a278914c24(P, N):
    E = []
    for i in range(N):
        e = 1.0 / (1 - P[i])
        E.append(e)
    X = []
    return i

def func_a98a9162119e4f839ae0c6b171c7331e(q, n):
    r = [(q[i], -i) for i in xrange(n)]
    r.sort()
    r.reverse()
    return i

def func_a9d0703ad73448788df7f1e91fe1f610(q, n):
    r = [(q[i], -i) for i in xrange(n)]
    r.sort()
    return i



****** Cluster 909 ******
def func_141a4f5212b5412f9811e08a18adbe22(P, N):
    E = []
    for i in range(N):
        e = 1.0 / (1 - P[i])
        E.append(e)
    return E

def func_a3db286709f348639765112d76281ed1(P, N):
    E = []
    for i in range(N):
        e = 1.0 / (1 - P[i])
        E.append(e)
    X = []
    return E



****** Cluster 910 ******
def func_1b1b9b0cd9e74348b0183de9ffac08bd(P, E, L, N):
    for i in range(N):
        e = 1.0 / (1 - P[i])
        E.append(e)
    X = []
    for i in range(N):
        x = L[i] * E[i]
        if E[i] == 1:
            x = 0
        X.append([x, -i])
    return x

def func_67949f7d859e44faba3652df80a01c2a(P, E, L, N):
    for i in range(N):
        e = 1.0 / (1 - P[i])
        E.append(e)
    X = []
    for i in range(N):
        x = L[i] * E[i]
        if E[i] == 1:
            x = 0
        X.append([x, -i])
    X.sort(reverse=True)
    return x



****** Cluster 911 ******
def func_23ec8e7e411349fc9597762dd8af93db(P, E, L, N):
    for i in range(N):
        e = 1.0 / (1 - P[i])
        E.append(e)
    X = []
    for i in range(N):
        x = L[i] * E[i]
        if E[i] == 1:
            x = 0
        X.append([x, -i])
    X.sort(reverse=True)
    return i

def func_67776de75c4d4b4287afb703c7960cb1(P, E, L, N):
    for i in range(N):
        e = 1.0 / (1 - P[i])
        E.append(e)
    X = []
    for i in range(N):
        x = L[i] * E[i]
        if E[i] == 1:
            x = 0
        X.append([x, -i])
    return i



****** Cluster 912 ******
def func_303cf160acb644249cd2a97c14f48d16(P, L, N):
    E = []
    for i in range(N):
        e = 1.0 / (1 - P[i])
        E.append(e)
    X = []
    for i in range(N):
        x = L[i] * E[i]
        if E[i] == 1:
            x = 0
        X.append([x, -i])
    return i

def func_3a5f0316cc5344339ad09d8bcfedc5eb(P, L, N):
    E = []
    for i in range(N):
        e = 1.0 / (1 - P[i])
        E.append(e)
    X = []
    for i in range(N):
        x = L[i] * E[i]
        if E[i] == 1:
            x = 0
        X.append([x, -i])
    X.sort(reverse=True)
    return i

def func_8e237359a7304e63a30ae76201263fba(E, L, N):
    X = []
    for i in range(N):
        x = L[i] * E[i]
        if E[i] == 1:
            x = 0
        X.append([x, -i])
    X.sort(reverse=True)
    return i

def func_ac66f230c0154a3fa8986476e3c81edd(E, L, N):
    X = []
    for i in range(N):
        x = L[i] * E[i]
        if E[i] == 1:
            x = 0
        X.append([x, -i])
    return i



****** Cluster 913 ******
def func_027844ad49f447beadcc3c3ca1f2aed1(a, i):
    first = a[i]
    need = first + (a[-1] - first) / 2
    pos = bisect.bisect_left(a, need)
    second = a[pos] - first
    third = a[-1] - first - second
    return first

def func_a31b3b2f84e1406d97af8bf413ba90dc(a, i):
    first = a[i]
    need = first + (a[-1] - first) / 2
    pos = bisect.bisect_left(a, need)
    second = a[pos] - first
    third = a[-1] - first - second
    m = a[-1] - max(first, second, third)
    return first

def func_e542b75e165c44799879dd237ee11679(a, i):
    first = a[i]
    need = first + (a[-1] - first) / 2
    pos = bisect.bisect_left(a, need)
    second = a[pos] - first
    return first



****** Cluster 914 ******
def func_05df5b2b28604dc9aa50ec6258505e78(a, first):
    need = first + (a[-1] - first) / 2
    pos = bisect.bisect_left(a, need)
    second = a[pos] - first
    return pos

def func_10ce5e8b644e42498fcb167ee2b1b482(a, first):
    need = first + (a[-1] - first) / 2
    pos = bisect.bisect_left(a, need)
    second = a[pos] - first
    third = a[-1] - first - second
    return pos

def func_3d0c03156ff14bfeb39bebb35d6cc0b2(a, first):
    need = first + (a[-1] - first) / 2
    pos = bisect.bisect_left(a, need)
    second = a[pos] - first
    third = a[-1] - first - second
    m = a[-1] - max(first, second, third)
    return pos



****** Cluster 915 ******
def func_0685c913678a4c058f2920ceaefa0c91(a, pos, first):
    second = a[pos] - first
    third = a[-1] - first - second
    return third

def func_3f7b6efa76cf4728a8844f218d17e6b4(a, pos, first):
    second = a[pos] - first
    third = a[-1] - first - second
    m = a[-1] - max(first, second, third)
    return third



****** Cluster 916 ******
def func_41b635712e7d43a8a86543acade92678(P, E, L, N):
    for i in range(N):
        e = 1.0 / (1 - P[i])
        E.append(e)
    X = []
    for i in range(N):
        x = L[i] * E[i]
        if E[i] == 1:
            x = 0
        X.append([x, -i])
    X.sort(reverse=True)
    return e

def func_b4c6d2f23785487cae67a19fe8170212(P, E, L, N):
    for i in range(N):
        e = 1.0 / (1 - P[i])
        E.append(e)
    X = []
    for i in range(N):
        x = L[i] * E[i]
        if E[i] == 1:
            x = 0
        X.append([x, -i])
    return e



****** Cluster 917 ******
def func_1965e00f01d64bc0ae2c6aec66fa3608(a, i):
    first = a[i]
    need = first + (a[-1] - first) / 2
    pos = bisect.bisect_left(a, need)
    return need

def func_d02aa5f53559411ea151605a51f8d086(a, i):
    first = a[i]
    need = first + (a[-1] - first) / 2
    return need



****** Cluster 918 ******
def func_225afd1e2ba44b6796c7c545969ee0b6(a, first):
    need = first + (a[-1] - first) / 2
    pos = bisect.bisect_left(a, need)
    second = a[pos] - first
    third = a[-1] - first - second
    m = a[-1] - max(first, second, third)
    return third

def func_ee86a5dcc0e040f9a93dee01f51dae98(a, first):
    need = first + (a[-1] - first) / 2
    pos = bisect.bisect_left(a, need)
    second = a[pos] - first
    third = a[-1] - first - second
    return third



****** Cluster 919 ******
def func_22f8ea15cd774c79ab19739b67601805(a, first):
    need = first + (a[-1] - first) / 2
    pos = bisect.bisect_left(a, need)
    second = a[pos] - first
    third = a[-1] - first - second
    m = a[-1] - max(first, second, third)
    return second

def func_29af3a023e1a45609773967ba539e71c(a, first):
    need = first + (a[-1] - first) / 2
    pos = bisect.bisect_left(a, need)
    second = a[pos] - first
    return second

def func_798d906039b7417e992c93d2b7059daf(a, first):
    need = first + (a[-1] - first) / 2
    pos = bisect.bisect_left(a, need)
    second = a[pos] - first
    third = a[-1] - first - second
    return second



****** Cluster 920 ******
def func_232a2809790841bc9168806665259515(a, second, first):
    third = a[-1] - first - second
    m = a[-1] - max(first, second, third)
    return m

def func_ec8fe65f3ec543dabdf180ca3c799533(a, second, first):
    third = a[-1] - first - second
    m = a[-1] - max(first, second, third)
    return m



****** Cluster 921 ******
def func_264a7bef2995420b80673545ba7b4330(a, i):
    first = a[i]
    need = first + (a[-1] - first) / 2
    pos = bisect.bisect_left(a, need)
    return first

def func_6e3c8d725cb743e0adf8518fe98c8982(a, i):
    first = a[i]
    need = first + (a[-1] - first) / 2
    return first

def func_e3e72caed40a49ccb488c210b4621a15(y, j):
    hmin = y[j]
    jmin = j
    return hmin



****** Cluster 922 ******
def func_370340d91ff64e0d8c8571135814eb61(a, pos, first):
    second = a[pos - 1] - first
    third = a[-1] - first - second
    m = a[-1] - max(first, second, third)
    return second

def func_9f74e2b1b8d34d1194fc2780c0c084c4(a, pos, first):
    second = a[pos - 1] - first
    third = a[-1] - first - second
    return second



****** Cluster 923 ******
def func_383425f92b1845df96b45a1b7904a354(a, pos, first):
    second = a[pos] - first
    third = a[-1] - first - second
    return second

def func_bf7f6ddb61c24661aa1470ae82b95c10(a, pos, first):
    second = a[pos] - first
    third = a[-1] - first - second
    m = a[-1] - max(first, second, third)
    return second



****** Cluster 924 ******
def func_38dc0162a5d744e1b09c86ce70ecb39d(a, first, need):
    pos = bisect.bisect_left(a, need)
    second = a[pos] - first
    return pos

def func_d62afabaeed34761b18d6ff1882b421a(a, first, need):
    pos = bisect.bisect_left(a, need)
    second = a[pos] - first
    third = a[-1] - first - second
    m = a[-1] - max(first, second, third)
    return pos

def func_fcf513854ee5418493ab71a6fc3db72d(a, first, need):
    pos = bisect.bisect_left(a, need)
    second = a[pos] - first
    third = a[-1] - first - second
    return pos



****** Cluster 925 ******
def func_3a7a1d1975284475a6a0f11631b61f52(a, first, need):
    pos = bisect.bisect_left(a, need)
    second = a[pos] - first
    third = a[-1] - first - second
    m = a[-1] - max(first, second, third)
    return second

def func_3cdd8328370546c9abf8969761bd274d(a, first, need):
    pos = bisect.bisect_left(a, need)
    second = a[pos] - first
    third = a[-1] - first - second
    return second

def func_43ad47970a664d2ba9bdee2d1e2882b7(a, first, need):
    pos = bisect.bisect_left(a, need)
    second = a[pos] - first
    return second



****** Cluster 926 ******
def func_3b280529f33b48fe9cf5f26e6ebaddae(a, first):
    need = first + (a[-1] - first) / 2
    pos = bisect.bisect_left(a, need)
    second = a[pos] - first
    third = a[-1] - first - second
    m = a[-1] - max(first, second, third)
    return need

def func_4d7a9421db64408eb654d16a709937c6(a, first):
    need = first + (a[-1] - first) / 2
    pos = bisect.bisect_left(a, need)
    second = a[pos] - first
    return need

def func_d6991fcce4a549959ffbfb5ea7659f5a(a, first):
    need = first + (a[-1] - first) / 2
    pos = bisect.bisect_left(a, need)
    second = a[pos] - first
    third = a[-1] - first - second
    return need



****** Cluster 927 ******
def func_48bf1803c3cd4882a769dd2496595648(a, pos, first):
    second = a[pos - 1] - first
    third = a[-1] - first - second
    m = a[-1] - max(first, second, third)
    return third

def func_6401b05c1e45462f932b8a7f27bb7b66(a, pos, first):
    second = a[pos - 1] - first
    third = a[-1] - first - second
    return third



****** Cluster 928 ******
def func_4b7d6645cebf4e84ad621c2412465456(a, first, need):
    pos = bisect.bisect_left(a, need)
    second = a[pos] - first
    third = a[-1] - first - second
    return third

def func_d289dea0830345e2b90b2a78957bac04(a, first, need):
    pos = bisect.bisect_left(a, need)
    second = a[pos] - first
    third = a[-1] - first - second
    m = a[-1] - max(first, second, third)
    return third



****** Cluster 929 ******
def func_6a11e765481643a389e966e5c03294d6(P, N):
    E = []
    for i in range(N):
        e = 1.0 / (1 - P[i])
        E.append(e)
    return e

def func_eecb0d6639f84e87a40d57bc2b324aa8(P, N):
    E = []
    for i in range(N):
        e = 1.0 / (1 - P[i])
        E.append(e)
    X = []
    return e



****** Cluster 930 ******
def func_52a474b2d65c419bbe003ca73684c424(a, i):
    first = a[i]
    need = first + (a[-1] - first) / 2
    pos = bisect.bisect_left(a, need)
    second = a[pos] - first
    return pos

def func_a1df311c237744e9a9ff65677a8e4335(a, i):
    first = a[i]
    need = first + (a[-1] - first) / 2
    pos = bisect.bisect_left(a, need)
    second = a[pos] - first
    third = a[-1] - first - second
    m = a[-1] - max(first, second, third)
    return pos

def func_a5ed8de62b5948ff9e76fd88cbee680c(a, i):
    first = a[i]
    need = first + (a[-1] - first) / 2
    pos = bisect.bisect_left(a, need)
    second = a[pos] - first
    third = a[-1] - first - second
    return pos



****** Cluster 931 ******
def func_7164cf512b4842b5bc6164d54faf40ca(a, second, first):
    third = a[-1] - first - second
    m = a[-1] - max(first, second, third)
    return third

def func_73a107f37fbe4447bef40be5fe7e69dc(a, second, first):
    third = a[-1] - first - second
    m = a[-1] - max(first, second, third)
    return third



****** Cluster 932 ******
def func_7bc778ce1fe04bb49e4dbde609620936(a, i):
    first = a[i]
    need = first + (a[-1] - first) / 2
    pos = bisect.bisect_left(a, need)
    second = a[pos] - first
    third = a[-1] - first - second
    return second

def func_a3780a838ae04842822b901c80a60da5(a, i):
    first = a[i]
    need = first + (a[-1] - first) / 2
    pos = bisect.bisect_left(a, need)
    second = a[pos] - first
    return second

def func_e991c4d7f8b944d8adacbc72382bb327(a, i):
    first = a[i]
    need = first + (a[-1] - first) / 2
    pos = bisect.bisect_left(a, need)
    second = a[pos] - first
    third = a[-1] - first - second
    m = a[-1] - max(first, second, third)
    return second



****** Cluster 933 ******
def func_8035ae37ccf3450fb4428c2613e65225(P, L, N):
    E = []
    for i in range(N):
        e = 1.0 / (1 - P[i])
        E.append(e)
    X = []
    for i in range(N):
        x = L[i] * E[i]
        if E[i] == 1:
            x = 0
        X.append([x, -i])
    X.sort(reverse=True)
    return x

def func_e9e06fed0352401fa79ead2492933fe7(P, L, N):
    E = []
    for i in range(N):
        e = 1.0 / (1 - P[i])
        E.append(e)
    X = []
    for i in range(N):
        x = L[i] * E[i]
        if E[i] == 1:
            x = 0
        X.append([x, -i])
    return x



****** Cluster 934 ******
def func_84a72f9e46804c158bd093c3c4341f2d(a, i):
    first = a[i]
    need = first + (a[-1] - first) / 2
    pos = bisect.bisect_left(a, need)
    second = a[pos] - first
    third = a[-1] - first - second
    return third

def func_ba9f846a700c400482ac62eb0b904681(a, i):
    first = a[i]
    need = first + (a[-1] - first) / 2
    pos = bisect.bisect_left(a, need)
    second = a[pos] - first
    third = a[-1] - first - second
    m = a[-1] - max(first, second, third)
    return third



****** Cluster 935 ******
def func_87f276d82eae4259b1c0ad572868efb9(a, i):
    first = a[i]
    need = first + (a[-1] - first) / 2
    pos = bisect.bisect_left(a, need)
    second = a[pos] - first
    third = a[-1] - first - second
    return need

def func_b682c591176d4dec981df30c02e66306(a, i):
    first = a[i]
    need = first + (a[-1] - first) / 2
    pos = bisect.bisect_left(a, need)
    second = a[pos] - first
    return need

def func_fe6f14456550415cba432b706d45c86e(a, i):
    first = a[i]
    need = first + (a[-1] - first) / 2
    pos = bisect.bisect_left(a, need)
    second = a[pos] - first
    third = a[-1] - first - second
    m = a[-1] - max(first, second, third)
    return need



****** Cluster 936 ******
def func_85a409f06046487393725afb57b21885(P, L, N):
    E = []
    for i in range(N):
        e = 1.0 / (1 - P[i])
        E.append(e)
    X = []
    for i in range(N):
        x = L[i] * E[i]
        if E[i] == 1:
            x = 0
        X.append([x, -i])
    X.sort(reverse=True)
    return E

def func_ff8a75da792d4800a516640f5ea4c501(P, L, N):
    E = []
    for i in range(N):
        e = 1.0 / (1 - P[i])
        E.append(e)
    X = []
    for i in range(N):
        x = L[i] * E[i]
        if E[i] == 1:
            x = 0
        X.append([x, -i])
    return E



****** Cluster 937 ******
def func_957a91dd8ce64c2c81caa31eb3b1a70e(P, L, N):
    E = []
    for i in range(N):
        e = 1.0 / (1 - P[i])
        E.append(e)
    X = []
    for i in range(N):
        x = L[i] * E[i]
        if E[i] == 1:
            x = 0
        X.append([x, -i])
    X.sort(reverse=True)
    return e

def func_abb205afa0624f86a9969e09c9a34054(P, L, N):
    E = []
    for i in range(N):
        e = 1.0 / (1 - P[i])
        E.append(e)
    X = []
    for i in range(N):
        x = L[i] * E[i]
        if E[i] == 1:
            x = 0
        X.append([x, -i])
    return e



****** Cluster 938 ******
def func_02c135412fff44c290735a3b2504516a(s, q, r, p, N):
    t = [((i * p + q) % r + s) for i in range(N)]
    total = sum(t)
    c = [0]
    for x in t:
        c.append(c[-1] + x)
    a = b = 0
    return total

def func_2a6e47758e3442e3b226d7c330d3f48c(s, q, r, p, N):
    t = [((i * p + q) % r + s) for i in range(N)]
    total = sum(t)
    return total

def func_76f7201ceeba4c41a3d457e9832e553b(s, q, r, p, N):
    t = [((i * p + q) % r + s) for i in range(N)]
    total = sum(t)
    c = [0]
    for x in t:
        c.append(c[-1] + x)
    a = b = 0
    best = 0
    while b <= N:
        if a == b or c[b] - c[a] <= total / 3:
            b += 1
            if b > N:
                break
        else:
            a += 1
        best = max(best, total - max((c[a], c[b] - c[a], total - c[b])))
    return total

def func_a53667646f06471ca0c7cfce22e8fc8c(s, q, r, p, N):
    t = [((i * p + q) % r + s) for i in range(N)]
    total = sum(t)
    c = [0]
    return total

def func_c3d69ca0fd8a45098910af4e3fbf958d(s, q, r, p, N):
    t = [((i * p + q) % r + s) for i in range(N)]
    total = sum(t)
    c = [0]
    for x in t:
        c.append(c[-1] + x)
    return total

def func_e0f144d5b12f4802b60c02ceead825a7(s, q, r, p, N):
    t = [((i * p + q) % r + s) for i in range(N)]
    total = sum(t)
    c = [0]
    for x in t:
        c.append(c[-1] + x)
    a = b = 0
    best = 0
    return total



****** Cluster 939 ******
def func_03ed00615f744c0c9cf1218dda734d5d(t, total, testCase, N):
    c = [0]
    for x in t:
        c.append(c[-1] + x)
    a = b = 0
    best = 0
    while b <= N:
        if a == b or c[b] - c[a] <= total / 3:
            b += 1
            if b > N:
                break
        else:
            a += 1
        best = max(best, total - max((c[a], c[b] - c[a], total - c[b])))(
            'Case #%d: %.10f' % (testCase, float(best) / float(total)))
    return b

def func_af256d2d83fa49428787c3bb4b10bfed(c, total, testCase, N):
    a = b = 0
    best = 0
    while b <= N:
        if a == b or c[b] - c[a] <= total / 3:
            b += 1
            if b > N:
                break
        else:
            a += 1
        best = max(best, total - max((c[a], c[b] - c[a], total - c[b])))(
            'Case #%d: %.10f' % (testCase, float(best) / float(total)))
    return b



****** Cluster 940 ******
def func_0ef65e50ed9e4b1781aead609d82e0fd(s, q, r, p, N):
    t = [((i * p + q) % r + s) for i in range(N)]
    total = sum(t)
    c = [0]
    return t

def func_3ad9d711ed97489889d1ee3b88e7d908(s, q, r, p, N):
    t = [((i * p + q) % r + s) for i in range(N)]
    total = sum(t)
    c = [0]
    for x in t:
        c.append(c[-1] + x)
    a = b = 0
    best = 0
    while b <= N:
        if a == b or c[b] - c[a] <= total / 3:
            b += 1
            if b > N:
                break
        else:
            a += 1
        best = max(best, total - max((c[a], c[b] - c[a], total - c[b])))
    return t

def func_60a90e1921214646a2430f0e59c7665c(s, q, r, p, N):
    t = [((i * p + q) % r + s) for i in range(N)]
    total = sum(t)
    c = [0]
    for x in t:
        c.append(c[-1] + x)
    a = b = 0
    best = 0
    return t

def func_84475cf441244a1a89010ba0363e1808(s, q, r, p, N):
    t = [((i * p + q) % r + s) for i in range(N)]
    total = sum(t)
    return t

def func_b123470462bf402c85012735dd814778(s, q, r, p, N):
    t = [((i * p + q) % r + s) for i in range(N)]
    total = sum(t)
    c = [0]
    for x in t:
        c.append(c[-1] + x)
    return t

def func_b921d79ecb5d497eb6c7fc80cb3769a4(s, q, r, p, N):
    t = [((i * p + q) % r + s) for i in range(N)]
    total = sum(t)
    c = [0]
    for x in t:
        c.append(c[-1] + x)
    a = b = 0
    return t



****** Cluster 941 ******
def func_0f777cc89b5d4165bbb5fabcceccf6a7(t):
    c = [0]
    for x in t:
        c.append(c[-1] + x)
    a = b = 0
    return c

def func_5efcf8feb4684f118cf6fbb4d3d8e287(t):
    c = [0]
    for x in t:
        c.append(c[-1] + x)
    return c

def func_9eaab0a45d8540d681f930c80c335c07(t):
    total = sum(t)
    c = [0]
    for x in t:
        c.append(c[-1] + x)
    return c

def func_bb6a22d076e3471eaae962ad56e644da(t):
    total = sum(t)
    c = [0]
    for x in t:
        c.append(c[-1] + x)
    a = b = 0
    return c

def func_caccb2df0a024a0badfc3b86d6e44db5(t):
    c = [0]
    for x in t:
        c.append(c[-1] + x)
    a = b = 0
    best = 0
    return c

def func_e0c8023538cb42bfb1f64a9510b196b9(t):
    total = sum(t)
    c = [0]
    for x in t:
        c.append(c[-1] + x)
    a = b = 0
    best = 0
    return c

def func_4a321c77087c4f28ba611330523d875b(l):
    cum = [0]
    for x in l:
        cum.append(cum[-1] + x)
    return cum

def func_4e27dddb3cca4a19b8eb49332bf6eeb9(l):
    vsota = sum(l)
    cum = [0]
    for x in l:
        cum.append(cum[-1] + x)
    return cum

def func_6ca246f5f6c64f9a810c87cd47efe514(l):
    vsota = sum(l)
    cum = [0]
    for x in l:
        cum.append(cum[-1] + x)
    best = 0.0
    return cum

def func_98844474a18b485fb6e4fd1189ae0848(l):
    cum = [0]
    for x in l:
        cum.append(cum[-1] + x)
    best = 0.0
    return cum



****** Cluster 942 ******
def func_16c3dbeb6e5344458fe56e245ee9f017(s, q, r, p, N):
    t = [((i * p + q) % r + s) for i in range(N)]
    total = sum(t)
    c = [0]
    for x in t:
        c.append(c[-1] + x)
    a = b = 0
    best = 0
    return c

def func_421b36c83fc943a6bd37f5ac49bc9633(s, q, r, p, N):
    t = [((i * p + q) % r + s) for i in range(N)]
    total = sum(t)
    c = [0]
    for x in t:
        c.append(c[-1] + x)
    a = b = 0
    return c

def func_784ab946db8245568078b957ed591c5c(s, q, r, p, N):
    t = [((i * p + q) % r + s) for i in range(N)]
    total = sum(t)
    c = [0]
    for x in t:
        c.append(c[-1] + x)
    a = b = 0
    best = 0
    while b <= N:
        if a == b or c[b] - c[a] <= total / 3:
            b += 1
            if b > N:
                break
        else:
            a += 1
        best = max(best, total - max((c[a], c[b] - c[a], total - c[b])))
    return c

def func_a9c9f1ed70a24a5896a3a9da05441e4c(s, q, r, p, N):
    t = [((i * p + q) % r + s) for i in range(N)]
    total = sum(t)
    c = [0]
    for x in t:
        c.append(c[-1] + x)
    return c



****** Cluster 943 ******
def func_2322768d63a74f69ac83964248537f24(s, q, r, p, N):
    t = [((i * p + q) % r + s) for i in range(N)]
    total = sum(t)
    c = [0]
    for x in t:
        c.append(c[-1] + x)
    a = b = 0
    best = 0
    while b <= N:
        if a == b or c[b] - c[a] <= total / 3:
            b += 1
            if b > N:
                break
        else:
            a += 1
        best = max(best, total - max((c[a], c[b] - c[a], total - c[b])))
    return x

def func_6cff14fcaff04caa94aa1bf66a380dea(s, q, r, p, N):
    t = [((i * p + q) % r + s) for i in range(N)]
    total = sum(t)
    c = [0]
    for x in t:
        c.append(c[-1] + x)
    a = b = 0
    best = 0
    return x

def func_c690f235526a452ca0830876817ba552(s, q, r, p, N):
    t = [((i * p + q) % r + s) for i in range(N)]
    total = sum(t)
    c = [0]
    for x in t:
        c.append(c[-1] + x)
    a = b = 0
    return x

def func_cbe5937b716b4277b5326363a2c060f6(s, q, r, p, N):
    t = [((i * p + q) % r + s) for i in range(N)]
    total = sum(t)
    c = [0]
    for x in t:
        c.append(c[-1] + x)
    return x



****** Cluster 944 ******
def func_34efc7da10b449d5819e4c11bd326cdb(pi):
    b = None
    for j in xrange(len(pi)):
        if pi[j] == None:
            continue
        if b == None:
            b = j
            continue
        if pi[j] > pi[b]:
            b = j
    return b

def func_66443babbe9144b799b0c67262388b99(pi):
    """Find lecographically first maximum element"""
    b = None
    for j in xrange(len(pi)):
        if pi[j] == None:
            continue
        if b == None:
            b = j
            continue
        if pi[j] > pi[b]:
            b = j
    return b



****** Cluster 945 ******
def func_3fc0c3f6f2294a0d9bbd3d141f7f80cc(t, c):
    for x in t:
        c.append(c[-1] + x)
    a = b = 0
    return x

def func_534c6bd14a5945c38163cc04e1a6e5e8(t, c):
    for x in t:
        c.append(c[-1] + x)
    a = b = 0
    best = 0
    return x



****** Cluster 946 ******
def func_038716315e984118b64ea930897a336f(l, n, p):

    def cmp(idx1, idx2):
        if p[idx1] * l[idx2] > p[idx2] * l[idx1]:
            return -1
        if p[idx1] * l[idx2] < p[idx2] * l[idx1]:
            return 1
        return idx1 - idx2
    idx = range(n)
    idx.sort(cmp=cmp)
    return idx

def func_937a52a7e4fc4ed6bdc75580bf298966(l, n, p):

    def cmp(idx1, idx2):
        if p[idx1] * l[idx2] > p[idx2] * l[idx1]:
            return -1
        if p[idx1] * l[idx2] < p[idx2] * l[idx1]:
            return 1
        return idx1 - idx2(len(l) == n)(len(p) == n)
    idx = range(n)
    idx.sort(cmp=cmp)
    return idx

def func_d292949f4629439ab4d5ca9e7a6e9551(l, n, p):

    def cmp(idx1, idx2):
        if p[idx1] * l[idx2] > p[idx2] * l[idx1]:
            return -1
        if p[idx1] * l[idx2] < p[idx2] * l[idx1]:
            return 1
        return idx1 - idx2(len(p) == n)
    idx = range(n)
    idx.sort(cmp=cmp)
    return idx



****** Cluster 947 ******
def func_1fb1767d42df42e0bd87a89d96c8f2f1(l, n, p):

    def cmp(idx1, idx2):
        if p[idx1] * l[idx2] > p[idx2] * l[idx1]:
            return -1
        if p[idx1] * l[idx2] < p[idx2] * l[idx1]:
            return 1
        return idx1 - idx2(len(p) == n)
    idx = range(n)
    return n

def func_745f164856774bb48a7025f73906fc2a(l, n, p):

    def cmp(idx1, idx2):
        if p[idx1] * l[idx2] > p[idx2] * l[idx1]:
            return -1
        if p[idx1] * l[idx2] < p[idx2] * l[idx1]:
            return 1
        return idx1 - idx2(len(l) == n)(len(p) == n)
    idx = range(n)
    return n

def func_78663e6b4b3b4ce4a3414ccc69ef30ae(l, n, p):

    def cmp(idx1, idx2):
        if p[idx1] * l[idx2] > p[idx2] * l[idx1]:
            return -1
        if p[idx1] * l[idx2] < p[idx2] * l[idx1]:
            return 1
        return idx1 - idx2(len(l) == n)(len(p) == n)
    return n



****** Cluster 948 ******
def func_3a8012b47a0d4cdb8c076f2674c0ce96(l, n, p):

    def cmp(idx1, idx2):
        if p[idx1] * l[idx2] > p[idx2] * l[idx1]:
            return -1
        if p[idx1] * l[idx2] < p[idx2] * l[idx1]:
            return 1
        return idx1 - idx2(len(p) == n)
    idx = range(n)
    idx.sort(cmp=cmp)
    return l

def func_467893eeb9fe4ea28478c789fa325a73(l, n, p):

    def cmp(idx1, idx2):
        if p[idx1] * l[idx2] > p[idx2] * l[idx1]:
            return -1
        if p[idx1] * l[idx2] < p[idx2] * l[idx1]:
            return 1
        return idx1 - idx2
    idx = range(n)
    idx.sort(cmp=cmp)
    return l

def func_5ff61c293bff49c0ae205945213c78c2(l, n, p):

    def cmp(idx1, idx2):
        if p[idx1] * l[idx2] > p[idx2] * l[idx1]:
            return -1
        if p[idx1] * l[idx2] < p[idx2] * l[idx1]:
            return 1
        return idx1 - idx2(len(l) == n)(len(p) == n)
    idx = range(n)
    idx.sort(cmp=cmp)
    return l



****** Cluster 949 ******
def func_4bdf00b6ea4943b083f7cf95adfd827d(l, n, p):

    def cmp(idx1, idx2):
        if p[idx1] * l[idx2] > p[idx2] * l[idx1]:
            return -1
        if p[idx1] * l[idx2] < p[idx2] * l[idx1]:
            return 1
        return idx1 - idx2(len(l) == n)(len(p) == n)
    idx = range(n)
    return l

def func_bcdeaebc766745119e90c50c12ceb8db(l, n, p):

    def cmp(idx1, idx2):
        if p[idx1] * l[idx2] > p[idx2] * l[idx1]:
            return -1
        if p[idx1] * l[idx2] < p[idx2] * l[idx1]:
            return 1
        return idx1 - idx2(len(p) == n)
    idx = range(n)
    return l

def func_e86f6c9957a14be78ad33b627f5cd001(l, n, p):

    def cmp(idx1, idx2):
        if p[idx1] * l[idx2] > p[idx2] * l[idx1]:
            return -1
        if p[idx1] * l[idx2] < p[idx2] * l[idx1]:
            return 1
        return idx1 - idx2(len(l) == n)(len(p) == n)
    return l



****** Cluster 950 ******
def func_68633a7dd7e5437fa0efc234ffa85a1a(l, n, p):

    def cmp(idx1, idx2):
        if p[idx1] * l[idx2] > p[idx2] * l[idx1]:
            return -1
        if p[idx1] * l[idx2] < p[idx2] * l[idx1]:
            return 1
        return idx1 - idx2(len(p) == n)
    idx = range(n)
    idx.sort(cmp=cmp)
    return n

def func_bf733f31d02f46f7a973c5e2bb5ee91d(l, n, p):

    def cmp(idx1, idx2):
        if p[idx1] * l[idx2] > p[idx2] * l[idx1]:
            return -1
        if p[idx1] * l[idx2] < p[idx2] * l[idx1]:
            return 1
        return idx1 - idx2(len(l) == n)(len(p) == n)
    idx = range(n)
    idx.sort(cmp=cmp)
    return n

def func_dbfe90a40b5444cab94e6a360aea660d(l, n, p):

    def cmp(idx1, idx2):
        if p[idx1] * l[idx2] > p[idx2] * l[idx1]:
            return -1
        if p[idx1] * l[idx2] < p[idx2] * l[idx1]:
            return 1
        return idx1 - idx2
    idx = range(n)
    idx.sort(cmp=cmp)
    return n



****** Cluster 951 ******
def func_75c643f6d7be45f0a09d4a4a9a9d4742(l, n, p):

    def cmp(idx1, idx2):
        if p[idx1] * l[idx2] > p[idx2] * l[idx1]:
            return -1
        if p[idx1] * l[idx2] < p[idx2] * l[idx1]:
            return 1
        return idx1 - idx2(len(l) == n)(len(p) == n)
    idx = range(n)
    return p

def func_975f1823fa12444c9b34d79a411bfc37(l, n, p):

    def cmp(idx1, idx2):
        if p[idx1] * l[idx2] > p[idx2] * l[idx1]:
            return -1
        if p[idx1] * l[idx2] < p[idx2] * l[idx1]:
            return 1
        return idx1 - idx2(len(l) == n)(len(p) == n)
    return p

def func_fd7c77c7ebfd446bad535b27a084bc92(l, n, p):

    def cmp(idx1, idx2):
        if p[idx1] * l[idx2] > p[idx2] * l[idx1]:
            return -1
        if p[idx1] * l[idx2] < p[idx2] * l[idx1]:
            return 1
        return idx1 - idx2(len(p) == n)
    idx = range(n)
    return p



****** Cluster 952 ******
def func_791f8043777244a5a57497b04344c706(l, n, p):

    def cmp(idx1, idx2):
        if p[idx1] * l[idx2] > p[idx2] * l[idx1]:
            return -1
        if p[idx1] * l[idx2] < p[idx2] * l[idx1]:
            return 1
        return idx1 - idx2(len(p) == n)
    idx = range(n)
    idx.sort(cmp=cmp)
    return p

def func_a5e434966dd1494fa4ba3df6cd9c0bc1(l, n, p):

    def cmp(idx1, idx2):
        if p[idx1] * l[idx2] > p[idx2] * l[idx1]:
            return -1
        if p[idx1] * l[idx2] < p[idx2] * l[idx1]:
            return 1
        return idx1 - idx2
    idx = range(n)
    idx.sort(cmp=cmp)
    return p

def func_cf45ed5e5c41479eaa4e6f4e588fd430(l, n, p):

    def cmp(idx1, idx2):
        if p[idx1] * l[idx2] > p[idx2] * l[idx1]:
            return -1
        if p[idx1] * l[idx2] < p[idx2] * l[idx1]:
            return 1
        return idx1 - idx2(len(l) == n)(len(p) == n)
    idx = range(n)
    idx.sort(cmp=cmp)
    return p



****** Cluster 953 ******
def func_a7b980422cfa456e90cdde9ae3a3bc34(l, n, p):

    def cmp(idx1, idx2):
        if p[idx1] * l[idx2] > p[idx2] * l[idx1]:
            return -1
        if p[idx1] * l[idx2] < p[idx2] * l[idx1]:
            return 1
        return idx1 - idx2(len(l) == n)(len(p) == n)
    idx = range(n)
    return idx

def func_d97619ea782b4ea7a7f8abcd5208f494(l, n, p):

    def cmp(idx1, idx2):
        if p[idx1] * l[idx2] > p[idx2] * l[idx1]:
            return -1
        if p[idx1] * l[idx2] < p[idx2] * l[idx1]:
            return 1
        return idx1 - idx2(len(p) == n)
    idx = range(n)
    return idx



****** Cluster 954 ******
def func_00c42cd4fbba4c9aa77d2b0878d70b94(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    return aa

def func_07447492ba1f4e4b956cbd519c890db6(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    return aa

def func_0d0e868e5213484c873452944f898844(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    return aa

def func_2700ea89841b4497b2e0b06b69f3d990(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    return aa

def func_41f29f6ac7354f1b9da3678bfd427a75(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    return aa

def func_453c06e558524dc6991540ac625b2528(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    return aa

def func_60204e55a15f411b8023172ff955f84c(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    return aa

def func_908f5a7d8e5047d5854fafa65ca0a26d(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    return aa

def func_9c6f86fab6ae41ac88c1e215212e6bec(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return aa

def func_f693e8320ccb409aac4caa1e8d1c3569(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    return aa



****** Cluster 955 ******
def func_014482df6c29481195f5bbbbb9c1d9d8(n, a):
    n = len(a)
    sum0 = [0] * (n + 1)
    return sum0

def func_1af8307fc55b4069a3fb283fefacfa1b(n, a):
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    return sum0

def func_3fd410544c004fdf9d14686072a77063(n, a):
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    return sum1

def func_abb6b833b1d3466899698d273d8c289e(n, a):
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    return sum1



****** Cluster 956 ******
def func_0191659c69a64912a36109f1e1f35e15(n, a):
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return v1

def func_728dc919ca4d430d96c65b6bb254ef10(n, a):
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return v1



****** Cluster 957 ******
def func_034852ca721447259a67b01813b9878c(n, sum0, allv, sum1):
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return tmp

def func_2f7cfe73b6d348adb302db87a4ed9c8c(n, sum0, allv, sum1):
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return tmp



****** Cluster 958 ******
def func_037abde5d6ab4ad6920080cd32ab8a5f(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    return x

def func_0f126ac36b2142fd8d0b7b7ba86416e9(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return x

def func_119b38713d3742f6bde61b022f4919a9(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    return x

def func_71ccf1ff26f0495791771fe4cecf61cb(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    return x

def func_75ebf7c44d324ca78f7d6750bc64ec5b(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    return x

def func_7ab1d639acef4b07974c969ebcd909ea(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    return x

def func_a10218a2d0ed4a76b3d172be732597d9(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    return x

def func_c475271088f946249752df96d4132d70(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    return x

def func_cbae4854060f4287aa646d1f0b79c4bc(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    return x

def func_f387a10715b94634a24e2f4e3d535bfe(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return x

def func_1faf349b06954d568194f1b2fdc2a331(lowest, placed):
    partial = len([p for p in placed if p <= lowest])
    lowest_cnt = 37 - len(placed) + partial
    return p

def func_5252f512145a427aa25a240b2477d5bf(budget, placed):
    ret = 0.0
    queue = [1] + placed + [(p - 1) for p in placed] + [(p + 1) for p in placed
        ]
    queue = sorted(set(queue))
    seen = set(queue)
    while queue:
        lowest = queue.pop()
        if lowest == 0:
            continue
        needed_budget = (37 - len(placed)) * lowest
        for p in placed:
            needed_budget += max(0, lowest - p)
        if budget < needed_budget:
            continue
        remaining_budget = budget - needed_budget
        partial = len([p for p in placed if p <= lowest])
        lowest_cnt = 37 - len(placed) + partial
        if lowest_cnt == 0:
            continue
        larger = [p for p in placed if p > lowest]
        if larger:
            next_larger = min(larger)
            can_replicate = min(next_larger - lowest - 1, remaining_budget /
                lowest_cnt)
        else:
            can_replicate = remaining_budget / lowest_cnt
        if can_replicate > 0:
            if lowest + can_replicate not in seen:
                seen.add(lowest + can_replicate)
                queue.append(lowest + can_replicate)
            if lowest + can_replicate - 1 not in seen:
                seen.add(lowest + can_replicate - 1)
                queue.append(lowest + can_replicate - 1)
        for exclude in xrange(0, min(remaining_budget, partial) + 1):
            cand = get_expected(placed, lowest, exclude
                ) - exclude - needed_budget
            ret = max(ret, cand)
    return p

def func_ab9640aa475841d6891a8dee2b2ca9c4(lowest, placed):
    needed_budget = (37 - len(placed)) * lowest
    for p in placed:
        needed_budget += max(0, lowest - p)
    return p

def func_103d691c59824ea1b7576187f0d417ea(i, X):
    remain_X = [j for j in X if j <= i]
    remain_X.sort(reverse=True)
    my_remove_bet = 0
    return j

def func_2e87016580fc4636aece22b378904a81(i, X):
    remain_X = [j for j in X if j <= i]
    remain_X.sort(reverse=True)
    return j

def func_7cff19e2659a4adca164493bd6391f87(i, X):
    bigger = [j for j in X if j > i]
    remain = 37 - len(bigger)
    return j



****** Cluster 959 ******
def func_04e4866f5a014a4992194383a5a4a798(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    return a

def func_05f3005f0bec4d8d894a302b4431142a(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    return a

def func_16f14a1beb3d4f36b00c02a409f030c1(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    return a

def func_66dbe008de0040aca5a02337d3b2c934(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return a

def func_756a0a874ff54f67954cc1ba233edb4d(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return a

def func_7925b579f8194a70975fd12335c05238(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    return a

def func_98a1f52f42eb48e98f667634396c1981(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    return a

def func_998466b60d1f41f196fa9dc32979c281(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    return a

def func_da5544635f094a118387bab5ac773e01(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    return a

def func_e578bf3c71d345febb8118f39719f0f1(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    return a



****** Cluster 960 ******
def func_054461809c004085b43699427560a522(n, sum0, a):
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return v1

def func_f2f7d6a6b72448998697d639ebb6c700(n, sum0, a):
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return v1



****** Cluster 961 ******
def func_06b8d5038a8b43bbad2eba741a75ae4b(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return tmp

def func_985ebb7466be44c8bb928f4662c082b9(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return tmp

def func_b19fdc4fd3934e0397d4d909ace74cea(n, a):
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return tmp

def func_de9b0b98e18d4261b95b3cb5ed7ab18b(n, a):
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return tmp



****** Cluster 962 ******
def func_0770dd90b25e4c5c96912e7bf0481713(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    return x

def func_1de59b260157477c8776ffd6b0a0d4f8(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    return x

def func_25c8085f7955410584fa2958ad71ef0b(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return x

def func_2ea5937b70b2402faf78ddff33254844(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    return x

def func_4bbc4348ff404920a9335c0708a663be(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    return x

def func_67e5dbddce5e494ba7f908f02c6085c7(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    return x

def func_956dfd18b59a449bbffdd245ee3ddcf1(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    return x

def func_ab32b4a5d68f4103901ea15a4b56847e(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    return x

def func_d1e571d2ff164f9cbf6f1d838165fe9a(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    return x

def func_d86749847b10437f8ae17d16b3410a14(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    return x



****** Cluster 963 ******
def func_0906b5eea35644d58ba702cb7d4850ff(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return answer

def func_29bc710a3cad401d8423e25d1aa5cb2a(n, a):
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return answer



****** Cluster 964 ******
def func_0aad9ce9d22f41aeaab806889152aac8(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    return sum0

def func_5b8b5a3c5af54abbbb3a6cedc5ba1fde(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    return sum0

def func_5c8ec3a665e043668e8cbf4df4eda51b(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    return sum0

def func_77061586d0ff48a1a9601c022aac5177(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return sum0

def func_8c445c38fd954331a06625dfdaa69efa(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return sum0

def func_cf2f655806cb4f5bb22358848adc8d83(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    return sum0

def func_ffd51af1f07e41e5925c6c4e34be29a9(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    return sum0



****** Cluster 965 ******
def func_0c5e78a5031846838b3f2cc969a3001e(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    return sum1

def func_1b1021798bfe4375aafb864658799dcc(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return sum1

def func_90d4c57877254ecca44daf8f9d3a6f06(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    return sum1

def func_da4699718f684d5bba5affa2a2916f24(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    return sum1

def func_ee77efdc31da452ea18b3071974ccc01(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    return sum1



****** Cluster 966 ******
def func_0cb7b1c68b3047259012f088e3bc4454(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    return sum1

def func_b54d84e36fce418a975f5c6bc2da8092(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    return sum1

def func_b6d27529cad543fe9e3df1075512c8d9(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    return sum0

def func_f6b150cc883b4b2aa09f432d7499988e(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    return sum0



****** Cluster 967 ******
def func_0df95f05bed345f39b4b8b22f5dc33fc(n, sum0, a):
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    return sum1

def func_35a073ba7be1422e80990fbb6c531328(n, sum0, a):
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    return sum1

def func_e557092a724c4db984f028efee165c07(n, sum0, a):
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return sum1

def func_e8020623c50c468c870250a34257a8f2(n, sum0, a):
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    return sum1

def func_ea3f057f92a24f51a051ff0cc2ee87e5(n, sum0, a):
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return sum1

def func_fe0f0a56ff074cae8ce71c44dedea248(n, sum0, a):
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    return sum1



****** Cluster 968 ******
def func_0e2f8a514d5e41198292ba1133d91d1a(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return sum0

def func_2261fefb640b454d960cbd8af49ead5e(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    return sum0

def func_5146844e9a314c588cb4a3a862e9b586(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    return sum0

def func_74832609afb74f7f9bc10147789a305a(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    return sum0

def func_7e5f6ddaa1e8403ea19f19a9db8969af(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    return sum0

def func_ca3b84f869a841c1aebcb5fdd750e371(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    return sum0



****** Cluster 969 ******
def func_0e90eddf49b94ffc9dc1a6a29df4a4bc(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return sum1

def func_128474a87b4748ec8a04cba6773fae55(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    return sum1

def func_2510bed6d11c4c759a0b8a71cc1f631e(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return sum1

def func_8ba867f8b37b47d095a94de8450ea944(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    return sum1

def func_91386b323f2c4963b3ddd0d116ffa8f3(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    return sum1

def func_ef63f48e60ae4900b3aa61d243fba697(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    return sum1



****** Cluster 970 ******
def func_1135ef979aa841c2ac82b9d11fe928b7(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    return a

def func_1abd30ee8cf747ff96d708756dadd699(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    return a

def func_1daa49ee9d4c435db0899d46778f568a(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    return a

def func_1f40a0946d034653a2bb31b98f06d5ab(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    return a

def func_37c47c2d25ef401dbf67dc73c9832172(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    return a

def func_638dca06c2944f44ba74880dda5b98e7(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    return a

def func_94fe07d133fa4a53bb240760cd614fbb(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    return a

def func_d4114101af4c419cb0a78c0d96948ebb(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return a

def func_e55e8291451b420781fb4438592fb70c(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    return a

def func_f76a76d8b6894727a4e0591cf6d2b212(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    return a



****** Cluster 971 ******
def func_1140af74449f4459b98caf678dc46580(n, a):
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return j

def func_4113b59a8e9b47beaedccb0489f01822(n, a):
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return i

def func_a8aab68ca7d44b7b8e71847f83f0545d(n, a):
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return j

def func_be9b7af50d1d4a1b8b76437749e0fecd(n, a):
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return i



****** Cluster 972 ******
def func_11a2bee1fa184ace9dc79473e0d008ce(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return j

def func_281e915febd9471dbafcde9176f2250d(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return i

def func_9f6faaafeff34e159144c70e4c7ec567(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return j

def func_a3da57f5236c4c0a886ba77dc8e53cda(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return i



****** Cluster 973 ******
def func_12fc962036b44d9ba788218d5c99a714(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    return allv

def func_182277f4a6694f21bb881e8f6812741a(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return allv

def func_676da792b4cd4746a2d058816ff801d4(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    return allv

def func_86d413e7a9444f5b9636df577829ae56(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    return bestAnswer

def func_a06253e8d064446188a18303b66b2d91(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    return bestAnswer

def func_b622567bbe6d4e3c857798425771e61b(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    return allv



****** Cluster 974 ******
def func_1432bb8e4fa44c06953b54676301930c(n, sum0, a):
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return ps

def func_c9561e06eed64a4184585bbd924b36ec(n, sum0, a):
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return ps



****** Cluster 975 ******
def func_181b200d5ba64ff8b7f01a21bc87a322(n, a):
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return tmp

def func_237614a5f4bb49bbbc86655d6451ec22(n, a):
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return tmp



****** Cluster 976 ******
def func_1e4419e9ff9542499f2dcc7097805e79(n, a):
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return bestAnswer

def func_a030538fe98649fb816f3e00e17110a9(n, a):
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return bestAnswer



****** Cluster 977 ******
def func_1f90e19c19d14a709f44cdba95a2cc88(n, sum0, sum1):
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return tmp

def func_a656b82a43b94f349b70f926f1f2e0aa(n, sum0, sum1):
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return tmp



****** Cluster 978 ******
def func_1fadc6331c134885b44dd4563e36ca6f(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return bestAnswer

def func_5ff401507eec421f87b54baaab690daf(n, a):
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return bestAnswer

def func_910121ec17214244bd88f570c131c249(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return bestAnswer

def func_de7a83fe3b6a471686e51fc7f80c0c9c(n, a):
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return bestAnswer



****** Cluster 979 ******
def func_214861888ba54f2ca47f7d655673b7a1(n, a):
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return v1

def func_45efdb147dda42d6b0cd6cf8e38bd824(n, a):
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return v1

def func_b229d9665ceb4ce29a8402a82a5c97f6(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return v1

def func_d2d753163dfd4113a6f105ba2685f886(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return v1



****** Cluster 980 ******
def func_260cd9abcca3450088165e9dd506b2c0(n, sum0, allv, sum1):
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return bestAnswer

def func_ae0ae396f0474f43867c0665ecf73389(n, sum0, allv, sum1):
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return bestAnswer



****** Cluster 981 ******
def func_26bb55685f354bdbb191b78d6d005017(n, a):
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    return sum1

def func_4d13e5d34a034941ab1c1e6657e2485a(n, a):
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    return sum1

def func_7b3b7042ea1942f2baee6b6de77f92a1(n, a):
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return sum1

def func_d7070a4041f2468db64fea51f0333ff6(n, a):
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    return sum1

def func_df34f8348f0e46e2ab4f296838386a6a(n, a):
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return sum1



****** Cluster 982 ******
def func_2ebbb8e2b47d471d8268e5fb4e5cce7b(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    return sum1

def func_458ef14df1114a2d83fec0dcf9e1a89b(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    return sum0

def func_57b337e18ff647d999f052a3ac37f152(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    return sum0

def func_e1baa839d4bb4c74a3ea6c6d7404fff1(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    return sum1



****** Cluster 983 ******
def func_338cc8f285504b16936e571b124e4c95(n, a):
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    return sum0

def func_f0f1234c13c74452bb00a29a78bd0b87(n, a):
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    return sum0



****** Cluster 984 ******
def func_33bfdbe3378441119caff060a66c0717(n, a):
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    return sum0

def func_532b3915c3c24186b292f4a127a39a30(n, a):
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    return sum0

def func_8aeb1bb1d7c74af8abedde5d8ab05e5d(n, a):
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return sum0

def func_8b5bda9a3ff849d1a6871bafa02cf7ed(n, a):
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    return sum0

def func_ad381b291cb24183bcf5e56f7ac1d42e(n, a):
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    return sum0

def func_e0ff05158ad94a18bf2a607845c8ac1f(n, a):
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    return sum0

def func_f2f8ef25248245cca7007e9bf9274ff8(n, a):
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return sum0



****** Cluster 985 ******
def func_343b3d98f0d84a938d1c5737613149d0(n, sum0, a):
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    return allv

def func_643527c7e2ae43bd8397fe0d54430250(n, sum0, a):
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    return allv

def func_703fc1a8ed8346d4a8a17014c1379901(n, sum0, a):
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return bestAnswer

def func_7fc5c0bd480e4b0d92c8dd9a0d7bf67a(n, sum0, a):
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    return bestAnswer

def func_8db4f5d2cdd149a5b755b9c43ad859eb(n, sum0, a):
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return allv

def func_9c4e6145d8644e88b1ea17a6ad64c261(n, sum0, a):
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    return bestAnswer

def func_c4dad8b97b4a41e392514d40804d81e5(n, sum0, a):
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return allv

def func_dc13160f426f448e8d25ac3e455f8a21(n, sum0, a):
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    return allv

def func_e331c32e8752407083a039618e3ef1bd(n, sum0, a):
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return bestAnswer



****** Cluster 986 ******
def func_356244f07b9c466e92a2d0521585da9e(n, sum0, a):
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return tmp

def func_f798fc0bcdde46aba41a6607e6b95d98(n, sum0, a):
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return tmp



****** Cluster 987 ******
def func_43f3c6e5fffc429c8969aa46613f051f(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return i

def func_ba8c9f75218d4f1eb3da868f0a7add34(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return j



****** Cluster 988 ******
def func_44f183800e4e42a29c95488eb1a73858(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return j

def func_c746c61147d6423586d18dcd0d2c90b9(r, n, q, p, s):
    aa = [((x * p + q) % r + s) for x in xrange(n)]
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return i



****** Cluster 989 ******
def func_456e8b1186c94a2cb2835cb8867d0e81(n, sum0, allv, sum1):
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return j

def func_f4033cc4a44e4350aca39d176897b08d(n, sum0, allv, sum1):
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return j



****** Cluster 990 ******
def func_4806ad49713940fab8202625f02d0852(n, sum0, allv, sum1):
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return ps

def func_b8172efc11794fe094cc748108a40a5e(n, sum0, allv, sum1):
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return ps



****** Cluster 991 ******
def func_4a05dcc493c945fc95a601b4188a76f1(n, sum0, sum1):
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return v1

def func_c1c6e9c70c1a4d9ab36e3e19f71d61ee(n, sum0, sum1):
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return v1



****** Cluster 992 ******
def func_531561c68bab480598a1e609e85570ce(n, a):
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return j

def func_5891e2d8c06e4a5facd00af3678c8458(n, a):
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return i

def func_acb49691e51f46cead8fa7303fe82395(n, a):
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return j

def func_dd5d6276785f4eaf9bad263cca311b66(n, a):
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return i



****** Cluster 993 ******
def func_531cb4d66adc4d87b3f404f010780a39(n, a):
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return ps

def func_986edb6e383a4e95818b5a40913bb5df(n, a):
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return ps



****** Cluster 994 ******
def func_57d221703297450cb9894561ede69905(n, a):
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return sum1

def func_8100462642bd4218b2c4134943318eef(n, a):
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    return sum1

def func_9d20f1b6aca14366bbe2565942d01298(n, a):
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    return sum1

def func_aef63fbb5f14434db1a1c585ca43d90b(n, a):
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return sum1

def func_d858e6d8ea8445bfb8ffed333be952b5(n, a):
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    return sum1

def func_e05caa7e5e994e0bbf59abc8ac95ec92(n, a):
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    return sum1



****** Cluster 995 ******
def func_58bb98d517584b2185dbb527d6764ad1(n, a):
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    return allv

def func_60c69cd0a3a34f3cbf698390f33bdcd2(n, a):
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    return bestAnswer

def func_b4bfb6954f91466194caeb83a70dd9f6(n, a):
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    return allv

def func_b972c5319364414a94769f1dd853a755(n, a):
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    return bestAnswer

def func_bc50ce1c677242faad458af88ab6c834(n, a):
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return allv

def func_de999f26f9a040f6b9aef7243da65864(n, a):
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return allv

def func_dfb7911d437747f585ce792046c87724(n, a):
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    return allv



****** Cluster 996 ******
def func_65c3eaf8c24549e693970e25c01e6c99(n, sum0, allv, sum1):
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return i

def func_f05bf0f3d2c7491bba3bc925aa1f56a2(n, sum0, allv, sum1):
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return i



****** Cluster 997 ******
def func_6aee96dc864f412380d7b02a3676718f(n, a):
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return sum0

def func_ba347e533e694057b350ed2621668adc(n, a):
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    return sum0

def func_d153e18de50e462f90929bf8375b8d2d(n, a):
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    return sum0

def func_d712d2d88b814b70b56eaa49c952ecf1(n, a):
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return sum0

def func_daa54d907f594e21b3ea2d9bb73e9d82(n, a):
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    return sum0



****** Cluster 998 ******
def func_830b6492f3d949b3b08b9f9a55fc49ab(n, sum0, sum1):
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return j

def func_b9a90d7f400044458060f1caf5d01362(n, sum0, sum1):
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return j



****** Cluster 999 ******
def func_8bea988429f643b388c7c11486c1bd2f(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return ps

def func_ab46d9e181594291be4a6074e9fa126c(n, a):
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return ps

def func_ad7cdd02f92945fe9598971924f88e03(n, a):
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return ps

def func_f995aeda22f84eb7aafde347855ec219(n, aa):
    a = [x for x in aa if x != 0]
    n = len(a)
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return ps



****** Cluster 1000 ******
def func_92bc7959211f439993891d3cb7295ca2(n, sum0, a):
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return j

def func_dad65aa306a34ee28db5eb99c9ab3623(n, sum0, a):
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return j



****** Cluster 1001 ******
def func_9a57ce815c504b8dbb0936ca9795656f(n, sum0, sum1):
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return i

def func_b523f305588d45568c2194e7c2c85c9b(n, sum0, sum1):
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return i



****** Cluster 1002 ******
def func_ac514bcafbd54487a06aa3a735e914aa(n, sum0, sum1):
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return ps

def func_ff1a8bbd4a174fbd919df4a30e7fc511(n, sum0, sum1):
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return ps



****** Cluster 1003 ******
def func_b221f4d75dc84a8f805ad593f5e3249f(n, sum0, sum1):
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return bestAnswer

def func_c05796c9725246359567cbf207f5c6d8(n, sum0, sum1):
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return bestAnswer



****** Cluster 1004 ******
def func_b31528386ad54ac1a3b0d235bd29cea3(n, sum0, allv, sum1):
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return v1

def func_d8a8a3141920491b8fc4b32d2b36f001(n, sum0, allv, sum1):
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return v1



****** Cluster 1005 ******
def func_c5c734f4819449a98edd94e4db4c5270(n, sum0, a):
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return i

def func_ea663ab7025345e295ff44b6bc7b9a0e(n, sum0, a):
    sum1 = [0] * (n + 1)
    for i in xrange(n):
        sum0[i + 1] = sum0[i] + a[i]
    for i in xrange(n - 1, -1, -1):
        sum1[i] = sum1[i + 1] + a[i]
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return i



****** Cluster 1006 ******
def func_c5f407b164724a6782a7824d4954f95a(n, sum0, sum1):
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    return allv

def func_f96f4dd571ba4a6ab407b553a05b5ff7(n, sum0, sum1):
    allv = sum0[-1]
    bestAnswer = allv
    j = 0
    for i in xrange(n + 1):
        if sum0[i] >= allv:
            break
        ps = allv - sum0[i]
        j = max(j - 1, i)
        while j <= n:
            v1 = sum1[j]
            tmp = max(sum0[i], v1, ps - v1)
            if tmp < bestAnswer:
                bestAnswer = tmp
            if float(v1) > ps / 2.0:
                j += 1
            else:
                break
    answer = 1.0 - float(bestAnswer) / float(allv)
    return allv



****** Cluster 1007 ******
def func_e2621c96e3ea4bae8b733b028513cdad(n):
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    return sum1

def func_e62ab93c74314298b8702a1bd38b34ea(n):
    sum0 = [0] * (n + 1)
    sum1 = [0] * (n + 1)
    return sum0



****** Cluster 1008 ******
def func_02026cb3cf194aebaf0ac66769d2545e(NT, N, t):
    PS = array([0] + list(cumsum(NT)), dtype=int64)
    S = PS[-1]
    minmax = S
    for a in range(N):
        s1 = PS[a]
        b0 = searchsorted(PS, s1 + (S - s1) / 2.0)
        assert b0 >= a
        for b in (b0 - 1, b0):
            if 0 < b and b <= N:
                mx = max(s1, PS[b] - PS[a], S - PS[b])
                if mx < minmax:
                    minmax = mx('Case #' + str(t) + ':')
    return b0

def func_3a47b9db13e8407dbd4979bd7bbd92f3(NT, N, t):
    PS = array([0] + list(cumsum(NT)), dtype=int64)
    S = PS[-1]
    minmax = S
    for a in range(N):
        s1 = PS[a]
        b0 = searchsorted(PS, s1 + (S - s1) / 2.0)
        assert b0 >= a
        for b in (b0 - 1, b0):
            if 0 < b and b <= N:
                mx = max(s1, PS[b] - PS[a], S - PS[b])
                if mx < minmax:
                    minmax = mx('Case #' + str(t) + ':')(float(S - minmax) / S)
    return b0



****** Cluster 1009 ******
def func_029a373755084dc6a974db6a5b276e9a(NT):
    PS = array([0] + list(cumsum(NT)), dtype=int64)
    S = PS[-1]
    return S

def func_8b5f2880cb7848679a1ca5da98ff2c26(NT):
    PS = array([0] + list(cumsum(NT)), dtype=int64)
    S = PS[-1]
    minmax = S
    return S

def func_9e3016bc5c144165b2439fe26c2de214(NT):
    PS = array([0] + list(cumsum(NT)), dtype=int64)
    S = PS[-1]
    minmax = S
    return minmax



****** Cluster 1010 ******
def func_0456dce5c5314a539e7db2c7cb9f9c53(N, p, s, q, r):
    NT = (arange(N, dtype=int64) * p + q) % r + s
    PS = array([0] + list(cumsum(NT)), dtype=int64)
    S = PS[-1]
    return S

def func_ccbfd667235c40efadac5a3307a9c13c(N, p, s, q, r):
    NT = (arange(N, dtype=int64) * p + q) % r + s
    PS = array([0] + list(cumsum(NT)), dtype=int64)
    S = PS[-1]
    minmax = S
    return minmax

def func_e7168e20657f470d8d9607e23118302e(N, p, s, q, r):
    NT = (arange(N, dtype=int64) * p + q) % r + s
    PS = array([0] + list(cumsum(NT)), dtype=int64)
    S = PS[-1]
    minmax = S
    return S



****** Cluster 1011 ******
def func_0ab015e50cec4a2e9fdc5baf31f1e8c6(NT, N):
    PS = array([0] + list(cumsum(NT)), dtype=int64)
    S = PS[-1]
    minmax = S
    for a in range(N):
        s1 = PS[a]
        b0 = searchsorted(PS, s1 + (S - s1) / 2.0)
        assert b0 >= a
        for b in (b0 - 1, b0):
            if 0 < b and b <= N:
                mx = max(s1, PS[b] - PS[a], S - PS[b])
                if mx < minmax:
                    minmax = mx
    return S

def func_34188f6ed3ad4ef6b58a8fbacdc92200(NT, N):
    PS = array([0] + list(cumsum(NT)), dtype=int64)
    S = PS[-1]
    minmax = S
    for a in range(N):
        s1 = PS[a]
        b0 = searchsorted(PS, s1 + (S - s1) / 2.0)
        assert b0 >= a
        for b in (b0 - 1, b0):
            if 0 < b and b <= N:
                mx = max(s1, PS[b] - PS[a], S - PS[b])
                if mx < minmax:
                    minmax = mx
    return minmax



****** Cluster 1012 ******
def func_2e8eb9cd40654de2b6b808956875e1df(N, p, s, t, q, r):
    NT = (arange(N, dtype=int64) * p + q) % r + s
    PS = array([0] + list(cumsum(NT)), dtype=int64)
    S = PS[-1]
    minmax = S
    for a in range(N):
        s1 = PS[a]
        b0 = searchsorted(PS, s1 + (S - s1) / 2.0)
        assert b0 >= a
        for b in (b0 - 1, b0):
            if 0 < b and b <= N:
                mx = max(s1, PS[b] - PS[a], S - PS[b])
                if mx < minmax:
                    minmax = mx('Case #' + str(t) + ':')
    return S

def func_3c18229021524489b3e173c81e5c636e(N, p, s, t, q, r):
    NT = (arange(N, dtype=int64) * p + q) % r + s
    PS = array([0] + list(cumsum(NT)), dtype=int64)
    S = PS[-1]
    minmax = S
    for a in range(N):
        s1 = PS[a]
        b0 = searchsorted(PS, s1 + (S - s1) / 2.0)
        assert b0 >= a
        for b in (b0 - 1, b0):
            if 0 < b and b <= N:
                mx = max(s1, PS[b] - PS[a], S - PS[b])
                if mx < minmax:
                    minmax = mx('Case #' + str(t) + ':')(float(S - minmax) / S)
    return S

def func_6b23dcfb62ef4fb59e214836d7ab7ec2(N, p, s, t, q, r):
    NT = (arange(N, dtype=int64) * p + q) % r + s
    PS = array([0] + list(cumsum(NT)), dtype=int64)
    S = PS[-1]
    minmax = S
    for a in range(N):
        s1 = PS[a]
        b0 = searchsorted(PS, s1 + (S - s1) / 2.0)
        assert b0 >= a
        for b in (b0 - 1, b0):
            if 0 < b and b <= N:
                mx = max(s1, PS[b] - PS[a], S - PS[b])
                if mx < minmax:
                    minmax = mx('Case #' + str(t) + ':')(float(S - minmax) / S)
    return minmax

def func_d1037ed735e94fa4afe64ed8be4d42bc(N, p, s, t, q, r):
    NT = (arange(N, dtype=int64) * p + q) % r + s
    PS = array([0] + list(cumsum(NT)), dtype=int64)
    S = PS[-1]
    minmax = S
    for a in range(N):
        s1 = PS[a]
        b0 = searchsorted(PS, s1 + (S - s1) / 2.0)
        assert b0 >= a
        for b in (b0 - 1, b0):
            if 0 < b and b <= N:
                mx = max(s1, PS[b] - PS[a], S - PS[b])
                if mx < minmax:
                    minmax = mx('Case #' + str(t) + ':')
    return minmax



****** Cluster 1013 ******
def func_347c4f60997f43bc8bd3db0e31be72ec(NT, N, t):
    PS = array([0] + list(cumsum(NT)), dtype=int64)
    S = PS[-1]
    minmax = S
    for a in range(N):
        s1 = PS[a]
        b0 = searchsorted(PS, s1 + (S - s1) / 2.0)
        assert b0 >= a
        for b in (b0 - 1, b0):
            if 0 < b and b <= N:
                mx = max(s1, PS[b] - PS[a], S - PS[b])
                if mx < minmax:
                    minmax = mx('Case #' + str(t) + ':')(float(S - minmax) / S)
    return a

def func_92731047dc44443c86be5886713c7d1a(NT, N, t):
    PS = array([0] + list(cumsum(NT)), dtype=int64)
    S = PS[-1]
    minmax = S
    for a in range(N):
        s1 = PS[a]
        b0 = searchsorted(PS, s1 + (S - s1) / 2.0)
        assert b0 >= a
        for b in (b0 - 1, b0):
            if 0 < b and b <= N:
                mx = max(s1, PS[b] - PS[a], S - PS[b])
                if mx < minmax:
                    minmax = mx('Case #' + str(t) + ':')
    return a



****** Cluster 1014 ******
def func_38d4e5a228e04829a03c7cc87433355b(NT, N, t):
    PS = array([0] + list(cumsum(NT)), dtype=int64)
    S = PS[-1]
    minmax = S
    for a in range(N):
        s1 = PS[a]
        b0 = searchsorted(PS, s1 + (S - s1) / 2.0)
        assert b0 >= a
        for b in (b0 - 1, b0):
            if 0 < b and b <= N:
                mx = max(s1, PS[b] - PS[a], S - PS[b])
                if mx < minmax:
                    minmax = mx('Case #' + str(t) + ':')(float(S - minmax) / S)
    return minmax

def func_a2f425adcc7f4bfab21f8532d3348189(NT, N, t):
    PS = array([0] + list(cumsum(NT)), dtype=int64)
    S = PS[-1]
    minmax = S
    for a in range(N):
        s1 = PS[a]
        b0 = searchsorted(PS, s1 + (S - s1) / 2.0)
        assert b0 >= a
        for b in (b0 - 1, b0):
            if 0 < b and b <= N:
                mx = max(s1, PS[b] - PS[a], S - PS[b])
                if mx < minmax:
                    minmax = mx('Case #' + str(t) + ':')
    return minmax

def func_aefe033bbf204bc29a7f66398f3f4ee4(NT, N, t):
    PS = array([0] + list(cumsum(NT)), dtype=int64)
    S = PS[-1]
    minmax = S
    for a in range(N):
        s1 = PS[a]
        b0 = searchsorted(PS, s1 + (S - s1) / 2.0)
        assert b0 >= a
        for b in (b0 - 1, b0):
            if 0 < b and b <= N:
                mx = max(s1, PS[b] - PS[a], S - PS[b])
                if mx < minmax:
                    minmax = mx('Case #' + str(t) + ':')(float(S - minmax) / S)
    return S

def func_c020d459c0b1491e92e7102b1460b8e9(NT, N, t):
    PS = array([0] + list(cumsum(NT)), dtype=int64)
    S = PS[-1]
    minmax = S
    for a in range(N):
        s1 = PS[a]
        b0 = searchsorted(PS, s1 + (S - s1) / 2.0)
        assert b0 >= a
        for b in (b0 - 1, b0):
            if 0 < b and b <= N:
                mx = max(s1, PS[b] - PS[a], S - PS[b])
                if mx < minmax:
                    minmax = mx('Case #' + str(t) + ':')
    return S



****** Cluster 1015 ******
def func_44afc2b922d7410e9d6791d06f9a5e04(NT, N, t):
    PS = array([0] + list(cumsum(NT)), dtype=int64)
    S = PS[-1]
    minmax = S
    for a in range(N):
        s1 = PS[a]
        b0 = searchsorted(PS, s1 + (S - s1) / 2.0)
        assert b0 >= a
        for b in (b0 - 1, b0):
            if 0 < b and b <= N:
                mx = max(s1, PS[b] - PS[a], S - PS[b])
                if mx < minmax:
                    minmax = mx('Case #' + str(t) + ':')
    return b

def func_a80e44018b4941a8a534b3434ecd5a79(NT, N, t):
    PS = array([0] + list(cumsum(NT)), dtype=int64)
    S = PS[-1]
    minmax = S
    for a in range(N):
        s1 = PS[a]
        b0 = searchsorted(PS, s1 + (S - s1) / 2.0)
        assert b0 >= a
        for b in (b0 - 1, b0):
            if 0 < b and b <= N:
                mx = max(s1, PS[b] - PS[a], S - PS[b])
                if mx < minmax:
                    minmax = mx('Case #' + str(t) + ':')(float(S - minmax) / S)
    return b



****** Cluster 1016 ******
def func_77df161d631947f191e8c8d1013affaf(N, PS):
    S = PS[-1]
    minmax = S
    for a in range(N):
        s1 = PS[a]
        b0 = searchsorted(PS, s1 + (S - s1) / 2.0)
        assert b0 >= a
        for b in (b0 - 1, b0):
            if 0 < b and b <= N:
                mx = max(s1, PS[b] - PS[a], S - PS[b])
                if mx < minmax:
                    minmax = mx
    return S

def func_7aff478c08984fe89885879c2b7b85f3(N, PS):
    S = PS[-1]
    minmax = S
    for a in range(N):
        s1 = PS[a]
        b0 = searchsorted(PS, s1 + (S - s1) / 2.0)
        assert b0 >= a
        for b in (b0 - 1, b0):
            if 0 < b and b <= N:
                mx = max(s1, PS[b] - PS[a], S - PS[b])
                if mx < minmax:
                    minmax = mx
    return minmax



****** Cluster 1017 ******
def func_ad90b64b0e454382b30a60d1bc4305e0(NT, N, t):
    PS = array([0] + list(cumsum(NT)), dtype=int64)
    S = PS[-1]
    minmax = S
    for a in range(N):
        s1 = PS[a]
        b0 = searchsorted(PS, s1 + (S - s1) / 2.0)
        assert b0 >= a
        for b in (b0 - 1, b0):
            if 0 < b and b <= N:
                mx = max(s1, PS[b] - PS[a], S - PS[b])
                if mx < minmax:
                    minmax = mx('Case #' + str(t) + ':')(float(S - minmax) / S)
    return s1

def func_f760f9661c1b471c8a27731d3cd6de2d(NT, N, t):
    PS = array([0] + list(cumsum(NT)), dtype=int64)
    S = PS[-1]
    minmax = S
    for a in range(N):
        s1 = PS[a]
        b0 = searchsorted(PS, s1 + (S - s1) / 2.0)
        assert b0 >= a
        for b in (b0 - 1, b0):
            if 0 < b and b <= N:
                mx = max(s1, PS[b] - PS[a], S - PS[b])
                if mx < minmax:
                    minmax = mx('Case #' + str(t) + ':')
    return s1



****** Cluster 1018 ******
def func_232d9c47ab014645ab9119a397f5874a(N, transistors, sums):
    t = 0
    for i in xrange(N):
        sums.append(t)
        t += transistors[i]
    sums.append(t)
    return t

def func_8550f8e589254e96afa8663a84f647fd(N, transistors, sums):
    t = 0
    for i in xrange(N):
        sums.append(t)
        t += transistors[i]
    return t



****** Cluster 1019 ******
def func_24a164acc11841d7887212d7a08ce950(N, transistors):
    total = sum(transistors)
    sums = []
    t = 0
    for i in xrange(N):
        sums.append(t)
        t += transistors[i]
    sums.append(t)
    return sums

def func_6cc922d4165f47d3891b463de93f4b1b(N, transistors):
    sums = []
    t = 0
    for i in xrange(N):
        sums.append(t)
        t += transistors[i]
    sums.append(t)
    return sums



****** Cluster 1020 ******
def func_2df969a6b3cd4f7f9c1158337afdde1a(N, transistors):
    sums = []
    t = 0
    for i in xrange(N):
        sums.append(t)
        t += transistors[i]
    sums.append(t)
    return t

def func_6a6f5f35b1e649b6b8c64ff742c2e486(N, transistors):
    sums = []
    t = 0
    for i in xrange(N):
        sums.append(t)
        t += transistors[i]
    return t

def func_a979d1e88ca54848a7afd8ee177d9938(N, transistors):
    total = sum(transistors)
    sums = []
    t = 0
    for i in xrange(N):
        sums.append(t)
        t += transistors[i]
    return t

def func_fa89fc5f522e499589a8b97c49850ce0(N, transistors):
    total = sum(transistors)
    sums = []
    t = 0
    for i in xrange(N):
        sums.append(t)
        t += transistors[i]
    sums.append(t)
    return t



****** Cluster 1021 ******
def func_2e6c74cd2c444cea9dc09f25bb0aa0bb(p, r, N, q, s):
    transistors = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(transistors)
    return i

def func_2f18c02f15634bb1b4b8fefabc7d4a79(p, r, N, q, s):
    transistors = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(transistors)
    sums = []
    return i

def func_71bcfaac54704ef38189fa3984c1c9c5(p, r, N, q, s):
    transistors = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(transistors)
    sums = []
    t = 0
    for i in xrange(N):
        sums.append(t)
        t += transistors[i]
    sums.append(t)
    return i

def func_d6f1e6162db4402b9b47b7b0b1678d6b(p, r, N, q, s):
    transistors = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(transistors)
    sums = []
    t = 0
    for i in xrange(N):
        sums.append(t)
        t += transistors[i]
    return i

def func_fe13ab0abdf24f71a500967ed68edbd9(p, r, N, q, s):
    transistors = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(transistors)
    sums = []
    t = 0
    return i



****** Cluster 1022 ******
def func_32e2642937424e318f4c8b0f0b1cbdc0(p, r, N, q, s):
    transistors = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(transistors)
    sums = []
    t = 0
    for i in xrange(N):
        sums.append(t)
        t += transistors[i]
    sums.append(t)
    return t

def func_40b19f87096a49f99be36a0448ef0ce6(p, r, N, q, s):
    transistors = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(transistors)
    sums = []
    t = 0
    for i in xrange(N):
        sums.append(t)
        t += transistors[i]
    return t

def func_9008167b779d4ffcad47e4782a9244f2(p, r, N, q, s):
    transistors = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(transistors)
    return total

def func_90c274fec15240d5aff75998732abfbc(p, r, N, q, s):
    transistors = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(transistors)
    sums = []
    t = 0
    for i in xrange(N):
        sums.append(t)
        t += transistors[i]
    sums.append(t)
    return total

def func_a45e95ffc3c443e28c13dee964ea09fe(p, r, N, q, s):
    transistors = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(transistors)
    sums = []
    t = 0
    return total

def func_cff4ce68a3eb48a3bac9e298b4a9022d(p, r, N, q, s):
    transistors = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(transistors)
    sums = []
    return total

def func_f55c0d6e5698478aa80e996058f18307(p, r, N, q, s):
    transistors = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(transistors)
    sums = []
    t = 0
    for i in xrange(N):
        sums.append(t)
        t += transistors[i]
    return total



****** Cluster 1023 ******
def func_431e7dfbbb4e4dbd84501e06f40b318e(N, transistors):
    total = sum(transistors)
    sums = []
    t = 0
    for i in xrange(N):
        sums.append(t)
        t += transistors[i]
    return sums

def func_77153f093967430d9bf3bbf80ebc01f2(N, transistors):
    sums = []
    t = 0
    for i in xrange(N):
        sums.append(t)
        t += transistors[i]
    return sums



****** Cluster 1024 ******
def func_5232f6f3096a4ed0b47b9900c3a9d072(p, r, N, q, s):
    transistors = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(transistors)
    sums = []
    t = 0
    for i in xrange(N):
        sums.append(t)
        t += transistors[i]
    return transistors

def func_5b1d3dcc00914206bd1f61c019bae7ad(p, r, N, q, s):
    transistors = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(transistors)
    sums = []
    t = 0
    return transistors

def func_89321204b20a411a977ace1019f4b08c(p, r, N, q, s):
    transistors = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(transistors)
    sums = []
    t = 0
    for i in xrange(N):
        sums.append(t)
        t += transistors[i]
    sums.append(t)
    return transistors

def func_d04a1c3ac30841ba8d977e98d879078c(p, r, N, q, s):
    transistors = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(transistors)
    return transistors

def func_d934b4abc87848dc933f47c5463fecdd(p, r, N, q, s):
    transistors = [((i * p + q) % r + s) for i in xrange(N)]
    total = sum(transistors)
    sums = []
    return transistors



****** Cluster 1025 ******
def func_5b8b4968b85744e6acbc99328888c1fa(N, sums, total):

    def can3(p):
        needed = (1 - p) * total
        for i in xrange(N - 1, 0, -1):
            if sums[i] <= needed:
                break
        else:
            return False
        for j in xrange(N - 1, i - 1, -1):
            if sums[j + 1] - sums[i] <= needed:
                break
        else:
            return False
        if total - sums[j + 1] <= needed:
            return True
        return False

    def can2(p):
        needed = (1 - p) * total
        for i in xrange(N - 1, 0, -1):
            if sums[i] <= needed:
                break
        else:
            return False
        if total - sums[i] <= needed:
            return True
        return False
    low = 0.0
    high = 1.0
    for i in xrange(40):
        g = (low + high) * 0.5
        if can3(g) or can2(g):
            low = g
        else:
            high = g
    return high

def func_8d4f2b3fda6544f28fa1b45f03174667(N, sums, total):

    def can3(p):
        needed = (1 - p) * total
        for i in xrange(N - 1, 0, -1):
            if sums[i] <= needed:
                break
        else:
            return False
        for j in xrange(N - 1, i - 1, -1):
            if sums[j + 1] - sums[i] <= needed:
                break
        else:
            return False
        if total - sums[j + 1] <= needed:
            return True
        return False

    def can2(p):
        needed = (1 - p) * total
        for i in xrange(N - 1, 0, -1):
            if sums[i] <= needed:
                break
        else:
            return False
        if total - sums[i] <= needed:
            return True
        return False
    low = 0.0
    high = 1.0
    for i in xrange(40):
        g = (low + high) * 0.5
        if can3(g) or can2(g):
            low = g
        else:
            high = g
    return g



****** Cluster 1026 ******
def func_7a72e8b16a6444ca8e7989799796018b(N, transistors, sums):
    t = 0
    for i in xrange(N):
        sums.append(t)
        t += transistors[i]
    sums.append(t)
    return i

def func_9ee455e4a2e149a8916a85b23cd53007(N, transistors, sums):
    t = 0
    for i in xrange(N):
        sums.append(t)
        t += transistors[i]
    return i



****** Cluster 1027 ******
def func_01b85ffbb17a45c89a2916b5d0512603(vsota, s, cum, b, n):
    rem = vsota - (cum[n] - cum[b])
    al = 0
    ar = b
    while al + 1 < ar:
        amid = (al + ar) // 2
        left = cum[amid]
        right = cum[b] - cum[amid]
        if left > right:
            ar = amid
        else:
            al = amid
    s = [cum[al], cum[b] - cum[al], cum[n] - cum[b]]
    return ar

def func_0652969ba3ef485099447dc180fc9bca(vsota, s, cum, b, n):
    rem = vsota - (cum[n] - cum[b])
    al = 0
    ar = b
    while al + 1 < ar:
        amid = (al + ar) // 2
        left = cum[amid]
        right = cum[b] - cum[amid]
        if left > right:
            ar = amid
        else:
            al = amid
    s = [cum[al], cum[b] - cum[al], cum[n] - cum[b]]
    s.sort()
    return ar



****** Cluster 1028 ******
def func_0a8fcc166bb04210b46db2f73cf70596(vsota, cum, b, n):
    rem = vsota - (cum[n] - cum[b])
    al = 0
    ar = b
    return rem

def func_15da570d60e344b997a020076cdf82dd(vsota, cum, b, n):
    rem = vsota - (cum[n] - cum[b])
    al = 0
    return rem

def func_fb7e3f128fe44aed93ed764974a6d9b6(vsota, cum, b, n):
    rem = vsota - (cum[n] - cum[b])
    al = 0
    ar = b
    while al + 1 < ar:
        amid = (al + ar) // 2
        left = cum[amid]
        right = cum[b] - cum[amid]
        if left > right:
            ar = amid
        else:
            al = amid
    return rem



****** Cluster 1029 ******
def func_268a5f466f2a4f36ab767412c5fb70ca(s, cum, b, n):
    al = 0
    ar = b
    while al + 1 < ar:
        amid = (al + ar) // 2
        left = cum[amid]
        right = cum[b] - cum[amid]
        if left > right:
            ar = amid
        else:
            al = amid
    s = [cum[al], cum[b] - cum[al], cum[n] - cum[b]]
    return al

def func_a530fb5fa2604b909c83b26a0cadeb75(s, cum, b, n):
    al = 0
    ar = b
    while al + 1 < ar:
        amid = (al + ar) // 2
        left = cum[amid]
        right = cum[b] - cum[amid]
        if left > right:
            ar = amid
        else:
            al = amid
    s = [cum[al], cum[b] - cum[al], cum[n] - cum[b]]
    s.sort()
    return al



****** Cluster 1030 ******
def func_2a09d4e696d844ebaac1cdffcdfab8a7(s, cum, b, n):
    al = 0
    ar = b
    while al + 1 < ar:
        amid = (al + ar) // 2
        left = cum[amid]
        right = cum[b] - cum[amid]
        if left > right:
            ar = amid
        else:
            al = amid
    s = [cum[al], cum[b] - cum[al], cum[n] - cum[b]]
    s.sort()
    return left

def func_e2da72ec51d640648f401c4bfcda296e(s, cum, b, n):
    al = 0
    ar = b
    while al + 1 < ar:
        amid = (al + ar) // 2
        left = cum[amid]
        right = cum[b] - cum[amid]
        if left > right:
            ar = amid
        else:
            al = amid
    s = [cum[al], cum[b] - cum[al], cum[n] - cum[b]]
    return left



****** Cluster 1031 ******
def func_38697314770b4a37a6a3a939299b792d(vsota, s, cum, b, n):
    rem = vsota - (cum[n] - cum[b])
    al = 0
    ar = b
    while al + 1 < ar:
        amid = (al + ar) // 2
        left = cum[amid]
        right = cum[b] - cum[amid]
        if left > right:
            ar = amid
        else:
            al = amid
    s = [cum[al], cum[b] - cum[al], cum[n] - cum[b]]
    s.sort()
    return rem

def func_e3259b6bdac348bb9fbe86204be5ecad(vsota, s, cum, b, n):
    rem = vsota - (cum[n] - cum[b])
    al = 0
    ar = b
    while al + 1 < ar:
        amid = (al + ar) // 2
        left = cum[amid]
        right = cum[b] - cum[amid]
        if left > right:
            ar = amid
        else:
            al = amid
    s = [cum[al], cum[b] - cum[al], cum[n] - cum[b]]
    return rem



****** Cluster 1032 ******
def func_54ae434b2d2d457ebc2ce310e21a3f12(s, cum, b, n):
    al = 0
    ar = b
    while al + 1 < ar:
        amid = (al + ar) // 2
        left = cum[amid]
        right = cum[b] - cum[amid]
        if left > right:
            ar = amid
        else:
            al = amid
    s = [cum[al], cum[b] - cum[al], cum[n] - cum[b]]
    return ar

def func_88bb8d366a674c8983986b4dbc7e025e(s, cum, b, n):
    al = 0
    ar = b
    while al + 1 < ar:
        amid = (al + ar) // 2
        left = cum[amid]
        right = cum[b] - cum[amid]
        if left > right:
            ar = amid
        else:
            al = amid
    s = [cum[al], cum[b] - cum[al], cum[n] - cum[b]]
    s.sort()
    return ar



****** Cluster 1033 ******
def func_5610c77d459f46e7906a9deed81b7e9b(s, cum, ar, b, n):
    s = [cum[ar], cum[b] - cum[ar], cum[n] - cum[b]]
    s.sort()
    return s

def func_d708a0becec44cd79d52e86ecb718870(s, cum, al, b, n):
    s = [cum[al], cum[b] - cum[al], cum[n] - cum[b]]
    s.sort()
    return s



****** Cluster 1034 ******
def func_919a45d8558a44ceae99b7c285a4c76f(s, cum, b, n):
    al = 0
    ar = b
    while al + 1 < ar:
        amid = (al + ar) // 2
        left = cum[amid]
        right = cum[b] - cum[amid]
        if left > right:
            ar = amid
        else:
            al = amid
    s = [cum[al], cum[b] - cum[al], cum[n] - cum[b]]
    s.sort()
    return amid

def func_fcd65948a50c4fa3ab294a9237172cd4(s, cum, b, n):
    al = 0
    ar = b
    while al + 1 < ar:
        amid = (al + ar) // 2
        left = cum[amid]
        right = cum[b] - cum[amid]
        if left > right:
            ar = amid
        else:
            al = amid
    s = [cum[al], cum[b] - cum[al], cum[n] - cum[b]]
    return amid



****** Cluster 1035 ******
def func_a2faf4b1f3234edcb40e8c82aab7264b(vsota, s, cum, b, n):
    rem = vsota - (cum[n] - cum[b])
    al = 0
    ar = b
    while al + 1 < ar:
        amid = (al + ar) // 2
        left = cum[amid]
        right = cum[b] - cum[amid]
        if left > right:
            ar = amid
        else:
            al = amid
    s = [cum[al], cum[b] - cum[al], cum[n] - cum[b]]
    s.sort()
    return amid

def func_cb272c1ef3a94239beeea8fbfa4f7504(vsota, s, cum, b, n):
    rem = vsota - (cum[n] - cum[b])
    al = 0
    ar = b
    while al + 1 < ar:
        amid = (al + ar) // 2
        left = cum[amid]
        right = cum[b] - cum[amid]
        if left > right:
            ar = amid
        else:
            al = amid
    s = [cum[al], cum[b] - cum[al], cum[n] - cum[b]]
    return amid



****** Cluster 1036 ******
def func_a361a7fb84d44a17a45fd8993edf21e0(s, cum, b, n):
    al = 0
    ar = b
    while al + 1 < ar:
        amid = (al + ar) // 2
        left = cum[amid]
        right = cum[b] - cum[amid]
        if left > right:
            ar = amid
        else:
            al = amid
    s = [cum[al], cum[b] - cum[al], cum[n] - cum[b]]
    s.sort()
    return right

def func_fea698bf101d49dd8ff396b2839e5c55(s, cum, b, n):
    al = 0
    ar = b
    while al + 1 < ar:
        amid = (al + ar) // 2
        left = cum[amid]
        right = cum[b] - cum[amid]
        if left > right:
            ar = amid
        else:
            al = amid
    s = [cum[al], cum[b] - cum[al], cum[n] - cum[b]]
    return right



****** Cluster 1037 ******
def func_a8acf9f8062c492092cb7f2a10dc3b28(vsota, s, cum, b, n):
    rem = vsota - (cum[n] - cum[b])
    al = 0
    ar = b
    while al + 1 < ar:
        amid = (al + ar) // 2
        left = cum[amid]
        right = cum[b] - cum[amid]
        if left > right:
            ar = amid
        else:
            al = amid
    s = [cum[al], cum[b] - cum[al], cum[n] - cum[b]]
    s.sort()
    return right

def func_bd875015e6224d3b890b731d74bf9e2d(vsota, s, cum, b, n):
    rem = vsota - (cum[n] - cum[b])
    al = 0
    ar = b
    while al + 1 < ar:
        amid = (al + ar) // 2
        left = cum[amid]
        right = cum[b] - cum[amid]
        if left > right:
            ar = amid
        else:
            al = amid
    s = [cum[al], cum[b] - cum[al], cum[n] - cum[b]]
    return right



****** Cluster 1038 ******
def func_aa5946ef2b2d4d5d9c7fb0bba269909a(vsota, s, cum, b, n):
    rem = vsota - (cum[n] - cum[b])
    al = 0
    ar = b
    while al + 1 < ar:
        amid = (al + ar) // 2
        left = cum[amid]
        right = cum[b] - cum[amid]
        if left > right:
            ar = amid
        else:
            al = amid
    s = [cum[al], cum[b] - cum[al], cum[n] - cum[b]]
    s.sort()
    return al

def func_b90cf9bfef10445c9993534c8ff75728(vsota, s, cum, b, n):
    rem = vsota - (cum[n] - cum[b])
    al = 0
    ar = b
    while al + 1 < ar:
        amid = (al + ar) // 2
        left = cum[amid]
        right = cum[b] - cum[amid]
        if left > right:
            ar = amid
        else:
            al = amid
    s = [cum[al], cum[b] - cum[al], cum[n] - cum[b]]
    return al



****** Cluster 1039 ******
def func_d951ebe498814d1c863d6c659bfd6ce2(vsota, s, cum, b, n):
    rem = vsota - (cum[n] - cum[b])
    al = 0
    ar = b
    while al + 1 < ar:
        amid = (al + ar) // 2
        left = cum[amid]
        right = cum[b] - cum[amid]
        if left > right:
            ar = amid
        else:
            al = amid
    s = [cum[al], cum[b] - cum[al], cum[n] - cum[b]]
    s.sort()
    return left

def func_ede3306e6f2f4458a4ec9f4ac60035e6(vsota, s, cum, b, n):
    rem = vsota - (cum[n] - cum[b])
    al = 0
    ar = b
    while al + 1 < ar:
        amid = (al + ar) // 2
        left = cum[amid]
        right = cum[b] - cum[amid]
        if left > right:
            ar = amid
        else:
            al = amid
    s = [cum[al], cum[b] - cum[al], cum[n] - cum[b]]
    return left



****** Cluster 1040 ******
def func_00b563cc3767452a85a84e80b55414ff(i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return _part1

def func_84b2b2839647409a904c5668bd859ec9(i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    return _part1

def func_aabfd4a155b24889a6c0659dd4df957e(i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return _part1

def func_e15f6204b6194d23bad560c9597fd98c(i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return _part1

def func_e5fc71c1294e43df9d15cfda03ac4b22(i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part1



****** Cluster 1041 ******
def func_0127695c8e0f4945a4371d3f7dc3b11b(i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    return _part3

def func_272bfbadfc01464f9f4b8b8bcb9c35a0(i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return _part3

def func_acacc6c4c7f6496c96d9706807dc8929(i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return _part3

def func_cab3cbcdbde1434fbe81d4b727341d95(i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return _part3

def func_ccc2ce00a3134c29a17ab377a2864cda(i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part3



****** Cluster 1042 ******
def func_0352caa370a7403abd33e7a816094c32(N, _sum, items):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return part3

def func_7c69ed29a2cb4b9594773010bf7e7e31(N, _sum, items):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part3



****** Cluster 1043 ******
def func_03f084d6c2374ab4ae2048a4612da1d7(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return ans

def func_094f05b912ae4b909e4b52e11e23c887(j, i, part1, _sum, part3, items):
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return ans

def func_1260f92e0fe04826bcca2ee8bd6532af(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return ans

def func_1c14fa72fadc415d831e80e818571e4e(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return ans

def func_23905af0608b452d9ebaadb354bdec57(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return ans

def func_24f4b4780c714f32aca6e0c7b2db2550(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return ans

def func_2e47b16e4bb047b2918364748fd7bed3(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return ans

def func_417fa557a0fd4656892e2c811679b1e2(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    return ans

def func_5d98b384197a4b729753bb49cf67b138(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return ans

def func_70003968eafc41fdbace2f08b28043d2(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return ans

def func_87b40f3673e947c9b16a534241ae86e8(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return ans

def func_a2502d70b40b48a496f7a19a58ce1fd5(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return ans

def func_b19ed6e91c6d4f6dac8ea18b0160fd0e(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return ans

def func_d00c71c91fdf471e88aa2d24861ab00e(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return ans

def func_d19edc20a78c44318b5ecc05112795d7(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return ans

def func_d8f62810e6584814ab0906b92d41ba5e(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return ans

def func_ec6526167e60414fa6810d658794f2f9(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return ans

def func_f9e7aa9c08c1417caf629da06cc7bb36(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return ans



****** Cluster 1044 ******
def func_0441ada393104f0d8f4c411b2406cb9d(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return items

def func_5de20b502a5f429e8604b3001d36302b(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return items

def func_9f78d5e9c08f4765b2092435effa1748(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return items

def func_cdcc5300d6044ee4b460c34f35eca5e7(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return items



****** Cluster 1045 ******
def func_056b7f86641940fe8f157c8029e84687(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return _sum

def func_0c3407ff324e4932beb38aee9c963b61(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    return _sum

def func_0ce3e17235824ad08b46a3d9dc52902e(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    return _sum

def func_116b935df94d4c1981713c8195fed393(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    return _sum

def func_137b18dcf7b24b27b7bc2ba47df66604(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    return _sum

def func_4a85e7da2aee4a7b922f35c1bb700cad(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    return _sum

def func_5b4772ff7e5a40558ff96b2677c80b8e(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    return _sum

def func_769943e610f0407597b4b8d6563b891d(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    return _sum

def func_87e4040eded04ff191edb3c7d62f51c0(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    return _sum

def func_95e8872142c54fd497bb822911e31fe6(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    return _sum

def func_a6b0510f92ee4369b7c763535d312ab0(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    return _sum

def func_a76eeb0b317646bdb466615db2fac227(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    return _sum

def func_e4cecf0a14b1442cb9500a4feb2a95bc(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return _sum

def func_e6040ad0a5974156885690765a9c6eb7(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    return _sum



****** Cluster 1046 ******
def func_05b974ad0822464f84fe60e856d51a84(N, _sum, part, items):
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _i

def func_23b84150b4914c79a5ae09dc82e9c733(N, _sum, part, items):
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return i



****** Cluster 1047 ******
def func_06475ef212c2484898dba65d4157dac2(j, i, part1, _part1, part3):
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i

def func_52a0526dcb9948e296dac77215e9be3b(j, i, _part3, _j, part3):
    _part3 = part3
    _i = i
    _j = j
    return _i



****** Cluster 1048 ******
def func_0897b3cfcb6845f9a349bb766bc7c479(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return i

def func_2873f7b0e6f2494faca59c1053323730(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return i

def func_401e983473ff42a5a8acab30e24d0edf(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return i

def func_63322b5faf9a47a291196e99d6415b2c(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return i

def func_6c9613c471e049a9855dac29fdc3b9b6(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _i

def func_d000324b17ef44daa18dc506eba01ab3(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return i

def func_f45628b05d5b42d991f0a7b58d3d519d(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return i

def func_ffd4dfde24584be9ab3758631a1578c8(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _i



****** Cluster 1049 ******
def func_09d0e74ad7e644dea3f9329dd48da8e0(N, _sum, items):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return ans

def func_b3c56575812c448f8fe47f327569263b(N, _sum, items):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return ans



****** Cluster 1050 ******
def func_0a3484ae214249b8af47286517574986(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return _sum

def func_3991b4e7fd554a8eac5366f4c677bd3a(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return _sum

def func_67dddff898764810a1421329613f95e8(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return _sum

def func_a1cfbd29c46a4930a2a44572c4aadbcd(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return _sum



****** Cluster 1051 ******
def func_0a48c613bd8443a9be31cf88df4d83f0(j, i, part3):
    _part3 = part3
    _i = i
    _j = j
    return _i

def func_a4a4787e48014b94ae385b2a904ca214(j, i, _j):
    _i = i
    _j = j
    return _i

def func_dd626619aafd47b191721174f9e90fa5(_part3, part1, part3):
    _part1 = part1
    _part3 = part3
    return _part1



****** Cluster 1052 ******
def func_0e642eeb6ac04a6abeb5d0bfc27f8436(i, _part3, part1, _sum, part3, items
    ):
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return _part2

def func_3a4cb01a399c4b92b8313aae53efaf1a(j, _part3, part1, _sum, part3, items
    ):
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part2



****** Cluster 1053 ******
def func_10b4a05b71574556b827212d318b5a43(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _j

def func_7278f984a0f04aa4a7de4edcde69834a(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _j

def func_9517b69a96cb41f08da4cf8d05a0fff6(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _j

def func_de3bd9dc01b04c2ab1664a0907ba46a2(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _j

def func_f3308103b98349b0a5cdb366f5379fb0(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _j

def func_fe8ed9a2621a4056905874358dc38d3b(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _j



****** Cluster 1054 ******
def func_10c409fb25d24964958593022fb8bd0a(_sum):
    part = _sum / 3
    part1 = 0
    return part

def func_3d9b510fcfeb44b1958a392167f6397d(_sum):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    return part

def func_8e7983e66b88472c8b68084898085705(_sum):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    return part

def func_c5b1f230113b4d31a7aaff037bf338c5(_sum):
    part = _sum / 3
    part1 = 0
    part2 = 0
    return part



****** Cluster 1055 ******
def func_1116f5d93e54470cad250c46c8e5bb64(part1, _sum, part3):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return _part3

def func_2dcd5dad485c4105a0d56e481ee6f9a7(part1, _sum, part3):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return _part3

def func_94cc7775d0134b6c9e9623892ca55ed6(_sum, _part1, part3):
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return _part3

def func_cc4f13ba2b054d06a47a72ac964bcf05(part1, _sum, part3):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part3

def func_d0e5ef873dd94df69ced0e517b49c81f(j, i, part3):
    _part3 = part3
    _i = i
    _j = j
    return _part3

def func_eb1cdc6be003403a8fb31d9647049b3c(part1, _part1, part3):
    _part1 = part1
    _part3 = part3
    return _part3



****** Cluster 1056 ******
def func_117ae607674f417aa20588b5497280e0(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    return items

def func_2d7be371d8c440308e68eca127ee2cb9(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    return items

def func_350c87657cf44134b842d9e43ce5feee(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    return items

def func_4136bb2e04f14b44b55029457aca8621(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    return items

def func_615557f9b941492a881560a3bf6060d2(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    return items

def func_73f2e71248304b88980882e3bfe23809(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    return items

def func_7afa2d1e05624b31985df418a26fe6ca(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    return items

def func_80ebd70cc61a41c993e6ed707f116fcb(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    return items

def func_a54bf394b8854ee588d7b9e3c70cca06(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    return items

def func_b25f32b5bfd84ae39c488f6cf8bfbddf(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return items

def func_b9de639e8b2a4849b00fdcc4f35595c8(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    return items

def func_ccc0aa048ec846d18b715f42b5742acb(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    return items

def func_e098ef4d7d6b4954aeca7c501b8908aa(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    return items

def func_e120ab8974d148b980b6e92a8df8eb48(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    return items

def func_e59035b89dd64f71b57b382c830cb0b5(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return items



****** Cluster 1057 ******
def func_11c3ee1fe7a2460c94f7ea2563ad07a3(ans, _part3, _sum, _part1):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2

def func_6e8c510347cc4025a2b393da16cf44df(ans, _part3, _sum, _part1):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2

def func_9666d51262dd4410862a83f60b0d160a(ans, _part3, _sum, _part1):
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2



****** Cluster 1058 ******
def func_12c78ac208f740649688615bcadc91fc(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part3

def func_1d58feb5fc5b41c0b3eba476d9781c97(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return _part3

def func_280c3000c0d049b3a6c575666c4c63d2(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part3

def func_37b8837297454d038d9f215ece4757a4(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part3

def func_3dcc4cdbb11e4c1ab94b5ee155ad1dae(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    return _part3

def func_4668c1e0a58d4d8da1021887c22427b6(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part3

def func_5f2250ac7d694ea0a698dc5aae47fd09(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part3

def func_ed3f0f14247f4f7fb38d4b5b2c15a692(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part3



****** Cluster 1059 ******
def func_1392717442d847fc9793132aeec53ee2(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part2

def func_15bebce4d08c47d2b109842d0366a7e3(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part2

def func_1c70bdfc2aec497d99a7967ec95f8272(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part2

def func_5c3fec96dc994f6b8ddaadd5abf73ae1(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2

def func_847546213b804b42a2c3a38b5358a18f(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part2

def func_ed899a3cf5f742b3b4d0a6c4c55cd61e(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part2



****** Cluster 1060 ******
def func_15ac539abf80447e8c158d9b51bb871f(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _i

def func_8e42588fec6f45bf9035f4e0b683b21d(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _i

def func_dd7cef9150474233aa53c18121a0d5b2(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _i



****** Cluster 1061 ******
def func_18bdf6c388d5484ea98c99519c297da2(i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return ans

def func_6091ab35bbe44246a2acc76f7da78eeb(i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    return ans

def func_9bfecfdf62c94206ba77c971cb5a4740(i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return ans



****** Cluster 1062 ******
def func_1a2ea272ab6141b7ae6e7d89bbf66218(j, ans, i, _sum, part3, items):
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _j

def func_bd3862318e504eb390013df3cec4824d(j, ans, i, _part3, _sum, items):
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _j



****** Cluster 1063 ******
def func_1acc009c20b246b8815fbce76a32d3e0(i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    return _part2

def func_c6fe2d8f104d4dbbab36a762f699a940(i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return _part2



****** Cluster 1064 ******
def func_22b8956ee6314e10af311972fbd276c5(i, part1, _part1, part3):
    _part1 = part1
    _part3 = part3
    _i = i
    return _i

def func_f57c410d07634cb699a3fa0067800f9a(i, _part3, part1, part3):
    _part1 = part1
    _part3 = part3
    _i = i
    return _i



****** Cluster 1065 ******
def func_26872f7f651641c58df6b52b4b827ed6(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return part

def func_2890fe821a4f401689c74851d0e90bf9(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    return part

def func_36e0e4a41d94413db36db600756837f2(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    return part

def func_43e0ee31ab3b408f91f942f7298b07cf(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    return part

def func_52fc974cbd944e9a9b02f13a1483b74e(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    return part

def func_a1712fdb45f14e149cd8968850951673(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    return part

def func_aaaa058e19f445b68f6ffe4e9c0f31f8(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    return part

def func_aee55e80eddc45ba84b487019279934b(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    return part

def func_bf31b68d8c5c491baf33b8656936158d(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return part

def func_ca13b9345d00450a83875f51c57062ba(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    return part

def func_e6de47f328714cd2b369830f51bc0781(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    return part

def func_f32637d1130a4620ad09a16aa5192aad(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    return part



****** Cluster 1066 ******
def func_2953dc5df454444c98525540b9d70bbc(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return part1

def func_2955e9e9e01c4fe8963b486068a8799c(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return part1

def func_31fed92f52594971b580b7d304086cd5(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return part1

def func_6ec1c4732c7b43679e46da326ca36000(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part1

def func_8394267731f748c1a45087a8e91c17e8(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part1

def func_afd0ca261f0a4128bd0461ecebc9af78(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part1

def func_c05bd0e1e28b45859fb8b86e1905723e(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part1

def func_c8e8d1d9069e4ff4a3313e996ab92fd2(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return part1



****** Cluster 1067 ******
def func_2a3d6ae7f7b94262b330176c047f00c6(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part1

def func_388bd58622ad4eeaaa0103569910513b(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part1

def func_3ca4447d13c14d1d80a6ce6cc5599478(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return _part1

def func_41107dec112f4d4cba6ca1f19be6fa4e(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part1

def func_478d378089ad4262b90e7f673e166087(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part1

def func_4bed3b0c8dce4f059acd3a381068284b(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _part1

def func_88903c5d031e4ef2835dff38c38ead70(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part1

def func_8df66df40b19443db3999e8aace2a53c(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part1

def func_8ea861782f814637a1104963e62da464(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part1

def func_c1be858b697c4695a0b0580bd35a23b8(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part1

def func_c4d9ff00ef524dd98862299f3b4102b5(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part1

def func_ed196d377f4244db9a90f38c629879a4(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part1

def func_f7ff472befa34eae9db03b1e6479f83a(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part1



****** Cluster 1068 ******
def func_2b1905b7be79462a961bd967f1ea00ed(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return ans

def func_3ba8499c8e8541688d612a716d309792(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return ans

def func_4a167d14408e43f3af659f77239cad6a(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return ans

def func_6af08b6cb62a437cb15fbd185c2a65dd(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return ans



****** Cluster 1069 ******
def func_2b4eeea4cfca4860b5d711caddc47435(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i

def func_39e6524a67c44db48c1968dff158c0e0(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _i

def func_9e0fdd9b0fcb4ae180f9996c280de219(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _i

def func_db3bba41971749acbe9a66ed30a41f90(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _i

def func_e77c9fa4be4347dbb6b979648057b9cd(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part3 += items[_j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part3 == max(_part1, _part2, _part3):
            break
        _j -= 1
    return _i



****** Cluster 1070 ******
def func_2bb4874c0fb947818f4199219dc0cb1c(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return j

def func_a64db2f60d9f4a3babff5e784933c249(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return j



****** Cluster 1071 ******
def func_2f91d15fcebb4ce89be5edebb22d28ac(i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return ans

def func_f04c19a0839d4c3b9ef8ea6f0c649c9d(i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return ans



****** Cluster 1072 ******
def func_373048ee424e45dca5a433e7cf44431b(N, _sum, part, items):
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return ans

def func_77ac8683c68447beb89422b8adb43703(N, _sum, part, items):
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return ans



****** Cluster 1073 ******
def func_38e847794e954a0cb61436fcbbdf318a(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    return _part2

def func_3faa6a4f741d419f9e30ee0659a505c6(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2

def func_4af194cd4d3749ca883a330e6c0e3dbe(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part2

def func_b3849fa5831a490db939287100d1f11d(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    return _part2



****** Cluster 1074 ******
def func_38ff056b18834646b15ff677d678093c(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part2

def func_d8cd63dfd4ce4ccbb9ff189e6f6f7f4b(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part2



****** Cluster 1075 ******
def func_395b9e063eac4520b1b8d1f4d967d5fd(N, _sum, items):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part1

def func_7a7acbcd078645a9915d8730ea7dfcc7(N, _sum, items):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part1

def func_898e324322684768a9cdbb703dee290e(N, _sum, items):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return part1



****** Cluster 1076 ******
def func_3d1a640060ff4800987e5fc74c7ac26d(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _sum

def func_e51abe5a44434eb9b2b2c612fe346751(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _sum



****** Cluster 1077 ******
def func_3d47389cbaa8401e8292c699c39d9ea7(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part1

def func_c2ab0658cdc94733b8f66fce817274d6(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    return _part1

def func_e413caea753b41d6b207f37c97f54e1b(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    return _part1



****** Cluster 1078 ******
def func_497a85fd15234b6fa05adbf29edb9cc8(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part3

def func_5a0ffad0636349d7ae33fa8cea2385e1(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    return _part3

def func_67692b4263a142b197862a29de33e83f(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    return _part3

def func_6c744d7f94fa4110aedcd968c9c1ede3(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part3

def func_9e1fa5d585634b3ab2b104e0832ac157(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part3

def func_b6d312b27bf5485595272107cf8d2126(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part3

def func_c353b964bc33477d88e7d469bd672ff1(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part3

def func_f925e42a0d0a4247a196cdab35a0d223(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part3



****** Cluster 1079 ******
def func_4ce719bf55614a75a26f083a7be2df29(part1, _sum, part3):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2

def func_95dfa27186f343c89fd088f230ea1bcd(part1, _sum, part3):
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return _part2

def func_f9ef0588114947498e22739ccd3424ba(part1, _sum, part3):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return _part2



****** Cluster 1080 ******
def func_4ff39aa0f0ef4fe99f2a65225c397600(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return j

def func_546b98d1ca8148c3903628b1dd33885f(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return j

def func_76f99e5bd6c647fdad25959e62dce16d(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return j

def func_a0693b4cd6684473825b5f15f0092149(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return j



****** Cluster 1081 ******
def func_53bd6c2dcb744f968f68312640138dac(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return j

def func_727506ba13e842ec8196e1a916957043(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    return j



****** Cluster 1082 ******
def func_565def852ef043908f60561666394e7b(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part

def func_8cf864a14c044ce38dc0b38d5d5b6168(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part



****** Cluster 1083 ******
def func_59404e6aba4d4d23ad707f2424485064(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _j

def func_804d861e8e9e4b909f02fbf51d968e98(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _j



****** Cluster 1084 ******
def func_63d8442717434d96be59df8a5c1872c3(N, _sum, items):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return i

def func_7411ce662398486d9410e73c6d4a29e2(N, _sum, items):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return i

def func_e225fcadbd8342338bbc389248b55c5c(N, _sum, items):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _i



****** Cluster 1085 ******
def func_643c4384e8de46f28ead58d85743c0ea(items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    return part

def func_693ad89e74234539acb22be90c452573(items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    return part

def func_7c0f08add8b242db8c4aef3b20d87e53(items):
    _sum = sum(items)
    part = _sum / 3
    return part

def func_d6a80f40c8e94d5eb798e2b36981e2e4(items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    return part

def func_dee3b22d1ee94722bae62d1ef9f8c049(items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    return part



****** Cluster 1086 ******
def func_65295e950cf54972b21a09ec8ec61019(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    return _part2

def func_6e346776e43f493694dee6ef3304d05c(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    return _part2

def func_7f5f6ef57d0f4d20afd92fcb4e904192(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    return _part2

def func_c28e4f8d5af6414db41f73e8e9bae3a0(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    _part1 = part1
    _part3 = part3
    _i = i
    return _part2

def func_c5a1fcd25b4d41119dde1aee0f2fe289(j, i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3 + items[j]
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _part2



****** Cluster 1087 ******
def func_6678d70eae454912936eeabf3329b9cb(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part1

def func_f1c5a76479604b88a56603fe6f16338b(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part1



****** Cluster 1088 ******
def func_6ec8ab2c72a7416ba1e2629959c8d1e5(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part3

def func_9f4378ef96ee4a8fbd9fd1fbb600bbdb(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return part3

def func_a05bb545ecd1480bbda2bc5f7a037e17(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part3

def func_ebed8402a84c4aacb3ea72d82d8eb8ea(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return part3



****** Cluster 1089 ******
def func_6ee30fa8e171419b85b7f923753a83c7(N, _sum, items):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return j

def func_b4efa46d90cc4cad9e175dfd9613dad3(N, _sum, items):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return j

def func_f5e807ac13c04d3cbfe2275fb40aa59c(N, _sum, items):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _j



****** Cluster 1090 ******
def func_76e22ca1809146eab09703ec611828b9(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return ans

def func_efcdc11208d54127b60d4954cab47c07(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return ans



****** Cluster 1091 ******
def func_7e542c7d15be426eaa475f797e6408be(N, _sum, items):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part

def func_f99933add4dd4402981c7d20810c9dcc(N, _sum, items):
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return part



****** Cluster 1092 ******
def func_8256f0d6f4ef4914ae40a6f54c1afe0a(j, ans, i, _sum, part3, items):
    _part3 = part3
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _i

def func_affbfb2e87a0420ebd4f134597186733(j, ans, i, _part3, _sum, items):
    _i = i
    _j = j
    while _i <= _j:
        _part1 += items[_i]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        if _part1 == max(_part1, _part2, _part3):
            break
        _i += 1
    return _i



****** Cluster 1093 ******
def func_827f6d2a49594084ad39a6c9c01e4820(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part2

def func_c82cefdf98b642b193b07a2e6413019f(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part2



****** Cluster 1094 ******
def func_9cc3a26bf3e34fb0a42bd16686fe317e(N, _sum, part, items):
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part1

def func_cc2d57d7bd0f49b283c16fd8184503ed(N, _sum, part, items):
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return part1



****** Cluster 1095 ******
def func_9e9e20fb29f84a83904dc284f90beafe(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return items

def func_a38b9bf10d244609b0ae76dc0938a37b(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return items



****** Cluster 1096 ******
def func_a193ba113b0d43bb87d41759c89e2744(i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    return _part2

def func_d067b97c3e554420b72f771c2a967941(i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    return _part2

def func_f514898d7d8b4a03af77c60c8cab1fc7(i, part1, _sum, part3, items):
    ans = 0.0
    _part1 = part1
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
    _part1 = part1 + items[i]
    _part3 = part3
    _part2 = _sum - _part1 - _part3
    return _part2



****** Cluster 1097 ******
def func_af0490eb38774118b20c3734a12b81d3(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _i

def func_f9978a425beb4a688c99ebc63ba4df2a(N, items):
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return i



****** Cluster 1098 ******
def func_ba65e8271e5c46808b84ce258f06cbc3(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return part

def func_d53f55dffa054042a899f8e84928f9ad(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return part

def func_d910f8c55c8a4d289511125f51ba7691(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    return part

def func_e44cabd5f5ab4fc7a99698de6c5f2eac(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    return part



****** Cluster 1099 ******
def func_c7ba9e780f68478387f23c7b866a8b9c(r, N, p, s, q):
    """ solve the problem """
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part3

def func_d5896bb0312f4cd3bf7974f5ea750d74(r, N, p, s, q):
    items = [((i * p + q) % r + s) for i in range(N)]
    _sum = sum(items)
    part = _sum / 3
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _part3



****** Cluster 1100 ******
def func_c818a87292f04269a4f6ac5481a5bc05(N, _sum, part, items):
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return _j

def func_f39cea7f5d9949da8ebdf71ecef69ddd(N, _sum, part, items):
    part1 = 0
    part2 = 0
    part3 = 0
    i = 0
    j = N - 1
    while part1 + items[i] < part:
        part1 += items[i]
        i += 1
    while part3 + items[j] < part:
        part3 += items[j]
        j -= 1
    if i == j:
        return (part1 + part3) / _sum
    else:
        ans = 0.0
        _part1 = part1
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1 + items[i]
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3 + items[j]
        _part2 = _sum - _part1 - _part3
        ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part1 += items[_i]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part1 == max(_part1, _part2, _part3):
                break
            _i += 1
        _part1 = part1
        _part3 = part3
        _i = i
        _j = j
        while _i <= _j:
            _part3 += items[_j]
            _part2 = _sum - _part1 - _part3
            ans = max(ans, (_sum - max(_part1, _part2, _part3)) / _sum)
            if _part3 == max(_part1, _part2, _part3):
                break
            _j -= 1
    return j



****** Cluster 1101 ******
def func_02e4da32debf474281b452239311df55(dev, n):
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    return j

def func_07ecb73b43d4471dabe6ce9249b106f7(dev, n):
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    return j

def func_6465fd1d2516469b8ae53910fc29ed81(dev, n):
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    return j

def func_70bf3801836c48129c8519be48f9d937(dev, n):
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    return j

def func_b7e9d5dec7b94f61839665ff8430c667(dev, n):
    tot = sum(dev)
    i = 0
    j = n - 1
    return j



****** Cluster 1102 ******
def func_065aa76adfb94e3b9f9f9a2a0a2d0ac5(dev, ti, tot, n):
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))('Case #' + str(ti
                ) + ':')
    return j

def func_87566d0ca9ea4f6284e65ff52e5d0005(dev, ti, tot, n):
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))('Case #' + str(ti
                ) + ':')(best / tot)
    return j



****** Cluster 1103 ******
def func_065e212ce4e44e579d331ddd63011451(s, p, r, n, q):
    dev = [((i * p + q) % r + s) for i in range(n)]
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    return mtot

def func_1a88cb05ef2d4bb7a266e84531ad9a8c(s, p, r, n, q):
    dev = [((i * p + q) % r + s) for i in range(n)]
    tot = sum(dev)
    i = 0
    j = n - 1
    return tot

def func_3ca9166ebde44938a692d3dc80ea0367(s, p, r, n, q):
    dev = [((i * p + q) % r + s) for i in range(n)]
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    return tot

def func_3e611df74a4c4274b48fdd589d8ea39c(s, p, r, n, q):
    dev = [((i * p + q) % r + s) for i in range(n)]
    tot = sum(dev)
    return tot

def func_45760d7b68444aaf88126d15d89cfca1(s, p, r, n, q):
    dev = [((i * p + q) % r + s) for i in range(n)]
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    return mtot

def func_52bc3fb7c58c4b9faa78d9f42ca9a8cd(s, p, r, n, q):
    dev = [((i * p + q) % r + s) for i in range(n)]
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    return tot

def func_5a9b9f5494d540dd9d6cf930280a50e1(s, p, r, n, q):
    dev = [((i * p + q) % r + s) for i in range(n)]
    tot = sum(dev)
    i = 0
    return tot

def func_5e6c33e96366438393ba4947e95a9f1e(s, p, r, n, q):
    dev = [((i * p + q) % r + s) for i in range(n)]
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    return tot

def func_9fc71cd3e402473f8088a92dbc349dec(s, p, r, n, q):
    dev = [((i * p + q) % r + s) for i in range(n)]
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))
    return tot

def func_e088969077244bc3bc6a5b1095dfa639(s, p, r, n, q):
    dev = [((i * p + q) % r + s) for i in range(n)]
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    return mtot

def func_fdaab430cde6486e9070efb28f150461(s, p, r, n, q):
    dev = [((i * p + q) % r + s) for i in range(n)]
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    return tot



****** Cluster 1104 ******
def func_0af05d0f80cd4a63a0094f0d35edaaa2(s, ti, p, r, n, q):
    dev = [((i * p + q) % r + s) for i in range(n)]
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))('Case #' + str(ti
                ) + ':')(best / tot)
    return ltot

def func_598647fa5a4a416aae1d9e7aab6eba24(s, ti, p, r, n, q):
    dev = [((i * p + q) % r + s) for i in range(n)]
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))('Case #' + str(ti
                ) + ':')(best / tot)
    return i

def func_6cc3b7fc722a4051838898693e6bc70b(s, ti, p, r, n, q):
    dev = [((i * p + q) % r + s) for i in range(n)]
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))('Case #' + str(ti
                ) + ':')
    return i

def func_884ad6f03b6c4a268c029ba390203ff3(s, ti, p, r, n, q):
    dev = [((i * p + q) % r + s) for i in range(n)]
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))('Case #' + str(ti
                ) + ':')
    return ltot



****** Cluster 1105 ******
def func_0e336a93d96b47ebaec25403249d51fc(s, p, r, n, q):
    dev = [((i * p + q) % r + s) for i in range(n)]
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    return j

def func_3ac162436909400281887ae16c088b21(s, p, r, n, q):
    dev = [((i * p + q) % r + s) for i in range(n)]
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    return j

def func_4fa58e9997294ee392a7aedeb19ad9c8(s, p, r, n, q):
    dev = [((i * p + q) % r + s) for i in range(n)]
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    return j

def func_b0e3cd7ae0a84532bcccdaba82c3f363(s, p, r, n, q):
    dev = [((i * p + q) % r + s) for i in range(n)]
    tot = sum(dev)
    i = 0
    j = n - 1
    return j

def func_b72a72a040ec402280d0f9255329aeb6(s, p, r, n, q):
    dev = [((i * p + q) % r + s) for i in range(n)]
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    return j



****** Cluster 1106 ******
def func_1641bda795644b68b36d6a393918f227(dev, ti, n):
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))('Case #' + str(ti
                ) + ':')(best / tot)
    return mtot

def func_1b5e478f355949b4bc890dd4a216cd60(dev, ti, n):
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))('Case #' + str(ti
                ) + ':')
    return tot

def func_a431e9f87c924597ab7013e6f414fbea(dev, ti, n):
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))('Case #' + str(ti
                ) + ':')
    return mtot

def func_a76b3ad53d894e64b108d45a1be9fa0b(dev, ti, n):
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))('Case #' + str(ti
                ) + ':')(best / tot)
    return tot



****** Cluster 1107 ******
def func_179e44900069425f938e8438452b7d6f(dev, ti, tot, n):
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))('Case #' + str(ti
                ) + ':')(best / tot)
    return i

def func_5681641770604e61bf0a22970aae4d67(dev, ti, tot, n):
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))('Case #' + str(ti
                ) + ':')(best / tot)
    return ltot

def func_87fec14436d74ab69be1922cf50b1875(dev, ti, tot, n):
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))('Case #' + str(ti
                ) + ':')
    return i

def func_935718f29061409685f8494ee04507e7(dev, ti, tot, n):
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))('Case #' + str(ti
                ) + ':')
    return ltot



****** Cluster 1108 ******
def func_1ef47252ae694c4a8fca18e33d34824c(dev, ti, n):
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))('Case #' + str(ti
                ) + ':')
    return best

def func_410cdb4289f0453695a7d2dd42ff768a(dev, ti, n):
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))('Case #' + str(ti
                ) + ':')(best / tot)
    return ltot

def func_465a26922a5442aa800ddc3e487382ef(dev, ti, n):
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))('Case #' + str(ti
                ) + ':')
    return i

def func_7c030f0873d84e18915163cd72657633(dev, ti, n):
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))('Case #' + str(ti
                ) + ':')
    return ltot

def func_8e035f659c20433d83b264eba92d7935(dev, ti, n):
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))('Case #' + str(ti
                ) + ':')(best / tot)
    return i

def func_adb4cc1156c5402a9ef9b21b1e95af9e(dev, ti, n):
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))('Case #' + str(ti
                ) + ':')(best / tot)
    return best



****** Cluster 1109 ******
def func_2d4b2147433e45a09eb13a81fcdcde87(s, p, r, n, q):
    dev = [((i * p + q) % r + s) for i in range(n)]
    tot = sum(dev)
    return dev

def func_32ecb752aea74d0cbec6141c096d2fe7(s, p, r, n, q):
    dev = [((i * p + q) % r + s) for i in range(n)]
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    return dev

def func_3475a57dab334348bf32eca3a2d53e6b(s, p, r, n, q):
    dev = [((i * p + q) % r + s) for i in range(n)]
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))
    return dev

def func_3993d2807cae47bcb103bc79254d6390(s, p, r, n, q):
    dev = [((i * p + q) % r + s) for i in range(n)]
    tot = sum(dev)
    i = 0
    return dev

def func_693b227803b94627999f1bd00c014d00(s, p, r, n, q):
    dev = [((i * p + q) % r + s) for i in range(n)]
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    return dev

def func_a77be68914464c6d9b6b3b7ab74e09d3(s, p, r, n, q):
    dev = [((i * p + q) % r + s) for i in range(n)]
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    return dev

def func_acafa283124e472ea282d1bf82a46e9c(s, p, r, n, q):
    dev = [((i * p + q) % r + s) for i in range(n)]
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    return dev

def func_c109f1ec82ad4a6483ca57fc7728bb79(s, p, r, n, q):
    dev = [((i * p + q) % r + s) for i in range(n)]
    tot = sum(dev)
    i = 0
    j = n - 1
    return dev



****** Cluster 1110 ******
def func_393415ed1b6346829db518159c7d0c37(s, ti, p, r, n, q):
    dev = [((i * p + q) % r + s) for i in range(n)]
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))('Case #' + str(ti
                ) + ':')(best / tot)
    return j

def func_9516b963fdc14e32a2da7525f8668dbb(s, ti, p, r, n, q):
    dev = [((i * p + q) % r + s) for i in range(n)]
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))('Case #' + str(ti
                ) + ':')
    return j



****** Cluster 1111 ******
def func_3eed8e5b93f84d0fa99d0e7d950469dc(dev, ti, tot, n):
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))('Case #' + str(ti
                ) + ':')(best / tot)
    return j

def func_e420555aa7b8416088d60d5934b08a0b(dev, ti, tot, n):
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))('Case #' + str(ti
                ) + ':')
    return j



****** Cluster 1112 ******
def func_48dc26eec0e244f19dc8616000bdafb0(dev, ti, n):
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))('Case #' + str(ti
                ) + ':')
    return j

def func_8e2a0b3c49fc4bb1accda2e1488144c5(dev, ti, n):
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))('Case #' + str(ti
                ) + ':')(best / tot)
    return j



****** Cluster 1113 ******
def func_514cc1bf02514c54990c3f210f74aabe(s, ti, p, r, n, q):
    dev = [((i * p + q) % r + s) for i in range(n)]
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))('Case #' + str(ti
                ) + ':')
    return dev

def func_b1e5a40384884710b6185a1fae20796d(s, ti, p, r, n, q):
    dev = [((i * p + q) % r + s) for i in range(n)]
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))('Case #' + str(ti
                ) + ':')(best / tot)
    return dev



****** Cluster 1114 ******
def func_5b8b9d9c775741a4b19cf889808e1431(s, ti, p, r, n, q):
    dev = [((i * p + q) % r + s) for i in range(n)]
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))('Case #' + str(ti
                ) + ':')
    return tot

def func_c89479984ce047558edcac331586f711(s, ti, p, r, n, q):
    dev = [((i * p + q) % r + s) for i in range(n)]
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))('Case #' + str(ti
                ) + ':')(best / tot)
    return mtot

def func_cafe858aebc74bc6936335b6369e0706(s, ti, p, r, n, q):
    dev = [((i * p + q) % r + s) for i in range(n)]
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))('Case #' + str(ti
                ) + ':')
    return mtot

def func_d1d0c75cd5cf4b1db4a22e5e84e81f93(s, ti, p, r, n, q):
    dev = [((i * p + q) % r + s) for i in range(n)]
    tot = sum(dev)
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))('Case #' + str(ti
                ) + ':')(best / tot)
    return tot



****** Cluster 1115 ******
def func_5d8764bab2654d009cf7c8ff07d1728d(dev, ti, tot, n):
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))('Case #' + str(ti
                ) + ':')
    return mtot

def func_d54fda7ee49041909864c480d7a52cd5(dev, ti, tot, n):
    i = 0
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))('Case #' + str(ti
                ) + ':')(best / tot)
    return mtot



****** Cluster 1116 ******
def func_844928ab35e74731b66c1aae79122418(dev, ti, tot):
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))('Case #' + str(ti
                ) + ':')
    return mtot

def func_eb24cd0092434e4a867956641cf32134(dev, ti, tot):
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))('Case #' + str(ti
                ) + ':')(best / tot)
    return mtot



****** Cluster 1117 ******
def func_8f4ff4f0a8ca4885a89ffdbb91218b0a(dev, ti, tot, n):
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))('Case #' + str(ti
                ) + ':')
    return mtot

def func_cdf61ee2c80a4555a38e07053a20ede0(dev, ti, tot, n):
    j = n - 1
    ltot = 0
    mtot = tot
    rtot = 0
    best = 0
    while ltot < mtot > rtot:
        if ltot + dev[i] < rtot + dev[j]:
            ltot += dev[i]
            mtot -= dev[i]
            i += 1
            best = max(best, tot - max(ltot, mtot, rtot))
        else:
            rtot += dev[j]
            mtot -= dev[j]
            j -= 1
            best = max(best, tot - max(ltot, mtot, rtot))('Case #' + str(ti
                ) + ':')(best / tot)
    return mtot



****** Cluster 1118 ******
def func_25b4c1a47dc644b0a14ef62c9206630e(p, n, l):
    q = [(p[i] / l[i]) for i in xrange(n)]
    r = [(q[i], -i) for i in xrange(n)]
    r.sort()
    return q

def func_48f4692d277a48e8896695522d60dacb(p, n, l):
    q = [(p[i] / l[i]) for i in xrange(n)]
    r = [(q[i], -i) for i in xrange(n)]
    r.sort()
    r.reverse()
    return q

def func_cb4f9625c3c04021852940c141455440(p, n, l):
    q = [(p[i] / l[i]) for i in xrange(n)]
    r = [(q[i], -i) for i in xrange(n)]
    return q



****** Cluster 1119 ******
def func_7a639edb4de24e4aaac9665c0ca3ce79(p, n, l):
    q = [(p[i] / l[i]) for i in xrange(n)]
    r = [(q[i], -i) for i in xrange(n)]
    r.sort()
    return i

def func_ccfad4079d564bb09ce98524df264968(p, n, l):
    q = [(p[i] / l[i]) for i in xrange(n)]
    r = [(q[i], -i) for i in xrange(n)]
    r.sort()
    r.reverse()
    return i

def func_d3cf319acb7c4f948fd18751dfbf4940(p, n, l):
    q = [(p[i] / l[i]) for i in xrange(n)]
    r = [(q[i], -i) for i in xrange(n)]
    return i



****** Cluster 1120 ******
def func_05ae3473661d4621954dcbc5c786137f(x, ymin, y):
    count = 0
    total = 0
    for i in xrange(len(y)):
        if y[i] == ymin:
            count += 1
            total += y[i] - x[i]
    return i

def func_f3bf99596e134d45a4e92a0a58f92d8d(x, ymin, y):
    count = 0
    total = 0
    for i in xrange(len(y)):
        if y[i] == ymin:
            count += 1
            total += y[i] - x[i]
    if y[i] == ymin:
        count += 1
        total += y[i] - x[i]
    return i



****** Cluster 1121 ******
def func_078aea5dbbe6401a8267cefa73b24182(N, x):
    for i in xrange(N, 37):
        x.append(0)
    x = sorted(x, reverse=True)
    rmax = 0.0
    y = [x[i] for i in xrange(len(x))]
    r = calc(x, y, 0)
    return x

def func_19a407c73ac84281b58fb2139fee74fc(N, x):
    for i in xrange(N, 37):
        x.append(0)
    x = sorted(x, reverse=True)
    return x

def func_1d3a89a6327243cdbc40d5ee2a9b17ee(N, x):
    for i in xrange(N, 37):
        x.append(0)
    x = sorted(x, reverse=True)
    rmax = 0.0
    y = [x[i] for i in xrange(len(x))]
    r = calc(x, y, 0)
    if r > rmax:
        rmax = r
    return y

def func_511f47b0339a4fee92232f6942d98ee5(N, x):
    for i in xrange(N, 37):
        x.append(0)
    x = sorted(x, reverse=True)
    rmax = 0.0
    y = [x[i] for i in xrange(len(x))]
    return x

def func_92685add00684ad583ce85dec31aa1d7(N, x):
    for i in xrange(N, 37):
        x.append(0)
    x = sorted(x, reverse=True)
    rmax = 0.0
    return x

def func_973ef26adc8543f2a6eb13b7d1ddbf7e(N, x):
    for i in xrange(N, 37):
        x.append(0)
    x = sorted(x, reverse=True)
    rmax = 0.0
    y = [x[i] for i in xrange(len(x))]
    r = calc(x, y, 0)
    return y

def func_9b435325e6204802826345df75eb7fe8(N, x):
    for i in xrange(N, 37):
        x.append(0)
    x = sorted(x, reverse=True)
    rmax = 0.0
    y = [x[i] for i in xrange(len(x))]
    return y

def func_c9fca4393ca84cfba8611645494dc7f6(N, x):
    for i in xrange(N, 37):
        x.append(0)
    x = sorted(x, reverse=True)
    rmax = 0.0
    y = [x[i] for i in xrange(len(x))]
    r = calc(x, y, 0)
    if r > rmax:
        rmax = r
    return x



****** Cluster 1122 ******
def func_0c0b1f1574c34366bf12f5c42df6772f(x):
    x = sorted(x, reverse=True)
    rmax = 0.0
    y = [x[i] for i in xrange(len(x))]
    r = calc(x, y, 0)
    return x

def func_18fc8c7e787b450bb9ba27326af7b455(x):
    x = sorted(x, reverse=True)
    rmax = 0.0
    y = [x[i] for i in xrange(len(x))]
    return y

def func_5b6a99b0a72b4180afce44a1abf9d739(x):
    x = sorted(x, reverse=True)
    rmax = 0.0
    return x

def func_91eea5b756ff45f29ee3825ea3605915(x):
    x = sorted(x, reverse=True)
    rmax = 0.0
    y = [x[i] for i in xrange(len(x))]
    return x

def func_cd1ffe6cf48a4ddf95ae09856ef25442(x):
    x = sorted(x, reverse=True)
    rmax = 0.0
    y = [x[i] for i in xrange(len(x))]
    r = calc(x, y, 0)
    return y

def func_f27aa97d5d1143b8be88cc074c901be7(x):
    x = sorted(x, reverse=True)
    rmax = 0.0
    y = [x[i] for i in xrange(len(x))]
    r = calc(x, y, 0)
    if r > rmax:
        rmax = r
    return x

def func_fb15750fb73e4dd0be3242b7eed94786(x):
    x = sorted(x, reverse=True)
    rmax = 0.0
    y = [x[i] for i in xrange(len(x))]
    r = calc(x, y, 0)
    if r > rmax:
        rmax = r
    return y



****** Cluster 1123 ******
def func_1284f445b63242fdb08e36749579adfc(x, ymin, y):
    count = 0
    total = 0
    for i in xrange(len(y)):
        if y[i] == ymin:
            count += 1
            total += y[i] - x[i]
    if y[i] == ymin:
        count += 1
        total += y[i] - x[i]
    return count

def func_bb8af76fd61d47e7a21a7389892851ba(x, ymin, y):
    count = 0
    total = 0
    for i in xrange(len(y)):
        if y[i] == ymin:
            count += 1
            total += y[i] - x[i]
    return count



****** Cluster 1124 ******
def func_27cea206c8cd4e91ad3101db3b732c29(b, x, ymin, y):
    count = 0
    total = 0
    for i in xrange(len(y)):
        if y[i] == ymin:
            count += 1
            total += y[i] - x[i]
    if y[i] == ymin:
        count += 1
        total += y[i] - x[i]
    res = total * 36.0 / count - b
    return res

def func_d44498afb8de44fa93ef8fd10db012bc(b, x, ymin, y):
    count = 0
    total = 0
    for i in xrange(len(y)):
        if y[i] == ymin:
            count += 1
            total += y[i] - x[i]
    if y[i] == ymin:
        count += 1
        total += y[i] - x[i]
    res = total * 36.0 / count - b
    return res



****** Cluster 1125 ******
def func_299993e8e94849f583cb6989c1e81c8b(N, x, B):
    for i in xrange(N, 37):
        x.append(0)
    x = sorted(x, reverse=True)
    rmax = 0.0
    y = [x[i] for i in xrange(len(x))]
    r = calc(x, y, 0)
    if r > rmax:
        rmax = r
    for i in xrange(B):
        jmin = 0
        hmin = y[0]
        for j in xrange(37):
            if y[j] < hmin:
                hmin = y[j]
                jmin = j
        y[jmin] += 1
        r = calc(x, y, i + 1)
        if r > rmax:
            rmax = r
    if y[j] < hmin:
        hmin = y[j]
        jmin = j
    return rmax

def func_b0f53d11cb45452f95083754bce00e93(N, x, B):
    for i in xrange(N, 37):
        x.append(0)
    x = sorted(x, reverse=True)
    rmax = 0.0
    y = [x[i] for i in xrange(len(x))]
    r = calc(x, y, 0)
    if r > rmax:
        rmax = r
    for i in xrange(B):
        jmin = 0
        hmin = y[0]
        for j in xrange(37):
            if y[j] < hmin:
                hmin = y[j]
                jmin = j
        y[jmin] += 1
        r = calc(x, y, i + 1)
        if r > rmax:
            rmax = r
    if y[j] < hmin:
        hmin = y[j]
        jmin = j
    return rmax



****** Cluster 1126 ******
def func_2e342d9d1d1c4d3a8d13f4e9f378da27(x, y):
    ymin = min(y)
    count = 0
    total = 0
    for i in xrange(len(y)):
        if y[i] == ymin:
            count += 1
            total += y[i] - x[i]
    return i

def func_8bd8b61319be4c829226ae185fcc2948(x, y):
    ymin = min(y)
    count = 0
    total = 0
    for i in xrange(len(y)):
        if y[i] == ymin:
            count += 1
            total += y[i] - x[i]
    if y[i] == ymin:
        count += 1
        total += y[i] - x[i]
    return i



****** Cluster 1127 ******
def func_34647b34cd7442beb8400f1d46ad0c50(x, ymin, y):
    total = 0
    for i in xrange(len(y)):
        if y[i] == ymin:
            count += 1
            total += y[i] - x[i]
    if y[i] == ymin:
        count += 1
        total += y[i] - x[i]
    return i

def func_3b1ad5de56f34682846c220d7a5e5757(x, ymin, y):
    total = 0
    for i in xrange(len(y)):
        if y[i] == ymin:
            count += 1
            total += y[i] - x[i]
    return i

def func_ff4273a1244844299bb9236748a74798(x, ymin, y):
    for i in xrange(len(y)):
        if y[i] == ymin:
            count += 1
            total += y[i] - x[i]
    if y[i] == ymin:
        count += 1
        total += y[i] - x[i]
    return i



****** Cluster 1128 ******
def func_5f283a214ef04e65be93e64af93666d5(b, x, y):
    ymin = min(y)
    count = 0
    total = 0
    for i in xrange(len(y)):
        if y[i] == ymin:
            count += 1
            total += y[i] - x[i]
    if y[i] == ymin:
        count += 1
        total += y[i] - x[i]
    res = total * 36.0 / count - b
    return res

def func_aa129ab375634bfcaae66194bb274d35(b, x, y):
    ymin = min(y)
    count = 0
    total = 0
    for i in xrange(len(y)):
        if y[i] == ymin:
            count += 1
            total += y[i] - x[i]
    if y[i] == ymin:
        count += 1
        total += y[i] - x[i]
    res = total * 36.0 / count - b
    return res



****** Cluster 1129 ******
def func_620db0da1ca0418fbb5084054492a309(x, B):
    x = sorted(x, reverse=True)
    rmax = 0.0
    y = [x[i] for i in xrange(len(x))]
    r = calc(x, y, 0)
    if r > rmax:
        rmax = r
    for i in xrange(B):
        jmin = 0
        hmin = y[0]
        for j in xrange(37):
            if y[j] < hmin:
                hmin = y[j]
                jmin = j
        y[jmin] += 1
        r = calc(x, y, i + 1)
        if r > rmax:
            rmax = r
    return i

def func_b10ef9c0feea40be916d4a90821f27e0(x, B):
    rmax = 0.0
    y = [x[i] for i in xrange(len(x))]
    r = calc(x, y, 0)
    if r > rmax:
        rmax = r
    for i in xrange(B):
        jmin = 0
        hmin = y[0]
        for j in xrange(37):
            if y[j] < hmin:
                hmin = y[j]
                jmin = j
        y[jmin] += 1
        r = calc(x, y, i + 1)
        if r > rmax:
            rmax = r
    return i



****** Cluster 1130 ******
def func_6c38a64cc98248cf9735f4f7bb053359(x, B):
    x = sorted(x, reverse=True)
    rmax = 0.0
    y = [x[i] for i in xrange(len(x))]
    r = calc(x, y, 0)
    if r > rmax:
        rmax = r
    for i in xrange(B):
        jmin = 0
        hmin = y[0]
        for j in xrange(37):
            if y[j] < hmin:
                hmin = y[j]
                jmin = j
        y[jmin] += 1
        r = calc(x, y, i + 1)
        if r > rmax:
            rmax = r
    return x

def func_bf3f65ed609f458b82a94050e79b9f23(x, B):
    x = sorted(x, reverse=True)
    rmax = 0.0
    y = [x[i] for i in xrange(len(x))]
    r = calc(x, y, 0)
    if r > rmax:
        rmax = r
    for i in xrange(B):
        jmin = 0
        hmin = y[0]
        for j in xrange(37):
            if y[j] < hmin:
                hmin = y[j]
                jmin = j
        y[jmin] += 1
        r = calc(x, y, i + 1)
        if r > rmax:
            rmax = r
    return y



****** Cluster 1131 ******
def func_72cca91946b144bbb6e6021c73a6d0fb(x, y):
    ymin = min(y)
    count = 0
    total = 0
    for i in xrange(len(y)):
        if y[i] == ymin:
            count += 1
            total += y[i] - x[i]
    return ymin

def func_fcb7a290ff7f43c39dceb6684f72c8ce(x, y):
    ymin = min(y)
    count = 0
    total = 0
    for i in xrange(len(y)):
        if y[i] == ymin:
            count += 1
            total += y[i] - x[i]
    if y[i] == ymin:
        count += 1
        total += y[i] - x[i]
    return ymin



****** Cluster 1132 ******
def func_7da1817e5ba943ed9473ad68482cb938(N, x):
    for i in xrange(N, 37):
        x.append(0)
    x = sorted(x, reverse=True)
    rmax = 0.0
    y = [x[i] for i in xrange(len(x))]
    r = calc(x, y, 0)
    return i

def func_859b242a6a8a4a97b0f72771b62c215a(N, x):
    for i in xrange(N, 37):
        x.append(0)
    x = sorted(x, reverse=True)
    rmax = 0.0
    y = [x[i] for i in xrange(len(x))]
    r = calc(x, y, 0)
    if r > rmax:
        rmax = r
    return i

def func_b51370b087e842ec94fb40291463a9d2(N, x):
    for i in xrange(N, 37):
        x.append(0)
    x = sorted(x, reverse=True)
    rmax = 0.0
    y = [x[i] for i in xrange(len(x))]
    return i



****** Cluster 1133 ******
def func_89de1acfa7c44ac58de3790af7a57cf3(x, ymin, y):
    count = 0
    total = 0
    for i in xrange(len(y)):
        if y[i] == ymin:
            count += 1
            total += y[i] - x[i]
    return total

def func_d0e1ab92f2934c7ebac9f2da166ff31a(x, ymin, y):
    count = 0
    total = 0
    for i in xrange(len(y)):
        if y[i] == ymin:
            count += 1
            total += y[i] - x[i]
    if y[i] == ymin:
        count += 1
        total += y[i] - x[i]
    return total



****** Cluster 1134 ******
def func_09d50d245d154281b64e12a951ac2890(_bets, B):
    while len(_bets) < 37:
        _bets.append(0)
    _bets.sort()
    best = 0.0
    for num_min in xrange(1, 37):
        bets = list(_bets)

        def cost(size):
            t = 0
            for i in xrange(num_min):
                assert size >= bets[i]
                t += size - bets[i]
            for i in xrange(num_min, 37):
                if bets[i] <= size:
                    t += size + 1 - bets[i]
            return t
        low = max(bets[:num_min]) - 1
        high = 10000000000000
        while high > low:
            g = (high + low + 1) / 2
            c = cost(g)
            if c > B:
                high = g - 1
            else:
                low = g
                amount_bet = g * num_min - sum(bets[:num_min])
                best = max(amount_bet * 36.0 / num_min - c, best)
    return high

def func_f083b6a748e744929aff4f8baa009dad(_bets, B):
    while len(_bets) < 37:
        _bets.append(0)
    _bets.sort()
    best = 0.0
    for num_min in xrange(1, 37):
        bets = list(_bets)

        def cost(size):
            t = 0
            for i in xrange(num_min):
                assert size >= bets[i]
                t += size - bets[i]
            for i in xrange(num_min, 37):
                if bets[i] <= size:
                    t += size + 1 - bets[i]
            return t
        low = max(bets[:num_min]) - 1
        high = 10000000000000
        while high > low:
            g = (high + low + 1) / 2
            c = cost(g)
            if c > B:
                high = g - 1
            else:
                low = g
                amount_bet = g * num_min - sum(bets[:num_min])
                best = max(amount_bet * 36.0 / num_min - c, best)
    return low



****** Cluster 1135 ******
def func_320f340e00ea4c73975617839c211163(_bets, num_min):
    bets = list(_bets)

    def cost(size):
        t = 0
        for i in xrange(num_min):
            assert size >= bets[i]
            t += size - bets[i]
        for i in xrange(num_min, 37):
            if bets[i] <= size:
                t += size + 1 - bets[i]
        return t
    low = max(bets[:num_min]) - 1
    return bets

def func_a35a606d83cd4998b8f5b311b2862b4f(_bets, num_min):
    bets = list(_bets)

    def cost(size):
        t = 0
        for i in xrange(num_min):
            assert size >= bets[i]
            t += size - bets[i]
        for i in xrange(num_min, 37):
            if bets[i] <= size:
                t += size + 1 - bets[i]
        return t
    low = max(bets[:num_min]) - 1
    high = 10000000000000
    return bets



****** Cluster 1136 ******
def func_5663f85f8e1140cd93900eaa4c2ab666(bets, num_min):

    def cost(size):
        t = 0
        for i in xrange(num_min):
            assert size >= bets[i]
            t += size - bets[i]
        for i in xrange(num_min, 37):
            if bets[i] <= size:
                t += size + 1 - bets[i]
        return t
    low = max(bets[:num_min]) - 1
    return low

def func_7d1a127ce4fd4adf9193a8e7772ac40d(bets, num_min):
    low = max(bets[:num_min]) - 1
    high = 10000000000000
    return low

def func_98d683b4b66d48e2a241f692ca21895e(_bets, num_min):
    bets = list(_bets)

    def cost(size):
        t = 0
        for i in xrange(num_min):
            assert size >= bets[i]
            t += size - bets[i]
        for i in xrange(num_min, 37):
            if bets[i] <= size:
                t += size + 1 - bets[i]
        return t
    low = max(bets[:num_min]) - 1
    return low

def func_ba53bc87f6df4bc097288575fb871940(_bets, num_min):
    bets = list(_bets)

    def cost(size):
        t = 0
        for i in xrange(num_min):
            assert size >= bets[i]
            t += size - bets[i]
        for i in xrange(num_min, 37):
            if bets[i] <= size:
                t += size + 1 - bets[i]
        return t
    low = max(bets[:num_min]) - 1
    high = 10000000000000
    return low

def func_fba2c27ba2bf445593e430fdc38fefb8(bets, num_min):

    def cost(size):
        t = 0
        for i in xrange(num_min):
            assert size >= bets[i]
            t += size - bets[i]
        for i in xrange(num_min, 37):
            if bets[i] <= size:
                t += size + 1 - bets[i]
        return t
    low = max(bets[:num_min]) - 1
    high = 10000000000000
    return low



****** Cluster 1137 ******
def func_8cb70c7a97ca4593ab99874a4c9547e9(_T, _bets, B):
    while len(_bets) < 37:
        _bets.append(0)
    _bets.sort()
    best = 0.0
    for num_min in xrange(1, 37):
        bets = list(_bets)

        def cost(size):
            t = 0
            for i in xrange(num_min):
                assert size >= bets[i]
                t += size - bets[i]
            for i in xrange(num_min, 37):
                if bets[i] <= size:
                    t += size + 1 - bets[i]
            return t
        low = max(bets[:num_min]) - 1
        high = 10000000000000
        while high > low:
            g = (high + low + 1) / 2
            c = cost(g)
            if c > B:
                high = g - 1
            else:
                low = g
                amount_bet = g * num_min - sum(bets[:num_min])
                best = max(amount_bet * 36.0 / num_min - c, best)(
                    'Case #%d: %.9f' % (_T + 1, best))
    return high

def func_d987fd1657e14f7abd8a9c42874c8145(_T, _bets, B):
    while len(_bets) < 37:
        _bets.append(0)
    _bets.sort()
    best = 0.0
    for num_min in xrange(1, 37):
        bets = list(_bets)

        def cost(size):
            t = 0
            for i in xrange(num_min):
                assert size >= bets[i]
                t += size - bets[i]
            for i in xrange(num_min, 37):
                if bets[i] <= size:
                    t += size + 1 - bets[i]
            return t
        low = max(bets[:num_min]) - 1
        high = 10000000000000
        while high > low:
            g = (high + low + 1) / 2
            c = cost(g)
            if c > B:
                high = g - 1
            else:
                low = g
                amount_bet = g * num_min - sum(bets[:num_min])
                best = max(amount_bet * 36.0 / num_min - c, best)(
                    'Case #%d: %.9f' % (_T + 1, best))
    return low



****** Cluster 1138 ******
def func_05b034cd4596424aa9f727b25ae9799a(lowest, placed, override):
    partial = [p for p in placed if p <= lowest]
    if override > 0:
        partial = partial[:-override]
    only_mine = 37 - len(placed)
    lowest_cnt = only_mine + len(partial)
    return lowest_cnt

def func_313ca3bbd50b4776b8e1cdd5a4237c60(lowest, placed, override):
    partial = [p for p in placed if p <= lowest]
    if override > 0:
        partial = partial[:-override]
    only_mine = 37 - len(placed)
    lowest_cnt = only_mine + len(partial)
    if lowest_cnt == 0:
        return 0
    ret = 0.0
    ret += lowest * 36.0 * only_mine / float(lowest_cnt)
    for p in partial:
        ret += 36.0 * (lowest - p) * 1.0 / lowest_cnt
    return lowest_cnt

def func_8d71ceedbe7e4d099e7ac25c72a969cf(lowest, placed, override):
    partial = [p for p in placed if p <= lowest]
    if override > 0:
        partial = partial[:-override]
    only_mine = 37 - len(placed)
    lowest_cnt = only_mine + len(partial)
    if lowest_cnt == 0:
        return 0
    ret = 0.0
    return lowest_cnt

def func_cc50f64d990a4d2c9d17839f0df99e5c(lowest, placed, override):
    partial = [p for p in placed if p <= lowest]
    if override > 0:
        partial = partial[:-override]
    only_mine = 37 - len(placed)
    lowest_cnt = only_mine + len(partial)
    if lowest_cnt == 0:
        return 0
    return lowest_cnt

def func_f3c397f88f4647b5bdd387cf7f939f7f(lowest, placed, override):
    partial = [p for p in placed if p <= lowest]
    if override > 0:
        partial = partial[:-override]
    only_mine = 37 - len(placed)
    lowest_cnt = only_mine + len(partial)
    if lowest_cnt == 0:
        return 0
    ret = 0.0
    ret += lowest * 36.0 * only_mine / float(lowest_cnt)
    return lowest_cnt



****** Cluster 1139 ******
def func_0a833f94d5dc457ab03800aecff043da(lowest, placed, override):
    partial = [p for p in placed if p <= lowest]
    if override > 0:
        partial = partial[:-override]
    only_mine = 37 - len(placed)
    lowest_cnt = only_mine + len(partial)
    if lowest_cnt == 0:
        return 0
    ret = 0.0
    ret += lowest * 36.0 * only_mine / float(lowest_cnt)
    return p

def func_56650768666e4576b35c08ae0a8f3869(lowest, placed, override):
    partial = [p for p in placed if p <= lowest]
    if override > 0:
        partial = partial[:-override]
    only_mine = 37 - len(placed)
    lowest_cnt = only_mine + len(partial)
    if lowest_cnt == 0:
        return 0
    return p

def func_89207f0081b24f9c882a0fe8ff87e567(lowest, placed, override):
    partial = [p for p in placed if p <= lowest]
    if override > 0:
        partial = partial[:-override]
    only_mine = 37 - len(placed)
    return p

def func_a67fb82fe9964d89bbcfd06cc1ffd4fc(lowest, placed, override):
    partial = [p for p in placed if p <= lowest]
    if override > 0:
        partial = partial[:-override]
    only_mine = 37 - len(placed)
    lowest_cnt = only_mine + len(partial)
    if lowest_cnt == 0:
        return 0
    ret = 0.0
    return p

def func_af4aecab5b3b43698a7d87c2fc9612eb(lowest, placed, override):
    partial = [p for p in placed if p <= lowest]
    if override > 0:
        partial = partial[:-override]
    return p

def func_d1b63fd727154d62a0e51091702505a1(lowest, placed, override):
    partial = [p for p in placed if p <= lowest]
    if override > 0:
        partial = partial[:-override]
    only_mine = 37 - len(placed)
    lowest_cnt = only_mine + len(partial)
    return p



****** Cluster 1140 ******
def func_0ccd2127f2214a5caa91cd8829a4d56d(lowest, budget, placed, needed_budget
    ):
    remaining_budget = budget - needed_budget
    partial = len([p for p in placed if p <= lowest])
    lowest_cnt = 37 - len(placed) + partial
    return p

def func_586c631fab234f4abee0ae2b83a97524(lowest, budget, placed, needed_budget
    ):
    remaining_budget = budget - needed_budget
    partial = len([p for p in placed if p <= lowest])
    return p



****** Cluster 1141 ******
def func_2054f2fcfa7e41dbb4a8573d899868ef(lowest, placed, override):
    partial = [p for p in placed if p <= lowest]
    if override > 0:
        partial = partial[:-override]
    only_mine = 37 - len(placed)
    lowest_cnt = only_mine + len(partial)
    if lowest_cnt == 0:
        return 0
    ret = 0.0
    ret += lowest * 36.0 * only_mine / float(lowest_cnt)
    for p in partial:
        ret += 36.0 * (lowest - p) * 1.0 / lowest_cnt
    return ret

def func_8ccb6be215f946c096f353ecc7e1f8ad(lowest, placed, override):
    partial = [p for p in placed if p <= lowest]
    if override > 0:
        partial = partial[:-override]
    only_mine = 37 - len(placed)
    lowest_cnt = only_mine + len(partial)
    if lowest_cnt == 0:
        return 0
    ret = 0.0
    ret += lowest * 36.0 * only_mine / float(lowest_cnt)
    for p in partial:
        ret += 36.0 * (lowest - p) * 1.0 / lowest_cnt
    return ret



****** Cluster 1142 ******
def func_365835b6f7484ef28c09afbc58638e15(lowest, budget, placed, needed_budget
    ):
    remaining_budget = budget - needed_budget
    partial = len([p for p in placed if p <= lowest])
    lowest_cnt = 37 - len(placed) + partial
    return partial

def func_f786d824fa0743ab91f810f4b5b2ecc6(lowest, budget, placed, needed_budget
    ):
    remaining_budget = budget - needed_budget
    partial = len([p for p in placed if p <= lowest])
    return partial



****** Cluster 1143 ******
def func_425d397183b445779a8913011fabce9d(lowest, placed, override):
    partial = [p for p in placed if p <= lowest]
    if override > 0:
        partial = partial[:-override]
    only_mine = 37 - len(placed)
    lowest_cnt = only_mine + len(partial)
    return only_mine

def func_4e416694a021440aae7bd0243ccc6343(lowest, placed, override):
    partial = [p for p in placed if p <= lowest]
    if override > 0:
        partial = partial[:-override]
    only_mine = 37 - len(placed)
    lowest_cnt = only_mine + len(partial)
    if lowest_cnt == 0:
        return 0
    ret = 0.0
    ret += lowest * 36.0 * only_mine / float(lowest_cnt)
    return only_mine

def func_5ad99e5dabca410e8c85829604e3b7c3(lowest, placed, override):
    partial = [p for p in placed if p <= lowest]
    if override > 0:
        partial = partial[:-override]
    only_mine = 37 - len(placed)
    lowest_cnt = only_mine + len(partial)
    if lowest_cnt == 0:
        return 0
    return only_mine

def func_b5023ac8c4654db2b4c81f5440079cf4(lowest, placed, override):
    partial = [p for p in placed if p <= lowest]
    if override > 0:
        partial = partial[:-override]
    only_mine = 37 - len(placed)
    lowest_cnt = only_mine + len(partial)
    if lowest_cnt == 0:
        return 0
    ret = 0.0
    ret += lowest * 36.0 * only_mine / float(lowest_cnt)
    for p in partial:
        ret += 36.0 * (lowest - p) * 1.0 / lowest_cnt
    return only_mine

def func_cace8cb98f8a477ca8abb3e96100f1ed(lowest, placed, override):
    partial = [p for p in placed if p <= lowest]
    if override > 0:
        partial = partial[:-override]
    only_mine = 37 - len(placed)
    lowest_cnt = only_mine + len(partial)
    if lowest_cnt == 0:
        return 0
    ret = 0.0
    return only_mine

def func_f92bd295d2984f4d80cbf903837be8a2(lowest, placed, override):
    partial = [p for p in placed if p <= lowest]
    if override > 0:
        partial = partial[:-override]
    only_mine = 37 - len(placed)
    return only_mine



****** Cluster 1144 ******
def func_4c057f6f577c4d45b063e72434a1a8b9(lowest, budget, placed, needed_budget
    ):
    remaining_budget = budget - needed_budget
    partial = len([p for p in placed if p <= lowest])
    return remaining_budget

def func_d61fa8489acc46ac8c5a3d2490865ffb(lowest, budget, placed, needed_budget
    ):
    remaining_budget = budget - needed_budget
    partial = len([p for p in placed if p <= lowest])
    lowest_cnt = 37 - len(placed) + partial
    return remaining_budget



****** Cluster 1145 ******
def func_85f0ac2c5e5c456f8d538f8e34213058(placed):
    queue = [1] + placed + [(p - 1) for p in placed] + [(p + 1) for p in placed
        ]
    queue = sorted(set(queue))
    seen = set(queue)
    return queue

def func_9c11471050fc48fe9e5f7facb70e4c26(placed):
    ret = 0.0
    queue = [1] + placed + [(p - 1) for p in placed] + [(p + 1) for p in placed
        ]
    queue = sorted(set(queue))
    seen = set(queue)
    return queue

def func_a8c596f467194fb1b2d14694fa657671(placed):
    ret = 0.0
    queue = [1] + placed + [(p - 1) for p in placed] + [(p + 1) for p in placed
        ]
    queue = sorted(set(queue))
    return queue

def func_b163268f8ff64d3f84e3aaa6d8010b7b(placed):
    queue = [1] + placed + [(p - 1) for p in placed] + [(p + 1) for p in placed
        ]
    queue = sorted(set(queue))
    return queue



****** Cluster 1146 ******
def func_93fb4b4a66cf4947801fa25a5f3905ad(lowest, placed, override):
    partial = [p for p in placed if p <= lowest]
    if override > 0:
        partial = partial[:-override]
    only_mine = 37 - len(placed)
    lowest_cnt = only_mine + len(partial)
    if lowest_cnt == 0:
        return 0
    ret = 0.0
    ret += lowest * 36.0 * only_mine / float(lowest_cnt)
    for p in partial:
        ret += 36.0 * (lowest - p) * 1.0 / lowest_cnt
    return partial

def func_9bea198fe2ef47838825c59464b01660(lowest, placed, override):
    partial = [p for p in placed if p <= lowest]
    if override > 0:
        partial = partial[:-override]
    only_mine = 37 - len(placed)
    lowest_cnt = only_mine + len(partial)
    if lowest_cnt == 0:
        return 0
    ret = 0.0
    ret += lowest * 36.0 * only_mine / float(lowest_cnt)
    return partial

def func_b3607c87abf94237a6dc3992ce5b3f09(lowest, placed, override):
    partial = [p for p in placed if p <= lowest]
    if override > 0:
        partial = partial[:-override]
    return partial

def func_b4571d5f4f5e4f2291203ec3b53b1b57(lowest, placed, override):
    partial = [p for p in placed if p <= lowest]
    if override > 0:
        partial = partial[:-override]
    only_mine = 37 - len(placed)
    return partial

def func_cd60b6989fa34950b4f881aa607c9ec1(lowest, placed, override):
    partial = [p for p in placed if p <= lowest]
    if override > 0:
        partial = partial[:-override]
    only_mine = 37 - len(placed)
    lowest_cnt = only_mine + len(partial)
    if lowest_cnt == 0:
        return 0
    return partial

def func_debb2352e83b4aa3ba817d1a93fed623(lowest, placed, override):
    partial = [p for p in placed if p <= lowest]
    if override > 0:
        partial = partial[:-override]
    only_mine = 37 - len(placed)
    lowest_cnt = only_mine + len(partial)
    if lowest_cnt == 0:
        return 0
    ret = 0.0
    return partial

def func_ee77ce06116d4dbf8dcdf4271624d151(lowest, placed, override):
    partial = [p for p in placed if p <= lowest]
    if override > 0:
        partial = partial[:-override]
    only_mine = 37 - len(placed)
    lowest_cnt = only_mine + len(partial)
    return partial



****** Cluster 1147 ******
def func_9e543731501f45b7a9f7111e08dc6fee(lowest, placed):
    partial = len([p for p in placed if p <= lowest])
    lowest_cnt = 37 - len(placed) + partial
    return lowest_cnt

def func_bc741de4a2b64e6aae30c2d136223862(i, X):
    bigger = [j for j in X if j > i]
    remain = 37 - len(bigger)
    return remain



****** Cluster 1148 ******
def func_21606599258a4e51918e1a1ad163b758(B, X):
    while len(X) < 37:
        X.append(0)
    X.sort()
    my = [(0) for i in range(37)]
    max_profit = profit(my, X, 0)
    for i in range(1, B + 1):
        m = 0
        for j in range(1, 37):
            if my[j] + X[j] < my[m] + X[m]:
                m = j
            elif my[j] + X[j] == my[m] + X[m]:
                if my[j] < my[m]:
                    m = j
        my[m] += 1
        p = profit(my, X, i)
        if p > max_profit:
            max_profit = p
    if my[j] + X[j] < my[m] + X[m]:
        m = j
    elif my[j] + X[j] == my[m] + X[m]:
        if my[j] < my[m]:
            m = j
    if my[j] < my[m]:
        m = j
    return my

def func_dadfc8f0947d4c0ebbcf1a170817ed6d(B, X):
    while len(X) < 37:
        X.append(0)
    X.sort()
    my = [(0) for i in range(37)]
    max_profit = profit(my, X, 0)
    for i in range(1, B + 1):
        m = 0
        for j in range(1, 37):
            if my[j] + X[j] < my[m] + X[m]:
                m = j
            elif my[j] + X[j] == my[m] + X[m]:
                if my[j] < my[m]:
                    m = j
        my[m] += 1
        p = profit(my, X, i)
        if p > max_profit:
            max_profit = p
    if my[j] + X[j] < my[m] + X[m]:
        m = j
    elif my[j] + X[j] == my[m] + X[m]:
        if my[j] < my[m]:
            m = j
    return my



****** Cluster 1149 ******
def func_29dd2aee750b42a6b6e9a12783ddc8af(B, X):
    while len(X) < 37:
        X.append(0)
    X.sort()
    my = [(0) for i in range(37)]
    max_profit = profit(my, X, 0)
    for i in range(1, B + 1):
        m = 0
        for j in range(1, 37):
            if my[j] + X[j] < my[m] + X[m]:
                m = j
            elif my[j] + X[j] == my[m] + X[m]:
                if my[j] < my[m]:
                    m = j
        my[m] += 1
        p = profit(my, X, i)
        if p > max_profit:
            max_profit = p
    if my[j] + X[j] < my[m] + X[m]:
        m = j
    elif my[j] + X[j] == my[m] + X[m]:
        if my[j] < my[m]:
            m = j
    return i

def func_7d1595dba64742ad863db298f1a94b12(B, X):
    while len(X) < 37:
        X.append(0)
    X.sort()
    my = [(0) for i in range(37)]
    max_profit = profit(my, X, 0)
    for i in range(1, B + 1):
        m = 0
        for j in range(1, 37):
            if my[j] + X[j] < my[m] + X[m]:
                m = j
            elif my[j] + X[j] == my[m] + X[m]:
                if my[j] < my[m]:
                    m = j
        my[m] += 1
        p = profit(my, X, i)
        if p > max_profit:
            max_profit = p
    if my[j] + X[j] < my[m] + X[m]:
        m = j
    elif my[j] + X[j] == my[m] + X[m]:
        if my[j] < my[m]:
            m = j
    if my[j] < my[m]:
        m = j
    return i



****** Cluster 1150 ******
def func_3f9ee0347b074fb3b0323f45d2f07b0c(B, X):
    while len(X) < 37:
        X.append(0)
    X.sort()
    my = [(0) for i in range(37)]
    max_profit = profit(my, X, 0)
    for i in range(1, B + 1):
        m = 0
        for j in range(1, 37):
            if my[j] + X[j] < my[m] + X[m]:
                m = j
            elif my[j] + X[j] == my[m] + X[m]:
                if my[j] < my[m]:
                    m = j
        my[m] += 1
        p = profit(my, X, i)
        if p > max_profit:
            max_profit = p
    if my[j] + X[j] < my[m] + X[m]:
        m = j
    elif my[j] + X[j] == my[m] + X[m]:
        if my[j] < my[m]:
            m = j
    return max_profit

def func_bc3ee22e330943a89357abd1221fa3d1(B, X):
    while len(X) < 37:
        X.append(0)
    X.sort()
    my = [(0) for i in range(37)]
    max_profit = profit(my, X, 0)
    for i in range(1, B + 1):
        m = 0
        for j in range(1, 37):
            if my[j] + X[j] < my[m] + X[m]:
                m = j
            elif my[j] + X[j] == my[m] + X[m]:
                if my[j] < my[m]:
                    m = j
        my[m] += 1
        p = profit(my, X, i)
        if p > max_profit:
            max_profit = p
    if my[j] + X[j] < my[m] + X[m]:
        m = j
    elif my[j] + X[j] == my[m] + X[m]:
        if my[j] < my[m]:
            m = j
    if my[j] < my[m]:
        m = j
    return max_profit

def func_c223218c85fd4f9998fbfedc6f1c4533(B, X):
    while len(X) < 37:
        X.append(0)
    X.sort()
    my = [(0) for i in range(37)]
    max_profit = profit(my, X, 0)
    for i in range(1, B + 1):
        m = 0
        for j in range(1, 37):
            if my[j] + X[j] < my[m] + X[m]:
                m = j
            elif my[j] + X[j] == my[m] + X[m]:
                if my[j] < my[m]:
                    m = j
        my[m] += 1
        p = profit(my, X, i)
        if p > max_profit:
            max_profit = p
    if my[j] + X[j] < my[m] + X[m]:
        m = j
    elif my[j] + X[j] == my[m] + X[m]:
        if my[j] < my[m]:
            m = j
    if my[j] < my[m]:
        m = j
    return max_profit



****** Cluster 1151 ******
def func_0220b8b95e2f4d08a87e72afde47853a(b, a):
    tmp = a.index(min(a))
    a[tmp] += 1
    b[tmp] += 1
    m = min(a)
    res = 0.0
    return tmp

def func_399b6dbe24014a1680252802d15c79c0(b, a):
    tmp = a.index(min(a))
    a[tmp] += 1
    b[tmp] += 1
    return tmp

def func_a757134cc01a4b7494dd7e2e68d5c38f(b, a):
    tmp = a.index(min(a))
    a[tmp] += 1
    b[tmp] += 1
    m = min(a)
    return tmp

def func_f5b1c812d4ed45228c5e32f89e4f0d49(b, a):
    tmp = a.index(min(a))
    a[tmp] += 1
    b[tmp] += 1
    m = min(a)
    res = 0.0
    k = 0
    return tmp



****** Cluster 1152 ******
def func_1562616a2e7844a89e1bfe19ddd0910a(tmp, b, a):
    b[tmp] += 1
    m = min(a)
    res = 0.0
    k = 0
    return m

def func_49b1e71395b243cfb69da22947072bba(tmp, b, a):
    b[tmp] += 1
    m = min(a)
    return m

def func_fb235b8e0ecf4af88bbf82042ad72755(tmp, b, a):
    b[tmp] += 1
    m = min(a)
    res = 0.0
    return m



****** Cluster 1153 ******
def func_233ecc5ab3bb477fbb5d83dfc8e7d298(tmp, b, a):
    a[tmp] += 1
    b[tmp] += 1
    m = min(a)
    res = 0.0
    k = 0
    return m

def func_5c0449f52fb34d7db5b14ebf32c93764(tmp, b, a):
    a[tmp] += 1
    b[tmp] += 1
    m = min(a)
    res = 0.0
    return m

def func_82b4ead6e6194fe4b1c1ea6cd62a1939(tmp, b, a):
    a[tmp] += 1
    b[tmp] += 1
    m = min(a)
    return m



****** Cluster 1154 ******
def func_24e0f124a5e44a53b0e994509ce00e7b(b, a):
    tmp = a.index(min(a))
    a[tmp] += 1
    b[tmp] += 1
    m = min(a)
    res = 0.0
    k = 0
    return m

def func_55fab70b74304ed990e8713d3f74dbdd(b, a):
    tmp = a.index(min(a))
    a[tmp] += 1
    b[tmp] += 1
    m = min(a)
    return m

def func_782ef66b5f534f91940aabf24cbfe737(b, a):
    tmp = a.index(min(a))
    a[tmp] += 1
    b[tmp] += 1
    m = min(a)
    res = 0.0
    return m



****** Cluster 1155 ******
def func_05303aabccd04dad92763b2a58f0fdb1(n, s, b, x):
    x = sorted(x)
    lo = min(x)
    hi = max(x)
    while lo < hi:
        mid = (lo + hi + 1) / 2
        if ok(b, n, x, s, mid):
            lo = mid
        else:
            hi = mid - 1
    y = lo
    return y

def func_8b93731958e743cea911fc145bc2acf9(n, s, b, x):
    x = sorted(x)
    lo = min(x)
    hi = max(x)
    while lo < hi:
        mid = (lo + hi + 1) / 2
        if ok(b, n, x, s, mid):
            lo = mid
        else:
            hi = mid - 1
    y = lo
    return lo

def func_a284247d232848b2811304fb78e5674e(n, s, b, x):
    x = sorted(x)
    lo = min(x)
    hi = max(x)
    while lo < hi:
        mid = (lo + hi + 1) / 2
        if ok(b, n, x, s, mid):
            lo = mid
        else:
            hi = mid - 1
    return hi

def func_b34ed897e9314793885083c17ce70390(n, s, b, x):
    x = sorted(x)
    lo = min(x)
    hi = max(x)
    while lo < hi:
        mid = (lo + hi + 1) / 2
        if ok(b, n, x, s, mid):
            lo = mid
        else:
            hi = mid - 1
    y = lo
    return hi

def func_e235afadecf34dd6be0a3f3533b0f8f2(n, s, b, x):
    x = sorted(x)
    lo = min(x)
    hi = max(x)
    while lo < hi:
        mid = (lo + hi + 1) / 2
        if ok(b, n, x, s, mid):
            lo = mid
        else:
            hi = mid - 1
    return lo



****** Cluster 1156 ******
def func_10982bccfe184fe5990feddd628eb987(n, s, b, x):
    x = sorted(x)
    lo = min(x)
    hi = max(x)
    while lo < hi:
        mid = (lo + hi + 1) / 2
        if ok(b, n, x, s, mid):
            lo = mid
        else:
            hi = mid - 1
    return x

def func_d1b1163061af4f88aacc5a0de624412a(n, s, b, x):
    x = sorted(x)
    lo = min(x)
    hi = max(x)
    while lo < hi:
        mid = (lo + hi + 1) / 2
        if ok(b, n, x, s, mid):
            lo = mid
        else:
            hi = mid - 1
    y = lo
    return x



****** Cluster 1157 ******
def func_1ea2edac273a4d109cf104bca5e3dc45(n, s, b, x):
    if len(x) < 37:
        x = x + [0] * (37 - len(x))
    x = sorted(x)
    lo = min(x)
    hi = max(x)
    while lo < hi:
        mid = (lo + hi + 1) / 2
        if ok(b, n, x, s, mid):
            lo = mid
        else:
            hi = mid - 1
    y = lo
    return lo

def func_3d68793b43ff4169a81f2930f380dc54(n, s, b, x):
    if len(x) < 37:
        x = x + [0] * (37 - len(x))
    x = sorted(x)
    lo = min(x)
    hi = max(x)
    while lo < hi:
        mid = (lo + hi + 1) / 2
        if ok(b, n, x, s, mid):
            lo = mid
        else:
            hi = mid - 1
    y = lo
    return hi

def func_8c5a44c9fac64d53b3180740a70a7779(n, s, b, x):
    if len(x) < 37:
        x = x + [0] * (37 - len(x))
    x = sorted(x)
    lo = min(x)
    hi = max(x)
    while lo < hi:
        mid = (lo + hi + 1) / 2
        if ok(b, n, x, s, mid):
            lo = mid
        else:
            hi = mid - 1
    return hi

def func_a7fb2effe43c46999358554945da3649(n, s, b, x):
    if len(x) < 37:
        x = x + [0] * (37 - len(x))
    x = sorted(x)
    lo = min(x)
    hi = max(x)
    while lo < hi:
        mid = (lo + hi + 1) / 2
        if ok(b, n, x, s, mid):
            lo = mid
        else:
            hi = mid - 1
    y = lo
    return y

def func_f737a2a5856c487982c2b888e0762838(n, s, b, x):
    if len(x) < 37:
        x = x + [0] * (37 - len(x))
    x = sorted(x)
    lo = min(x)
    hi = max(x)
    while lo < hi:
        mid = (lo + hi + 1) / 2
        if ok(b, n, x, s, mid):
            lo = mid
        else:
            hi = mid - 1
    return lo



****** Cluster 1158 ******
def func_273c2be545644bd8900777837a2318d3(x):
    x = sorted(x)
    lo = min(x)
    hi = max(x)
    return x

def func_27e8b9ab54c249af9796db4e19aa35e7(x):
    x = sorted(x)
    lo = min(x)
    return x

def func_2875bc7241234311877688a950fe5e7c(x):
    x.sort()
    cx = list(x)
    sx = sum(x)
    return cx

def func_aa8510e7e9404957b6a27324c4795f10(x):
    x.sort()
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    return cx

def func_d2ddc87a2c0a41acbca869d05edb2b9d(x):
    x.sort()
    cx = list(x)
    return cx



****** Cluster 1159 ******
def func_2bd4397a4b2f41f1bcabeddf6686dfa7(n, s, b, x):
    if len(x) < 37:
        x = x + [0] * (37 - len(x))
    x = sorted(x)
    lo = min(x)
    hi = max(x)
    while lo < hi:
        mid = (lo + hi + 1) / 2
        if ok(b, n, x, s, mid):
            lo = mid
        else:
            hi = mid - 1
    return x

def func_5c2df4559a8c4d199790698bf7498707(n, s, b, x):
    if len(x) < 37:
        x = x + [0] * (37 - len(x))
    x = sorted(x)
    lo = min(x)
    hi = max(x)
    while lo < hi:
        mid = (lo + hi + 1) / 2
        if ok(b, n, x, s, mid):
            lo = mid
        else:
            hi = mid - 1
    y = lo
    return x



****** Cluster 1160 ******
def func_30b667c55439447db33e192b65dccc55(x):
    if len(x) < 37:
        x = x + [0] * (37 - len(x))
    x = sorted(x)
    return x

def func_7af80095a25446d99fe14f8430e753ac(x):
    if len(x) < 37:
        x = x + [0] * (37 - len(x))
    x = sorted(x)
    lo = min(x)
    return x

def func_d9bcd2a71caa4aeb94d01b5eced27a7b(x):
    if len(x) < 37:
        x = x + [0] * (37 - len(x))
    x = sorted(x)
    lo = min(x)
    hi = max(x)
    return x



****** Cluster 1161 ******
def func_4b311ade0a964126af93b8cd88c87e33(n, s, b, x):
    x = sorted(x)
    lo = min(x)
    hi = max(x)
    while lo < hi:
        mid = (lo + hi + 1) / 2
        if ok(b, n, x, s, mid):
            lo = mid
        else:
            hi = mid - 1
    y = lo
    return mid

def func_f302128ef55a4d2584b21d20cb8cdcea(n, s, b, x):
    x = sorted(x)
    lo = min(x)
    hi = max(x)
    while lo < hi:
        mid = (lo + hi + 1) / 2
        if ok(b, n, x, s, mid):
            lo = mid
        else:
            hi = mid - 1
    return mid



****** Cluster 1162 ******
def func_4c177fd760f44376bd051c1e7c00650a(n, b, x):
    ans = 0.0
    for s in range(1, 37):
        currAns = go(b, n, x, s)
        ans = max(ans, currAns)
    return ans

def func_c2e72d9d7cad40e7b65af8164636d334(n, b, x):
    ans = 0.0
    for s in range(1, 37):
        currAns = go(b, n, x, s)
        ans = max(ans, currAns)
    return ans



****** Cluster 1163 ******
def func_5f6c9a4aaaf048c48c727976d1a0d472(n, s, b, x):
    lo = min(x)
    hi = max(x)
    while lo < hi:
        mid = (lo + hi + 1) / 2
        if ok(b, n, x, s, mid):
            lo = mid
        else:
            hi = mid - 1
    return lo

def func_6e97e1b754af43779abd92d873fc6132(n, s, b, x):
    lo = min(x)
    hi = max(x)
    while lo < hi:
        mid = (lo + hi + 1) / 2
        if ok(b, n, x, s, mid):
            lo = mid
        else:
            hi = mid - 1
    y = lo
    return lo

def func_d7eb76a4b3b34c1f8641a4a12a0c2ed3(n, s, b, x):
    lo = min(x)
    hi = max(x)
    while lo < hi:
        mid = (lo + hi + 1) / 2
        if ok(b, n, x, s, mid):
            lo = mid
        else:
            hi = mid - 1
    y = lo
    return hi

def func_dac7c11dfca64bc3bf7f2a1e3a55dece(n, s, b, x):
    lo = min(x)
    hi = max(x)
    while lo < hi:
        mid = (lo + hi + 1) / 2
        if ok(b, n, x, s, mid):
            lo = mid
        else:
            hi = mid - 1
    return hi

def func_e9e971f4b7d743ecb28c2ab6cd4eaef3(n, s, b, x):
    lo = min(x)
    hi = max(x)
    while lo < hi:
        mid = (lo + hi + 1) / 2
        if ok(b, n, x, s, mid):
            lo = mid
        else:
            hi = mid - 1
    y = lo
    return y



****** Cluster 1164 ******
def func_68574e401c5b49408352f84fbd2f3159(n, s, b, x):
    lo = min(x)
    hi = max(x)
    while lo < hi:
        mid = (lo + hi + 1) / 2
        if ok(b, n, x, s, mid):
            lo = mid
        else:
            hi = mid - 1
    y = lo
    return mid

def func_ff408e9842be4e998c22f89149b41e25(n, s, b, x):
    lo = min(x)
    hi = max(x)
    while lo < hi:
        mid = (lo + hi + 1) / 2
        if ok(b, n, x, s, mid):
            lo = mid
        else:
            hi = mid - 1
    return mid



****** Cluster 1165 ******
def func_70d06905979c46808b0fa4d3098a94bc(n, s, b, x):
    if len(x) < 37:
        x = x + [0] * (37 - len(x))
    x = sorted(x)
    lo = min(x)
    hi = max(x)
    while lo < hi:
        mid = (lo + hi + 1) / 2
        if ok(b, n, x, s, mid):
            lo = mid
        else:
            hi = mid - 1
    y = lo
    return mid

def func_cb4d6843399a4822a826a0b2ec2c48e4(n, s, b, x):
    if len(x) < 37:
        x = x + [0] * (37 - len(x))
    x = sorted(x)
    lo = min(x)
    hi = max(x)
    while lo < hi:
        mid = (lo + hi + 1) / 2
        if ok(b, n, x, s, mid):
            lo = mid
        else:
            hi = mid - 1
    return mid



****** Cluster 1166 ******
def func_0525fd89c34c45f7997fdd6fa68ab7ea(x, b, n):
    x += [0] * (37 - n)
    x.sort()
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    for i in xrange(1, 37):
        crem = x[i - 1] * i - sum(x[:i])
        if b >= crem:
            cx.append(x[i - 1] + (b - crem) / i)
    cx = cx + [(y - 1) for y in cx if y]
    cx = cx + [(y + 1) for y in cx]
    cx = sorted(set(cx))
    return cx

def func_281f9d66a58f4b2aa3c7b9557641454f(x, b, n):
    x += [0] * (37 - n)
    x.sort()
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    for i in xrange(1, 37):
        crem = x[i - 1] * i - sum(x[:i])
        if b >= crem:
            cx.append(x[i - 1] + (b - crem) / i)
    cx = cx + [(y - 1) for y in cx if y]
    cx = cx + [(y + 1) for y in cx]
    cx = sorted(set(cx))
    best = 0
    return cx



****** Cluster 1167 ******
def func_053a9e1a03fb4d3892d7ab28953a0323(x, b, n):
    x += [0] * (37 - n)
    x.sort()
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    for i in xrange(1, 37):
        crem = x[i - 1] * i - sum(x[:i])
        if b >= crem:
            cx.append(x[i - 1] + (b - crem) / i)
    return mx

def func_1c477286277841ab9ecef01d810be440(x, b, n):
    x += [0] * (37 - n)
    x.sort()
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    for i in xrange(1, 37):
        crem = x[i - 1] * i - sum(x[:i])
        if b >= crem:
            cx.append(x[i - 1] + (b - crem) / i)
    cx = cx + [(y - 1) for y in cx if y]
    cx = cx + [(y + 1) for y in cx]
    cx = sorted(set(cx))
    return mx

def func_94d86a4218814d7ba0e7210049d46136(x, b, n):
    x += [0] * (37 - n)
    x.sort()
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    for i in xrange(1, 37):
        crem = x[i - 1] * i - sum(x[:i])
        if b >= crem:
            cx.append(x[i - 1] + (b - crem) / i)
    cx = cx + [(y - 1) for y in cx if y]
    return mx

def func_a6e3057018914b5bba137100af3b951b(x, b, n):
    x += [0] * (37 - n)
    x.sort()
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    for i in xrange(1, 37):
        crem = x[i - 1] * i - sum(x[:i])
        if b >= crem:
            cx.append(x[i - 1] + (b - crem) / i)
    cx = cx + [(y - 1) for y in cx if y]
    cx = cx + [(y + 1) for y in cx]
    return mx

def func_dcae4c91ad5e450199f238aa1f197245(x, b, n):
    x += [0] * (37 - n)
    x.sort()
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    for i in xrange(1, 37):
        crem = x[i - 1] * i - sum(x[:i])
        if b >= crem:
            cx.append(x[i - 1] + (b - crem) / i)
    cx = cx + [(y - 1) for y in cx if y]
    cx = cx + [(y + 1) for y in cx]
    cx = sorted(set(cx))
    best = 0
    return mx



****** Cluster 1168 ******
def func_0b2e1f3a9b454dd0aa46e9a67218e2a9(x, b, n):
    x += [0] * (37 - n)
    x.sort()
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    for i in xrange(1, 37):
        crem = x[i - 1] * i - sum(x[:i])
        if b >= crem:
            cx.append(x[i - 1] + (b - crem) / i)
    cx = cx + [(y - 1) for y in cx if y]
    cx = cx + [(y + 1) for y in cx]
    cx = sorted(set(cx))
    best = 0
    return y

def func_85691a3123a64155ae71f65e2e182532(x, b, n):
    x += [0] * (37 - n)
    x.sort()
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    for i in xrange(1, 37):
        crem = x[i - 1] * i - sum(x[:i])
        if b >= crem:
            cx.append(x[i - 1] + (b - crem) / i)
    cx = cx + [(y - 1) for y in cx if y]
    cx = cx + [(y + 1) for y in cx]
    cx = sorted(set(cx))
    return y

def func_dac67865ade047c7bc4bb34611b3447f(x, b, n):
    x += [0] * (37 - n)
    x.sort()
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    for i in xrange(1, 37):
        crem = x[i - 1] * i - sum(x[:i])
        if b >= crem:
            cx.append(x[i - 1] + (b - crem) / i)
    cx = cx + [(y - 1) for y in cx if y]
    cx = cx + [(y + 1) for y in cx]
    return y



****** Cluster 1169 ******
def func_2167822f4f6f4e7bb233101678bb1bc7(x, b, n):
    x += [0] * (37 - n)
    x.sort()
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    for i in xrange(1, 37):
        crem = x[i - 1] * i - sum(x[:i])
        if b >= crem:
            cx.append(x[i - 1] + (b - crem) / i)
    return sx

def func_23364b70a08945ba932094d14fc62d83(x, b, n):
    x += [0] * (37 - n)
    x.sort()
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    for i in xrange(1, 37):
        crem = x[i - 1] * i - sum(x[:i])
        if b >= crem:
            cx.append(x[i - 1] + (b - crem) / i)
    cx = cx + [(y - 1) for y in cx if y]
    cx = cx + [(y + 1) for y in cx]
    return sx

def func_3e076ecac0f74a6aa0768e5157d84894(x, b, n):
    x += [0] * (37 - n)
    x.sort()
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    for i in xrange(1, 37):
        crem = x[i - 1] * i - sum(x[:i])
        if b >= crem:
            cx.append(x[i - 1] + (b - crem) / i)
    cx = cx + [(y - 1) for y in cx if y]
    return sx

def func_d575c5cdea35471da566db89e878dd8d(x, b, n):
    x += [0] * (37 - n)
    x.sort()
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    for i in xrange(1, 37):
        crem = x[i - 1] * i - sum(x[:i])
        if b >= crem:
            cx.append(x[i - 1] + (b - crem) / i)
    cx = cx + [(y - 1) for y in cx if y]
    cx = cx + [(y + 1) for y in cx]
    cx = sorted(set(cx))
    return sx

def func_e824fe8955ce4dcda2da72a0fd0bd2cc(x, b, n):
    x += [0] * (37 - n)
    x.sort()
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    for i in xrange(1, 37):
        crem = x[i - 1] * i - sum(x[:i])
        if b >= crem:
            cx.append(x[i - 1] + (b - crem) / i)
    cx = cx + [(y - 1) for y in cx if y]
    cx = cx + [(y + 1) for y in cx]
    cx = sorted(set(cx))
    best = 0
    return sx



****** Cluster 1170 ******
def func_23bcf0ade954423ea8faf8334234a8eb(x, b, n):
    x += [0] * (37 - n)
    x.sort()
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    for i in xrange(1, 37):
        crem = x[i - 1] * i - sum(x[:i])
        if b >= crem:
            cx.append(x[i - 1] + (b - crem) / i)
    cx = cx + [(y - 1) for y in cx if y]
    return crem

def func_7948b6a0a91a499894a6c474eef4a9c9(x, b, n):
    x += [0] * (37 - n)
    x.sort()
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    for i in xrange(1, 37):
        crem = x[i - 1] * i - sum(x[:i])
        if b >= crem:
            cx.append(x[i - 1] + (b - crem) / i)
    cx = cx + [(y - 1) for y in cx if y]
    cx = cx + [(y + 1) for y in cx]
    return crem

def func_c3469afa95444c83b1ab66e421878e9c(x, b, n):
    x += [0] * (37 - n)
    x.sort()
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    for i in xrange(1, 37):
        crem = x[i - 1] * i - sum(x[:i])
        if b >= crem:
            cx.append(x[i - 1] + (b - crem) / i)
    cx = cx + [(y - 1) for y in cx if y]
    cx = cx + [(y + 1) for y in cx]
    cx = sorted(set(cx))
    return crem

def func_ddb29484b38e4133aafddced008ca260(x, b, n):
    x += [0] * (37 - n)
    x.sort()
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    for i in xrange(1, 37):
        crem = x[i - 1] * i - sum(x[:i])
        if b >= crem:
            cx.append(x[i - 1] + (b - crem) / i)
    return crem

def func_fe8736014d1a40cf8f9e5d3cb712c3c1(x, b, n):
    x += [0] * (37 - n)
    x.sort()
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    for i in xrange(1, 37):
        crem = x[i - 1] * i - sum(x[:i])
        if b >= crem:
            cx.append(x[i - 1] + (b - crem) / i)
    cx = cx + [(y - 1) for y in cx if y]
    cx = cx + [(y + 1) for y in cx]
    cx = sorted(set(cx))
    best = 0
    return crem



****** Cluster 1171 ******
def func_413dd86f71d44142b10cdbf1bdddf4a7(x, n):
    x += [0] * (37 - n)
    x.sort()
    cx = list(x)
    sx = sum(x)
    return cx

def func_904f6b283a714483ace35fda45627fc8(x, n):
    x += [0] * (37 - n)
    x.sort()
    cx = list(x)
    return cx

def func_ec1ec7013e83410491ae538993715ec4(x, n):
    x += [0] * (37 - n)
    x.sort()
    cx = list(x)
    sx = sum(x)
    mx = x[-1]
    return cx



****** Cluster 1172 ******
def func_0abe55d2d58a4503ad628453616c0f77(i, j, remain, X):
    other_bet = sum(j for j in X if j <= i)
    total_bet = remain * i
    return other_bet

def func_5c4b42664d81447a8f4de6877947bd5f(i, j, remain, X):
    other_bet = sum(j for j in X if j <= i)
    total_bet = remain * i
    my_bet = total_bet - other_bet
    return other_bet



****** Cluster 1173 ******
def func_5bad57163ad04ce6ac650c344a87ef01(i, j, remain, X):
    other_bet = sum(j for j in X if j <= i)
    total_bet = remain * i
    my_bet = total_bet - other_bet
    return total_bet

def func_79b69aa5d2e64c85bc72071f3c511a7d(i, j, remain, X):
    other_bet = sum(j for j in X if j <= i)
    total_bet = remain * i
    return total_bet



****** Cluster 1174 ******
def func_7ed7ee29c4e14b21812c3b78ac6692f1(i, X):
    remain_X = [j for j in X if j <= i]
    remain_X.sort(reverse=True)
    my_remove_bet = 0
    return remain_X

def func_8cc59da910df4719bca00503277a47a9(i, X):
    remain_X = [j for j in X if j <= i]
    remain_X.sort(reverse=True)
    return remain_X



****** Cluster 1175 ******
def func_07c1c9e6f0ef4c5e9d7cdd105d64e1b8(w):
    h = [0.0] * w
    hl = [0.0] * w
    return hl

def func_5e4a98bcb56148ad83ef1a7915681787(w):
    h = [0.0] * w
    hl = [0.0] * w
    return h



****** Cluster 1176 ******
def func_08f923a0a2b346e3be2911d4bee96984(L, i, target, Eat):
    todo = target - Eat
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    return x1

def func_0b44cfe4996849ebba932d6407a070d4(L, i, target, Eat):
    todo = target - Eat
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    return x1

def func_8e877b3c42c84f5aa6f18a5ab3834d40(L, i, target, Eat):
    todo = target - Eat
    x0 = L[i][0]
    x1 = L[i + 1][0]
    return x1



****** Cluster 1177 ******
def func_14a915739a90423c946a059aa4eb7777(L, i):
    x0 = L[i][0]
    x1 = L[i + 1][0]
    return x1

def func_69a024fdc3a84fb2850f758e4cc1c53a(L, i):
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    return x1



****** Cluster 1178 ******
def func_14f53af20bb44bd6b43550c836b66391(L, i, target, Eat):
    todo = target - Eat
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    return x0

def func_5d9a107b5e8c4b51bc314b23e5af50c6(L, i, target, Eat):
    todo = target - Eat
    x0 = L[i][0]
    return x0



****** Cluster 1179 ******
def func_15c84143e0bd497688c9db11076bdb6b(L, i):
    y0 = L[i][1]
    y1 = L[i + 1][1]
    return y0

def func_75bace73cc5741c88b3033d061412256(L, i):
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    return y0



****** Cluster 1180 ******
def func_36f6db760c1747b3b88d5c2daeef4b9c(L, i):
    x0 = L[i][0]
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    return y1

def func_5a16bcaf1f6f4a458b85446ec26aee07(L, i):
    x1 = L[i + 1][0]
    y0 = L[i][1]
    y1 = L[i + 1][1]
    return y1



****** Cluster 1181 ******
def func_0f29b237e7b048eea488edc70acc5158(height, nextpos, oldarea, slope):
    cutfrac = 0
    remaining = nextpos - oldarea
    if slope == 0:
        cutfrac = remaining / height
    else:
        cutfrac = (-height + (height * height + 2 * slope * remaining) ** 0.5
            ) / slope
    return cutfrac

def func_bd8d664a304d4bacb3f0d4bba6284fb1(height, nextpos, oldarea, slope):
    remaining = nextpos - oldarea
    if slope == 0:
        cutfrac = remaining / height
    else:
        cutfrac = (-height + (height * height + 2 * slope * remaining) ** 0.5
            ) / slope
    return cutfrac



****** Cluster 1182 ******
def func_3d9286b45bf240d88d270d11e1ff2b09(height, nextpos, oldarea, slope):
    cutfrac = 0
    remaining = nextpos - oldarea
    if slope == 0:
        cutfrac = remaining / height
    else:
        cutfrac = (-height + (height * height + 2 * slope * remaining) ** 0.5
            ) / slope
    return remaining

def func_bd0ffb9086294005b3b9999a2e0fc2ef(height, nextpos, oldarea, slope):
    remaining = nextpos - oldarea
    if slope == 0:
        cutfrac = remaining / height
    else:
        cutfrac = (-height + (height * height + 2 * slope * remaining) ** 0.5
            ) / slope
    return remaining



****** Cluster 1183 ******
def func_85aaf045d022487f8ad13261cb8d745f(totalarea, info):
    solnstr = ''
    cut = 1
    nextpos = totalarea * (float(cut) / info[3])
    return nextpos

def func_aa62e0c2e2df4d75a91cbea2fe958cbe(totalarea, info):
    cut = 1
    nextpos = totalarea * (float(cut) / info[3])
    return nextpos

def func_ac1448497aa3490da6965c680ffca53f(totalarea, info):
    cut = 1
    nextpos = totalarea * (float(cut) / info[3])
    area = 0
    return nextpos

def func_d352664e71c4437085052e0058b2976e(totalarea, info):
    solnstr = ''
    cut = 1
    nextpos = totalarea * (float(cut) / info[3])
    area = 0
    return nextpos
