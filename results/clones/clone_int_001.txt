

/************ 000 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    return -1;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 001 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    goto error;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 002 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    goto error;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 003 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    return -1;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 004 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    goto error;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 005 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    return -1;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 006 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    return -1;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 007 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    goto error;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 008 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    return -1;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 009 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    return -1;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 010 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    return -1;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 011 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    return -1;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 012 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    goto error;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 013 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    return -1;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 014 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    goto error;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 015 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    return -1;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 016 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    goto error;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 017 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    return -1;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 018 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    return -1;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 019 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    return -1;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 020 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    goto error;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 021 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    goto error;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 022 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    goto error;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 023 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    return -1;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 024 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    goto error;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 025 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    return -1;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 026 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    goto error;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 027 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    return -1;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 028 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    return -1;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 029 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    return -1;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 030 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    return -1;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 031 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    goto error;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 032 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    goto error;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 033 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    goto error;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 034 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    return -1;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 035 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    return -1;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 036 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    return -1;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 037 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    goto error;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 038 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    return -1;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 039 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    goto error;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 040 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    goto error;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 041 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    goto error;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 042 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    return -1;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 043 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    return -1;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 044 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    return -1;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 045 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    goto error;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 046 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    return -1;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 047 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    goto error;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 048 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    return -1;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 049 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    return -1;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 050 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    return -1;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}



/************ 051 : create_nl_socket *************/

static int create_nl_socket(int protocol)
{
  int fd;
  struct sockaddr_nl local;
  fd = socket(AF_NETLINK, SOCK_RAW, protocol);
  if (fd < 0)
    return -1;

  if (rcvbufsz)
    if (setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &rcvbufsz, sizeof(rcvbufsz)) < 0)
  {
    fprintf(stderr, "Unable to set socket rcv buf size to %d\n", rcvbufsz);
    return -1;
  }


  memset(&local, 0, sizeof(local));
  local.nl_family = AF_NETLINK;
  if (bind(fd, (struct sockaddr *) (&local), sizeof(local)) < 0)
    goto error;

  return fd;
  error:
  close(fd);

  return -1;
}

