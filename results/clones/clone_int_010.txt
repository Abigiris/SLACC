

/************ 000 : event *************/

static int event(int fd)
{
  struct uhid_event ev;
  ssize_t ret;
  memset(&ev, 0, sizeof(ev));
  ret = read(fd, &ev, sizeof(ev));
  if (ret == 0)
  {
    fprintf(stderr, "Read HUP on uhid-cdev\n");
    return -EFAULT;
  }
  else
    if (ret < 0)
  {
    fprintf(stderr, "Cannot read uhid-cdev: %m\n");
    return -errno;
  }
  else
    if (ret != (sizeof(ev)))
  {
    fprintf(stderr, "Invalid size read from uhid-dev: %ld != %lu\n", ret, sizeof(ev));
    return -EFAULT;
  }



  switch (ev.type)
  {
    case UHID_START:
      fprintf(stderr, "UHID_START from uhid-dev\n");
      break;

    case UHID_STOP:
      fprintf(stderr, "UHID_STOP from uhid-dev\n");
      break;

    case UHID_OPEN:
      fprintf(stderr, "UHID_OPEN from uhid-dev\n");
      break;

    case UHID_CLOSE:
      fprintf(stderr, "UHID_CLOSE from uhid-dev\n");
      break;

    case UHID_OUTPUT:
      fprintf(stderr, "UHID_OUTPUT from uhid-dev\n");
      break;

    case UHID_OUTPUT_EV:
      fprintf(stderr, "UHID_OUTPUT_EV from uhid-dev\n");
      break;

    default:
      fprintf(stderr, "Invalid event from uhid-dev: %u\n", ev.type);

  }

  return 0;
}



/************ 001 : event *************/

static int event(int fd)
{
  struct uhid_event ev;
  ssize_t ret;
  memset(&ev, 0, sizeof(ev));
  ret = read(fd, &ev, sizeof(ev));
  if (ret == 0)
  {
    fprintf(stderr, "Read HUP on uhid-cdev\n");
    return -EFAULT;
  }
  else
    if (ret < 0)
  {
    fprintf(stderr, "Cannot read uhid-cdev: %m\n");
    return -errno;
  }
  else
    if (ret != (sizeof(ev)))
  {
    fprintf(stderr, "Invalid size read from uhid-dev: %ld != %lu\n", ret, sizeof(ev));
    return -EFAULT;
  }



  switch (ev.type)
  {
    case UHID_START:
      fprintf(stderr, "UHID_START from uhid-dev\n");
      break;

    case UHID_STOP:
      fprintf(stderr, "UHID_STOP from uhid-dev\n");
      break;

    case UHID_OPEN:
      fprintf(stderr, "UHID_OPEN from uhid-dev\n");
      break;

    case UHID_CLOSE:
      fprintf(stderr, "UHID_CLOSE from uhid-dev\n");
      break;

    case UHID_OUTPUT:
      fprintf(stderr, "UHID_OUTPUT from uhid-dev\n");
      break;

    case UHID_OUTPUT_EV:
      fprintf(stderr, "UHID_OUTPUT_EV from uhid-dev\n");
      break;

    default:
      fprintf(stderr, "Invalid event from uhid-dev: %u\n", ev.type);

  }

  return 0;
}



/************ 002 : event *************/

static int event(int fd)
{
  struct uhid_event ev;
  ssize_t ret;
  memset(&ev, 0, sizeof(ev));
  ret = read(fd, &ev, sizeof(ev));
  if (ret == 0)
  {
    fprintf(stderr, "Read HUP on uhid-cdev\n");
    return -EFAULT;
  }
  else
    if (ret < 0)
  {
    fprintf(stderr, "Cannot read uhid-cdev: %m\n");
    return -errno;
  }
  else
    if (ret != (sizeof(ev)))
  {
    fprintf(stderr, "Invalid size read from uhid-dev: %ld != %lu\n", ret, sizeof(ev));
    return -EFAULT;
  }



  switch (ev.type)
  {
    case UHID_START:
      fprintf(stderr, "UHID_START from uhid-dev\n");
      break;

    case UHID_STOP:
      fprintf(stderr, "UHID_STOP from uhid-dev\n");
      break;

    case UHID_OPEN:
      fprintf(stderr, "UHID_OPEN from uhid-dev\n");
      break;

    case UHID_CLOSE:
      fprintf(stderr, "UHID_CLOSE from uhid-dev\n");
      break;

    case UHID_OUTPUT:
      fprintf(stderr, "UHID_OUTPUT from uhid-dev\n");
      break;

    case UHID_OUTPUT_EV:
      fprintf(stderr, "UHID_OUTPUT_EV from uhid-dev\n");
      break;

    default:
      fprintf(stderr, "Invalid event from uhid-dev: %u\n", ev.type);

  }

  return 0;
}



/************ 003 : event *************/

static int event(int fd)
{
  struct uhid_event ev;
  ssize_t ret;
  memset(&ev, 0, sizeof(ev));
  ret = read(fd, &ev, sizeof(ev));
  if (ret == 0)
  {
    fprintf(stderr, "Read HUP on uhid-cdev\n");
    return -EFAULT;
  }
  else
    if (ret < 0)
  {
    fprintf(stderr, "Cannot read uhid-cdev: %m\n");
    return -errno;
  }
  else
    if (ret != (sizeof(ev)))
  {
    fprintf(stderr, "Invalid size read from uhid-dev: %ld != %lu\n", ret, sizeof(ev));
    return -EFAULT;
  }



  switch (ev.type)
  {
    case UHID_START:
      fprintf(stderr, "UHID_START from uhid-dev\n");
      break;

    case UHID_STOP:
      fprintf(stderr, "UHID_STOP from uhid-dev\n");
      break;

    case UHID_OPEN:
      fprintf(stderr, "UHID_OPEN from uhid-dev\n");
      break;

    case UHID_CLOSE:
      fprintf(stderr, "UHID_CLOSE from uhid-dev\n");
      break;

    case UHID_OUTPUT:
      fprintf(stderr, "UHID_OUTPUT from uhid-dev\n");
      break;

    case UHID_OUTPUT_EV:
      fprintf(stderr, "UHID_OUTPUT_EV from uhid-dev\n");
      break;

    default:
      fprintf(stderr, "Invalid event from uhid-dev: %u\n", ev.type);

  }

  return 0;
}



/************ 004 : event *************/

static int event(int fd)
{
  struct uhid_event ev;
  ssize_t ret;
  memset(&ev, 0, sizeof(ev));
  ret = read(fd, &ev, sizeof(ev));
  if (ret == 0)
  {
    fprintf(stderr, "Read HUP on uhid-cdev\n");
    return -EFAULT;
  }
  else
    if (ret < 0)
  {
    fprintf(stderr, "Cannot read uhid-cdev: %m\n");
    return -errno;
  }
  else
    if (ret != (sizeof(ev)))
  {
    fprintf(stderr, "Invalid size read from uhid-dev: %ld != %lu\n", ret, sizeof(ev));
    return -EFAULT;
  }



  switch (ev.type)
  {
    case UHID_START:
      fprintf(stderr, "UHID_START from uhid-dev\n");
      break;

    case UHID_STOP:
      fprintf(stderr, "UHID_STOP from uhid-dev\n");
      break;

    case UHID_OPEN:
      fprintf(stderr, "UHID_OPEN from uhid-dev\n");
      break;

    case UHID_CLOSE:
      fprintf(stderr, "UHID_CLOSE from uhid-dev\n");
      break;

    case UHID_OUTPUT:
      fprintf(stderr, "UHID_OUTPUT from uhid-dev\n");
      handle_output(&ev);
      break;

    case UHID_OUTPUT_EV:
      fprintf(stderr, "UHID_OUTPUT_EV from uhid-dev\n");
      break;

    default:
      fprintf(stderr, "Invalid event from uhid-dev: %u\n", ev.type);

  }

  return 0;
}



/************ 005 : event *************/

static int event(int fd)
{
  struct uhid_event ev;
  ssize_t ret;
  memset(&ev, 0, sizeof(ev));
  ret = read(fd, &ev, sizeof(ev));
  if (ret == 0)
  {
    fprintf(stderr, "Read HUP on uhid-cdev\n");
    return -EFAULT;
  }
  else
    if (ret < 0)
  {
    fprintf(stderr, "Cannot read uhid-cdev: %m\n");
    return -errno;
  }
  else
    if (ret != (sizeof(ev)))
  {
    fprintf(stderr, "Invalid size read from uhid-dev: %ld != %lu\n", ret, sizeof(ev));
    return -EFAULT;
  }



  switch (ev.type)
  {
    case UHID_START:
      fprintf(stderr, "UHID_START from uhid-dev\n");
      break;

    case UHID_STOP:
      fprintf(stderr, "UHID_STOP from uhid-dev\n");
      break;

    case UHID_OPEN:
      fprintf(stderr, "UHID_OPEN from uhid-dev\n");
      break;

    case UHID_CLOSE:
      fprintf(stderr, "UHID_CLOSE from uhid-dev\n");
      break;

    case UHID_OUTPUT:
      fprintf(stderr, "UHID_OUTPUT from uhid-dev\n");
      break;

    case UHID_OUTPUT_EV:
      fprintf(stderr, "UHID_OUTPUT_EV from uhid-dev\n");
      break;

    default:
      fprintf(stderr, "Invalid event from uhid-dev: %u\n", ev.type);

  }

  return 0;
}



/************ 006 : event *************/

static int event(int fd)
{
  struct uhid_event ev;
  ssize_t ret;
  memset(&ev, 0, sizeof(ev));
  ret = read(fd, &ev, sizeof(ev));
  if (ret == 0)
  {
    fprintf(stderr, "Read HUP on uhid-cdev\n");
    return -EFAULT;
  }
  else
    if (ret < 0)
  {
    fprintf(stderr, "Cannot read uhid-cdev: %m\n");
    return -errno;
  }
  else
    if (ret != (sizeof(ev)))
  {
    fprintf(stderr, "Invalid size read from uhid-dev: %ld != %lu\n", ret, sizeof(ev));
    return -EFAULT;
  }



  switch (ev.type)
  {
    case UHID_START:
      fprintf(stderr, "UHID_START from uhid-dev\n");
      break;

    case UHID_STOP:
      fprintf(stderr, "UHID_STOP from uhid-dev\n");
      break;

    case UHID_OPEN:
      fprintf(stderr, "UHID_OPEN from uhid-dev\n");
      break;

    case UHID_CLOSE:
      fprintf(stderr, "UHID_CLOSE from uhid-dev\n");
      break;

    case UHID_OUTPUT:
      fprintf(stderr, "UHID_OUTPUT from uhid-dev\n");
      break;

    case UHID_OUTPUT_EV:
      fprintf(stderr, "UHID_OUTPUT_EV from uhid-dev\n");
      break;

    default:
      fprintf(stderr, "Invalid event from uhid-dev: %u\n", ev.type);

  }

  return 0;
}



/************ 007 : event *************/

static int event(int fd)
{
  struct uhid_event ev;
  ssize_t ret;
  memset(&ev, 0, sizeof(ev));
  ret = read(fd, &ev, sizeof(ev));
  if (ret == 0)
  {
    fprintf(stderr, "Read HUP on uhid-cdev\n");
    return -EFAULT;
  }
  else
    if (ret < 0)
  {
    fprintf(stderr, "Cannot read uhid-cdev: %m\n");
    return -errno;
  }
  else
    if (ret != (sizeof(ev)))
  {
    fprintf(stderr, "Invalid size read from uhid-dev: %ld != %lu\n", ret, sizeof(ev));
    return -EFAULT;
  }



  switch (ev.type)
  {
    case UHID_START:
      fprintf(stderr, "UHID_START from uhid-dev\n");
      break;

    case UHID_STOP:
      fprintf(stderr, "UHID_STOP from uhid-dev\n");
      break;

    case UHID_OPEN:
      fprintf(stderr, "UHID_OPEN from uhid-dev\n");
      break;

    case UHID_CLOSE:
      fprintf(stderr, "UHID_CLOSE from uhid-dev\n");
      break;

    case UHID_OUTPUT:
      fprintf(stderr, "UHID_OUTPUT from uhid-dev\n");
      break;

    case UHID_OUTPUT_EV:
      fprintf(stderr, "UHID_OUTPUT_EV from uhid-dev\n");
      break;

    default:
      fprintf(stderr, "Invalid event from uhid-dev: %u\n", ev.type);

  }

  return 0;
}



/************ 008 : event *************/

static int event(int fd)
{
  struct uhid_event ev;
  ssize_t ret;
  memset(&ev, 0, sizeof(ev));
  ret = read(fd, &ev, sizeof(ev));
  if (ret == 0)
  {
    fprintf(stderr, "Read HUP on uhid-cdev\n");
    return -EFAULT;
  }
  else
    if (ret < 0)
  {
    fprintf(stderr, "Cannot read uhid-cdev: %m\n");
    return -errno;
  }
  else
    if (ret != (sizeof(ev)))
  {
    fprintf(stderr, "Invalid size read from uhid-dev: %ld != %lu\n", ret, sizeof(ev));
    return -EFAULT;
  }



  switch (ev.type)
  {
    case UHID_START:
      fprintf(stderr, "UHID_START from uhid-dev\n");
      break;

    case UHID_STOP:
      fprintf(stderr, "UHID_STOP from uhid-dev\n");
      break;

    case UHID_OPEN:
      fprintf(stderr, "UHID_OPEN from uhid-dev\n");
      break;

    case UHID_CLOSE:
      fprintf(stderr, "UHID_CLOSE from uhid-dev\n");
      break;

    case UHID_OUTPUT:
      fprintf(stderr, "UHID_OUTPUT from uhid-dev\n");
      break;

    case UHID_OUTPUT_EV:
      fprintf(stderr, "UHID_OUTPUT_EV from uhid-dev\n");
      break;

    default:
      fprintf(stderr, "Invalid event from uhid-dev: %u\n", ev.type);

  }

  return 0;
}



/************ 009 : event *************/

static int event(int fd)
{
  struct uhid_event ev;
  ssize_t ret;
  memset(&ev, 0, sizeof(ev));
  ret = read(fd, &ev, sizeof(ev));
  if (ret == 0)
  {
    fprintf(stderr, "Read HUP on uhid-cdev\n");
    return -EFAULT;
  }
  else
    if (ret < 0)
  {
    fprintf(stderr, "Cannot read uhid-cdev: %m\n");
    return -errno;
  }
  else
    if (ret != (sizeof(ev)))
  {
    fprintf(stderr, "Invalid size read from uhid-dev: %ld != %lu\n", ret, sizeof(ev));
    return -EFAULT;
  }



  switch (ev.type)
  {
    case UHID_START:
      fprintf(stderr, "UHID_START from uhid-dev\n");
      break;

    case UHID_STOP:
      fprintf(stderr, "UHID_STOP from uhid-dev\n");
      break;

    case UHID_OPEN:
      fprintf(stderr, "UHID_OPEN from uhid-dev\n");
      break;

    case UHID_CLOSE:
      fprintf(stderr, "UHID_CLOSE from uhid-dev\n");
      break;

    case UHID_OUTPUT:
      fprintf(stderr, "UHID_OUTPUT from uhid-dev\n");
      break;

    case UHID_OUTPUT_EV:
      fprintf(stderr, "UHID_OUTPUT_EV from uhid-dev\n");
      break;

    default:
      fprintf(stderr, "Invalid event from uhid-dev: %u\n", ev.type);

  }

  return 0;
}



/************ 010 : event *************/

static int event(int fd)
{
  struct uhid_event ev;
  ssize_t ret;
  memset(&ev, 0, sizeof(ev));
  ret = read(fd, &ev, sizeof(ev));
  if (ret == 0)
  {
    fprintf(stderr, "Read HUP on uhid-cdev\n");
    return -EFAULT;
  }
  else
    if (ret < 0)
  {
    fprintf(stderr, "Cannot read uhid-cdev: %m\n");
    return -errno;
  }
  else
    if (ret != (sizeof(ev)))
  {
    fprintf(stderr, "Invalid size read from uhid-dev: %ld != %lu\n", ret, sizeof(ev));
    return -EFAULT;
  }



  switch (ev.type)
  {
    case UHID_START:
      fprintf(stderr, "UHID_START from uhid-dev\n");
      break;

    case UHID_STOP:
      fprintf(stderr, "UHID_STOP from uhid-dev\n");
      break;

    case UHID_OPEN:
      fprintf(stderr, "UHID_OPEN from uhid-dev\n");
      break;

    case UHID_CLOSE:
      fprintf(stderr, "UHID_CLOSE from uhid-dev\n");
      break;

    case UHID_OUTPUT:
      fprintf(stderr, "UHID_OUTPUT from uhid-dev\n");
      handle_output(&ev);
      break;

    case UHID_OUTPUT_EV:
      fprintf(stderr, "UHID_OUTPUT_EV from uhid-dev\n");
      break;

    default:
      fprintf(stderr, "Invalid event from uhid-dev: %u\n", ev.type);

  }

  return 0;
}



/************ 011 : event *************/

static int event(int fd)
{
  struct uhid_event ev;
  ssize_t ret;
  memset(&ev, 0, sizeof(ev));
  ret = read(fd, &ev, sizeof(ev));
  if (ret == 0)
  {
    fprintf(stderr, "Read HUP on uhid-cdev\n");
    return -EFAULT;
  }
  else
    if (ret < 0)
  {
    fprintf(stderr, "Cannot read uhid-cdev: %m\n");
    return -errno;
  }
  else
    if (ret != (sizeof(ev)))
  {
    fprintf(stderr, "Invalid size read from uhid-dev: %ld != %lu\n", ret, sizeof(ev));
    return -EFAULT;
  }



  switch (ev.type)
  {
    case UHID_START:
      fprintf(stderr, "UHID_START from uhid-dev\n");
      break;

    case UHID_STOP:
      fprintf(stderr, "UHID_STOP from uhid-dev\n");
      break;

    case UHID_OPEN:
      fprintf(stderr, "UHID_OPEN from uhid-dev\n");
      break;

    case UHID_CLOSE:
      fprintf(stderr, "UHID_CLOSE from uhid-dev\n");
      break;

    case UHID_OUTPUT:
      fprintf(stderr, "UHID_OUTPUT from uhid-dev\n");
      break;

    case UHID_OUTPUT_EV:
      fprintf(stderr, "UHID_OUTPUT_EV from uhid-dev\n");
      break;

    default:
      fprintf(stderr, "Invalid event from uhid-dev: %u\n", ev.type);

  }

  return 0;
}



/************ 012 : event *************/

static int event(int fd)
{
  struct uhid_event ev;
  ssize_t ret;
  memset(&ev, 0, sizeof(ev));
  ret = read(fd, &ev, sizeof(ev));
  if (ret == 0)
  {
    fprintf(stderr, "Read HUP on uhid-cdev\n");
    return -EFAULT;
  }
  else
    if (ret < 0)
  {
    fprintf(stderr, "Cannot read uhid-cdev: %m\n");
    return -errno;
  }
  else
    if (ret != (sizeof(ev)))
  {
    fprintf(stderr, "Invalid size read from uhid-dev: %ld != %lu\n", ret, sizeof(ev));
    return -EFAULT;
  }



  switch (ev.type)
  {
    case UHID_START:
      fprintf(stderr, "UHID_START from uhid-dev\n");
      break;

    case UHID_STOP:
      fprintf(stderr, "UHID_STOP from uhid-dev\n");
      break;

    case UHID_OPEN:
      fprintf(stderr, "UHID_OPEN from uhid-dev\n");
      break;

    case UHID_CLOSE:
      fprintf(stderr, "UHID_CLOSE from uhid-dev\n");
      break;

    case UHID_OUTPUT:
      fprintf(stderr, "UHID_OUTPUT from uhid-dev\n");
      handle_output(&ev);
      break;

    case UHID_OUTPUT_EV:
      fprintf(stderr, "UHID_OUTPUT_EV from uhid-dev\n");
      break;

    default:
      fprintf(stderr, "Invalid event from uhid-dev: %u\n", ev.type);

  }

  return 0;
}



/************ 013 : event *************/

static int event(int fd)
{
  struct uhid_event ev;
  ssize_t ret;
  memset(&ev, 0, sizeof(ev));
  ret = read(fd, &ev, sizeof(ev));
  if (ret == 0)
  {
    fprintf(stderr, "Read HUP on uhid-cdev\n");
    return -EFAULT;
  }
  else
    if (ret < 0)
  {
    fprintf(stderr, "Cannot read uhid-cdev: %m\n");
    return -errno;
  }
  else
    if (ret != (sizeof(ev)))
  {
    fprintf(stderr, "Invalid size read from uhid-dev: %ld != %lu\n", ret, sizeof(ev));
    return -EFAULT;
  }



  switch (ev.type)
  {
    case UHID_START:
      fprintf(stderr, "UHID_START from uhid-dev\n");
      break;

    case UHID_STOP:
      fprintf(stderr, "UHID_STOP from uhid-dev\n");
      break;

    case UHID_OPEN:
      fprintf(stderr, "UHID_OPEN from uhid-dev\n");
      break;

    case UHID_CLOSE:
      fprintf(stderr, "UHID_CLOSE from uhid-dev\n");
      break;

    case UHID_OUTPUT:
      fprintf(stderr, "UHID_OUTPUT from uhid-dev\n");
      handle_output(&ev);
      break;

    case UHID_OUTPUT_EV:
      fprintf(stderr, "UHID_OUTPUT_EV from uhid-dev\n");
      break;

    default:
      fprintf(stderr, "Invalid event from uhid-dev: %u\n", ev.type);

  }

  return 0;
}



/************ 014 : event *************/

static int event(int fd)
{
  struct uhid_event ev;
  ssize_t ret;
  memset(&ev, 0, sizeof(ev));
  ret = read(fd, &ev, sizeof(ev));
  if (ret == 0)
  {
    fprintf(stderr, "Read HUP on uhid-cdev\n");
    return -EFAULT;
  }
  else
    if (ret < 0)
  {
    fprintf(stderr, "Cannot read uhid-cdev: %m\n");
    return -errno;
  }
  else
    if (ret != (sizeof(ev)))
  {
    fprintf(stderr, "Invalid size read from uhid-dev: %ld != %lu\n", ret, sizeof(ev));
    return -EFAULT;
  }



  switch (ev.type)
  {
    case UHID_START:
      fprintf(stderr, "UHID_START from uhid-dev\n");
      break;

    case UHID_STOP:
      fprintf(stderr, "UHID_STOP from uhid-dev\n");
      break;

    case UHID_OPEN:
      fprintf(stderr, "UHID_OPEN from uhid-dev\n");
      break;

    case UHID_CLOSE:
      fprintf(stderr, "UHID_CLOSE from uhid-dev\n");
      break;

    case UHID_OUTPUT:
      fprintf(stderr, "UHID_OUTPUT from uhid-dev\n");
      break;

    case UHID_OUTPUT_EV:
      fprintf(stderr, "UHID_OUTPUT_EV from uhid-dev\n");
      break;

    default:
      fprintf(stderr, "Invalid event from uhid-dev: %u\n", ev.type);

  }

  return 0;
}



/************ 015 : event *************/

static int event(int fd)
{
  struct uhid_event ev;
  ssize_t ret;
  memset(&ev, 0, sizeof(ev));
  ret = read(fd, &ev, sizeof(ev));
  if (ret == 0)
  {
    fprintf(stderr, "Read HUP on uhid-cdev\n");
    return -EFAULT;
  }
  else
    if (ret < 0)
  {
    fprintf(stderr, "Cannot read uhid-cdev: %m\n");
    return -errno;
  }
  else
    if (ret != (sizeof(ev)))
  {
    fprintf(stderr, "Invalid size read from uhid-dev: %ld != %lu\n", ret, sizeof(ev));
    return -EFAULT;
  }



  switch (ev.type)
  {
    case UHID_START:
      fprintf(stderr, "UHID_START from uhid-dev\n");
      break;

    case UHID_STOP:
      fprintf(stderr, "UHID_STOP from uhid-dev\n");
      break;

    case UHID_OPEN:
      fprintf(stderr, "UHID_OPEN from uhid-dev\n");
      break;

    case UHID_CLOSE:
      fprintf(stderr, "UHID_CLOSE from uhid-dev\n");
      break;

    case UHID_OUTPUT:
      fprintf(stderr, "UHID_OUTPUT from uhid-dev\n");
      handle_output(&ev);
      break;

    case UHID_OUTPUT_EV:
      fprintf(stderr, "UHID_OUTPUT_EV from uhid-dev\n");
      break;

    default:
      fprintf(stderr, "Invalid event from uhid-dev: %u\n", ev.type);

  }

  return 0;
}



/************ 016 : event *************/

static int event(int fd)
{
  struct uhid_event ev;
  ssize_t ret;
  memset(&ev, 0, sizeof(ev));
  ret = read(fd, &ev, sizeof(ev));
  if (ret == 0)
  {
    fprintf(stderr, "Read HUP on uhid-cdev\n");
    return -EFAULT;
  }
  else
    if (ret < 0)
  {
    fprintf(stderr, "Cannot read uhid-cdev: %m\n");
    return -errno;
  }
  else
    if (ret != (sizeof(ev)))
  {
    fprintf(stderr, "Invalid size read from uhid-dev: %ld != %lu\n", ret, sizeof(ev));
    return -EFAULT;
  }



  switch (ev.type)
  {
    case UHID_START:
      fprintf(stderr, "UHID_START from uhid-dev\n");
      break;

    case UHID_STOP:
      fprintf(stderr, "UHID_STOP from uhid-dev\n");
      break;

    case UHID_OPEN:
      fprintf(stderr, "UHID_OPEN from uhid-dev\n");
      break;

    case UHID_CLOSE:
      fprintf(stderr, "UHID_CLOSE from uhid-dev\n");
      break;

    case UHID_OUTPUT:
      fprintf(stderr, "UHID_OUTPUT from uhid-dev\n");
      break;

    case UHID_OUTPUT_EV:
      fprintf(stderr, "UHID_OUTPUT_EV from uhid-dev\n");
      break;

    default:
      fprintf(stderr, "Invalid event from uhid-dev: %u\n", ev.type);

  }

  return 0;
}



/************ 017 : event *************/

static int event(int fd)
{
  struct uhid_event ev;
  ssize_t ret;
  memset(&ev, 0, sizeof(ev));
  ret = read(fd, &ev, sizeof(ev));
  if (ret == 0)
  {
    fprintf(stderr, "Read HUP on uhid-cdev\n");
    return -EFAULT;
  }
  else
    if (ret < 0)
  {
    fprintf(stderr, "Cannot read uhid-cdev: %m\n");
    return -errno;
  }
  else
    if (ret != (sizeof(ev)))
  {
    fprintf(stderr, "Invalid size read from uhid-dev: %ld != %lu\n", ret, sizeof(ev));
    return -EFAULT;
  }



  switch (ev.type)
  {
    case UHID_START:
      fprintf(stderr, "UHID_START from uhid-dev\n");
      break;

    case UHID_STOP:
      fprintf(stderr, "UHID_STOP from uhid-dev\n");
      break;

    case UHID_OPEN:
      fprintf(stderr, "UHID_OPEN from uhid-dev\n");
      break;

    case UHID_CLOSE:
      fprintf(stderr, "UHID_CLOSE from uhid-dev\n");
      break;

    case UHID_OUTPUT:
      fprintf(stderr, "UHID_OUTPUT from uhid-dev\n");
      break;

    case UHID_OUTPUT_EV:
      fprintf(stderr, "UHID_OUTPUT_EV from uhid-dev\n");
      break;

    default:
      fprintf(stderr, "Invalid event from uhid-dev: %u\n", ev.type);

  }

  return 0;
}



/************ 018 : event *************/

static int event(int fd)
{
  struct uhid_event ev;
  ssize_t ret;
  memset(&ev, 0, sizeof(ev));
  ret = read(fd, &ev, sizeof(ev));
  if (ret == 0)
  {
    fprintf(stderr, "Read HUP on uhid-cdev\n");
    return -EFAULT;
  }
  else
    if (ret < 0)
  {
    fprintf(stderr, "Cannot read uhid-cdev: %m\n");
    return -errno;
  }
  else
    if (ret != (sizeof(ev)))
  {
    fprintf(stderr, "Invalid size read from uhid-dev: %ld != %lu\n", ret, sizeof(ev));
    return -EFAULT;
  }



  switch (ev.type)
  {
    case UHID_START:
      fprintf(stderr, "UHID_START from uhid-dev\n");
      break;

    case UHID_STOP:
      fprintf(stderr, "UHID_STOP from uhid-dev\n");
      break;

    case UHID_OPEN:
      fprintf(stderr, "UHID_OPEN from uhid-dev\n");
      break;

    case UHID_CLOSE:
      fprintf(stderr, "UHID_CLOSE from uhid-dev\n");
      break;

    case UHID_OUTPUT:
      fprintf(stderr, "UHID_OUTPUT from uhid-dev\n");
      break;

    case UHID_OUTPUT_EV:
      fprintf(stderr, "UHID_OUTPUT_EV from uhid-dev\n");
      break;

    default:
      fprintf(stderr, "Invalid event from uhid-dev: %u\n", ev.type);

  }

  return 0;
}



/************ 019 : event *************/

static int event(int fd)
{
  struct uhid_event ev;
  ssize_t ret;
  memset(&ev, 0, sizeof(ev));
  ret = read(fd, &ev, sizeof(ev));
  if (ret == 0)
  {
    fprintf(stderr, "Read HUP on uhid-cdev\n");
    return -EFAULT;
  }
  else
    if (ret < 0)
  {
    fprintf(stderr, "Cannot read uhid-cdev: %m\n");
    return -errno;
  }
  else
    if (ret != (sizeof(ev)))
  {
    fprintf(stderr, "Invalid size read from uhid-dev: %ld != %lu\n", ret, sizeof(ev));
    return -EFAULT;
  }



  switch (ev.type)
  {
    case UHID_START:
      fprintf(stderr, "UHID_START from uhid-dev\n");
      break;

    case UHID_STOP:
      fprintf(stderr, "UHID_STOP from uhid-dev\n");
      break;

    case UHID_OPEN:
      fprintf(stderr, "UHID_OPEN from uhid-dev\n");
      break;

    case UHID_CLOSE:
      fprintf(stderr, "UHID_CLOSE from uhid-dev\n");
      break;

    case UHID_OUTPUT:
      fprintf(stderr, "UHID_OUTPUT from uhid-dev\n");
      break;

    case UHID_OUTPUT_EV:
      fprintf(stderr, "UHID_OUTPUT_EV from uhid-dev\n");
      break;

    default:
      fprintf(stderr, "Invalid event from uhid-dev: %u\n", ev.type);

  }

  return 0;
}



/************ 020 : event *************/

static int event(int fd)
{
  struct uhid_event ev;
  ssize_t ret;
  memset(&ev, 0, sizeof(ev));
  ret = read(fd, &ev, sizeof(ev));
  if (ret == 0)
  {
    fprintf(stderr, "Read HUP on uhid-cdev\n");
    return -EFAULT;
  }
  else
    if (ret < 0)
  {
    fprintf(stderr, "Cannot read uhid-cdev: %m\n");
    return -errno;
  }
  else
    if (ret != (sizeof(ev)))
  {
    fprintf(stderr, "Invalid size read from uhid-dev: %ld != %lu\n", ret, sizeof(ev));
    return -EFAULT;
  }



  switch (ev.type)
  {
    case UHID_START:
      fprintf(stderr, "UHID_START from uhid-dev\n");
      break;

    case UHID_STOP:
      fprintf(stderr, "UHID_STOP from uhid-dev\n");
      break;

    case UHID_OPEN:
      fprintf(stderr, "UHID_OPEN from uhid-dev\n");
      break;

    case UHID_CLOSE:
      fprintf(stderr, "UHID_CLOSE from uhid-dev\n");
      break;

    case UHID_OUTPUT:
      fprintf(stderr, "UHID_OUTPUT from uhid-dev\n");
      break;

    case UHID_OUTPUT_EV:
      fprintf(stderr, "UHID_OUTPUT_EV from uhid-dev\n");
      break;

    default:
      fprintf(stderr, "Invalid event from uhid-dev: %u\n", ev.type);

  }

  return 0;
}



/************ 021 : event *************/

static int event(int fd)
{
  struct uhid_event ev;
  ssize_t ret;
  memset(&ev, 0, sizeof(ev));
  ret = read(fd, &ev, sizeof(ev));
  if (ret == 0)
  {
    fprintf(stderr, "Read HUP on uhid-cdev\n");
    return -EFAULT;
  }
  else
    if (ret < 0)
  {
    fprintf(stderr, "Cannot read uhid-cdev: %m\n");
    return -errno;
  }
  else
    if (ret != (sizeof(ev)))
  {
    fprintf(stderr, "Invalid size read from uhid-dev: %ld != %lu\n", ret, sizeof(ev));
    return -EFAULT;
  }



  switch (ev.type)
  {
    case UHID_START:
      fprintf(stderr, "UHID_START from uhid-dev\n");
      break;

    case UHID_STOP:
      fprintf(stderr, "UHID_STOP from uhid-dev\n");
      break;

    case UHID_OPEN:
      fprintf(stderr, "UHID_OPEN from uhid-dev\n");
      break;

    case UHID_CLOSE:
      fprintf(stderr, "UHID_CLOSE from uhid-dev\n");
      break;

    case UHID_OUTPUT:
      fprintf(stderr, "UHID_OUTPUT from uhid-dev\n");
      handle_output(&ev);
      break;

    case UHID_OUTPUT_EV:
      fprintf(stderr, "UHID_OUTPUT_EV from uhid-dev\n");
      break;

    default:
      fprintf(stderr, "Invalid event from uhid-dev: %u\n", ev.type);

  }

  return 0;
}



/************ 022 : event *************/

static int event(int fd)
{
  struct uhid_event ev;
  ssize_t ret;
  memset(&ev, 0, sizeof(ev));
  ret = read(fd, &ev, sizeof(ev));
  if (ret == 0)
  {
    fprintf(stderr, "Read HUP on uhid-cdev\n");
    return -EFAULT;
  }
  else
    if (ret < 0)
  {
    fprintf(stderr, "Cannot read uhid-cdev: %m\n");
    return -errno;
  }
  else
    if (ret != (sizeof(ev)))
  {
    fprintf(stderr, "Invalid size read from uhid-dev: %ld != %lu\n", ret, sizeof(ev));
    return -EFAULT;
  }



  switch (ev.type)
  {
    case UHID_START:
      fprintf(stderr, "UHID_START from uhid-dev\n");
      break;

    case UHID_STOP:
      fprintf(stderr, "UHID_STOP from uhid-dev\n");
      break;

    case UHID_OPEN:
      fprintf(stderr, "UHID_OPEN from uhid-dev\n");
      break;

    case UHID_CLOSE:
      fprintf(stderr, "UHID_CLOSE from uhid-dev\n");
      break;

    case UHID_OUTPUT:
      fprintf(stderr, "UHID_OUTPUT from uhid-dev\n");
      break;

    case UHID_OUTPUT_EV:
      fprintf(stderr, "UHID_OUTPUT_EV from uhid-dev\n");
      break;

    default:
      fprintf(stderr, "Invalid event from uhid-dev: %u\n", ev.type);

  }

  return 0;
}



/************ 023 : event *************/

static int event(int fd)
{
  struct uhid_event ev;
  ssize_t ret;
  memset(&ev, 0, sizeof(ev));
  ret = read(fd, &ev, sizeof(ev));
  if (ret == 0)
  {
    fprintf(stderr, "Read HUP on uhid-cdev\n");
    return -EFAULT;
  }
  else
    if (ret < 0)
  {
    fprintf(stderr, "Cannot read uhid-cdev: %m\n");
    return -errno;
  }
  else
    if (ret != (sizeof(ev)))
  {
    fprintf(stderr, "Invalid size read from uhid-dev: %ld != %lu\n", ret, sizeof(ev));
    return -EFAULT;
  }



  switch (ev.type)
  {
    case UHID_START:
      fprintf(stderr, "UHID_START from uhid-dev\n");
      break;

    case UHID_STOP:
      fprintf(stderr, "UHID_STOP from uhid-dev\n");
      break;

    case UHID_OPEN:
      fprintf(stderr, "UHID_OPEN from uhid-dev\n");
      break;

    case UHID_CLOSE:
      fprintf(stderr, "UHID_CLOSE from uhid-dev\n");
      break;

    case UHID_OUTPUT:
      fprintf(stderr, "UHID_OUTPUT from uhid-dev\n");
      break;

    case UHID_OUTPUT_EV:
      fprintf(stderr, "UHID_OUTPUT_EV from uhid-dev\n");
      break;

    default:
      fprintf(stderr, "Invalid event from uhid-dev: %u\n", ev.type);

  }

  return 0;
}



/************ 024 : event *************/

static int event(int fd)
{
  struct uhid_event ev;
  ssize_t ret;
  memset(&ev, 0, sizeof(ev));
  ret = read(fd, &ev, sizeof(ev));
  if (ret == 0)
  {
    fprintf(stderr, "Read HUP on uhid-cdev\n");
    return -EFAULT;
  }
  else
    if (ret < 0)
  {
    fprintf(stderr, "Cannot read uhid-cdev: %m\n");
    return -errno;
  }
  else
    if (ret != (sizeof(ev)))
  {
    fprintf(stderr, "Invalid size read from uhid-dev: %ld != %lu\n", ret, sizeof(ev));
    return -EFAULT;
  }



  switch (ev.type)
  {
    case UHID_START:
      fprintf(stderr, "UHID_START from uhid-dev\n");
      break;

    case UHID_STOP:
      fprintf(stderr, "UHID_STOP from uhid-dev\n");
      break;

    case UHID_OPEN:
      fprintf(stderr, "UHID_OPEN from uhid-dev\n");
      break;

    case UHID_CLOSE:
      fprintf(stderr, "UHID_CLOSE from uhid-dev\n");
      break;

    case UHID_OUTPUT:
      fprintf(stderr, "UHID_OUTPUT from uhid-dev\n");
      break;

    case UHID_OUTPUT_EV:
      fprintf(stderr, "UHID_OUTPUT_EV from uhid-dev\n");
      break;

    default:
      fprintf(stderr, "Invalid event from uhid-dev: %u\n", ev.type);

  }

  return 0;
}



/************ 025 : event *************/

static int event(int fd)
{
  struct uhid_event ev;
  ssize_t ret;
  memset(&ev, 0, sizeof(ev));
  ret = read(fd, &ev, sizeof(ev));
  if (ret == 0)
  {
    fprintf(stderr, "Read HUP on uhid-cdev\n");
    return -EFAULT;
  }
  else
    if (ret < 0)
  {
    fprintf(stderr, "Cannot read uhid-cdev: %m\n");
    return -errno;
  }
  else
    if (ret != (sizeof(ev)))
  {
    fprintf(stderr, "Invalid size read from uhid-dev: %ld != %lu\n", ret, sizeof(ev));
    return -EFAULT;
  }



  switch (ev.type)
  {
    case UHID_START:
      fprintf(stderr, "UHID_START from uhid-dev\n");
      break;

    case UHID_STOP:
      fprintf(stderr, "UHID_STOP from uhid-dev\n");
      break;

    case UHID_OPEN:
      fprintf(stderr, "UHID_OPEN from uhid-dev\n");
      break;

    case UHID_CLOSE:
      fprintf(stderr, "UHID_CLOSE from uhid-dev\n");
      break;

    case UHID_OUTPUT:
      fprintf(stderr, "UHID_OUTPUT from uhid-dev\n");
      break;

    case UHID_OUTPUT_EV:
      fprintf(stderr, "UHID_OUTPUT_EV from uhid-dev\n");
      break;

    default:
      fprintf(stderr, "Invalid event from uhid-dev: %u\n", ev.type);

  }

  return 0;
}



/************ 026 : event *************/

static int event(int fd)
{
  struct uhid_event ev;
  ssize_t ret;
  memset(&ev, 0, sizeof(ev));
  ret = read(fd, &ev, sizeof(ev));
  if (ret == 0)
  {
    fprintf(stderr, "Read HUP on uhid-cdev\n");
    return -EFAULT;
  }
  else
    if (ret < 0)
  {
    fprintf(stderr, "Cannot read uhid-cdev: %m\n");
    return -errno;
  }
  else
    if (ret != (sizeof(ev)))
  {
    fprintf(stderr, "Invalid size read from uhid-dev: %ld != %lu\n", ret, sizeof(ev));
    return -EFAULT;
  }



  switch (ev.type)
  {
    case UHID_START:
      fprintf(stderr, "UHID_START from uhid-dev\n");
      break;

    case UHID_STOP:
      fprintf(stderr, "UHID_STOP from uhid-dev\n");
      break;

    case UHID_OPEN:
      fprintf(stderr, "UHID_OPEN from uhid-dev\n");
      break;

    case UHID_CLOSE:
      fprintf(stderr, "UHID_CLOSE from uhid-dev\n");
      break;

    case UHID_OUTPUT:
      fprintf(stderr, "UHID_OUTPUT from uhid-dev\n");
      break;

    case UHID_OUTPUT_EV:
      fprintf(stderr, "UHID_OUTPUT_EV from uhid-dev\n");
      break;

    default:
      fprintf(stderr, "Invalid event from uhid-dev: %u\n", ev.type);

  }

  return 0;
}



/************ 027 : event *************/

static int event(int fd)
{
  struct uhid_event ev;
  ssize_t ret;
  memset(&ev, 0, sizeof(ev));
  ret = read(fd, &ev, sizeof(ev));
  if (ret == 0)
  {
    fprintf(stderr, "Read HUP on uhid-cdev\n");
    return -EFAULT;
  }
  else
    if (ret < 0)
  {
    fprintf(stderr, "Cannot read uhid-cdev: %m\n");
    return -errno;
  }
  else
    if (ret != (sizeof(ev)))
  {
    fprintf(stderr, "Invalid size read from uhid-dev: %ld != %lu\n", ret, sizeof(ev));
    return -EFAULT;
  }



  switch (ev.type)
  {
    case UHID_START:
      fprintf(stderr, "UHID_START from uhid-dev\n");
      break;

    case UHID_STOP:
      fprintf(stderr, "UHID_STOP from uhid-dev\n");
      break;

    case UHID_OPEN:
      fprintf(stderr, "UHID_OPEN from uhid-dev\n");
      break;

    case UHID_CLOSE:
      fprintf(stderr, "UHID_CLOSE from uhid-dev\n");
      break;

    case UHID_OUTPUT:
      fprintf(stderr, "UHID_OUTPUT from uhid-dev\n");
      break;

    case UHID_OUTPUT_EV:
      fprintf(stderr, "UHID_OUTPUT_EV from uhid-dev\n");
      break;

    default:
      fprintf(stderr, "Invalid event from uhid-dev: %u\n", ev.type);

  }

  return 0;
}



/************ 028 : event *************/

static int event(int fd)
{
  struct uhid_event ev;
  ssize_t ret;
  memset(&ev, 0, sizeof(ev));
  ret = read(fd, &ev, sizeof(ev));
  if (ret == 0)
  {
    fprintf(stderr, "Read HUP on uhid-cdev\n");
    return -EFAULT;
  }
  else
    if (ret < 0)
  {
    fprintf(stderr, "Cannot read uhid-cdev: %m\n");
    return -errno;
  }
  else
    if (ret != (sizeof(ev)))
  {
    fprintf(stderr, "Invalid size read from uhid-dev: %ld != %lu\n", ret, sizeof(ev));
    return -EFAULT;
  }



  switch (ev.type)
  {
    case UHID_START:
      fprintf(stderr, "UHID_START from uhid-dev\n");
      break;

    case UHID_STOP:
      fprintf(stderr, "UHID_STOP from uhid-dev\n");
      break;

    case UHID_OPEN:
      fprintf(stderr, "UHID_OPEN from uhid-dev\n");
      break;

    case UHID_CLOSE:
      fprintf(stderr, "UHID_CLOSE from uhid-dev\n");
      break;

    case UHID_OUTPUT:
      fprintf(stderr, "UHID_OUTPUT from uhid-dev\n");
      break;

    case UHID_OUTPUT_EV:
      fprintf(stderr, "UHID_OUTPUT_EV from uhid-dev\n");
      break;

    default:
      fprintf(stderr, "Invalid event from uhid-dev: %u\n", ev.type);

  }

  return 0;
}



/************ 029 : event *************/

static int event(int fd)
{
  struct uhid_event ev;
  ssize_t ret;
  memset(&ev, 0, sizeof(ev));
  ret = read(fd, &ev, sizeof(ev));
  if (ret == 0)
  {
    fprintf(stderr, "Read HUP on uhid-cdev\n");
    return -EFAULT;
  }
  else
    if (ret < 0)
  {
    fprintf(stderr, "Cannot read uhid-cdev: %m\n");
    return -errno;
  }
  else
    if (ret != (sizeof(ev)))
  {
    fprintf(stderr, "Invalid size read from uhid-dev: %ld != %lu\n", ret, sizeof(ev));
    return -EFAULT;
  }



  switch (ev.type)
  {
    case UHID_START:
      fprintf(stderr, "UHID_START from uhid-dev\n");
      break;

    case UHID_STOP:
      fprintf(stderr, "UHID_STOP from uhid-dev\n");
      break;

    case UHID_OPEN:
      fprintf(stderr, "UHID_OPEN from uhid-dev\n");
      break;

    case UHID_CLOSE:
      fprintf(stderr, "UHID_CLOSE from uhid-dev\n");
      break;

    case UHID_OUTPUT:
      fprintf(stderr, "UHID_OUTPUT from uhid-dev\n");
      break;

    case UHID_OUTPUT_EV:
      fprintf(stderr, "UHID_OUTPUT_EV from uhid-dev\n");
      break;

    default:
      fprintf(stderr, "Invalid event from uhid-dev: %u\n", ev.type);

  }

  return 0;
}



/************ 030 : event *************/

static int event(int fd)
{
  struct uhid_event ev;
  ssize_t ret;
  memset(&ev, 0, sizeof(ev));
  ret = read(fd, &ev, sizeof(ev));
  if (ret == 0)
  {
    fprintf(stderr, "Read HUP on uhid-cdev\n");
    return -EFAULT;
  }
  else
    if (ret < 0)
  {
    fprintf(stderr, "Cannot read uhid-cdev: %m\n");
    return -errno;
  }
  else
    if (ret != (sizeof(ev)))
  {
    fprintf(stderr, "Invalid size read from uhid-dev: %ld != %lu\n", ret, sizeof(ev));
    return -EFAULT;
  }



  switch (ev.type)
  {
    case UHID_START:
      fprintf(stderr, "UHID_START from uhid-dev\n");
      break;

    case UHID_STOP:
      fprintf(stderr, "UHID_STOP from uhid-dev\n");
      break;

    case UHID_OPEN:
      fprintf(stderr, "UHID_OPEN from uhid-dev\n");
      break;

    case UHID_CLOSE:
      fprintf(stderr, "UHID_CLOSE from uhid-dev\n");
      break;

    case UHID_OUTPUT:
      fprintf(stderr, "UHID_OUTPUT from uhid-dev\n");
      break;

    case UHID_OUTPUT_EV:
      fprintf(stderr, "UHID_OUTPUT_EV from uhid-dev\n");
      break;

    default:
      fprintf(stderr, "Invalid event from uhid-dev: %u\n", ev.type);

  }

  return 0;
}



/************ 031 : event *************/

static int event(int fd)
{
  struct uhid_event ev;
  ssize_t ret;
  memset(&ev, 0, sizeof(ev));
  ret = read(fd, &ev, sizeof(ev));
  if (ret == 0)
  {
    fprintf(stderr, "Read HUP on uhid-cdev\n");
    return -EFAULT;
  }
  else
    if (ret < 0)
  {
    fprintf(stderr, "Cannot read uhid-cdev: %m\n");
    return -errno;
  }
  else
    if (ret != (sizeof(ev)))
  {
    fprintf(stderr, "Invalid size read from uhid-dev: %ld != %lu\n", ret, sizeof(ev));
    return -EFAULT;
  }



  switch (ev.type)
  {
    case UHID_START:
      fprintf(stderr, "UHID_START from uhid-dev\n");
      break;

    case UHID_STOP:
      fprintf(stderr, "UHID_STOP from uhid-dev\n");
      break;

    case UHID_OPEN:
      fprintf(stderr, "UHID_OPEN from uhid-dev\n");
      break;

    case UHID_CLOSE:
      fprintf(stderr, "UHID_CLOSE from uhid-dev\n");
      break;

    case UHID_OUTPUT:
      fprintf(stderr, "UHID_OUTPUT from uhid-dev\n");
      handle_output(&ev);
      break;

    case UHID_OUTPUT_EV:
      fprintf(stderr, "UHID_OUTPUT_EV from uhid-dev\n");
      break;

    default:
      fprintf(stderr, "Invalid event from uhid-dev: %u\n", ev.type);

  }

  return 0;
}



/************ 032 : event *************/

static int event(int fd)
{
  struct uhid_event ev;
  ssize_t ret;
  memset(&ev, 0, sizeof(ev));
  ret = read(fd, &ev, sizeof(ev));
  if (ret == 0)
  {
    fprintf(stderr, "Read HUP on uhid-cdev\n");
    return -EFAULT;
  }
  else
    if (ret < 0)
  {
    fprintf(stderr, "Cannot read uhid-cdev: %m\n");
    return -errno;
  }
  else
    if (ret != (sizeof(ev)))
  {
    fprintf(stderr, "Invalid size read from uhid-dev: %ld != %lu\n", ret, sizeof(ev));
    return -EFAULT;
  }



  switch (ev.type)
  {
    case UHID_START:
      fprintf(stderr, "UHID_START from uhid-dev\n");
      break;

    case UHID_STOP:
      fprintf(stderr, "UHID_STOP from uhid-dev\n");
      break;

    case UHID_OPEN:
      fprintf(stderr, "UHID_OPEN from uhid-dev\n");
      break;

    case UHID_CLOSE:
      fprintf(stderr, "UHID_CLOSE from uhid-dev\n");
      break;

    case UHID_OUTPUT:
      fprintf(stderr, "UHID_OUTPUT from uhid-dev\n");
      break;

    case UHID_OUTPUT_EV:
      fprintf(stderr, "UHID_OUTPUT_EV from uhid-dev\n");
      break;

    default:
      fprintf(stderr, "Invalid event from uhid-dev: %u\n", ev.type);

  }

  return 0;
}



/************ 033 : event *************/

static int event(int fd)
{
  struct uhid_event ev;
  ssize_t ret;
  memset(&ev, 0, sizeof(ev));
  ret = read(fd, &ev, sizeof(ev));
  if (ret == 0)
  {
    fprintf(stderr, "Read HUP on uhid-cdev\n");
    return -EFAULT;
  }
  else
    if (ret < 0)
  {
    fprintf(stderr, "Cannot read uhid-cdev: %m\n");
    return -errno;
  }
  else
    if (ret != (sizeof(ev)))
  {
    fprintf(stderr, "Invalid size read from uhid-dev: %ld != %lu\n", ret, sizeof(ev));
    return -EFAULT;
  }



  switch (ev.type)
  {
    case UHID_START:
      fprintf(stderr, "UHID_START from uhid-dev\n");
      break;

    case UHID_STOP:
      fprintf(stderr, "UHID_STOP from uhid-dev\n");
      break;

    case UHID_OPEN:
      fprintf(stderr, "UHID_OPEN from uhid-dev\n");
      break;

    case UHID_CLOSE:
      fprintf(stderr, "UHID_CLOSE from uhid-dev\n");
      break;

    case UHID_OUTPUT:
      fprintf(stderr, "UHID_OUTPUT from uhid-dev\n");
      handle_output(&ev);
      break;

    case UHID_OUTPUT_EV:
      fprintf(stderr, "UHID_OUTPUT_EV from uhid-dev\n");
      break;

    default:
      fprintf(stderr, "Invalid event from uhid-dev: %u\n", ev.type);

  }

  return 0;
}



/************ 034 : event *************/

static int event(int fd)
{
  struct uhid_event ev;
  ssize_t ret;
  memset(&ev, 0, sizeof(ev));
  ret = read(fd, &ev, sizeof(ev));
  if (ret == 0)
  {
    fprintf(stderr, "Read HUP on uhid-cdev\n");
    return -EFAULT;
  }
  else
    if (ret < 0)
  {
    fprintf(stderr, "Cannot read uhid-cdev: %m\n");
    return -errno;
  }
  else
    if (ret != (sizeof(ev)))
  {
    fprintf(stderr, "Invalid size read from uhid-dev: %ld != %lu\n", ret, sizeof(ev));
    return -EFAULT;
  }



  switch (ev.type)
  {
    case UHID_START:
      fprintf(stderr, "UHID_START from uhid-dev\n");
      break;

    case UHID_STOP:
      fprintf(stderr, "UHID_STOP from uhid-dev\n");
      break;

    case UHID_OPEN:
      fprintf(stderr, "UHID_OPEN from uhid-dev\n");
      break;

    case UHID_CLOSE:
      fprintf(stderr, "UHID_CLOSE from uhid-dev\n");
      break;

    case UHID_OUTPUT:
      fprintf(stderr, "UHID_OUTPUT from uhid-dev\n");
      break;

    case UHID_OUTPUT_EV:
      fprintf(stderr, "UHID_OUTPUT_EV from uhid-dev\n");
      break;

    default:
      fprintf(stderr, "Invalid event from uhid-dev: %u\n", ev.type);

  }

  return 0;
}



/************ 035 : event *************/

static int event(int fd)
{
  struct uhid_event ev;
  ssize_t ret;
  memset(&ev, 0, sizeof(ev));
  ret = read(fd, &ev, sizeof(ev));
  if (ret == 0)
  {
    fprintf(stderr, "Read HUP on uhid-cdev\n");
    return -EFAULT;
  }
  else
    if (ret < 0)
  {
    fprintf(stderr, "Cannot read uhid-cdev: %m\n");
    return -errno;
  }
  else
    if (ret != (sizeof(ev)))
  {
    fprintf(stderr, "Invalid size read from uhid-dev: %ld != %lu\n", ret, sizeof(ev));
    return -EFAULT;
  }



  switch (ev.type)
  {
    case UHID_START:
      fprintf(stderr, "UHID_START from uhid-dev\n");
      break;

    case UHID_STOP:
      fprintf(stderr, "UHID_STOP from uhid-dev\n");
      break;

    case UHID_OPEN:
      fprintf(stderr, "UHID_OPEN from uhid-dev\n");
      break;

    case UHID_CLOSE:
      fprintf(stderr, "UHID_CLOSE from uhid-dev\n");
      break;

    case UHID_OUTPUT:
      fprintf(stderr, "UHID_OUTPUT from uhid-dev\n");
      break;

    case UHID_OUTPUT_EV:
      fprintf(stderr, "UHID_OUTPUT_EV from uhid-dev\n");
      break;

    default:
      fprintf(stderr, "Invalid event from uhid-dev: %u\n", ev.type);

  }

  return 0;
}

