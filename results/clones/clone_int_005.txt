

/************ 000 : install_filter *************/

static int install_filter(int nr, int arch, int error)
{
  struct sock_filter filter[] = {BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, arch)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, arch, 0, 3), BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, nr)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, nr, 0, 1), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ERRNO | (error & SECCOMP_RET_DATA)), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW)};
  struct sock_fprog prog = {.len = (unsigned short) ((sizeof(filter)) / (sizeof(filter[0]))), .filter = filter};
  if (prctl(PR_SET_SECCOMP, 2, &prog))
  {
    perror("prctl");
    return 1;
  }

  return 0;
}



/************ 001 : install_filter *************/

static int install_filter(int nr, int arch, int error)
{
  struct sock_filter filter[] = {BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, arch)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, arch, 0, 3), BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, nr)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, nr, 0, 1), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ERRNO | (error & SECCOMP_RET_DATA)), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW)};
  struct sock_fprog prog = {.len = (unsigned short) ((sizeof(filter)) / (sizeof(filter[0]))), .filter = filter};
  if (prctl(PR_SET_SECCOMP, 2, &prog))
  {
    perror("prctl");
    return 1;
  }

  return 0;
}



/************ 002 : install_filter *************/

static int install_filter(int nr, int arch, int error)
{
  struct sock_filter filter[] = {BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, arch)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, arch, 0, 3), BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, nr)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, nr, 0, 1), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ERRNO | (error & SECCOMP_RET_DATA)), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW)};
  struct sock_fprog prog = {.len = (unsigned short) ((sizeof(filter)) / (sizeof(filter[0]))), .filter = filter};
  if (prctl(PR_SET_SECCOMP, 2, &prog))
  {
    perror("prctl");
    return 1;
  }

  return 0;
}



/************ 003 : install_filter *************/

static int install_filter(int nr, int arch, int error)
{
  struct sock_filter filter[] = {BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, arch)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, arch, 0, 3), BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, nr)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, nr, 0, 1), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ERRNO | (error & SECCOMP_RET_DATA)), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW)};
  struct sock_fprog prog = {.len = (unsigned short) ((sizeof(filter)) / (sizeof(filter[0]))), .filter = filter};
  if (prctl(PR_SET_SECCOMP, 2, &prog))
  {
    perror("prctl");
    return 1;
  }

  return 0;
}



/************ 004 : install_filter *************/

static int install_filter(int nr, int arch, int error)
{
  struct sock_filter filter[] = {BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, arch)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, arch, 0, 3), BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, nr)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, nr, 0, 1), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ERRNO | (error & SECCOMP_RET_DATA)), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW)};
  struct sock_fprog prog = {.len = (unsigned short) ((sizeof(filter)) / (sizeof(filter[0]))), .filter = filter};
  if (prctl(PR_SET_SECCOMP, 2, &prog))
  {
    perror("prctl");
    return 1;
  }

  return 0;
}



/************ 005 : install_filter *************/

static int install_filter(int nr, int arch, int error)
{
  struct sock_filter filter[] = {BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, arch)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, arch, 0, 3), BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, nr)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, nr, 0, 1), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ERRNO | (error & SECCOMP_RET_DATA)), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW)};
  struct sock_fprog prog = {.len = (unsigned short) ((sizeof(filter)) / (sizeof(filter[0]))), .filter = filter};
  if (prctl(PR_SET_SECCOMP, 2, &prog))
  {
    perror("prctl");
    return 1;
  }

  return 0;
}



/************ 006 : install_filter *************/

static int install_filter(int nr, int arch, int error)
{
  struct sock_filter filter[] = {BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, arch)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, arch, 0, 3), BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, nr)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, nr, 0, 1), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ERRNO | (error & SECCOMP_RET_DATA)), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW)};
  struct sock_fprog prog = {.len = (unsigned short) ((sizeof(filter)) / (sizeof(filter[0]))), .filter = filter};
  if (prctl(PR_SET_SECCOMP, 2, &prog))
  {
    perror("prctl");
    return 1;
  }

  return 0;
}



/************ 007 : install_filter *************/

static int install_filter(int nr, int arch, int error)
{
  struct sock_filter filter[] = {BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, arch)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, arch, 0, 3), BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, nr)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, nr, 0, 1), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ERRNO | (error & SECCOMP_RET_DATA)), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW)};
  struct sock_fprog prog = {.len = (unsigned short) ((sizeof(filter)) / (sizeof(filter[0]))), .filter = filter};
  if (prctl(PR_SET_SECCOMP, 2, &prog))
  {
    perror("prctl");
    return 1;
  }

  return 0;
}



/************ 008 : install_filter *************/

static int install_filter(int nr, int arch, int error)
{
  struct sock_filter filter[] = {BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, arch)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, arch, 0, 3), BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, nr)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, nr, 0, 1), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ERRNO | (error & SECCOMP_RET_DATA)), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW)};
  struct sock_fprog prog = {.len = (unsigned short) ((sizeof(filter)) / (sizeof(filter[0]))), .filter = filter};
  if (prctl(PR_SET_SECCOMP, 2, &prog))
  {
    perror("prctl");
    return 1;
  }

  return 0;
}



/************ 009 : install_filter *************/

static int install_filter(int nr, int arch, int error)
{
  struct sock_filter filter[] = {BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, arch)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, arch, 0, 3), BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, nr)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, nr, 0, 1), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ERRNO | (error & SECCOMP_RET_DATA)), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW)};
  struct sock_fprog prog = {.len = (unsigned short) ((sizeof(filter)) / (sizeof(filter[0]))), .filter = filter};
  if (prctl(PR_SET_SECCOMP, 2, &prog))
  {
    perror("prctl");
    return 1;
  }

  return 0;
}



/************ 010 : install_filter *************/

static int install_filter(int nr, int arch, int error)
{
  struct sock_filter filter[] = {BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, arch)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, arch, 0, 3), BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, nr)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, nr, 0, 1), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ERRNO | (error & SECCOMP_RET_DATA)), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW)};
  struct sock_fprog prog = {.len = (unsigned short) ((sizeof(filter)) / (sizeof(filter[0]))), .filter = filter};
  if (prctl(PR_SET_SECCOMP, 2, &prog))
  {
    perror("prctl");
    return 1;
  }

  return 0;
}



/************ 011 : install_filter *************/

static int install_filter(int nr, int arch, int error)
{
  struct sock_filter filter[] = {BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, arch)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, arch, 0, 3), BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, nr)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, nr, 0, 1), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ERRNO | (error & SECCOMP_RET_DATA)), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW)};
  struct sock_fprog prog = {.len = (unsigned short) ((sizeof(filter)) / (sizeof(filter[0]))), .filter = filter};
  if (prctl(PR_SET_SECCOMP, 2, &prog))
  {
    perror("prctl");
    return 1;
  }

  return 0;
}



/************ 012 : install_filter *************/

static int install_filter(int nr, int arch, int error)
{
  struct sock_filter filter[] = {BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, arch)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, arch, 0, 3), BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, nr)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, nr, 0, 1), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ERRNO | (error & SECCOMP_RET_DATA)), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW)};
  struct sock_fprog prog = {.len = (unsigned short) ((sizeof(filter)) / (sizeof(filter[0]))), .filter = filter};
  if (prctl(PR_SET_SECCOMP, 2, &prog))
  {
    perror("prctl");
    return 1;
  }

  return 0;
}



/************ 013 : install_filter *************/

static int install_filter(int nr, int arch, int error)
{
  struct sock_filter filter[] = {BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, arch)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, arch, 0, 3), BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, nr)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, nr, 0, 1), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ERRNO | (error & SECCOMP_RET_DATA)), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW)};
  struct sock_fprog prog = {.len = (unsigned short) ((sizeof(filter)) / (sizeof(filter[0]))), .filter = filter};
  if (prctl(PR_SET_SECCOMP, 2, &prog))
  {
    perror("prctl");
    return 1;
  }

  return 0;
}



/************ 014 : install_filter *************/

static int install_filter(int nr, int arch, int error)
{
  struct sock_filter filter[] = {BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, arch)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, arch, 0, 3), BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, nr)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, nr, 0, 1), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ERRNO | (error & SECCOMP_RET_DATA)), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW)};
  struct sock_fprog prog = {.len = (unsigned short) ((sizeof(filter)) / (sizeof(filter[0]))), .filter = filter};
  if (prctl(PR_SET_SECCOMP, 2, &prog))
  {
    perror("prctl");
    return 1;
  }

  return 0;
}



/************ 015 : install_filter *************/

static int install_filter(int nr, int arch, int error)
{
  struct sock_filter filter[] = {BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, arch)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, arch, 0, 3), BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, nr)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, nr, 0, 1), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ERRNO | (error & SECCOMP_RET_DATA)), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW)};
  struct sock_fprog prog = {.len = (unsigned short) ((sizeof(filter)) / (sizeof(filter[0]))), .filter = filter};
  if (prctl(PR_SET_SECCOMP, 2, &prog))
  {
    perror("prctl");
    return 1;
  }

  return 0;
}



/************ 016 : install_filter *************/

static int install_filter(int nr, int arch, int error)
{
  struct sock_filter filter[] = {BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, arch)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, arch, 0, 3), BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, nr)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, nr, 0, 1), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ERRNO | (error & SECCOMP_RET_DATA)), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW)};
  struct sock_fprog prog = {.len = (unsigned short) ((sizeof(filter)) / (sizeof(filter[0]))), .filter = filter};
  if (prctl(PR_SET_SECCOMP, 2, &prog))
  {
    perror("prctl");
    return 1;
  }

  return 0;
}



/************ 017 : install_filter *************/

static int install_filter(int nr, int arch, int error)
{
  struct sock_filter filter[] = {BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, arch)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, arch, 0, 3), BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, nr)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, nr, 0, 1), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ERRNO | (error & SECCOMP_RET_DATA)), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW)};
  struct sock_fprog prog = {.len = (unsigned short) ((sizeof(filter)) / (sizeof(filter[0]))), .filter = filter};
  if (prctl(PR_SET_SECCOMP, 2, &prog))
  {
    perror("prctl");
    return 1;
  }

  return 0;
}



/************ 018 : install_filter *************/

static int install_filter(int nr, int arch, int error)
{
  struct sock_filter filter[] = {BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, arch)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, arch, 0, 3), BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, nr)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, nr, 0, 1), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ERRNO | (error & SECCOMP_RET_DATA)), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW)};
  struct sock_fprog prog = {.len = (unsigned short) ((sizeof(filter)) / (sizeof(filter[0]))), .filter = filter};
  if (prctl(PR_SET_SECCOMP, 2, &prog))
  {
    perror("prctl");
    return 1;
  }

  return 0;
}



/************ 019 : install_filter *************/

static int install_filter(int nr, int arch, int error)
{
  struct sock_filter filter[] = {BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, arch)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, arch, 0, 3), BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, nr)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, nr, 0, 1), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ERRNO | (error & SECCOMP_RET_DATA)), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW)};
  struct sock_fprog prog = {.len = (unsigned short) ((sizeof(filter)) / (sizeof(filter[0]))), .filter = filter};
  if (prctl(PR_SET_SECCOMP, 2, &prog))
  {
    perror("prctl");
    return 1;
  }

  return 0;
}



/************ 020 : install_filter *************/

static int install_filter(int nr, int arch, int error)
{
  struct sock_filter filter[] = {BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, arch)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, arch, 0, 3), BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, nr)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, nr, 0, 1), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ERRNO | (error & SECCOMP_RET_DATA)), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW)};
  struct sock_fprog prog = {.len = (unsigned short) ((sizeof(filter)) / (sizeof(filter[0]))), .filter = filter};
  if (prctl(PR_SET_SECCOMP, 2, &prog))
  {
    perror("prctl");
    return 1;
  }

  return 0;
}



/************ 021 : install_filter *************/

static int install_filter(int nr, int arch, int error)
{
  struct sock_filter filter[] = {BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, arch)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, arch, 0, 3), BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, nr)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, nr, 0, 1), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ERRNO | (error & SECCOMP_RET_DATA)), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW)};
  struct sock_fprog prog = {.len = (unsigned short) ((sizeof(filter)) / (sizeof(filter[0]))), .filter = filter};
  if (prctl(PR_SET_SECCOMP, 2, &prog))
  {
    perror("prctl");
    return 1;
  }

  return 0;
}



/************ 022 : install_filter *************/

static int install_filter(int nr, int arch, int error)
{
  struct sock_filter filter[] = {BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, arch)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, arch, 0, 3), BPF_STMT((BPF_LD + BPF_W) + BPF_ABS, offsetof(struct seccomp_data, nr)), BPF_JUMP((BPF_JMP + BPF_JEQ) + BPF_K, nr, 0, 1), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ERRNO | (error & SECCOMP_RET_DATA)), BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW)};
  struct sock_fprog prog = {.len = (unsigned short) ((sizeof(filter)) / (sizeof(filter[0]))), .filter = filter};
  if (prctl(PR_SET_SECCOMP, 2, &prog))
  {
    perror("prctl");
    return 1;
  }

  return 0;
}

